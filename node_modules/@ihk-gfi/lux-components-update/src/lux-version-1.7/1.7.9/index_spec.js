"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const index_1 = require("./index");
const rxjs_1 = require("rxjs");
const test_helper_1 = require("../../utility/test-helper");
const collectionPath = path.join(__dirname, '../../collection.json');
describe('lux-version-1.7.9', () => {
    let appTree;
    let runner;
    beforeEach(() => {
        runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        appTree = runner.runExternalSchematic('@schematics/angular', 'workspace', test_helper_1.workspaceOptions);
        appTree = runner.runExternalSchematic('@schematics/angular', 'application', test_helper_1.appOptions, appTree);
    });
    describe('[Rule] setupProject', () => {
        it('Sollte Fehler werfen, wenn ein empty Tree genutzt wird', () => {
            expect(() => runner.runSchematic('lux-version-1.7.9', {}, schematics_1.Tree.empty()))
                .toThrowError(schematics_1.SchematicsException);
        });
        it('Sollte Fehler werfen, wenn keine Option "project" gesetzt ist', () => {
            try {
                runner.runSchematic('lux-version-1.7.9', {}, appTree);
            }
            catch (ex) {
                expect(ex.toString()).toContain('Option "project" wird benötigt.');
            }
        });
    });
    describe('[Rule] checkVersions', () => {
        let context;
        beforeEach(() => {
            context = test_helper_1.createMockContext();
        });
        it('Sollte einen Fehler werfen, wenn Version !== n - 1', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.7');
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).toPromise()
                .then((success) => {
                expect(success).toBeUndefined();
            }, (reason) => {
                expect(reason.toString()).toContain('Dieser Generator benötigt allerdings die (neuere) Version 1.7.8.');
            });
        });
        it('Sollte keinen Fehler werfen, wenn Version === n - 1', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.8');
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).toPromise()
                .then((success) => {
                expect(success).toBeDefined();
            }, (reason) => {
                expect(reason).toBeUndefined();
            });
        });
        it('Sollte einen Fehler werfen, wenn Node-Version < 8.0.0', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.8');
            Object.defineProperty(process.versions, 'node', {
                get: () => '7.9.9'
            });
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).toPromise()
                .then((success) => {
                expect(success).toBeUndefined();
            }, (reason) => {
                expect(reason.toString()).toContain('LUX benötigt allerdings die Version 8.0.0.');
            });
        });
        it('Sollte keinen Fehler werfen, wenn Node-Version >= 8.0.0', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.8');
            Object.defineProperty(process.versions, 'node', {
                get: () => '8.0.0'
            });
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).toPromise()
                .then((success) => {
                expect(success).toBeDefined();
            }, (reason) => {
                expect(reason).toBeUndefined();
            });
        });
    });
    describe('[Rule] updatePackageJson', () => {
        let context;
        beforeEach(() => {
            context = test_helper_1.createMockContext();
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.8');
            test_helper_1.addDependencyToPackageJson(appTree, 'font-awesome', '4.7.0');
        });
        it('Sollte fontawesome-free v.5.7.2 als Dependency hinzufügen', () => {
            // Vorbedingungen prüfen
            expect(appTree.readContent('/package.json')).not.toContain('@fortawesome/fontawesome-free');
            // Änderungen durchführen
            schematics_1.callRule(index_1.updatePackageJson(), rxjs_1.of(appTree), context).toPromise()
                .then(() => {
                // Nachbedingungen prüfen
                expect(appTree.readContent('/package.json')).toContain('@fortawesome/fontawesome-free');
            }, (reason) => {
                expect(reason).toBeUndefined();
            });
        });
        it('Sollte font-awesome entfernen', () => {
            // Vorbedingungen prüfen
            expect(appTree.readContent('/package.json')).toContain('font-awesome');
            // Änderungen durchführen
            schematics_1.callRule(index_1.updatePackageJson(), rxjs_1.of(appTree), context).toPromise()
                .then(() => {
                // Nachbedingungen prüfen
                expect(appTree.readContent('/package.json')).not.toContain('font-awesome');
            }, (reason) => {
                expect(reason).toBeUndefined();
            });
        });
    });
    describe('[Rule] updateStylesSCSS', () => {
        let context;
        beforeEach(() => {
            context = test_helper_1.createMockContext();
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.8');
            test_helper_1.addDependencyToPackageJson(appTree, 'font-awesome', '4.7.0');
            appTree.overwrite('/projects/bar/src/styles.scss', '@import "~font-awesome/css/font-awesome.css";');
        });
        it('Sollte den alten font-awesome import entfernen und die neuen imports hinzufügen', () => {
            // Vorbedingungen prüfen
            expect(appTree.readContent('/projects/bar/src/styles.scss')).toContain('font-awesome');
            // Änderungen durchführen
            schematics_1.callRule(index_1.updateStylesSCSS(), rxjs_1.of(appTree), context).toPromise()
                .then(() => {
                // Nachbedingungen prüfen
                const content = appTree.readContent('/projects/bar/src/styles.scss');
                expect(content).not.toContain('font-awesome');
                expect(content).toContain('~@fortawesome/fontawesome-free/webfonts');
                expect(content).toContain('~@fortawesome/fontawesome-free/scss/fontawesome');
                expect(content).toContain('~@fortawesome/fontawesome-free/scss/regular');
                expect(content).toContain('~@fortawesome/fontawesome-free/scss/solid');
                expect(content).toContain('~@fortawesome/fontawesome-free/scss/brands');
            }, (reason) => {
                expect(reason).toBeUndefined();
            });
        });
    });
    describe('[Rule] updatePropertyNames', () => {
        let context;
        beforeEach(() => {
            context = test_helper_1.createMockContext();
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.8');
            test_helper_1.addDependencyToPackageJson(appTree, 'font-awesome', '4.7.0');
            appTree.overwrite('/projects/bar/src/app/app.component.html', '<lux-icon luxMargins="0px"></lux-icon> ' +
                '<lux-icon [luxMargins]="0px"></lux-icon>' + '<lux-icon luxMargins="0px"></lux-icon> ' +
                '<lux-icon [luxMargins]="0px"></lux-icon>');
        });
        it('Sollte Properties "luxMargins" zu "luxMargin" umbenennen', () => {
            // Vorbedingungen prüfen
            expect(appTree.readContent('/projects/bar/src/app/app.component.html')).toContain('luxMargins');
            // Änderungen durchführen
            schematics_1.callRule(index_1.updatePropertyNames({ path: '/projects/bar/src' }), rxjs_1.of(appTree), context).toPromise()
                .then(() => {
                // Nachbedingungen prüfen
                expect(appTree.readContent('/projects/bar/src/app/app.component.html')).not.toContain('luxMargins');
                expect(appTree.readContent('/projects/bar/src/app/app.component.html')).toContain('luxMargin');
            }, (reason) => {
                expect(reason).toBeUndefined();
            });
        });
    });
});
//# sourceMappingURL=index_spec.js.map