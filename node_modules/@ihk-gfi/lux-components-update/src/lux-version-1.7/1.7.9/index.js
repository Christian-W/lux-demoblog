"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const project_1 = require("@schematics/angular/utility/project");
const util_1 = require("../../utility/util");
const validation_1 = require("../../utility/validation");
const dependencies_1 = require("../../utility/dependencies");
const logging_1 = require("../../utility/logging");
const files_1 = require("../../utility/files");
const chalk_1 = require("chalk");
/**
 * Haupt-Rule für diesen Schematic-Generator.
 * @param options
 */
exports.luxVersion = (options) => {
    return schematics_1.chain([
        setupProject(options),
        checkVersions(),
        updatePackageJson(),
        updateStylesSCSS(),
        updatePropertyNames(options),
        todosForUser()
    ]);
};
/**
 * Prüft, ob die Property "project" gesetzt ist und
 * erstellt wenn nötig einen Standard-Pfad zum Projekt, wenn keiner bekannt ist.
 * @param options
 */
function setupProject(options) {
    return (tree, context) => {
        logging_1.logNewUpdate('1.7.9');
        logging_1.logInfoWithDescriptor('Starte Konfiguration der Schematic.');
        if (!options.project) {
            throw logging_1.formattedSchematicsException('Option "project" wird benötigt.');
        }
        const project = project_1.getProject(tree, options.project);
        if (options.path === undefined) {
            options.path = project.root;
        }
        util_1.checkSmoketestScriptExists(tree, context);
        logging_1.logSuccess(`Schematic-Konfiguration für Projekt "${options.project}" erfolgreich.`);
        return tree;
    };
}
exports.setupProject = setupProject;
/**
 * Prüft ob die Versionen des Projekts mit den erforderlichen Versionen dieses Updates übereinstimmen.
 */
function checkVersions() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Starte die Versionsprüfung.');
        const minimumLuxComponentsVersion = '1.7.8';
        validation_1.validateLuxComponentsVersion(tree, context, minimumLuxComponentsVersion);
        const minimumNodeVersion = '8.0.0';
        validation_1.validateNodeVersion(context, minimumNodeVersion);
        logging_1.logSuccess(`Versionen erfolgreich geprüft.`);
        return tree;
    };
}
exports.checkVersions = checkVersions;
/**
 * Aktualisiert die package.json des Projekts.
 * Fügt die neue Dependency hinzu und entfernt die alte.
 */
function updatePackageJson() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge Dependency fortawesome/fontawesome-free v.5.7.2 zu package.json hinzu.');
        const newDependency = {
            type: dependencies_1.NodeDependencyType.Default,
            version: '5.7.2',
            name: '@fortawesome/fontawesome-free'
        };
        dependencies_1.updatePackageJsonDependency(tree, context, newDependency);
        logging_1.logInfoWithDescriptor('Aktualisiere lux-components auf v.1.7.9.');
        const luxComponentsDependency = {
            type: dependencies_1.NodeDependencyType.Default,
            version: '1.7.9',
            name: 'lux-components'
        };
        dependencies_1.updatePackageJsonDependency(tree, context, luxComponentsDependency);
        logging_1.logInfoWithDescriptor('Entferne font-awesome v.4.7.0 aus package.json.');
        const oldDependency = {
            type: dependencies_1.NodeDependencyType.Default,
            version: '4.7.0',
            name: 'font-awesome'
        };
        dependencies_1.deletePackageJsonDependency(tree, context, oldDependency);
        logging_1.logSuccess(`package.json erfolgreich aktualisiert.`);
        return tree;
    };
}
exports.updatePackageJson = updatePackageJson;
/**
 * Aktualisiert die styles.scss, um die neuen Imports für fontawesome-free zu nutzen.
 */
function updateStylesSCSS() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Aktualsiere styles.scss um die neuen Imports zu nutzen.');
        // Wichtig den Präfix "src/" voranzustellen, sonst würde bei "styles.scss" auch die Datei "luxstyles.scss" matchen.
        const filePathEndings = 'src/styles.scss';
        files_1.iterateFilesAndModifyContent(tree, '/', (filePath, content) => {
            files_1.deleteLineFromFile(tree, context, filePath, '~font-awesome/css/font-awesome.css');
            files_1.writeLinesToFile(tree, context, filePath, '$fa-font-path: "~@fortawesome/fontawesome-free/webfonts";', '@import "~@fortawesome/fontawesome-free/scss/fontawesome";', '@import "~@fortawesome/fontawesome-free/scss/regular";', '@import "~@fortawesome/fontawesome-free/scss/solid";', '@import "~@fortawesome/fontawesome-free/scss/brands";');
        }, filePathEndings);
        logging_1.logSuccess(`styles.scss erfolgreich aktualisiert.`);
        return tree;
    };
}
exports.updateStylesSCSS = updateStylesSCSS;
/**
 * Aktualisiert die Property "luxMargins" zu "luxMargin" in dem Projekt.
 */
function updatePropertyNames(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Aktualisiere Templates, um "luxMargin" anstelle von "luxMargins" für LuxIconComponents zu nutzen.');
        let fileCount = 0;
        files_1.iterateFilesAndModifyContent(tree, options.path, (filePath, content) => {
            if (content.indexOf('luxMargins="') !== -1 || content.indexOf('[luxMargins]="') !== -1) {
                let modifiedContent = util_1.replaceAll(content.toString(), 'luxMargins="', 'luxMargin="');
                modifiedContent = util_1.replaceAll(modifiedContent, '[luxMargins]="', '[luxMargin]="');
                tree.overwrite(filePath, modifiedContent);
                logging_1.logInfo(`${filePath} modified.`);
                fileCount++;
            }
        }, '.html');
        logging_1.logInfo(`${fileCount} Dateien bearbeitet.`);
        return tree;
    };
}
exports.updatePropertyNames = updatePropertyNames;
/**
 * Gibt die offen stehenden ToDos (Aufgaben, die der Generator nicht übernehmen konnte) für den User aus.
 */
function todosForUser() {
    return (tree, context) => {
        util_1.runInstallAndLogToDos(context, `Bitte aktualisieren Sie die folgende Zeile in der Klasse ${chalk_1.default.blueBright('ApplicationConfiguration')} vom UI-Service (Proxy):\r\n` +
            `${logging_1.TAB}Alt: ${chalk_1.default.redBright('"/fontawesome-webfont(\\\\\\\\.[a-f0-9]{20})?\\\\\\\\..*"')}\r\n` +
            `${logging_1.TAB}Neu: ${chalk_1.default.redBright('"/(fa-solid|fa-brand|fa-regular|fa-light)-([0-9]{2,4})?(\\.[a-f0-9]{20})?\\.(woff|woff2|ttf)?"')}`, `Bitte prüfen Sie die ${chalk_1.default.redBright('luxIconName')}s innerhalb Ihrer Applikation.\r\n` +
            `${logging_1.TAB}Einige Icon-Bezeichnungen können sich geändert haben und/oder besitzen nun eine andere Kategorie (fas, fab, far, fal).\r\n` +
            `${logging_1.TAB}Wichtig: Alle Icons mit dem suffix "-o" werden nicht mehr erkannt.`, `Bitte prüfen Sie die Margins und Paddings der ${chalk_1.default.blueBright('LuxIconComponents')} innerhalb Ihrer Applikation.\r\n` +
            `${logging_1.TAB}Sie können die Margins und Paddings einer ${chalk_1.default.blueBright('LuxIconComponent')} nun über die Properties ${chalk_1.default.redBright('luxMargin')} und ${chalk_1.default.redBright('luxPaddingMargin')} steuern.`, `Bitte starten Sie ${chalk_1.default.redBright('npm run smoketest')} um möglichen Fehlern vorzugreifen.`, `Weitere Informationen: https://confluence.gfi.ihk.de/display/EVA/Update+Guide#UpdateGuide-UmstellungaufVersion1.7.9`);
        return tree;
    };
}
exports.todosForUser = todosForUser;
//# sourceMappingURL=index.js.map