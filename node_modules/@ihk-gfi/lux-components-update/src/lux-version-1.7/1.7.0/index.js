"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const project_1 = require("@schematics/angular/utility/project");
const dependencies_1 = require("../../utility/dependencies");
const chalk_1 = require("chalk");
const validation_1 = require("../../utility/validation");
const scripts_1 = require("../../utility/scripts");
const logging_1 = require("../../utility/logging");
const util_1 = require("../../utility/util");
const files_1 = require("../../utility/files");
// You don't have to export the function as default. You can also have more than one rule factory per file.
function luxVersion(options) {
    return schematics_1.chain([
        setupProject(options),
        checkVersions(),
        addPackageJsonDependencies(),
        addPackageJsonDevDependencies(),
        addPackageJsonScripts(options),
        updateAngularJson(),
        addThemingFolderThemes(options),
        fixCompileError(options),
        todosForUser()
    ]);
}
exports.luxVersion = luxVersion;
/**
 * Prüft, ob die Property "project" gesetzt ist und
 * erstellt wenn nötig einen Standard-Pfad zum Projekt, wenn keiner bekannt ist.
 * @param options
 */
function setupProject(options) {
    return (tree, context) => {
        logging_1.logNewUpdate('1.7.0');
        logging_1.logInfoWithDescriptor('Starte Konfiguration der Schematic.');
        return util_1.waitForTreeCallback(tree, () => {
            if (!options.project) {
                throw logging_1.formattedSchematicsException('Option "project" wird benötigt.');
            }
            const project = project_1.getProject(tree, options.project);
            if (options.path === undefined) {
                options.path = project.root;
            }
            util_1.checkSmoketestScriptExists(tree, context);
            logging_1.logSuccess(`Schematic-Konfiguration für Projekt "${options.project}" erfolgreich.`);
            return tree;
        });
    };
}
exports.setupProject = setupProject;
/**
 * Prüft ob die Versionen des Projekts mit den erforderlichen Versionen dieses Updates übereinstimmen.
 */
function checkVersions() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Starte die Versionsprüfung.');
        return util_1.waitForTreeCallback(tree, () => {
            const minimumLuxComponentsVersion = '1.5.25';
            validation_1.validateLuxComponentsVersion(tree, context, minimumLuxComponentsVersion);
            const minimumNodeVersion = '8.0.0';
            validation_1.validateNodeVersion(context, minimumNodeVersion);
            logging_1.logSuccess(`Versionen erfolgreich geprüft.`);
            return tree;
        });
    };
}
exports.checkVersions = checkVersions;
/**
 * Fügt den aktuellen Theming Ordner zu dem Projekt hinzu.
 * @param options
 */
function addThemingFolderThemes(options) {
    return files_1.moveFilesToDirectory(options, 'files/theming', 'src/theming');
}
exports.addThemingFolderThemes = addThemingFolderThemes;
/**
 * Entfernt das Standard Lint-Script und ersetzt es durch 2 eigene.
 */
function updateAngularJson() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Aktualisiere die Datei "angular.json".');
        return util_1.waitForTreeCallback(tree, () => {
            const angularJsonFile = tree.read('angular.json');
            if (angularJsonFile) {
                const angularJsonFileObject = JSON.parse(angularJsonFile.toString('utf-8'));
                const project = Object.keys(angularJsonFileObject['projects'])[0];
                const projectObject = angularJsonFileObject.projects[project];
                delete projectObject.architect.lint;
                projectObject.architect = Object.assign({}, projectObject.architect, { "app-lint": {
                        "builder": "@angular-devkit/build-angular:tslint",
                        "options": {
                            "tsConfig": [
                                "src/tsconfig.app.json"
                            ],
                            "tslintConfig": "./tslint.json"
                        }
                    }, "spec-lint": {
                        "builder": "@angular-devkit/build-angular:tslint",
                        "options": {
                            "tsConfig": [
                                "src/tsconfig.spec.json"
                            ],
                            "tslintConfig": "./tslint.spec.json"
                        }
                    } });
                tree.overwrite('angular.json', JSON.stringify(angularJsonFileObject, null, 2));
            }
            else {
                throw logging_1.formattedSchematicsException('angular.json konnte nicht gelesen werden.');
            }
            logging_1.logSuccess(`Die Sektion "lint" in angular.json wurde aktualisiert.`);
            return tree;
        });
    };
}
exports.updateAngularJson = updateAngularJson;
/**
 * Behebt einen Fehler in der App.Module.ts mit den MAT_PLACEHOLDER_OPTIONS.
 * @param options
 */
function fixCompileError(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Entferne Placeholder-Options aus app.module.ts.');
        return util_1.waitForTreeCallback(tree, () => {
            const appModulePath = options.path + '/src/app/app.module.ts';
            const appModuleFile = tree.read(appModulePath);
            if (appModuleFile != null) {
                let content = tree.read(appModulePath);
                if (content) {
                    content = content.toString();
                    // RegExp, die die möglichen Varianten des gesuchten Providers abdeckt
                    const regExp = /{(\s*)provide(\s*):(\s*)MAT_PLACEHOLDER_GLOBAL_OPTIONS([\s\S]*?)}(\s*)}(,?)/g;
                    if (content.search(regExp) > 0) {
                        // Alle möglichen Varianten des Providers aus dem Inhalt entfernen
                        content = content.replace(regExp, '');
                        // 8 Whitespaces hintereinander entfernen.
                        // Hintergrund: Scheint genau die Anzahl an Spaces zu sein, die nach der Ersetzung leer übrig bleiben
                        content = content.replace(/(\s{8,})/g, '');
                        tree.overwrite(appModulePath, content);
                        logging_1.logSuccess(`app.module.ts aktualisiert.`);
                    }
                    else {
                        logging_1.logSuccess(`app.module.ts besitzt den gesuchten String nicht.`);
                    }
                }
                else {
                    logging_1.logSuccess(`app.module.ts hatte keinen Inhalt.`);
                }
            }
            else {
                logging_1.logSuccess(`app.module.ts nicht im Projekt vorhanden.`);
            }
            return tree;
        });
    };
}
exports.fixCompileError = fixCompileError;
/**
 * Fügt die neuen dependencies der package.json hinzu.
 */
function addPackageJsonDependencies() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge neue Dependencies zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const dependencies = [
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/animations' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.2', name: '@angular/cdk' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/common' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/compiler' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/core' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.0-beta.19', name: '@angular/flex-layout' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/forms' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/http' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.2', name: '@angular/material' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/platform-browser' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/platform-browser-dynamic' },
                { type: dependencies_1.NodeDependencyType.Default, version: '7.0.1', name: '@angular/router' },
                { type: dependencies_1.NodeDependencyType.Default, version: '2.5.7', name: 'core-js' },
                { type: dependencies_1.NodeDependencyType.Default, version: '4.7.0', name: 'font-awesome' },
                { type: dependencies_1.NodeDependencyType.Default, version: '2.0.8', name: 'hammerjs' },
                { type: dependencies_1.NodeDependencyType.Default, version: '1.7.0', name: 'lux-components' },
                { type: dependencies_1.NodeDependencyType.Default, version: '4.0.2', name: 'material-design-icons-iconfont' },
                { type: dependencies_1.NodeDependencyType.Default, version: '6.3.3', name: 'rxjs' },
                { type: dependencies_1.NodeDependencyType.Default, version: '0.8.26', name: 'zone.js' }
            ];
            dependencies.forEach(dependency => {
                dependencies_1.updatePackageJsonDependency(tree, context, dependency);
            });
            logging_1.logSuccess('Dependencies aktualisiert.');
            return tree;
        });
    };
}
exports.addPackageJsonDependencies = addPackageJsonDependencies;
/**
 * Fügt die neuen dev-dependencies der package.json hinzu.
 */
function addPackageJsonDevDependencies() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge neue DevDependencies zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const devDependencies = [
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.10.5', name: '@angular-devkit/build-angular' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '7.0.3', name: '@angular/cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '7.0.1', name: '@angular/compiler-cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '7.0.1', name: '@angular/language-service' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.1.6', name: '@compodoc/compodoc' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.8.9', name: '@types/jasmine' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.5', name: '@types/jasminewd2' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '10.12.1', name: '@types/node' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.5.0', name: 'codelyzer' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.3.0', name: 'jasmine-core' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.2.1', name: 'jasmine-spec-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.1.1', name: 'karma' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.2.0', name: 'karma-chrome-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.1.0', name: 'karma-firefox-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.0.0', name: 'karma-ie-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.4.2', name: 'karma-edge-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.0.0', name: 'karma-safari-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.0.1', name: 'karma-cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.4', name: 'karma-coverage-istanbul-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.1.2', name: 'karma-jasmine' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.4.0', name: 'karma-jasmine-html-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.2.1', name: 'nsp' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.4.1', name: 'protractor' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.0', name: 'retire' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '7.0.1', name: 'ts-node' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.11.0', name: 'tslint' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.1.2', name: 'tslint-angular' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.1.4', name: 'typescript' },
            ];
            devDependencies.forEach(devDependency => {
                dependencies_1.updatePackageJsonDependency(tree, context, devDependency);
            });
            logging_1.logSuccess('DevDependencies aktualisiert.');
            return tree;
        });
    };
}
exports.addPackageJsonDevDependencies = addPackageJsonDevDependencies;
/**
 * Aktualisiert die lint-scripte der package.json.
 * @param options
 */
function addPackageJsonScripts(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge Skripte zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const scripts = [
                { name: 'start', command: 'ng serve --public-host=http://localhost:4200', overwrite: true },
                {
                    name: 'lint',
                    command: 'run ' + options.project + ':app-lint --format=stylish && ng run ' + options.project + ':spec-lint --format=stylish',
                    overwrite: true
                },
            ];
            scripts.forEach(script => {
                scripts_1.controlPackageJsonScript(tree, context, script);
            });
            logging_1.logSuccess('Skripte aktualisiert.');
            return tree;
        });
    };
}
exports.addPackageJsonScripts = addPackageJsonScripts;
function todosForUser() {
    return (tree, context) => {
        util_1.runInstallAndLogToDos(context, `In der Applikation muss geprüft werden, inwiefern sich die Änderungen im flex-layout und RXJS auf die Komponenten auswirken.\r\n${logging_1.TAB}Um die alte RXJS-Version vorerst weiter zu benutzen kann über ${chalk_1.default.redBright('npm install rxjs-compat')} ein Kompatibilitätspaket eingebunden werden.`, `Bitte starten Sie ${chalk_1.default.redBright('npm run smoketest')} um möglichen Fehlern vorzugreifen.`, `Weitere Informationen: https://confluence.gfi.ihk.de/display/EVA/Update+Guide#UpdateGuide-UmstellungaufVersion1.7.0`);
        return tree;
    };
}
exports.todosForUser = todosForUser;
//# sourceMappingURL=index.js.map