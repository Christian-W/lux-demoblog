"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const rxjs_1 = require("rxjs");
const test_helper_1 = require("../../utility/test-helper");
const schematics_1 = require("@angular-devkit/schematics");
const index_1 = require("./index");
const util_1 = require("../../utility/util");
const collectionPath = path.join(__dirname, '../../collection.json');
describe('lux-version-1.7.10', () => {
    let appTree;
    let runner;
    let context;
    beforeEach(() => {
        runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        appTree = runner.runExternalSchematic('@schematics/angular', 'workspace', test_helper_1.workspaceOptions);
        appTree = runner.runExternalSchematic('@schematics/angular', 'application', test_helper_1.appOptions, appTree);
        util_1.UtilConfig.defaultWaitMS = 0;
        const collection = runner.engine.createCollection(collectionPath);
        const schematic = runner.engine.createSchematic('lux-version-1.7.10', collection);
        context = runner.engine.createContext(schematic);
    });
    describe('[Rule] setupProject', () => {
        it('Sollte Fehler werfen, wenn ein empty Tree genutzt wird', () => {
            expect(() => runner.runSchematic('lux-version-1.7.10', {}, schematics_1.Tree.empty()))
                .toThrowError(schematics_1.SchematicsException);
        });
        it('Sollte Fehler werfen, wenn keine Option "project" gesetzt ist', () => {
            try {
                runner.runSchematic('lux-version-1.7.10', {}, appTree);
            }
            catch (ex) {
                expect(ex.toString()).toContain('Option "project" wird benötigt.');
            }
        });
    });
    describe('[Rule] checkVersions', () => {
        it('Sollte einen Fehler werfen, wenn Version < n - 1', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.8');
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).subscribe((success) => expect(success).toBeUndefined(), (reason) => expect(reason.toString()).toContain('Dieser Generator benötigt allerdings die (neuere) Version 1.7.9.'));
        });
        it('Sollte einen Fehler werfen, wenn Version > n - 1', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.10');
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).subscribe((success) => expect(success).toBeUndefined(), (reason) => expect(reason.toString()).toContain('Dieser Generator benötigt allerdings die (ältere) Version 1.7.9.'));
        });
        it('Sollte keinen Fehler werfen, wenn Version === n - 1', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.9');
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).subscribe((success) => expect(success).toBeDefined(), (reason) => expect(reason).toBeUndefined());
        });
        it('Sollte einen Fehler werfen, wenn Node-Version < 8.0.0', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.9');
            Object.defineProperty(process.versions, 'node', {
                get: () => '7.9.9'
            });
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).subscribe((success) => expect(success).toBeUndefined(), (reason) => expect(reason.toString()).toContain('LUX benötigt allerdings die Version 8.0.0.'));
        });
        it('Sollte keinen Fehler werfen, wenn Node-Version >= 8.0.0', () => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.9');
            Object.defineProperty(process.versions, 'node', {
                get: () => '8.0.0'
            });
            schematics_1.callRule(index_1.checkVersions(), rxjs_1.of(appTree), context).subscribe((success) => expect(success).toBeDefined(), (reason) => expect(reason).toBeUndefined());
        });
    });
    describe('[Rule] updatePackageJson', () => {
        beforeEach(() => {
            test_helper_1.addDependencyToPackageJson(appTree, 'lux-components', '1.7.9');
        });
        // Muss über async laufen, da sonst eine package.json geprüft wird, welche bereits wieder resettet wurde
        it('Sollte die Dependency "lux-components" auf Version 1.7.10 setzen', ((done) => __awaiter(this, void 0, void 0, function* () {
            schematics_1.callRule(index_1.updatePackageJson(), rxjs_1.of(appTree), context).subscribe(() => {
                expect(appTree.readContent('/package.json'))
                    .toContain('"lux-components": "1.7.10"');
                done();
            }, (reason) => expect(reason).toBeUndefined());
        })));
    });
    describe('[Rule] updateLUXStylesSCSS', () => {
        it('Sollte die Datei luxstyles.scss ersetzen', ((done) => __awaiter(this, void 0, void 0, function* () {
            appTree.create('/projects/bar/src/theming/luxstyles.scss', 'Leer');
            expect(appTree.readContent('/projects/bar/src/theming/luxstyles.scss')).toContain('Leer');
            // Änderungen durchführen
            schematics_1.callRule(index_1.updateLuxStylesScss({ path: '/projects/bar' }), rxjs_1.of(appTree), context)
                .subscribe(() => {
                // Nachbedingungen prüfen
                expect(appTree.readContent('/projects/bar/src/theming/luxstyles.scss')).toContain('Version 1.8');
                done();
            }, (reason) => expect(reason).toBeUndefined());
        })));
    });
    describe('[Rule] updateLuxAppFooterButtonInfoConstructorParams', () => {
        beforeEach(() => {
        });
        it('Sollte die Reihenfolge korrekt anpassen', ((done) => __awaiter(this, void 0, void 0, function* () {
            let appComponentContent = appTree.readContent('/projects/bar/src/app/app.component.ts');
            appComponentContent = appComponentContent.replace(`title = 'bar';`, `
           const test0 = new LuxAppFooterButtonInfo('label1', 'primary', true, 'cmd1', false, 'fa-check');
           const test1 = new LuxAppFooterButtonInfo('label2', 'primary', false, 'cmd2', false, 'fa-check');
           const test2 = new LuxAppFooterButtonInfo('label3', 'primary', true, 'cmd3', false, 'fa-check');
           const test3 = new LuxAppFooterButtonInfo(
               'label4',
               'primary',
               false,
               'cmd4',
               true,
               'fa-check',
               1, 
               true, 
               false
            );
            const test4 = new LuxAppFooterButtonInfo('label(5)', 'primary', true, 'cmd5', false, 'fa-check');`);
            appTree.overwrite('/projects/bar/src/app/app.component.ts', appComponentContent);
            schematics_1.callRule(index_1.updateLuxAppFooterButtonInfoConstructorParams({ path: '/projects/bar/' }), rxjs_1.of(appTree), context).subscribe(() => {
                appComponentContent = appTree.readContent('/projects/bar/src/app/app.component.ts');
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label1', 'cmd1', 'primary', true, false, 'fa-check')`)).toBeGreaterThan(-1);
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label2', 'cmd2', 'primary', false, false, 'fa-check')`)).toBeGreaterThan(-1);
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label3', 'cmd3', 'primary', true, false, 'fa-check')`)).toBeGreaterThan(-1);
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label4', 'cmd4', 'primary', false, true, 'fa-check', 1, true, false)`)).toBeGreaterThan(-1);
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label(5)', 'cmd5', 'primary', true, false, 'fa-check');`)).toBeGreaterThan(-1);
                done();
            }, (reason) => expect(reason).toBeUndefined());
        })));
        it('Sollte die Reihenfolge nicht erneut anpassen', ((done) => __awaiter(this, void 0, void 0, function* () {
            let appComponentContent = appTree.readContent('/projects/bar/src/app/app.component.ts');
            appComponentContent = appComponentContent.replace(`title = 'bar';`, `
           const test0 = new LuxAppFooterButtonInfo('label1', 'cmd1', 'primary', true, false, 'fa-check');
           const test1 = new LuxAppFooterButtonInfo('label2', 'cmd2', 'primary', false, false, 'fa-check');
           const test2 = new LuxAppFooterButtonInfo('label3', 'cmd3', 'primary', true, false, 'fa-check');`);
            appTree.overwrite('/projects/bar/src/app/app.component.ts', appComponentContent);
            schematics_1.callRule(index_1.updateLuxAppFooterButtonInfoConstructorParams({ path: '/projects/bar/' }), rxjs_1.of(appTree), context).subscribe(() => {
                appComponentContent = appTree.readContent('/projects/bar/src/app/app.component.ts');
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label1', 'cmd1', 'primary', true, false, 'fa-check')`)).toBeGreaterThan(-1);
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label2', 'cmd2', 'primary', false, false, 'fa-check')`)).toBeGreaterThan(-1);
                expect(appComponentContent.indexOf(`new LuxAppFooterButtonInfo('label3', 'cmd3', 'primary', true, false, 'fa-check')`)).toBeGreaterThan(-1);
                done();
            }, (reason) => expect(reason).toBeUndefined());
        })));
    });
});
//# sourceMappingURL=index_spec.js.map