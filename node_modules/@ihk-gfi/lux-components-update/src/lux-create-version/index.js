"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const logging_1 = require("../utility/logging");
const semver = require("semver");
/**
 * Haupt-Rule f체r diesen Schematic-Generator.
 * @param options
 */
exports.luxCreateVersion = (options) => {
    return schematics_1.chain([
        setup(options),
        createFiles(options),
        addSchematicToCollectionJson(options)
    ]);
};
/**
 * Vorbereitungen zur Generierung
 * @param options
 */
function setup(options) {
    return (tree, _context) => {
        // Pr체ft, ob die Property "name" gesetzt ist
        if (!options.name) {
            throw logging_1.formattedSchematicsException('Versionsnummer nicht angegeben!');
        }
        // Node-Version entsprechend der Versionsnummer setzen
        if (semver.cmp(options.name, '<', '1.8.0')) {
            options.nodeVersion = '8.0.0';
        }
        else {
            options.nodeVersion = '10.0.0';
        }
        // Vorg채nger-Version bestimmen
        const latestLuxVersionFolder = tree.getDir('src/lux-version-' + semver.major(options.name) + "." + semver.minor(options.name)).subdirs.filter(element => element.indexOf('add-lux-components') < 0);
        if (latestLuxVersionFolder.length !== 0) {
            options.lastVersion = semver.sort(latestLuxVersionFolder)[latestLuxVersionFolder.length - 1];
        }
        else {
            let luxVersionFolders = tree.getDir('./src').subdirs.filter(dirName => dirName.toString().includes('lux-version'));
            let VersionFolder = [];
            luxVersionFolders.forEach(element => {
                if (element.indexOf('add-lux-components') < 0) {
                    VersionFolder.push(element.substring(12) + '.0');
                }
            });
            const lastestLuxVersionFolder = semver.sort(VersionFolder)[VersionFolder.length - 1];
            const latestLuxVersions = tree.getDir('src/lux-version-' + semver.major(lastestLuxVersionFolder) + '.' + semver.minor(lastestLuxVersionFolder)).subdirs;
            options.lastVersion = semver.sort(latestLuxVersions)[latestLuxVersions.length - 1];
            ;
        }
        return tree;
    };
}
exports.setup = setup;
/**
 * Erzeugt ein Ordner inklusive aller Dateien aus den Templates in ./files.
 * @param options
 */
function createFiles(options) {
    return (tree, _context) => {
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign({}, core_1.strings, options)),
            schematics_1.move("src/lux-version-" + semver.major(options.name) + "." + semver.minor(options.name))
        ]);
        return schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Default);
    };
}
exports.createFiles = createFiles;
/**
 * Sucht nach der collection.json und f체gt den Schematic-Eintrag hinzu.
 * @param options
 */
function addSchematicToCollectionJson(options) {
    return (tree, _context) => {
        let collectionPath = findCollectionPath(tree);
        if (collectionPath) {
            const collectionJsonContent = tree.read(collectionPath);
            if (!collectionJsonContent) {
                throw logging_1.formattedSchematicsException('Invalid collection path: ' + collectionPath);
            }
            const collectionJsonAst = core_1.parseJsonAst(collectionJsonContent.toString('utf-8'));
            if (collectionJsonAst.kind !== 'object') {
                throw logging_1.formattedSchematicsException('Invalid collection content.');
            }
            for (const property of collectionJsonAst.properties) {
                if (property.key.value == 'schematics') {
                    if (property.value.kind !== 'object') {
                        throw logging_1.formattedSchematicsException('Invalid collection.json; schematics needs to be an object.');
                    }
                    const recorder = tree.beginUpdate(collectionPath);
                    appendPropertyInAstObject(recorder, property.value, "lux-version-" + options.name, {
                        description: "Aktualisiert die LUX-Applikation zur Version " + options.name + " der LUX-Components.",
                        factory: "./lux-version-" + semver.major(options.name) + "." + semver.minor(options.name) + "/" + options.name + "/index#luxVersion",
                        schema: "./lux-version-" + semver.major(options.name) + "." + semver.minor(options.name) + "/" + options.name + "/schema.json"
                    });
                    tree.commitUpdate(recorder);
                    return tree;
                }
            }
        }
    };
}
exports.addSchematicToCollectionJson = addSchematicToCollectionJson;
/**
 * Source: https://github.com/angular/angular-cli/blob/master/packages/schematics/schematics/blank/factory.ts
 */
function appendPropertyInAstObject(recorder, node, propertyName, value, indent = 4) {
    const indentStr = '\n' + new Array(indent + 1).join(' ');
    if (node.properties.length > 0) {
        // Insert comma.
        const last = node.properties[node.properties.length - 1];
        recorder.insertRight(last.start.offset + last.text.replace(/\s+$/, '').length, ',');
    }
    recorder.insertLeft(node.end.offset - 1, '  '
        + `"${propertyName}": ${JSON.stringify(value, null, 2).replace(/\n/g, indentStr)}`
        + indentStr.slice(0, -2));
}
/**
 * Sucht nach dem Path der collection.json
 * @param tree
 */
function findCollectionPath(tree) {
    try {
        const packageJsonContent = tree.read('/package.json');
        if (packageJsonContent) {
            const packageJson = JSON.parse(packageJsonContent.toString('utf-8'));
            if ('schematics' in packageJson) {
                const path = core_1.normalize(packageJson['schematics']);
                if (tree.exists(path)) {
                    return path;
                }
            }
        }
    }
    catch (ex) {
        throw logging_1.formattedSchematicsException('Could not find collection path.');
    }
}
//# sourceMappingURL=index.js.map