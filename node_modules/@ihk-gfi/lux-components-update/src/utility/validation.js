"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dependencies_1 = require("./dependencies");
const semver = require("semver");
const logging_1 = require("./logging");
function validateNodeVersion(context, minimumVersion) {
    logging_1.logInfo('Prüfe die Node.js Version.');
    const currentNodeVersion = process.versions.node;
    const minimumNodeVersion = minimumVersion;
    if (semver.cmp(currentNodeVersion, "<", minimumNodeVersion)) {
        throw logging_1.formattedSchematicsException(`Ihre Node.js Version ist ${currentNodeVersion}.\n` +
            `LUX benötigt allerdings die Version ${minimumNodeVersion}.\n` +
            `Bitte aktualisieren Sie Node.js.`);
    }
}
exports.validateNodeVersion = validateNodeVersion;
/**
 * Prüft die Angular Version der aufrufenden Applikation und wirft eine SchematicsException, wenn
 * die Version nicht der erforderlichen entspricht.
 * @param tree
 * @param context
 * @param angularVersion
 */
function validateAngularVersion(tree, context, angularVersion) {
    logging_1.logInfo('Prüfe die Angular Version.');
    const currentVersion = dependencies_1.getPackageJsonDependency(tree, "@angular/common").version.replace(/([\^~])/g, '');
    if (!currentVersion.startsWith(angularVersion)) {
        throw logging_1.formattedSchematicsException(`Sie nutzen die Angular Version ${currentVersion}.`, `Dieser Generator benötigt allerdings eine ${angularVersion}.`, `Bitte nutzen Sie eine neuere Schematic für Ihr Update.`);
    }
}
exports.validateAngularVersion = validateAngularVersion;
/**
 * Prüft die LUX-Components Version der aufrufenden Applikation und wirft eine SchematicsException, wenn
 * die Version nicht der erforderlichen entspricht.
 * @param tree
 * @param context
 * @param minimumVersion
 */
function validateIhkGfiLuxComponentsVersion(tree, context, minimumVersion) {
    logging_1.logInfo('Prüfe die LUX-Components version.');
    const currentLuxComponentsVersion = dependencies_1.getPackageJsonDependency(tree, "@ihk-gfi/lux-components").version;
    const requiredLuxComponentsVersion = minimumVersion;
    // aktuelle Version > benötigte Version
    if (semver.gt(currentLuxComponentsVersion, requiredLuxComponentsVersion)) {
        throw logging_1.formattedSchematicsException(`Sie nutzen die LUX-Components Version ${currentLuxComponentsVersion}.`, `Dieser Generator benötigt allerdings die (ältere) Version ${requiredLuxComponentsVersion}.`, `Bitte nutzen Sie eine neuere Schematic für Ihr Update.`);
    }
    // aktuelle Version < benötigte Version
    else if (semver.lt(currentLuxComponentsVersion, requiredLuxComponentsVersion)) {
        throw logging_1.formattedSchematicsException(`Sie nutzen die LUX-Components Version ${currentLuxComponentsVersion}.`, `Dieser Generator benötigt allerdings die (neuere) Version ${requiredLuxComponentsVersion}.`, `Bitte aktualisieren Sie Ihre Version der LUX-Components.`);
    }
}
exports.validateIhkGfiLuxComponentsVersion = validateIhkGfiLuxComponentsVersion;
/**
 * Prüft die LUX-Components Version der aufrufenden Applikation und wirft eine SchematicsException, wenn
 * die Version nicht der erforderlichen entspricht.
 * @param tree
 * @param context
 * @param minimumVersion
 */
function validateLuxComponentsVersion(tree, context, minimumVersion) {
    logging_1.logInfo('Prüfe die LUX-Components version.');
    const currentLuxComponentsVersion = dependencies_1.getPackageJsonDependency(tree, "lux-components").version;
    const requiredLuxComponentsVersion = minimumVersion;
    // aktuelle Version > benötigte Version
    if (semver.gt(currentLuxComponentsVersion, requiredLuxComponentsVersion)) {
        throw logging_1.formattedSchematicsException(`Sie nutzen die LUX-Components Version ${currentLuxComponentsVersion}.`, `Dieser Generator benötigt allerdings die (ältere) Version ${requiredLuxComponentsVersion}.`, `Bitte nutzen Sie eine neuere Schematic für Ihr Update.`);
    }
    // aktuelle Version < benötigte Version
    else if (semver.lt(currentLuxComponentsVersion, requiredLuxComponentsVersion)) {
        throw logging_1.formattedSchematicsException(`Sie nutzen die LUX-Components Version ${currentLuxComponentsVersion}.`, `Dieser Generator benötigt allerdings die (neuere) Version ${requiredLuxComponentsVersion}.`, `Bitte aktualisieren Sie Ihre Version der LUX-Components.`);
    }
}
exports.validateLuxComponentsVersion = validateLuxComponentsVersion;
//# sourceMappingURL=validation.js.map