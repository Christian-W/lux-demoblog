"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const json_utils_1 = require("@schematics/angular/utility/json-utils");
const chalk_1 = require("chalk");
const logging_1 = require("./logging");
const packageJsonPath = '/package.json';
function controlPackageJsonScript(tree, context, script) {
    const packageJson = readPackageJson(tree);
    const scriptsNode = json_utils_1.findPropertyInAstObject(packageJson, 'scripts');
    const recorder = tree.beginUpdate(packageJsonPath);
    if (!scriptsNode) {
        // Haven't found the script key, add it to the root of the package.json.
        json_utils_1.appendPropertyInAstObject(recorder, packageJson, 'scripts', {
            [script.name]: script.command,
        }, 2);
    }
    else if (scriptsNode.kind === 'object') {
        // check if script already added
        const scriptNode = json_utils_1.findPropertyInAstObject(scriptsNode, script.name);
        if (!scriptNode) {
            // script not found, add it.
            json_utils_1.insertPropertyInAstObjectInOrder(recorder, scriptsNode, script.name, script.command, 4);
            logging_1.logInfo(`Script ` + chalk_1.default.redBright(`${script.name}`) + chalk_1.default.redBright(':') + chalk_1.default.redBright(`${script.command}`) + ` nicht gefunden, füge es neu hinzu.`);
        }
        else if (script.overwrite) {
            // script found, update command if overwrite.
            const { end, start } = scriptNode;
            recorder.remove(start.offset, end.offset - start.offset);
            recorder.insertRight(start.offset, JSON.stringify(script.command));
            logging_1.logInfo(`Script ` + chalk_1.default.redBright(`${script.name}`) + ` gefunden, aktualisiere das Command.`);
        }
    }
    tree.commitUpdate(recorder);
}
exports.controlPackageJsonScript = controlPackageJsonScript;
function readPackageJson(tree) {
    const buffer = tree.read(packageJsonPath);
    if (buffer === null) {
        throw logging_1.formattedSchematicsException('Konnte die package.json nicht lesen.');
    }
    const content = buffer.toString();
    const packageJson = core_1.parseJsonAst(content, core_1.JsonParseMode.Strict);
    if (packageJson.kind != 'object') {
        throw logging_1.formattedSchematicsException('Ungültige package.json, ein Object wurde erwartet.');
    }
    return packageJson;
}
//# sourceMappingURL=scripts.js.map