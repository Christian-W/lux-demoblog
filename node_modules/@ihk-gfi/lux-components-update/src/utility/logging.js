"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const chalk_1 = require("chalk");
exports.TAB = '\t   ';
/**
 * Erzeugt eine Log-Ausgabe für den Start eines neuen Generators in hellem Weiß mit #-Symbolen auf der rechten und
 * linken Seite sowie einer Newline am Ende.
 * @param version
 */
exports.logNewUpdate = (version) => {
    console.log(chalk_1.default.whiteBright(`###### Update auf LUX-Components v${version} ######\n`));
};
/**
 * Erzeugt eine Info-Log-Ausgabe in hellem Blau mit einem [INFO] an der linken Seite.
 * @param messages
 */
exports.logInfoWithDescriptor = (...messages) => {
    let message = generateLogMessage(...messages);
    console.log(chalk_1.default.blueBright(`[INFO]${exports.TAB}${message}`));
};
/**
 * Erzeugt eine Info-Log-Ausgabe in hellem Weiß ohne Icon.
 * @param messages
 */
exports.logInfo = (...messages) => {
    let message = generateLogMessage(...messages);
    console.log(chalk_1.default.whiteBright(`${exports.TAB}${message}`));
};
/**
 * Erzeugt eine Success-Log-Ausgabe in hellem Grün mit einem [SUCCESS] an der linken Seite.
 * @param messages
 */
exports.logSuccess = (...messages) => {
    let message = generateLogMessage(...messages);
    console.log(chalk_1.default.greenBright(`[SUCCESS]  ${message}`));
};
/**
 * Erzeugt eine Success-Log-Ausgabe in hellem Gelb mit einem [WARN] an der linken Seite.
 * @param messages
 */
exports.logWarn = (...messages) => {
    let message = generateLogMessage(...messages);
    console.log(chalk_1.default.yellowBright(`[WARN]     ${message}`));
};
/**
 * Erzeugt eine Error-Log-Ausgabe in hellem Grün mit einem [ERROR] an der linken Seite.
 * @param messages
 */
exports.logError = (...messages) => {
    let message = generateLogMessage(...messages);
    // Für den Fall, dass ein weitergereichter Fehler hier ankommt [ERROR] preventiv entfernen
    message = message.replace('[ERROR]    ', '');
    console.log(chalk_1.default.redBright(`[ERROR]    ${message}`));
};
/**
 * Wrapper um SchematicsException, welcher im Prinzip nur eine formatierte Log-Ausgabe des Fehler erzeugt und diesen zurückgibt.
 * @constructor
 */
exports.formattedSchematicsException = (...messages) => {
    let message = generateLogMessage(...messages);
    // Die eigentliche Exception zum Aufrufer zurückgeben '
    return new schematics_1.SchematicsException(`[ERROR]    ${message}`);
};
/**
 * Erzeugt eine Log-Message aus einem Array von Nachrichten.
 * Die Log-Message ist eingerückt und jede Message ist in einer neuen Zeile.
 * @param messages
 */
function generateLogMessage(...messages) {
    let fullMessage = '';
    for (let i = 0; i < messages.length; i++) {
        if (i !== 0) {
            fullMessage += exports.TAB;
        }
        fullMessage += messages[i];
        if (i !== messages.length - 1) {
            fullMessage += '\r\n';
        }
    }
    return fullMessage;
}
//# sourceMappingURL=logging.js.map