"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const project_1 = require("@schematics/angular/utility/project");
const dependencies_1 = require("../../utility/dependencies");
const files_1 = require("../../utility/files");
const logging_1 = require("../../utility/logging");
const util_1 = require("../../utility/util");
const validation_1 = require("../../utility/validation");
/**
 * Haupt-Rule für diesen Schematic-Generator.
 * @param options
 */
exports.addluxComponents = (options) => {
    return schematics_1.chain([
        setupProject(options),
        checkVersions(),
        updateApp(options),
        updateStylesScss(options),
        updateTheming(options),
        updateIndexHtml(options),
        updatePackageJsonDependencies(),
        updatePackageJsonDevDependencies(),
        updatePackageJson(),
        todosForUser()
    ]);
};
/**
 * Prüft, ob die Property "project" gesetzt ist und
 * erstellt wenn nötig einen Standard-Pfad zum Projekt, wenn keiner bekannt ist.
 * @param options
 */
function setupProject(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Starte Konfiguration der Schematic.');
        return util_1.waitForTreeCallback(tree, () => {
            if (!options.project) {
                throw logging_1.formattedSchematicsException('Option "project" wird benötigt.');
            }
            const project = project_1.getProject(tree, options.project);
            if (options.path === undefined) {
                options.path = project.root;
            }
            logging_1.logSuccess(`Schematic-Konfiguration für Projekt "${options.project}" erfolgreich.`);
            return tree;
        });
    };
}
exports.setupProject = setupProject;
/**
 * Prüft ob die Versionen des Projekts mit den erforderlichen Versionen dieses Updates übereinstimmen.
 */
function checkVersions() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Starte die Versionsprüfung.');
        return util_1.waitForTreeCallback(tree, () => {
            const angularVersion = '8.';
            validation_1.validateAngularVersion(tree, context, angularVersion);
            const minimumNodeVersion = '10.0.0';
            validation_1.validateNodeVersion(context, minimumNodeVersion);
            logging_1.logSuccess(`Versionen erfolgreich geprüft.`);
            return tree;
        });
    };
}
exports.checkVersions = checkVersions;
function updateIndexHtml(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Aktualisiere die Datei "index.html".');
        files_1.iterateFilesAndModifyContent(tree, options.path, (filePath, content) => {
            let modifiedContent = util_1.replaceAll(content, '<body>', '<body style="margin: 0">');
            if (content !== modifiedContent) {
                tree.overwrite(filePath, modifiedContent);
            }
        }, 'index.html');
    };
}
exports.updateIndexHtml = updateIndexHtml;
function updateApp(options) {
    return files_1.moveFilesToDirectory(options, 'files/app', 'src/app');
}
exports.updateApp = updateApp;
function updateTheming(options) {
    return files_1.moveFilesToDirectory(options, 'files/theming', 'src/theming');
}
exports.updateTheming = updateTheming;
function updateStylesScss(options) {
    return files_1.moveFilesToDirectory(options, 'files/styles', 'src/');
}
exports.updateStylesScss = updateStylesScss;
/**
 * Aktualisiert die package.json des Projekts.
 */
function updatePackageJson() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Aktualisiere LUX-Components Version auf 1.8.5.');
        return util_1.waitForTreeCallback(tree, () => {
            const newDependency = {
                type: dependencies_1.NodeDependencyType.Default,
                version: '1.8.5',
                name: '@ihk-gfi/lux-components'
            };
            dependencies_1.updatePackageJsonDependency(tree, context, newDependency);
            logging_1.logSuccess(`package.json erfolgreich aktualisiert.`);
            return tree;
        });
    };
}
exports.updatePackageJson = updatePackageJson;
function updatePackageJsonDependencies() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge neue Dependencies zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const dependencies = [
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/animations' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/common' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/core' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.0.0-beta.27', name: '@angular/flex-layout' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/forms' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/platform-browser' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/platform-browser-dynamic' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/router' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.0', name: '@angular/cdk' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.0', name: '@angular/material' },
                { type: dependencies_1.NodeDependencyType.Default, version: '3.2.1', name: 'core-js' },
                { type: dependencies_1.NodeDependencyType.Default, version: '5.0.1', name: 'material-design-icons-iconfont' },
                { type: dependencies_1.NodeDependencyType.Default, version: '6.5.3', name: 'rxjs' },
                { type: dependencies_1.NodeDependencyType.Default, version: '0.10.2', name: 'zone.js' },
                { type: dependencies_1.NodeDependencyType.Default, version: '2.0.8', name: 'hammerjs' },
                { type: dependencies_1.NodeDependencyType.Default, version: '5.11.2', name: '@fortawesome/fontawesome-free' },
                { type: dependencies_1.NodeDependencyType.Default, version: '1.8.6', name: '@ihk-gfi/lux-components' },
                { type: dependencies_1.NodeDependencyType.Default, version: '6.0.2', name: 'ng2-pdf-viewer' }
            ];
            dependencies.forEach(dependency => {
                dependencies_1.updatePackageJsonDependency(tree, context, dependency);
            });
            logging_1.logSuccess('Dependencies aktualisiert.');
            return tree;
        });
    };
}
exports.updatePackageJsonDependencies = updatePackageJsonDependencies;
/**
 * Fügt die neuen dev-dependencies der package.json hinzu.
 */
function updatePackageJsonDevDependencies() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge neue DevDependencies zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const devDependencies = [
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.803.5', name: '@angular-devkit/build-angular' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.2.7', name: '@angular/compiler' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.2.7', name: '@angular/compiler-cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.3.5', name: '@angular/cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.2.7', name: '@angular/language-service' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.1.10', name: '@compodoc/compodoc' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.4.0', name: '@types/jasmine' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.6', name: '@types/jasminewd2' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '12.7.5', name: '@types/node' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.1.1', name: 'codelyzer' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.5.0', name: 'jasmine-core' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.2.1', name: 'jasmine-spec-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.3.0', name: 'karma' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.1.0', name: 'karma-chrome-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.0', name: 'karma-cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.1.0', name: 'karma-coverage-istanbul-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.4.2', name: 'karma-edge-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.2.0', name: 'karma-firefox-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.0.0', name: 'karma-ie-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.1', name: 'karma-jasmine' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.4.2', name: 'karma-jasmine-html-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.0.0', name: 'karma-safari-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.4.2', name: 'protractor' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.3', name: 'retire' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.12.0', name: 'node-sass' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.4.1', name: 'ts-node' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.20.0', name: 'tslint' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.0.2', name: 'tslint-angular' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.4.5', name: 'typescript' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.0.60', name: '@ihk-gfi/lux-components-update' },
            ];
            devDependencies.forEach(devDependency => {
                dependencies_1.updatePackageJsonDependency(tree, context, devDependency);
            });
            logging_1.logSuccess('DevDependencies aktualisiert.');
            return tree;
        });
    };
}
exports.updatePackageJsonDevDependencies = updatePackageJsonDevDependencies;
/**
 * Gibt die offen stehenden ToDos (Aufgaben, die der Generator nicht übernehmen konnte) für den User aus.
 */
function todosForUser() {
    return (tree, context) => {
        util_1.runInstallAndLogToDos(context, `Keine`, `Fertig!`);
        return tree;
    };
}
exports.todosForUser = todosForUser;
//# sourceMappingURL=index.js.map