"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const project_1 = require("@schematics/angular/utility/project");
const files_1 = require("../../utility/files");
const scripts_1 = require("../../utility/scripts");
const validation_1 = require("../../utility/validation");
const dependencies_1 = require("../../utility/dependencies");
const logging_1 = require("../../utility/logging");
const chalk_1 = require("chalk");
const util_1 = require("../../utility/util");
/**
 * Haupt-Rule für diesen Schematic-Generator.
 * @param options
 */
exports.luxVersion = (options) => {
    return schematics_1.chain([
        setupProject(options),
        checkVersions(),
        updateScripts(),
        deletePackageJsonDevDependencies(),
        updatePackageJsonDependencies(),
        updatePackageJsonDevDependencies(),
        updateTheming(options),
        addIeTsConfig(options),
        updateTsConfigJson(),
        updateAngularJson(),
        updateDeepInCss(options),
        updateDeepInScss(options),
        updateViewAndContentChildDefinitions(options),
        updateBrowserlist(options),
        updatePolyfills(options),
        todosForUser()
    ]);
};
function updatePolyfills(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Polyfills für den IE wieder eintragen.');
        files_1.iterateFilesAndModifyContent(tree, options.path, (filePath, content) => {
            let modifiedContent = content.replace('import \'core-js/es6/reflect\';', 'import \'core-js/es/array\';\n' +
                'import \'core-js/es/date\';\n' +
                'import \'core-js/es/function\';\n' +
                'import \'core-js/es/map\';\n' +
                'import \'core-js/es/math\';\n' +
                'import \'core-js/es/number\';\n' +
                'import \'core-js/es/object\';\n' +
                'import \'core-js/es/parse-float\';\n' +
                'import \'core-js/es/parse-int\';\n' +
                '/** Evergreen browsers require these. **/\n' +
                'import \'core-js/es/regexp\';\n' +
                'import \'core-js/es/set\';\n' +
                'import \'core-js/es/string\';\n' +
                '/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n' +
                'import \'core-js/es/symbol\';\n' +
                'import \'core-js/es/weak-map\';\n' +
                'import \'core-js/es/reflect\';');
            if (content !== modifiedContent) {
                tree.overwrite(filePath, modifiedContent);
            }
        }, 'polyfills.ts');
        return tree;
    };
}
exports.updatePolyfills = updatePolyfills;
function updateTsConfigJson() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Aktualisiere die Datei "tsconfig.json".');
        return util_1.waitForTreeCallback(tree, () => {
            const tsConfigJsonFile = tree.read('tsconfig.json');
            if (tsConfigJsonFile) {
                const tsConfigJsonFileObject = JSON.parse(tsConfigJsonFile.toString('utf-8'));
                tsConfigJsonFileObject.angularCompilerOptions = Object.assign({}, tsConfigJsonFileObject.angularCompilerOptions, { "enableIvy": false });
                tree.overwrite('tsconfig.json', JSON.stringify(tsConfigJsonFileObject, null, 2));
            }
            else {
                throw logging_1.formattedSchematicsException('tsconfig.json konnte nicht gelesen werden.');
            }
            logging_1.logSuccess(`In der tsconfig.json Ivy eintragen.`);
            return tree;
        });
    };
}
exports.updateTsConfigJson = updateTsConfigJson;
function updateViewAndContentChildDefinitions(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Setze "{static: false}" für die View- und ContentChild-Properties mit einem ToDo.');
        files_1.iterateFilesAndModifyContent(tree, options.path, (filePath, content) => {
            let modifiedContent = util_1.replaceAll(content, '\/\* TODO: add static flag \*\/ \{\}', '{ static: false }');
            if (content !== modifiedContent) {
                tree.overwrite(filePath, modifiedContent);
            }
        }, '.ts');
        return tree;
    };
}
exports.updateViewAndContentChildDefinitions = updateViewAndContentChildDefinitions;
function updateDeepInScss(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Ersetze "/deep/" durch "::ng-deep" in SCSS-Dateien.');
        files_1.iterateFilesAndModifyContent(tree, options.path, (filePath, content) => {
            let modifiedContent = util_1.replaceAll(content, '\/deep\/', '::ng-deep');
            if (content !== modifiedContent) {
                tree.overwrite(filePath, modifiedContent);
            }
        }, '.scss');
        return tree;
    };
}
exports.updateDeepInScss = updateDeepInScss;
function updateDeepInCss(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Ersetze "/deep/" durch "::ng-deep" in CSS-Dateien.');
        files_1.iterateFilesAndModifyContent(tree, options.path, (filePath, content) => {
            let modifiedContent = util_1.replaceAll(content, '\/deep\/', '::ng-deep');
            if (content !== modifiedContent) {
                tree.overwrite(filePath, modifiedContent);
            }
        }, '.css');
        return tree;
    };
}
exports.updateDeepInCss = updateDeepInCss;
function updateBrowserlist(options) {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor(`` + 'Aktiviere in der Browserslist die Unterstützung für den IE.');
        files_1.iterateFilesAndModifyContent(tree, options.path, (filePath, content) => {
            let modifiedContent = content.replace('not IE 9-11 # For IE 9-11 support, remove \'not\'.', 'IE 9-11');
            if (content !== modifiedContent) {
                tree.overwrite(filePath, modifiedContent);
            }
        }, 'browserslist');
        return tree;
    };
}
exports.updateBrowserlist = updateBrowserlist;
function updateAngularJson() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Aktualisiere die Datei "angular.json".');
        return util_1.waitForTreeCallback(tree, () => {
            const angularJsonFile = tree.read('angular.json');
            if (angularJsonFile) {
                const angularJsonFileObject = JSON.parse(angularJsonFile.toString('utf-8'));
                const project = Object.keys(angularJsonFileObject['projects'])[0];
                angularJsonFileObject.projects[project].architect.build.configurations = Object.assign({}, angularJsonFileObject.projects[project].architect.build.configurations, { 'es5': {
                        'tsConfig': 'src/tsconfig.app.ie.json'
                    } });
                angularJsonFileObject.projects[project].architect.serve.configurations = Object.assign({}, angularJsonFileObject.projects[project].architect.serve.configurations, { 'es5': {
                        'browserTarget': project + ':build:es5'
                    } });
                tree.overwrite('angular.json', JSON.stringify(angularJsonFileObject, null, 2));
            }
            else {
                throw logging_1.formattedSchematicsException('angular.json konnte nicht gelesen werden.');
            }
            logging_1.logSuccess(`Die angular.json für den alten IE11 aktualisiert.`);
            return tree;
        });
    };
}
exports.updateAngularJson = updateAngularJson;
function updateScripts() {
    return (tree, context) => {
        logging_1.logInfo(`Aktualisiere das ${chalk_1.default.redBright('security')}-Skript.`);
        const securityScript = {
            name: 'security',
            command: 'npm audit --registry=https://registry.npmjs.org --audit-level high',
            overwrite: true
        };
        scripts_1.controlPackageJsonScript(tree, context, securityScript);
        logging_1.logSuccess('Skript aktualisiert.');
        logging_1.logInfo(`Füge das ${chalk_1.default.redBright('start-ie')}-Skript hinzu.`);
        const startIeScript = {
            name: 'start-ie',
            command: 'ng serve --configuration es5 --public-host=http://localhost:4200',
            overwrite: true
        };
        scripts_1.controlPackageJsonScript(tree, context, startIeScript);
        logging_1.logSuccess('Skript aktualisiert.');
        logging_1.logInfo(`Aktualisiere das ${chalk_1.default.redBright('build')}-Skript.`);
        const buildScript = {
            name: 'build',
            command: 'node --max_old_space_size=4024 ./node_modules/@angular/cli/bin/ng build --source-map',
            overwrite: true
        };
        scripts_1.controlPackageJsonScript(tree, context, buildScript);
        logging_1.logSuccess('Skript aktualisiert.');
        logging_1.logInfo(`Aktualisiere das ${chalk_1.default.redBright('build-aot')}-Skript.`);
        const buildAotScript = {
            name: 'build-aot',
            command: 'node --max_old_space_size=4024 ./node_modules/@angular/cli/bin/ng build --aot',
            overwrite: true
        };
        scripts_1.controlPackageJsonScript(tree, context, buildAotScript);
        logging_1.logSuccess('Skript aktualisiert.');
        logging_1.logInfo(`Aktualisiere das ${chalk_1.default.redBright('buildzentral')}-Skript.`);
        const buildProdScript = {
            name: 'buildzentral',
            command: 'node --max_old_space_size=4024 ./node_modules/@angular/cli/bin/ng build --prod',
            overwrite: true
        };
        scripts_1.controlPackageJsonScript(tree, context, buildProdScript);
        logging_1.logSuccess('Skript aktualisiert.');
    };
}
exports.updateScripts = updateScripts;
/**
 * Prüft, ob die Property "project" gesetzt ist und
 * erstellt wenn nötig einen Standard-Pfad zum Projekt, wenn keiner bekannt ist.
 * @param options
 */
function setupProject(options) {
    return (tree, context) => {
        logging_1.logNewUpdate('1.8.0');
        logging_1.logInfoWithDescriptor('Starte Konfiguration der Schematic.');
        return util_1.waitForTreeCallback(tree, () => {
            if (!options.project) {
                throw logging_1.formattedSchematicsException('Option "project" wird benötigt.');
            }
            const project = project_1.getProject(tree, options.project);
            if (options.path === undefined) {
                options.path = project.root;
            }
            util_1.checkSmoketestScriptExists(tree, context);
            logging_1.logSuccess(`Schematic-Konfiguration für Projekt "${options.project}" erfolgreich.`);
            return tree;
        });
    };
}
exports.setupProject = setupProject;
/**
 * Prüft ob die Versionen des Projekts mit den erforderlichen Versionen dieses Updates übereinstimmen.
 */
function checkVersions() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Starte die Versionsprüfung.');
        return util_1.waitForTreeCallback(tree, () => {
            const minimumLuxComponentsVersion = '1.7.21';
            validation_1.validateLuxComponentsVersion(tree, context, minimumLuxComponentsVersion);
            const minimumNodeVersion = '8.0.0';
            validation_1.validateNodeVersion(context, minimumNodeVersion);
            logging_1.logSuccess(`Versionen erfolgreich geprüft.`);
            return tree;
        });
    };
}
exports.checkVersions = checkVersions;
function updatePackageJsonDependencies() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge neue Dependencies zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const dependencies = [
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/animations' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/common' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/core' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.0.0-beta.27', name: '@angular/flex-layout' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/forms' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/platform-browser' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/platform-browser-dynamic' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.7', name: '@angular/router' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.0', name: '@angular/cdk' },
                { type: dependencies_1.NodeDependencyType.Default, version: '8.2.0', name: '@angular/material' },
                { type: dependencies_1.NodeDependencyType.Default, version: '3.2.1', name: 'core-js' },
                { type: dependencies_1.NodeDependencyType.Default, version: '5.0.1', name: 'material-design-icons-iconfont' },
                { type: dependencies_1.NodeDependencyType.Default, version: '6.5.3', name: 'rxjs' },
                { type: dependencies_1.NodeDependencyType.Default, version: '0.10.2', name: 'zone.js' },
                { type: dependencies_1.NodeDependencyType.Default, version: '2.0.8', name: 'hammerjs' },
                { type: dependencies_1.NodeDependencyType.Default, version: '5.11.2', name: '@fortawesome/fontawesome-free' },
                { type: dependencies_1.NodeDependencyType.Default, version: '1.8.0', name: 'lux-components' }
            ];
            dependencies.forEach(dependency => {
                dependencies_1.updatePackageJsonDependency(tree, context, dependency);
            });
            logging_1.logSuccess('Dependencies aktualisiert.');
            return tree;
        });
    };
}
exports.updatePackageJsonDependencies = updatePackageJsonDependencies;
/**
 * Fügt die neuen dev-dependencies der package.json hinzu.
 */
function updatePackageJsonDevDependencies() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge neue DevDependencies zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const devDependencies = [
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.803.5', name: '@angular-devkit/build-angular' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.2.7', name: '@angular/compiler' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.2.7', name: '@angular/compiler-cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.3.5', name: '@angular/cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.2.7', name: '@angular/language-service' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.1.10', name: '@compodoc/compodoc' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.4.0', name: '@types/jasmine' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.6', name: '@types/jasminewd2' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '12.7.5', name: '@types/node' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.1.1', name: 'codelyzer' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.5.0', name: 'jasmine-core' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.2.1', name: 'jasmine-spec-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.3.0', name: 'karma' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.1.0', name: 'karma-chrome-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.0', name: 'karma-cli' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.1.0', name: 'karma-coverage-istanbul-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.4.2', name: 'karma-edge-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.2.0', name: 'karma-firefox-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.0.0', name: 'karma-ie-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.1', name: 'karma-jasmine' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.4.2', name: 'karma-jasmine-html-reporter' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '1.0.0', name: 'karma-safari-launcher' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.4.2', name: 'protractor' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '2.0.3', name: 'retire' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '4.12.0', name: 'node-sass' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '8.4.1', name: 'ts-node' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '5.20.0', name: 'tslint' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.0.2', name: 'tslint-angular' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '3.4.5', name: 'typescript' },
                { type: dependencies_1.NodeDependencyType.Dev, version: '0.0.33', name: 'lux-components-update' },
            ];
            devDependencies.forEach(devDependency => {
                dependencies_1.updatePackageJsonDependency(tree, context, devDependency);
            });
            logging_1.logSuccess('DevDependencies aktualisiert.');
            return tree;
        });
    };
}
exports.updatePackageJsonDevDependencies = updatePackageJsonDevDependencies;
function deletePackageJsonDevDependencies() {
    return (tree, context) => {
        logging_1.logInfoWithDescriptor('Füge neue DevDependencies zu package.json hinzu.');
        return util_1.waitForTreeCallback(tree, () => {
            const devDependencies = [
                { type: dependencies_1.NodeDependencyType.Default, version: '', name: 'nsp' },
                { type: dependencies_1.NodeDependencyType.Default, version: '', name: '@angular/compiler' },
                { type: dependencies_1.NodeDependencyType.Default, version: '', name: 'node-sass' },
            ];
            devDependencies.forEach(devDependency => {
                dependencies_1.deletePackageJsonDependency(tree, context, devDependency);
            });
            logging_1.logSuccess('DevDependencies aktualisiert.');
            return tree;
        });
    };
}
exports.deletePackageJsonDevDependencies = deletePackageJsonDevDependencies;
function updateTheming(options) {
    return files_1.moveFilesToDirectory(options, 'files/theming', 'src/theming');
}
exports.updateTheming = updateTheming;
function addIeTsConfig(options) {
    return files_1.moveFilesToDirectory(options, 'files/config', 'src/');
}
exports.addIeTsConfig = addIeTsConfig;
/**
 * Gibt die offen stehenden ToDos (Aufgaben, die der Generator nicht übernehmen konnte) für den User aus.
 */
function todosForUser() {
    return (tree, context) => {
        util_1.runInstallAndLogToDos(context, `Bitte starten Sie ${chalk_1.default.redBright('npm run smoketest')} um möglichen Fehlern vorzugreifen.`, `Weitere Informationen: https://confluence.gfi.ihk.de/display/AF/Update+Guide#UpdateGuide-UmstellungaufVersion1.8.0`);
        return tree;
    };
}
exports.todosForUser = todosForUser;
//# sourceMappingURL=index.js.map