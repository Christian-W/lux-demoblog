(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/flex-layout'), require('@angular/material'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('@angular/platform-browser'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/cdk/overlay'), require('@angular/cdk/platform'), require('@angular/cdk/scrolling'), require('@angular/platform-browser/animations'), require('@angular/router'), require('@angular/cdk/layout'), require('@angular/animations'), require('@angular/cdk/keycodes'), require('@angular/material/core'), require('@angular/common/http'), require('ng2-pdf-viewer'), require('@angular/cdk/portal'), require('@angular/core/testing'), require('@angular/router/testing')) :
    typeof define === 'function' && define.amd ? define('@ihk-gfi/lux-components', ['exports', '@angular/common', '@angular/core', '@angular/flex-layout', '@angular/material', 'rxjs', 'rxjs/operators', '@angular/forms', '@angular/platform-browser', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/cdk/overlay', '@angular/cdk/platform', '@angular/cdk/scrolling', '@angular/platform-browser/animations', '@angular/router', '@angular/cdk/layout', '@angular/animations', '@angular/cdk/keycodes', '@angular/material/core', '@angular/common/http', 'ng2-pdf-viewer', '@angular/cdk/portal', '@angular/core/testing', '@angular/router/testing'], factory) :
    (global = global || self, factory((global['ihk-gfi'] = global['ihk-gfi'] || {}, global['ihk-gfi']['lux-components'] = {}), global.ng.common, global.ng.core, global.ng['flex-layout'], global.ng.material, global.rxjs, global.rxjs.operators, global.ng.forms, global.ng.platformBrowser, global.ng.cdk.a11y, global.ng.cdk.bidi, global.ng.cdk.overlay, global.ng.cdk.platform, global.ng.cdk.scrolling, global.ng.platformBrowser.animations, global.ng.router, global.ng.cdk.layout, global.ng.animations, global.ng.cdk.keycodes, global.ng.material.core, global.ng.common.http, global.ng2PdfViewer, global.ng.cdk.portal, global.ng.core.testing, global.ng.router.testing));
}(this, (function (exports, common, core, flexLayout, material, rxjs, operators, forms, platformBrowser, a11y, bidi, overlay, platform, scrolling, animations, router, layout, animations$1, keycodes, core$1, http, ng2PdfViewer, portal, testing, testing$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var LuxAriaBase = /** @class */ (function () {
        function LuxAriaBase(elementRef, renderer, ariaTagName) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.ariaTagName = ariaTagName;
            this.init = false;
        }
        LuxAriaBase.prototype.ngAfterViewInit = function () {
            this.init = true;
            this.renderAria();
        };
        LuxAriaBase.prototype.renderAria = function () {
            if (this.init) {
                var selector = this.getSelector();
                var el = void 0;
                if (selector) {
                    el = this.elementRef.nativeElement.querySelector(selector);
                }
                else {
                    el = this.elementRef.nativeElement;
                }
                if (el) {
                    var value = this.getValue();
                    if (value === null || value === undefined) {
                        this.renderer.removeAttribute(el, this.ariaTagName);
                    }
                    else {
                        this.renderer.setAttribute(el, this.ariaTagName, value);
                    }
                }
            }
        };
        return LuxAriaBase;
    }());

    var LuxAriaLabelDirective = /** @class */ (function (_super) {
        __extends(LuxAriaLabelDirective, _super);
        function LuxAriaLabelDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-label') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            if (!_this.luxAriaLabelSelector) {
                var tagName = elementRef.nativeElement.tagName.toLowerCase();
                if (tagName === 'lux-button') {
                    _this.luxAriaLabelSelector = 'button';
                }
                else if (tagName === 'lux-app-header-action-nav-item') {
                    _this.luxAriaLabelSelector = 'button';
                }
            }
            return _this;
        }
        Object.defineProperty(LuxAriaLabelDirective.prototype, "luxAriaLabel", {
            get: function () {
                return this._luxAriaLabel;
            },
            set: function (label) {
                this._luxAriaLabel = label;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaLabelDirective.prototype.getSelector = function () {
            return this.luxAriaLabelSelector;
        };
        LuxAriaLabelDirective.prototype.getValue = function () {
            return this._luxAriaLabel;
        };
        LuxAriaLabelDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaLabelDirective.prototype, "luxAriaLabelSelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaLabelDirective.prototype, "luxAriaLabel", null);
        LuxAriaLabelDirective = __decorate([
            core.Directive({
                selector: '[luxAriaLabel]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaLabelDirective);
        return LuxAriaLabelDirective;
    }(LuxAriaBase));

    var LuxInfiniteScrollDirective = /** @class */ (function () {
        /**
         * Constructor
         * @param elementRef Ziel-Element dieser Direktive
         */
        function LuxInfiniteScrollDirective(elementRef) {
            this.elementRef = elementRef;
            this.scroll$ = new rxjs.Subject();
            this.lastPosition = { scrollHeight: 0, scrollTop: 0, clientHeight: 0 };
            // Prozentzahl nach der ein scrollCallback ausgeloest wird
            this.luxScrollPercent = 85;
            // Direkt bei Initialisierung einen ScrollEvent emitten
            this.luxImmediateCallback = true;
            // Flag ob aktuell Daten geladen werden (aus aufrufender Komponente)
            this.luxIsLoading = false;
            // Emitter an den sich andere Komponenten haengen koennen um auf den Scroll zu reagieren
            this.luxScrolled = new core.EventEmitter();
        }
        LuxInfiniteScrollDirective_1 = LuxInfiniteScrollDirective;
        LuxInfiniteScrollDirective.prototype.ngOnInit = function () {
            var _this = this;
            window.addEventListener('scroll', this.onScroll.bind(this), true);
            // Die neuen Scroll-Events bündeln und nach der Zeitspanne SCROLL_DEBOUNCE_TIME prüfen ob ein
            // "luxScrolled" emitten soll oder nicht.
            this.scrollSubscription = this.scroll$
                .pipe(operators.debounceTime(LuxInfiniteScrollDirective_1.SCROLL_DEBOUNCE_TIME))
                .subscribe(function () {
                _this.performScrollCheck();
            });
        };
        LuxInfiniteScrollDirective.prototype.ngAfterViewInit = function () {
            // Prüfen ob ein initiales Laden von Daten starten soll
            if (this.hasScrollbar() && this.luxImmediateCallback && !this.luxIsLoading) {
                this.luxScrolled.emit();
            }
        };
        LuxInfiniteScrollDirective.prototype.ngOnDestroy = function () {
            window.removeEventListener('scroll', this.onScroll, true);
            this.scrollSubscription.unsubscribe();
        };
        /**
         * Prüft ob ein Scroll-Event auf dem Zielelement stattgefunden hat.
         * Wenn ja, wird das Subject scroll$ angestoßen.
         * @param event
         */
        LuxInfiniteScrollDirective.prototype.onScroll = function (event) {
            var target = event.target ? event.target : event.srcElement;
            if (target === this.elementRef.nativeElement) {
                this.scroll$.next();
            }
        };
        /**
         * Holt die aktuelle Position im Scroll-Bereich und fuehrt
         * einen Event-Emit durch wenn die Bedingungen erfuellt sind.
         */
        LuxInfiniteScrollDirective.prototype.performScrollCheck = function () {
            var position = {
                scrollTop: this.elementRef.nativeElement.scrollTop,
                scrollHeight: this.elementRef.nativeElement.scrollHeight,
                clientHeight: this.elementRef.nativeElement.clientHeight
            };
            // Wenn nach unten gescrollt wird und die angegebene Prozentzahl ueberschritten wird
            if (this.isUserScrollingDown(position) && this.isScrollExpectedPercent(position) && !this.luxIsLoading) {
                this.luxScrolled.emit();
            }
            this.lastPosition = position;
        };
        /**
         * Prueft ob der User gerade nach unten scrollt.
         * Vergleicht dabei die scrollTop Position des Users mit der des Elements.
         * @param curPos
         */
        LuxInfiniteScrollDirective.prototype.isUserScrollingDown = function (curPos) {
            return this.lastPosition.scrollTop < curPos.scrollTop;
        };
        /**
         * Prueft ob der Scrollbereich ueberschritten wurde.
         * @param position
         * @returns boolean
         */
        LuxInfiniteScrollDirective.prototype.isScrollExpectedPercent = function (position) {
            return (position.scrollTop + position.clientHeight) / position.scrollHeight > this.luxScrollPercent / 100;
        };
        /**
         * Prüft ob das Zielelement eine Scrollbar gesetzt hat.
         */
        LuxInfiniteScrollDirective.prototype.hasScrollbar = function () {
            return this.elementRef.nativeElement.scrollHeight > this.elementRef.nativeElement.clientHeight;
        };
        var LuxInfiniteScrollDirective_1;
        // Zeitgrenze (ms) nach der das neuste Scroll-Event des Subjects genommen wird
        LuxInfiniteScrollDirective.SCROLL_DEBOUNCE_TIME = 200;
        LuxInfiniteScrollDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxInfiniteScrollDirective.prototype, "luxScrollPercent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxInfiniteScrollDirective.prototype, "luxImmediateCallback", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxInfiniteScrollDirective.prototype, "luxIsLoading", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxInfiniteScrollDirective.prototype, "luxScrolled", void 0);
        LuxInfiniteScrollDirective = LuxInfiniteScrollDirective_1 = __decorate([
            core.Directive({
                selector: '[luxInfiniteScroll]'
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], LuxInfiniteScrollDirective);
        return LuxInfiniteScrollDirective;
    }());

    /**
     * Enum fuer die moeglichen Background-Farben
     */

    (function (LuxBackgroundColorsEnum) {
        LuxBackgroundColorsEnum["red"] = "red";
        LuxBackgroundColorsEnum["green"] = "green";
        LuxBackgroundColorsEnum["yellow"] = "yellow";
        LuxBackgroundColorsEnum["blue"] = "blue";
        LuxBackgroundColorsEnum["gray"] = "gray";
        LuxBackgroundColorsEnum["orange"] = "orange";
        LuxBackgroundColorsEnum["brown"] = "brown";
    })(exports.LuxBackgroundColorsEnum || (exports.LuxBackgroundColorsEnum = {}));
    /**
     * Enum fuer die moeglichen Schrift-Farben
     */

    (function (LuxFontColorsEnum) {
        LuxFontColorsEnum["white"] = "white";
        LuxFontColorsEnum["black"] = "black";
    })(exports.LuxFontColorsEnum || (exports.LuxFontColorsEnum = {}));

    var LuxUtil = /** @class */ (function () {
        function LuxUtil() {
        }
        /**
         * Prueft ob ein String leer ist.
         * @param str
         * @returns boolean
         */
        LuxUtil.isEmpty = function (str) {
            return !str || 0 === str.length;
        };
        /**
         * Liest aus einem Objekt ein bestimmtes Feld aus.
         * Laesst sich auch ueber mehrere Unterobjekte verschachteln.
         * Beispiele fuer propertyNamePath:
         * "value"
         * "unterobjekt1.unterobjekt2.value"
         *
         * @param el
         * @param propertyNamePath
         * @returns any
         */
        LuxUtil.readPropertyValueFromObject = function (el, propertyNamePath) {
            var e_1, _a;
            var result = null;
            if (el && propertyNamePath) {
                var splitProperties = propertyNamePath.split('.');
                if (splitProperties.length > 0) {
                    var tempObject = el;
                    try {
                        for (var splitProperties_1 = __values(splitProperties), splitProperties_1_1 = splitProperties_1.next(); !splitProperties_1_1.done; splitProperties_1_1 = splitProperties_1.next()) {
                            var property = splitProperties_1_1.value;
                            tempObject = tempObject[property];
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (splitProperties_1_1 && !splitProperties_1_1.done && (_a = splitProperties_1.return)) _a.call(splitProperties_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    result = tempObject;
                }
                else {
                    result = el[propertyNamePath];
                }
            }
            return result;
        };
        /**
         * Gibt eine von verschiedenen vordefinierten Fehlernachrichten passend zu den
         * vorhandenen Fehlern der uebergebenen FormControl zurueck.
         * @param formControl
         * @returns string
         */
        LuxUtil.getErrorMessage = function (formControl) {
            if (formControl) {
                if (formControl.hasError('required')) {
                    return 'Dieses Feld darf nicht leer sein';
                }
                if (formControl.hasError('minlength')) {
                    return 'Die Mindestlänge ist ' + formControl.getError('minlength').requiredLength;
                }
                if (formControl.hasError('maxlength')) {
                    return 'Die Maximallänge ist ' + formControl.getError('maxlength').requiredLength;
                }
                if (formControl.hasError('email')) {
                    return 'Dies ist keine gültige E-Mailadresse';
                }
                if (formControl.hasError('min')) {
                    return 'Der Minimalwert ist ' + formControl.getError('min').min;
                }
                if (formControl.hasError('max')) {
                    return 'Der Maximalwert ist ' + formControl.getError('max').max;
                }
                if (formControl.hasError('pattern')) {
                    var pattern = formControl.getError('pattern').requiredPattern;
                    return 'Entspricht nicht dem Muster "' + pattern.substring(1, pattern.length - 1) + '"';
                }
            }
            return '';
        };
        /**
         * Prueft ob der uebergebene Wert ein JS-Datum ist.
         * @param value
         * @returns boolean
         */
        LuxUtil.isDate = function (value) {
            return value instanceof Date && !isNaN(value.valueOf());
        };
        /**
         * Zeigt die Validierungsfehler der einzelnen FormControls innerhalb der FormGroup an.
         * Wenn innerhalb der übergebenen FormGroup weitere Formgroups enthalten sind, werden
         * diese ebenfalls validiert.
         * @param formGroup
         */
        LuxUtil.showValidationErrors = function (formGroup) {
            var _this = this;
            Object.keys(formGroup.controls).forEach(function (field) {
                var control = formGroup.get(field);
                if (control instanceof forms.FormGroup) {
                    _this.showValidationErrors(control);
                }
                else {
                    control.markAsTouched({ onlySelf: true });
                }
            });
        };
        /**
         * Diese Methode scrollt zu der übergebenen Id.
         *
         * @param id Eine Elementid (z.B. <tag id="myId">...)
         */
        LuxUtil.goTo = function (id) {
            var element = document.querySelector('#' + id);
            if (element) {
                setTimeout(function () {
                    element.scrollIntoView();
                });
            }
        };
        /**
         * Prueft ob die Applikation im IE geoeffnet ist.
         * @returns boolean
         */
        LuxUtil.isIE = function () {
            var msie = window.document['documentMode'];
            return msie && msie <= 11;
        };
        /**
         * Prueft ob die Applikation im Edge geoeffnet ist.
         * @returns boolean
         */
        LuxUtil.isEdge = function () {
            return window.navigator.userAgent.indexOf('Edge') > -1;
        };
        /**
         * Prueft ob die Applikation im IE oder Edge geoffnet ist.
         * @returns boolean
         */
        LuxUtil.isIEorEdge = function () {
            return LuxUtil.isIE() || LuxUtil.isEdge();
        };
        /**
         * Diese Methode verhindert, dass ein Event weiterverarbeitet wird.
         *
         * @param event Ein beliebiges Event.
         */
        LuxUtil.stopEventPropagation = function (event) {
            if (event) {
                if (event.stopPropagation) {
                    event.stopPropagation();
                }
                else {
                    console.log('Die Funktion "event.stopPropagation()" wird nicht unterstützt.');
                }
            }
        };
        LuxUtil.getColorsByBgColorsEnum = function (color) {
            var result = { backgroundCSSClass: 'lux-bg-color-blue', fontCSSClass: 'lux-font-color-white' };
            if (exports.LuxBackgroundColorsEnum[color]) {
                result.backgroundCSSClass = 'lux-bg-color-' + color;
                switch (color) {
                    case exports.LuxBackgroundColorsEnum.gray:
                    case exports.LuxBackgroundColorsEnum.orange:
                    case exports.LuxBackgroundColorsEnum.yellow:
                        result.fontCSSClass = 'lux-font-color-' + exports.LuxFontColorsEnum.black;
                        break;
                    default:
                        result.fontCSSClass = 'lux-font-color-' + exports.LuxFontColorsEnum.white;
                        break;
                }
            }
            return result;
        };
        LuxUtil.isNumber = function (toCheck) {
            return !Number.isNaN(+toCheck);
        };
        LuxUtil.base64ToArrayBuffer = function (data) {
            var binaryString = window.atob(data);
            var bytes = new Uint8Array(binaryString.length);
            for (var i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes;
        };
        LuxUtil.ISO_8601_FULL = new RegExp('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', 'i');
        return LuxUtil;
    }());

    /**
     * Anpassung der HammerGestureConfigs für die LuxComponents.
     *
     * Verhindert durch providen den Bug im Safari, dass kein Scrollen mehr möglich ist.
     */
    var LuxComponentsHammerConfig = /** @class */ (function (_super) {
        __extends(LuxComponentsHammerConfig, _super);
        function LuxComponentsHammerConfig() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LuxComponentsHammerConfig.prototype.buildHammer = function (element) {
            // Wenn es sich um die MD-Component handelt, vertikales Scrolling
            // zusätzlich zu den Swipe-Gesten aktivieren
            if (element.className.indexOf('lux-master-detail') > -1) {
                return new Hammer(element, { touchAction: 'pan-y' });
            }
            else {
                // Ansonsten einfach die Hammer-Config von Material übernehmen
                return _super.prototype.buildHammer.call(this, element);
            }
        };
        return LuxComponentsHammerConfig;
    }(material.GestureConfig));

    // Diesen bitte !nicht! injecten, sondern den LuxComponentsConfigService.
    var LuxConfigTokenService = new core.InjectionToken('luxConfig');
    var LuxComponentsConfigModule = /** @class */ (function () {
        function LuxComponentsConfigModule() {
        }
        LuxComponentsConfigModule_1 = LuxComponentsConfigModule;
        // Den InjectionToken mit der übergebenen Konfiguration überschreiben, damit die Komponenten diese nutzen können
        LuxComponentsConfigModule.forRoot = function (config) {
            return {
                ngModule: LuxComponentsConfigModule_1,
                providers: [
                    {
                        provide: LuxConfigTokenService,
                        useValue: config
                    }
                ]
            };
        };
        var LuxComponentsConfigModule_1;
        LuxComponentsConfigModule = LuxComponentsConfigModule_1 = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [],
                providers: [
                    {
                        provide: platformBrowser.HAMMER_GESTURE_CONFIG,
                        useClass: LuxComponentsHammerConfig
                    }
                ]
            })
        ], LuxComponentsConfigModule);
        return LuxComponentsConfigModule;
    }());

    /**
     * Dieser Service wird dazu verwendet, auf die Konfiguration der LuxComponents zuzugreifen und diese auszulesen bzw.
     * auch zu aktualisieren.
     */
    var LuxComponentsConfigService = /** @class */ (function () {
        function LuxComponentsConfigService(config) {
            // Subject mit dem aktuellen Konfig-Wert, welcher ausgelesen werden kann
            this.config$ = new rxjs.BehaviorSubject(null);
            // Wenn keine Konfiguration geladen werden konnte, Standard-Konfig benutzen und eine Warnung ausgeben.
            if (!config) {
                console.warn('Achtung: Es wurde keine Konfiguration für die LuxComponents definiert.\n', 'Benutze Standard-Konfiguration:', LuxComponentsConfigService_1.DEFAULT_CONFIG);
                this.config$.next(LuxComponentsConfigService_1.DEFAULT_CONFIG);
            }
            else {
                this.config$.next(this.mergeDefaultData(config));
            }
        }
        LuxComponentsConfigService_1 = LuxComponentsConfigService;
        Object.defineProperty(LuxComponentsConfigService.prototype, "config", {
            /**
             * Gibt das Observable mit der aktuell gesetzten Konfiguration zurück.
             */
            get: function () {
                return this.config$.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxComponentsConfigService.prototype, "currentConfig", {
            /**
             * Gibt die aktuell gesetzte Konfiguration direkt zurück.
             */
            get: function () {
                return this.config$.getValue();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Gibt zurück, ob die Labels als Uppercase gekennzeichnet sind und ob
         * die übergebenen Selektoren in den Ausnahmen geführt sind.
         * @param selector
         */
        LuxComponentsConfigService.prototype.isLabelUppercaseForSelector = function (selector) {
            var config = this.config$.value;
            return config.labelConfiguration.allUppercase && config.labelConfiguration.notAppliedTo.indexOf(selector) === -1;
        };
        /**
         * Ersetzt die aktuelle Konfiguration mit der übergebenen (wenn gültiger Wert).
         * @param config
         */
        LuxComponentsConfigService.prototype.updateConfiguration = function (config) {
            if (!config) {
                console.warn('Die übergebene Konfiguration ist undefined/null und wird nicht übernommen.');
            }
            else {
                this.config$.next(this.mergeDefaultData(config));
            }
        };
        /**
         * Kombiniert die übergebene Konfiguration mit der Standard-Konfig.
         *
         * Übernimmt die Werte aus der Standard-Konfig, die nicht im übergebenen gesetzt wurden.
         * @param config
         */
        LuxComponentsConfigService.prototype.mergeDefaultData = function (config) {
            var mergedConfig = {};
            Object.keys(config).forEach(function (key) {
                mergedConfig[key] = config[key];
            });
            Object.keys(LuxComponentsConfigService_1.DEFAULT_CONFIG).forEach(function (key) {
                if (mergedConfig[key] === undefined || mergedConfig[key] === null) {
                    mergedConfig[key] = LuxComponentsConfigService_1.DEFAULT_CONFIG[key];
                }
            });
            return mergedConfig;
        };
        var LuxComponentsConfigService_1;
        // Fallback-Konfiguration, falls sonst keine gefunden werden konnte
        LuxComponentsConfigService.DEFAULT_CONFIG = {
            displayLuxConsoleLogs: false,
            generateLuxTagIds: false,
            lookupServiceUrl: '/lookup/',
            labelConfiguration: {
                allUppercase: true,
                notAppliedTo: ['lux-link', 'lux-side-nav-item', 'lux-menu-item']
            },
            cardExpansionAnimationActive: true,
            displayBindingDebugHint: true,
            rippleConfiguration: {
                exitDuration: 500,
                enterDuration: 500
            }
        };
        LuxComponentsConfigService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [LuxConfigTokenService,] }, { type: core.Optional }] }
        ]; };
        LuxComponentsConfigService.ngInjectableDef = core["ɵɵdefineInjectable"]({ factory: function LuxComponentsConfigService_Factory() { return new LuxComponentsConfigService(core["ɵɵinject"](LuxConfigTokenService, 8)); }, token: LuxComponentsConfigService, providedIn: "root" });
        LuxComponentsConfigService = LuxComponentsConfigService_1 = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __param(0, core.Inject(LuxConfigTokenService)), __param(0, core.Optional()),
            __metadata("design:paramtypes", [Object])
        ], LuxComponentsConfigService);
        return LuxComponentsConfigService;
    }());

    var LuxFormLabelComponent = /** @class */ (function () {
        function LuxFormLabelComponent() {
        }
        LuxFormLabelComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.ViewChild(core.TemplateRef, { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], LuxFormLabelComponent.prototype, "templateRef", void 0);
        LuxFormLabelComponent = __decorate([
            core.Component({
                selector: 'lux-form-label',
                template: '<ng-template><ng-content></ng-content></ng-template>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxFormLabelComponent);
        return LuxFormLabelComponent;
    }());

    var LuxFormHintComponent = /** @class */ (function () {
        function LuxFormHintComponent() {
        }
        LuxFormHintComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.ViewChild(core.TemplateRef, { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], LuxFormHintComponent.prototype, "templateRef", void 0);
        LuxFormHintComponent = __decorate([
            core.Component({
                selector: 'lux-form-hint',
                template: '<ng-template><ng-content></ng-content></ng-template>\n'
            }),
            __metadata("design:paramtypes", [])
        ], LuxFormHintComponent);
        return LuxFormHintComponent;
    }());

    var luxFormControlUID = 0;
    var LuxFormComponentBase = /** @class */ (function () {
        function LuxFormComponentBase(controlContainer, cdr, logger, configService) {
            this.cdr = cdr;
            this.logger = logger;
            this.configService = configService;
            this.hasHadRequiredValidator = false;
            this.latestErrors = null;
            this.preventUnwantedValueChange = false;
            this.displayBindingDebugHint = false;
            this.errorMessage = undefined;
            this.uid = 'lux-form-control-' + luxFormControlUID++;
            this.cssReadonly = this._luxReadonly;
            this.luxFocusIn = new core.EventEmitter();
            this.luxFocusOut = new core.EventEmitter();
            this.luxDisabledChange = new core.EventEmitter();
            this.luxErrorCallback = function (value, errors) { return undefined; };
            this.controlContainer = controlContainer;
            // Wir fragen hier direkt ab, ob die Binding-Warnung ausgegeben werden sollen
            this.displayBindingDebugHint = this.configService.currentConfig.displayBindingDebugHint;
        }
        Object.defineProperty(LuxFormComponentBase.prototype, "luxDisabled", {
            get: function () {
                return this._luxDisabled;
            },
            set: function (disabled) {
                this._luxDisabled = disabled;
                this.cdr.detectChanges();
                if (this.formControl) {
                    this.handleFormDisabledState();
                }
                this.luxDisabledChange.emit(this._luxDisabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormComponentBase.prototype, "luxReadonly", {
            get: function () {
                return this._luxReadonly;
            },
            set: function (readonly) {
                this._luxReadonly = readonly;
                this.cssReadonly = readonly;
                this.cdr.detectChanges();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormComponentBase.prototype, "luxRequired", {
            get: function () {
                return this._luxRequired;
            },
            set: function (required) {
                if (this.isInForm()) {
                    this.logger.error("Achtung: Bei Komponenten innerhalb von ReactiveForms den Required-Validator anstelle der " +
                        "Property \"luxRequired\" nutzen.\n" +
                        ("Betroffene Komponente: " + (this.luxControlBinding ? this.luxControlBinding : 'Kein Binding gefunden')));
                }
                else {
                    this._luxRequired = required;
                    this.updateValidators(this.luxControlValidators);
                    // flag um ungewollte Wertänderungen von undefined zu null zu unterbinden
                    this.preventUnwantedValueChange = true;
                    this.cdr.detectChanges();
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxFormComponentBase.prototype.ngOnInit = function () {
            this.initFormControl();
            this.initDisabledState();
            this.initFormValueSubscription();
            this.initFormStateSubscription();
            this.updateValidators(this.luxControlValidators);
            this.triggerOutputPatternCheck();
        };
        LuxFormComponentBase.prototype.ngOnChanges = function (simpleChanges) {
            if (simpleChanges.luxControlValidators && this.formControl) {
                this.updateValidators(this.luxControlValidators);
            }
            this.triggerInputPatternCheck(simpleChanges);
        };
        LuxFormComponentBase.prototype.ngDoCheck = function () {
            // Prüfen, ob es neue Fehlermeldungen gibt, wenn ja diese laden und speichern.
            if (this.latestErrors !== this.formControl.errors && this.formControl.touched) {
                this.latestErrors = this.formControl.errors;
                this.errorMessage = this.fetchErrorMessage();
            }
            // Prüfen, ob für das Reactive-Form-Control ein required-Validator ergänzt worden ist
            if (this.isInForm()) {
                var hasRequiredValidator = this.hasRequiredValidator(this.formControl);
                if (this.hasHadRequiredValidator !== hasRequiredValidator) {
                    this._luxRequired = hasRequiredValidator;
                    this.formControl.updateValueAndValidity();
                    this.cdr.detectChanges();
                }
                this.hasHadRequiredValidator = hasRequiredValidator;
            }
        };
        LuxFormComponentBase.prototype.ngOnDestroy = function () {
            if (this._formValueChangeSubscr) {
                this._formValueChangeSubscr.unsubscribe();
            }
            if (this._formStatusChangeSubscr) {
                this._formStatusChangeSubscr.unsubscribe();
            }
            if (this._configSubscription) {
                this._configSubscription.unsubscribe();
            }
        };
        LuxFormComponentBase.prototype.isInForm = function () {
            return this.controlContainer != null && !LuxUtil.isEmpty(this.luxControlBinding);
        };
        /**
         * Versucht eine Fehlermeldung für diese Komponente auszulesen und gibt diese zurück.
         * Wenn das Element nicht den "touched"-Zustand besitzt, wird keine Fehlermeldung zurückgegeben.
         */
        LuxFormComponentBase.prototype.fetchErrorMessage = function () {
            // Control undefined/null oder unberührt? => Keinen Fehler ausgeben
            if (!this.formControl || !this.formControl.touched) {
                return undefined;
            }
            var _a = this.formControl, value = _a.value, errors = _a.errors;
            // Gibt der Callback bereits einen User-definierten Fehler wieder? => diesen zurückgeben
            var errorMsg = this.luxErrorMessage
                ? this.luxErrorMessage
                : this.luxErrorCallback
                    ? this.luxErrorCallback(value, errors || {})
                    : undefined;
            if (errors && errorMsg) {
                return errorMsg;
            }
            // Evtl. falls vorhanden Fehlerbehandlung der ableitenden Komponente aufrufen
            errorMsg = this.errorMessageModifier(value, errors || {});
            if (errorMsg) {
                return errorMsg;
            }
            // Last-but-not-least => versuchen einen Standardfehler auszulesen
            errorMsg = LuxUtil.getErrorMessage(this.formControl);
            return errorMsg;
        };
        /**
         * Mappt den Input-Wert aus disabled auf das FormControl.
         */
        LuxFormComponentBase.prototype.handleFormDisabledState = function () {
            if (this.luxDisabled && !this.formControl.disabled) {
                this.formControl.disable();
            }
            if (!this.luxDisabled && this.formControl.disabled) {
                this.formControl.enable();
            }
        };
        /**
         * Method-Stub der von ableitenden Klassen genutzt werden kann, um
         * weitergreifende Fehlermeldungen anzugeben.
         */
        LuxFormComponentBase.prototype.errorMessageModifier = function (value, errors) { };
        /**
         * Standard-Getter Funktion für den aktuellen Wert in dieser FormComponent.
         */
        LuxFormComponentBase.prototype.getValue = function () {
            return this.formControl ? this.formControl.value : this._initialValue;
        };
        /**
         * Standard-Setter Funktion für den aktuellen Wert in dieser FormComponent.
         */
        LuxFormComponentBase.prototype.setValue = function (value) {
            // Wenn noch kein FormControl vorhanden, den init-Wert merken und Fn beenden
            if (!this.formControl) {
                this._initialValue = value;
                return;
            }
            // Wenn der Wert bereits in dem FormControl bekannt ist, die Fn beenden
            if (value === this.formControl.value) {
                return;
            }
            // Den Wert im FormControl merken
            this.formControl.setValue(value);
        };
        /**
         * Wird nach der Aktualisierung des Wertes aufgerufen.
         * Hier kann z.B. valueChange.emit() ausgeführt werden.
         * @param formValue
         */
        LuxFormComponentBase.prototype.notifyFormValueChanged = function (formValue) { };
        /**
         * Wird nach der Aktualisierung des Status aufgerufen.
         * @param formStatus
         */
        LuxFormComponentBase.prototype.notifyFormStatusChanged = function (formStatus) { };
        /**
         * Prueft ob das uebergebene Control einen required-Validator besitzt.
         * @param abstractControl
         */
        LuxFormComponentBase.prototype.hasRequiredValidator = function (abstractControl) {
            if (abstractControl.validator) {
                var validator = abstractControl.validator({});
                if (validator && (validator.required || validator.requiredTrue)) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Initialisiert die FormGroup und das FormControl abhängig davon, ob es sich um eine ReactiveForm-Component
         * handelt.
         */
        LuxFormComponentBase.prototype.initFormControl = function () {
            if (this.isInForm()) {
                this.formGroup = this.controlContainer.control;
                this.formControl = this.formGroup.controls[this.luxControlBinding];
            }
            else {
                this.formGroup = new forms.FormGroup({
                    control: new forms.FormControl()
                });
                this.formControl = this.formGroup.get(LuxFormComponentBase.DEFAULT_CTRL_NAME);
            }
        };
        /**
         * Initialisiert den Disabled-Zustand nach Erstellung dieser Component.
         */
        LuxFormComponentBase.prototype.initDisabledState = function () {
            if (this._luxDisabled) {
                this.handleFormDisabledState();
            }
            else if (this.luxDisabled === undefined) {
                this.luxDisabled = this.formControl.disabled;
            }
        };
        /**
         * Initialisiert das Handling von Wertaktualisierungen.
         * Setzt den (optional vorhanden) Initial-Wert und folgende Änderungen über das FormControl.
         */
        LuxFormComponentBase.prototype.initFormValueSubscription = function () {
            var _this = this;
            if (this._initialValue !== null && this._initialValue !== undefined) {
                this.setValue(this._initialValue);
            }
            // Aktualisierungen an dem FormControl-Value sollen auch via EventEmitter bekannt gemacht werden
            this._formValueChangeSubscr = this.formControl.valueChanges.pipe(operators.distinctUntilChanged()).subscribe(function (value) {
                if (_this.preventUnwantedValueChange && value === null) {
                    _this.preventUnwantedValueChange = false;
                    return;
                }
                _this.notifyFormValueChanged(value);
            });
        };
        /**
         * Initialisiert das Handling von Statusaktualisierungen.
         */
        LuxFormComponentBase.prototype.initFormStateSubscription = function () {
            var _this = this;
            this._formStatusChangeSubscr = this.formControl.statusChanges.subscribe(function (status) {
                if (status === 'DISABLED' && !_this.luxDisabled) {
                    // Das FormControl hat den Zustand "DISABLED", aber die Property "luxDisabled"
                    // hat noch den Wert "false". D.h. der FormControl-Status und die Property
                    // sind nicht mehr synchron.
                    _this.luxDisabled = true;
                }
                else if ((status === 'VALID' || status === 'INVALID') && _this.luxDisabled) {
                    // Das FormControl hat den Zustand "VALID" oder "INVALID" und ist aktiv,
                    // aber die Property "luxDisabled" hat noch den Wert "true".
                    // D.h. der FormControl-Status und die Property sind nicht mehr synchron.
                    _this.luxDisabled = false;
                }
                _this.notifyFormStatusChanged(status);
            });
        };
        /**
         * Diese Funktion prüft ob luxRequired auf true gesetzt wurde und die übergebenen validators bereits den
         * required-Validator besitzen.
         * Für den Fall das luxRequired auf false gesetzt worden ist, wird der Validator entfernt.
         *
         * Hinweis: LuxFormCheckableBase überschreibt diese Funktion, um statt required requiredTrue zu setzen.
         * @param validators
         */
        LuxFormComponentBase.prototype.checkValidatorsContainRequired = function (validators) {
            // Fall: required = true, aber neue Validatoren werden gesetzt
            if (this.luxRequired === true) {
                // Sind es mehrere Validatoren, aber kein .required? Dann wird er ergänzt
                if (Array.isArray(validators) && validators.indexOf(forms.Validators.required) === -1) {
                    validators.push(forms.Validators.required);
                }
                else if (!Array.isArray(validators) && validators !== forms.Validators.required) {
                    // Ist es nur ein einzelner Validator und nicht .required? Dann Array erstellen und beide kombinieren
                    validators = [validators, forms.Validators.required];
                }
            }
            else if (this.luxRequired === false) {
                if (Array.isArray(validators)) {
                    validators = validators.filter(function (validator) { return validator !== forms.Validators.required; });
                }
                else if (validators === forms.Validators.required) {
                    validators = undefined;
                }
            }
            return validators;
        };
        /**
         * Versucht die Validatoren für diese Komponente zu setzen.
         * Ist nur erfolgreich, wenn es sich hierbei nicht um eine ReactiveForm-Komponente handelt.
         * @param validators
         */
        LuxFormComponentBase.prototype.updateValidators = function (validators) {
            var _this = this;
            if ((!Array.isArray(validators) && validators) || (Array.isArray(validators) && validators.length > 0)) {
                if (!this.isInForm()) {
                    setTimeout(function () {
                        _this.luxControlValidators = _this.checkValidatorsContainRequired(validators);
                        _this.formControl.setValidators(_this.luxControlValidators);
                        _this.formControl.updateValueAndValidity();
                    });
                }
                else {
                    this.logger.error("Die Validatoren einer ReactiveForm-Komponente d\u00FCrfen nicht \u00FCber " + "das Template gesetzt werden.");
                }
            }
        };
        /**
         * Gibt an, ob diese Component Output-Property-Binding nutzt obwohl diese Component eigentlich ein Reactive FormControl ist.
         * @param observers
         */
        LuxFormComponentBase.prototype.checkOutputPatternViolation = function (observers) {
            if (this.displayBindingDebugHint && this.isInForm() && observers && observers.length > 0) {
                this.logPatternViolationWarning();
            }
        };
        /**
         * Gibt an, ob diese Component Input-Property-Binding nutzt obwohl diese Component eigentlich ein Reactive FormControl ist.
         * Wird von den ngOnChanges Methoden der Child-Klassen aufgerufen.
         * @param simpleChange
         */
        LuxFormComponentBase.prototype.checkInputPatternViolation = function (simpleChange) {
            if (this.displayBindingDebugHint && this.isInForm() && simpleChange && simpleChange.firstChange) {
                this.logPatternViolationWarning();
            }
        };
        /**
         * Gibt über den LuxConsoleService eine Warnung aus, dass hier gegen das ReactiveForm-Pattern mit Property-Binding
         * verstoßen worden ist.
         */
        LuxFormComponentBase.prototype.logPatternViolationWarning = function () {
            this.logger.warn("Achtung: Die Component \"" + this.luxControlBinding + "\" ist Teil einer ReactiveForm, nutzt aber trotzdem Property-Binding.\n\n" +
                "[Mit ReactiveForms]\n" +
                "F\u00FCr Components innerhalb von ReactiveForms k\u00F6nnen Wertaktualisierungen wie folgt abgefragt werden:\n\n" +
                "// Nicht vergessen unsubscribe in ngOnDestroy f\u00FCr die Subscription aufzurufen\n" +
                "this.subscription = this.myForm.get('myFormControl').valueChanges.subscribe((value: any) => console.log(value));\n\n" +
                "Das Setzen von Werten erfolgt zum Beispiel so:\n\n" +
                "this.myForm.get('myFormControl').setValue('myValue');\n\n" +
                "[Ohne ReactiveForms]\n" +
                "F\u00FCr Components au\u00DFerhalb von ReactiveForms k\u00F6nnen Wertaktualisierungen wie folgt abgefragt werden:\n\n" +
                "<lux-xyz-form-component (luxValueChange)=\"onValueChange($event)\"><lux-xyz-form-component>\n\n" +
                "Das Setzen von Werten erfolgt zum Beispiel so:\n\n" +
                "<lux-xyz-form-component [luxValue]=\"value\"><lux-xyz-form-component>\n\n" +
                "Alternativ kann \u00FCber Two-Way-Binding immer der aktuelle Wert in einer Property gehalten werden:\n\n" +
                "<lux-xyz-form-component [(luxValue)]=\"value\"><lux-xyz-form-component>");
            // Wir deaktivieren weitere Log-Ausgaben für diese Component, um doppelte Meldung zu vermeiden.
            // z.B. wenn Two-Way-Binding genutzt wird.
            this.displayBindingDebugHint = false;
        };
        LuxFormComponentBase.DEFAULT_CTRL_NAME = 'control';
        __decorate([
            core.ContentChild(LuxFormLabelComponent, { static: false }),
            __metadata("design:type", LuxFormLabelComponent)
        ], LuxFormComponentBase.prototype, "formLabelComponent", void 0);
        __decorate([
            core.ContentChild(LuxFormHintComponent, { static: false }),
            __metadata("design:type", LuxFormHintComponent)
        ], LuxFormComponentBase.prototype, "formHintComponent", void 0);
        __decorate([
            core.HostBinding('class.lux-form-control-readonly'),
            __metadata("design:type", Object)
        ], LuxFormComponentBase.prototype, "cssReadonly", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormComponentBase.prototype, "luxFocusIn", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormComponentBase.prototype, "luxFocusOut", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormComponentBase.prototype, "luxDisabledChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormComponentBase.prototype, "luxHint", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormComponentBase.prototype, "luxLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormComponentBase.prototype, "luxControlBinding", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxFormComponentBase.prototype, "luxControlValidators", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormComponentBase.prototype, "luxErrorMessage", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], LuxFormComponentBase.prototype, "luxErrorCallback", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxFormComponentBase.prototype, "luxDisabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxFormComponentBase.prototype, "luxReadonly", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxFormComponentBase.prototype, "luxRequired", null);
        return LuxFormComponentBase;
    }());

    var luxFormControlSelektor = 'lux-form-control';
    /**
     * @author dron
     * @description Diese Component wird von den anderen LUX-FormControls genutzt, um eine einheitliche Baseline zu erreichen.
     */
    var LuxFormControlComponent = /** @class */ (function () {
        function LuxFormControlComponent(cdr) {
            this.cdr = cdr;
            this._luxScalableHeight = false;
            this._luxHideBottomBorder = false;
            this.luxIgnoreDefaultLabel = false;
        }
        Object.defineProperty(LuxFormControlComponent.prototype, "luxScalableHeight", {
            get: function () {
                return this._luxScalableHeight;
            },
            /**
             * Dient dazu, eine Component beliebig Hoch werden zu lassen (z.B. Textarea oder Radio).
             * @param scalable
             */
            set: function (scalable) {
                this._luxScalableHeight = scalable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormControlComponent.prototype, "luxHideBottomBorder", {
            get: function () {
                return this._luxHideBottomBorder;
            },
            /**
             * Bestimmt ob die untere Border ausgeblendet werden soll oder nicht (z.B. bei Checkbox).
             * @param hide
             */
            set: function (hide) {
                this._luxHideBottomBorder = hide;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Gibt wieder, ob der Fehler für diese FormComponent dargestellt werden soll.
         */
        LuxFormControlComponent.prototype.shouldDisplayError = function () {
            return this.luxFormComponent.errorMessage && this.luxFormComponent.formControl.touched;
        };
        LuxFormControlComponent.prototype.shouldDisplayMisc = function () {
            return this.luxFormComponent.formHintComponent || this.luxFormComponent.luxHint || this.shouldDisplayError();
        };
        LuxFormControlComponent.prototype.shouldDisplayLabelByProperty = function () {
            return !this.luxFormComponent.formLabelComponent && this.luxFormComponent.luxLabel;
        };
        LuxFormControlComponent.prototype.shouldDisplayHintByProperty = function () {
            return this.luxFormComponent.formHintComponent && !this.luxFormComponent.luxHint;
        };
        /**
         * Aktiviert den Fokus dieser Component.
         */
        LuxFormControlComponent.prototype.focusin = function () {
            this.focused = true;
            this.cdr.detectChanges();
        };
        /**
         * Deaktiviert den Fokus dieser Component.
         */
        LuxFormControlComponent.prototype.focusout = function () {
            this.focused = false;
            this.cdr.detectChanges();
        };
        LuxFormControlComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.HostBinding('class.lux-form-control-scalable-height'),
            __metadata("design:type", Boolean)
        ], LuxFormControlComponent.prototype, "_luxScalableHeight", void 0);
        __decorate([
            core.HostBinding('class.lux-form-control-borderless'),
            __metadata("design:type", Boolean)
        ], LuxFormControlComponent.prototype, "_luxHideBottomBorder", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", LuxFormComponentBase)
        ], LuxFormControlComponent.prototype, "luxFormComponent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", core.ElementRef)
        ], LuxFormControlComponent.prototype, "luxFormComponentElementRef", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFormControlComponent.prototype, "luxIgnoreDefaultLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxFormControlComponent.prototype, "luxScalableHeight", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxFormControlComponent.prototype, "luxHideBottomBorder", null);
        LuxFormControlComponent = __decorate([
            core.Component({
                selector: 'lux-form-control',
                template: "<div\n  class=\"lux-form-control\"\n  [ngClass]=\"{\n    'lux-form-control-error': shouldDisplayError(),\n    'lux-form-control-scalable-height': luxScalableHeight,\n    'lux-form-control-disabled': luxFormComponent.luxDisabled,\n    'lux-form-control-readonly': luxFormComponent.luxReadonly,\n    'lux-focused': focused\n  }\"\n  fxLayout=\"column\"\n  (focusin)=\"focusin()\"\n  (focusout)=\"focusout()\"\n>\n  <!-- Container f\u00FCr das Label -->\n  <div class=\"lux-form-control-label\">\n    <!-- Hier wird entweder das luxLabel oder das \u00FCbergebene Tag heraus gerendert -->\n    <div class=\"lux-label\" *ngIf=\"!luxIgnoreDefaultLabel\">\n      <label\n        class=\"lux-form-label\"\n        [id]=\"luxFormComponent.uid + '-label'\"\n        [for]=\"luxFormComponent.uid\"\n        *ngIf=\"luxFormComponent.formLabelComponent || luxFormComponent.luxLabel\"\n      >\n        <ng-container *ngIf=\"luxFormComponent.luxLabel; else formLabelTemplate\">\n          {{ luxFormComponent.luxLabel }}\n        </ng-container>\n        <ng-template #formLabelTemplate>\n          <ng-container *ngTemplateOutlet=\"luxFormComponent.formLabelComponent.templateRef\"></ng-container>\n        </ng-template>\n        {{ luxFormComponent.luxRequired ? ' *' : '' }}\n      </label>\n    </div>\n  </div>\n  <!-- Container f\u00FCr das FormControl -->\n  <div class=\"lux-form-control-container\" fxFlex=\"auto\">\n    <ng-content></ng-content>\n  </div>\n  <!-- Container f\u00FCr das Hint und den Error -->\n  <div class=\"lux-form-control-misc\" *ngIf=\"shouldDisplayMisc()\">\n    <ng-container [ngSwitch]=\"shouldDisplayError()\">\n      <mat-error [id]=\"luxFormComponent.uid + '-error'\" *ngSwitchCase=\"true\">\n        {{ luxFormComponent.errorMessage }}\n      </mat-error>\n      <ng-container *ngSwitchDefault>\n        <!-- Hier wird entweder das luxHint oder das \u00FCbergebene Tag heraus gerendert -->\n        <mat-hint\n          *ngIf=\"luxFormComponent.formHintComponent || luxFormComponent.luxHint\"\n          [id]=\"luxFormComponent.uid + '-hint'\"\n        >\n          <ng-container *ngIf=\"luxFormComponent.luxHint; else formHintTemplate\">\n            {{ luxFormComponent.luxHint }}\n          </ng-container>\n          <ng-template #formHintTemplate>\n            <ng-container *ngTemplateOutlet=\"luxFormComponent.formHintComponent.templateRef\"></ng-container>\n          </ng-template>\n        </mat-hint>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{max-width:100%;width:100%;outline:0!important}:-webkit-autofill{display:none!important}.lux-form-control{display:-webkit-box;display:-ms-flexbox;display:flex;position:relative;box-sizing:border-box;padding:4px}.lux-form-control .lux-form-control-label{padding-top:2px;min-height:15px}.lux-form-control .lux-form-control-label>*{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-form-control .lux-form-control-container{position:relative;box-sizing:border-box;padding:6px 0 0;min-height:30px}.lux-form-control .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:1px solid rgba(0,0,0,.42)}.lux-form-control .lux-form-control-misc{box-sizing:border-box;position:relative;margin-bottom:2px;margin-top:4px;min-height:15px}.lux-form-control .lux-form-control-misc>*{padding-top:2px}.lux-form-control ::ng-deep ::-webkit-input-placeholder{color:rgba(0,0,0,.38);opacity:1}.lux-form-control ::ng-deep ::-moz-placeholder{color:rgba(0,0,0,.38);opacity:1}.lux-form-control ::ng-deep :-ms-input-placeholder{color:rgba(0,0,0,.38);opacity:1}.lux-form-control ::ng-deep ::-ms-input-placeholder{color:rgba(0,0,0,.38);opacity:1}.lux-form-control ::ng-deep ::placeholder{color:rgba(0,0,0,.38);opacity:1}.lux-form-control ::ng-deep input,.lux-form-control ::ng-deep textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;font-size:15px}.lux-form-control ::ng-deep input:required,.lux-form-control ::ng-deep textarea:required{box-shadow:unset}.lux-form-control ::ng-deep textarea{min-height:24px}.lux-form-control ::ng-deep .lux-input-row{height:24px;font-size:15px}.lux-form-control ::ng-deep .lux-input-row>*{height:17px}.lux-form-control ::ng-deep .lux-input-row .lux-input-prefix-container,.lux-form-control ::ng-deep .lux-input-row .lux-input-suffix-container{width:auto;white-space:nowrap}.lux-form-control ::ng-deep .lux-input-row .lux-input-prefix-container ::ng-deep i,.lux-form-control ::ng-deep .lux-input-row .lux-input-prefix-container ::ng-deep mat-icon,.lux-form-control ::ng-deep .lux-input-row .lux-input-suffix-container ::ng-deep i,.lux-form-control ::ng-deep .lux-input-row .lux-input-suffix-container ::ng-deep mat-icon{padding:0!important;margin:0;font-size:1em}.lux-form-control ::ng-deep mat-datepicker-toggle{height:18px}.lux-form-control ::ng-deep mat-datepicker-toggle button{height:18px;width:18px}.lux-form-control ::ng-deep mat-datepicker-toggle button .mat-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;height:18px}.lux-form-control ::ng-deep mat-datepicker-toggle button .mat-button-wrapper svg{height:18px;width:18px}.lux-form-control ::ng-deep mat-checkbox .mat-checkbox-label,.lux-form-control ::ng-deep mat-checkbox .mat-slide-toggle-label,.lux-form-control ::ng-deep mat-slide-toggle .mat-checkbox-label,.lux-form-control ::ng-deep mat-slide-toggle .mat-slide-toggle-label{height:18px;line-height:18px;font-size:15px}.lux-form-control ::ng-deep .mat-checkbox-layout{cursor:inherit;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;white-space:nowrap;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;vertical-align:top}.lux-form-control ::ng-deep mat-radio-button{height:21px;font-size:15px}.lux-form-control ::ng-deep mat-radio-button .mat-radio-label{vertical-align:unset;-webkit-box-align:end;-ms-flex-align:end;align-items:end}.lux-form-control ::ng-deep mat-slider.mat-slider-horizontal{height:30px}.lux-form-control ::ng-deep mat-select{height:24px}.lux-form-control ::ng-deep mat-select .mat-select-trigger{line-height:18px}.lux-form-control ::ng-deep mat-select .mat-select-trigger .mat-select-value{font-size:15px}.lux-form-control ::ng-deep .lux-label,.lux-form-control ::ng-deep mat-error,.lux-form-control ::ng-deep mat-hint{font-size:12px!important}.lux-form-control-error .lux-form-control-label>*{color:#b01211!important}.lux-form-control-error .lux-form-control-container{border-color:#b01211!important}.lux-form-control-error .lux-form-control-misc>*{color:#b01211!important}.lux-form-control-disabled .lux-form-control-container{color:rgba(0,0,0,.38)!important}.lux-form-control-disabled .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:1px dashed rgba(0,0,0,.38)}:host:not(.lux-form-control-scalable-height) .lux-form-control-container{max-height:30px}:host.lux-form-control-borderless .lux-form-control-container{background:unset!important}:host.lux-form-control-borderless .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:unset!important}::ng-deep .lux-form-control-readonly{pointer-events:none}"]
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], LuxFormControlComponent);
        return LuxFormControlComponent;
    }());

    var LuxTagIdDirective = /** @class */ (function () {
        function LuxTagIdDirective(elementRef, renderer, componentsConfigService) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.componentsConfigService = componentsConfigService;
        }
        LuxTagIdDirective_1 = LuxTagIdDirective;
        LuxTagIdDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.configSubscription = this.componentsConfigService.config.subscribe(function (newConfig) {
                _this.generateLuxTagIds = newConfig.generateLuxTagIds;
            });
        };
        LuxTagIdDirective.prototype.ngAfterViewInit = function () {
            if (this.generateLuxTagIds) {
                var luxComponent = this.findLuxComponent(this.elementRef.nativeElement);
                if (luxComponent) {
                    var newTagId = this.luxTagId;
                    if (!newTagId) {
                        newTagId = this.getLuxTagId(luxComponent);
                    }
                    if (newTagId) {
                        newTagId = this.mergeTagIds(this.getLuxTagIdParent(luxComponent.parentElement, ''), luxComponent.nodeName + LuxTagIdDirective_1.sepComponent + newTagId);
                        newTagId = newTagId.toLowerCase();
                        this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                    }
                    else {
                        var usedLabel = false;
                        if (luxComponent.getAttribute('luxLabel')) {
                            newTagId = this.mergeTagIds(luxComponent.getAttribute('luxLabel'), newTagId);
                            newTagId = newTagId.toLowerCase();
                            this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                            usedLabel = true;
                        }
                        else if (luxComponent.getAttribute('ng-reflect-lux-label')) {
                            newTagId = this.mergeTagIds(luxComponent.getAttribute('ng-reflect-lux-label'), newTagId);
                            newTagId = newTagId.toLowerCase();
                            this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                            usedLabel = true;
                        }
                        else if (luxComponent.getAttribute('ng-reflect-label')) {
                            newTagId = this.mergeTagIds(luxComponent.getAttribute('ng-reflect-label'), newTagId);
                            newTagId = newTagId.toLowerCase();
                            this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                            usedLabel = true;
                        }
                        else if (luxComponent.getElementsByClassName('lux-form-label')[0]) {
                            newTagId = this.mergeTagIds(luxComponent.getElementsByClassName('lux-form-label')[0].textContent.trim(), newTagId);
                            newTagId = newTagId.toLowerCase();
                            this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                            usedLabel = true;
                        }
                        if (!usedLabel) {
                            console.warn('Dem Tag "' +
                                this.getNodeName(luxComponent) +
                                '(' +
                                this.getParentPath(luxComponent.parentElement, '') +
                                ')' +
                                '" fehlt das luxTagId-Attribut. Dieses Attribut wird für die automatischen Tests benötigt.');
                        }
                    }
                }
            }
        };
        LuxTagIdDirective.prototype.ngOnDestroy = function () {
            this.configSubscription.unsubscribe();
        };
        LuxTagIdDirective.prototype.getParentPath = function (element, currentTagId) {
            if (element && element.parentElement) {
                return this.getParentPath(element.parentElement, currentTagId + '.' + this.getNodeName(element.parentElement));
            }
            return currentTagId;
        };
        LuxTagIdDirective.prototype.getLuxTagIdParent = function (element, currentTagId) {
            if (element) {
                var newTagId = currentTagId;
                if (element.hasAttribute('luxTagId')) {
                    newTagId = this.mergeTagIds('luxTagId', newTagId);
                }
                else if (element.hasAttribute(LuxTagIdDirective_1.luxTagIdAttrName)) {
                    newTagId = this.mergeTagIds(element.getAttribute(LuxTagIdDirective_1.luxTagIdAttrName), newTagId);
                }
                else if (element.hasAttribute('luxcontrolbinding')) {
                    newTagId = this.mergeTagIds(element.getAttribute('luxcontrolbinding'), newTagId);
                }
                else if (element.hasAttribute('formgroupname')) {
                    newTagId = this.mergeTagIds('formgroup' + LuxTagIdDirective_1.sepComponent + element.getAttribute('formgroupname'), newTagId);
                }
                return this.getLuxTagIdParent(element.parentElement, newTagId);
            }
            return currentTagId;
        };
        LuxTagIdDirective.prototype.mergeTagIds = function (tagId1, tagId2) {
            var tagId;
            if (!LuxUtil.isEmpty(tagId1) && !LuxUtil.isEmpty(tagId2)) {
                tagId = tagId1 + LuxTagIdDirective_1.sepParent + tagId2;
            }
            else if (!LuxUtil.isEmpty(tagId1) && LuxUtil.isEmpty(tagId2)) {
                tagId = tagId1;
            }
            else if (LuxUtil.isEmpty(tagId1) && !LuxUtil.isEmpty(tagId2)) {
                tagId = tagId2;
            }
            else {
                tagId = '';
            }
            return tagId;
        };
        LuxTagIdDirective.prototype.getLuxTagId = function (element) {
            var newId = '';
            if (element) {
                if (element.hasAttribute('luxTagId')) {
                    newId = element.getAttribute('luxTagId');
                }
                else if (element.hasAttribute(LuxTagIdDirective_1.luxTagIdAttrName)) {
                    newId = element.getAttribute(LuxTagIdDirective_1.luxTagIdAttrName);
                }
                else if (element.hasAttribute('luxcontrolbinding')) {
                    newId = element.getAttribute('luxcontrolbinding');
                }
                else if (element.hasAttribute('formgroupname')) {
                    newId = element.getAttribute('formgroupname');
                }
            }
            return newId;
        };
        LuxTagIdDirective.prototype.findLuxComponent = function (element) {
            if (element) {
                var nodeName = this.getNodeName(element);
                if (nodeName && nodeName.startsWith('lux-'.toUpperCase()) && nodeName !== luxFormControlSelektor.toUpperCase()) {
                    return element;
                }
                else {
                    return this.findLuxComponent(element.parentElement);
                }
            }
            return null;
        };
        LuxTagIdDirective.prototype.getNodeName = function (element) {
            return element && element.nodeName ? element.nodeName : '';
        };
        var LuxTagIdDirective_1;
        LuxTagIdDirective.luxTagIdAttrName = 'data-luxtagid';
        LuxTagIdDirective.sepParent = '.';
        LuxTagIdDirective.sepComponent = '#';
        LuxTagIdDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTagIdDirective.prototype, "luxTagId", void 0);
        LuxTagIdDirective = LuxTagIdDirective_1 = __decorate([
            core.Directive({
                selector: '[luxTagIdHandler]'
            }),
            __metadata("design:paramtypes", [core.ElementRef,
                core.Renderer2,
                LuxComponentsConfigService])
        ], LuxTagIdDirective);
        return LuxTagIdDirective;
    }());

    var LuxTooltipDirective = /** @class */ (function (_super) {
        __extends(LuxTooltipDirective, _super);
        function LuxTooltipDirective(luxOverlay, luxElementRef, luxScrollDispatcher, luxViewContainerRef, luxNgZone, luxPlatform, luxAriaDescriber, luxFocusMonitor, luxScrollStrategy, luxDir, luxDefaultOptions) {
            var _this = _super.call(this, luxOverlay, luxElementRef, luxScrollDispatcher, luxViewContainerRef, luxNgZone, luxPlatform, luxAriaDescriber, luxFocusMonitor, luxScrollStrategy, luxDir, luxDefaultOptions) || this;
            _this.luxOverlay = luxOverlay;
            _this.luxElementRef = luxElementRef;
            _this.luxScrollDispatcher = luxScrollDispatcher;
            _this.luxViewContainerRef = luxViewContainerRef;
            _this.luxNgZone = luxNgZone;
            _this.luxPlatform = luxPlatform;
            _this.luxAriaDescriber = luxAriaDescriber;
            _this.luxFocusMonitor = luxFocusMonitor;
            _this.luxScrollStrategy = luxScrollStrategy;
            _this.luxDir = luxDir;
            _this.luxDefaultOptions = luxDefaultOptions;
            _this.luxTooltip = '???';
            _this.luxTooltipHideDelay = 0;
            _this.luxTooltipShowDelay = 0;
            _this.luxTooltipPosition = 'above';
            _this.luxTooltipDisabled = false;
            return _this;
        }
        LuxTooltipDirective.prototype._handleLongPress = function () {
            _super.prototype.show.call(this, this.luxTooltipShowDelay);
        };
        LuxTooltipDirective.prototype._handleKeydown = function (event) {
            _super.prototype._handleKeydown.call(this, event);
        };
        LuxTooltipDirective.prototype._handleTouchend = function () {
            _super.prototype._handleTouchend.call(this);
        };
        LuxTooltipDirective.prototype.ngOnChanges = function (simpleChanges) {
            this.message = this.luxTooltip;
            this.hideDelay = this.luxTooltipHideDelay;
            this.showDelay = this.luxTooltipShowDelay;
            this.position = this.luxTooltipPosition;
            this.disabled = this.luxTooltipDisabled;
        };
        LuxTooltipDirective.ctorParameters = function () { return [
            { type: overlay.Overlay },
            { type: core.ElementRef },
            { type: scrolling.ScrollDispatcher },
            { type: core.ViewContainerRef },
            { type: core.NgZone },
            { type: platform.Platform },
            { type: a11y.AriaDescriber },
            { type: a11y.FocusMonitor },
            { type: undefined, decorators: [{ type: core.Inject, args: [material.MAT_TOOLTIP_SCROLL_STRATEGY,] }] },
            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [material.MAT_TOOLTIP_DEFAULT_OPTIONS,] }] }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTooltipDirective.prototype, "luxTooltip", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTooltipDirective.prototype, "luxTooltipHideDelay", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTooltipDirective.prototype, "luxTooltipShowDelay", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTooltipDirective.prototype, "luxTooltipPosition", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTooltipDirective.prototype, "luxTooltipDisabled", void 0);
        __decorate([
            core.HostListener('longpress'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], LuxTooltipDirective.prototype, "_handleLongPress", null);
        __decorate([
            core.HostListener('keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], LuxTooltipDirective.prototype, "_handleKeydown", null);
        __decorate([
            core.HostListener('touchend'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], LuxTooltipDirective.prototype, "_handleTouchend", null);
        LuxTooltipDirective = __decorate([
            core.Directive({
                selector: '[luxTooltip]',
                exportAs: 'luxTooltip'
            }),
            __param(8, core.Inject(material.MAT_TOOLTIP_SCROLL_STRATEGY)),
            __param(9, core.Optional()),
            __param(10, core.Optional()),
            __param(10, core.Inject(material.MAT_TOOLTIP_DEFAULT_OPTIONS)),
            __metadata("design:paramtypes", [overlay.Overlay,
                core.ElementRef,
                scrolling.ScrollDispatcher,
                core.ViewContainerRef,
                core.NgZone,
                platform.Platform,
                a11y.AriaDescriber,
                a11y.FocusMonitor, Object, bidi.Directionality, Object])
        ], LuxTooltipDirective);
        return LuxTooltipDirective;
    }(material.MatTooltip));

    var LuxTabIndexDirective = /** @class */ (function () {
        function LuxTabIndexDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.changes$ = new rxjs.ReplaySubject(1);
            this.luxTabIndex = '0';
            this.luxApplyToParent = false;
            this.luxApplyToChildren = true;
            this.luxPotentialChildren = ['input', 'textarea', 'a', 'button', 'mat-select'];
        }
        LuxTabIndexDirective.prototype.ngOnChanges = function (simpleChanges) {
            this.changes$.next(simpleChanges);
        };
        LuxTabIndexDirective.prototype.ngAfterViewInit = function () {
            this.updateElementsWithTabIndex();
            // Dadurch verhindern wir, dass Changes vor afterViewInit zu etwaigen Fehlern führen könnten und erst danach aufgelöst werden
            this.changesSubscription = this.changes$.subscribe(this.onChanges.bind(this));
        };
        LuxTabIndexDirective.prototype.ngOnDestroy = function () {
            if (this.changesSubscription) {
                this.changesSubscription.unsubscribe();
            }
        };
        /**
         * Eigener Listener für Änderungen, der erst nach dem AfterViewInit-Lifecycle greift.
         * Sicherheitshalber, um evtl. noch unaufgelösten Elementen zu entgehen.
         * @param simpleChanges
         */
        LuxTabIndexDirective.prototype.onChanges = function (simpleChanges) {
            if (simpleChanges.luxTabIndex) {
                this.updateElementsWithTabIndex();
            }
        };
        /**
         * Aktualisiert den Tabindex für
         *  - das Zielelement, wenn luxApplyToParent === true (default = false) ist
         *  - potentielle Kindelemente, wenn luxApplyToChildren === true (default) ist
         */
        LuxTabIndexDirective.prototype.updateElementsWithTabIndex = function () {
            var _this = this;
            if (this.luxApplyToParent) {
                this.setTabIndexForElement(this.elementRef.nativeElement);
            }
            if (this.luxApplyToChildren) {
                this.luxPotentialChildren.forEach(function (childQuery) { return _this.setTabIndexByQuery(childQuery); });
            }
        };
        LuxTabIndexDirective.prototype.setTabIndexByQuery = function (elementQuery) {
            var elements = this.elementRef.nativeElement.querySelectorAll(elementQuery);
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                this.setTabIndexForElement(element);
            }
        };
        LuxTabIndexDirective.prototype.setTabIndexForElement = function (element) {
            this.renderer.setAttribute(element, 'tabIndex', this.luxTabIndex);
        };
        LuxTabIndexDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTabIndexDirective.prototype, "luxTabIndex", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTabIndexDirective.prototype, "luxApplyToParent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTabIndexDirective.prototype, "luxApplyToChildren", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], LuxTabIndexDirective.prototype, "luxPotentialChildren", void 0);
        LuxTabIndexDirective = __decorate([
            core.Directive({
                selector: '[luxTabIndex]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxTabIndexDirective);
        return LuxTabIndexDirective;
    }());

    // @dynamic Erklärung steht in der Datei "lux-decorators.ts".
    var LuxRippleDirective = /** @class */ (function (_super) {
        __extends(LuxRippleDirective, _super);
        function LuxRippleDirective(configService, luxElementRef, luxNgZone, luxPlatform, luxGlobalOptions, luxAnimationMode) {
            var _this = _super.call(this, luxElementRef, luxNgZone, luxPlatform, luxGlobalOptions, luxAnimationMode) || this;
            _this.configService = configService;
            _this.luxElementRef = luxElementRef;
            _this.luxNgZone = luxNgZone;
            _this.luxPlatform = luxPlatform;
            _this.luxGlobalOptions = luxGlobalOptions;
            _this.luxAnimationMode = luxAnimationMode;
            _this._luxRippleUnbounded = false;
            _this._luxRippleCentered = false;
            _this._luxRippleDisabled = false;
            _this._luxRippleRadius = 0;
            _this._luxRippleEnterDuration = 0;
            _this._luxRippleExitDuration = 0;
            return _this;
        }
        Object.defineProperty(LuxRippleDirective.prototype, "luxRippleColor", {
            get: function () {
                return this._luxRippleColor;
            },
            set: function (value) {
                this._luxRippleColor = value;
                this.color = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxRippleDirective.prototype, "luxRippleUnbounded", {
            get: function () {
                return this._luxRippleUnbounded;
            },
            set: function (value) {
                this._luxRippleUnbounded = value;
                this.unbounded = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxRippleDirective.prototype, "luxRippleCentered", {
            get: function () {
                return this._luxRippleCentered;
            },
            set: function (value) {
                this._luxRippleCentered = value;
                this.centered = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxRippleDirective.prototype, "luxRippleRadius", {
            get: function () {
                return this._luxRippleRadius;
            },
            set: function (value) {
                this._luxRippleRadius = value;
                this.radius = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxRippleDirective.prototype, "luxRippleDisabled", {
            get: function () {
                return this._luxRippleDisabled;
            },
            set: function (value) {
                this._luxRippleDisabled = value;
                this.disabled = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxRippleDirective.prototype, "luxRippleEnterDuration", {
            get: function () {
                return this._luxRippleEnterDuration;
            },
            set: function (value) {
                this._luxRippleEnterDuration = value;
                if (!this.animation) {
                    this.animation = {};
                }
                this.animation.exitDuration = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxRippleDirective.prototype, "luxRippleExitDuration", {
            get: function () {
                return this._luxRippleExitDuration;
            },
            set: function (value) {
                this._luxRippleExitDuration = value;
                if (!this.animation) {
                    this.animation = {};
                }
                this.animation.exitDuration = value;
            },
            enumerable: true,
            configurable: true
        });
        LuxRippleDirective.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            // Globale Konfiguration für die LUX-Ripples auslesen und die Component entsprechend aktualisieren
            this.configSubscription = this.configService.config.subscribe(function (_a) {
                var rippleConfiguration = _a.rippleConfiguration;
                if (rippleConfiguration) {
                    _this.luxRippleEnterDuration = rippleConfiguration.enterDuration;
                    _this.luxRippleExitDuration = rippleConfiguration.exitDuration;
                    _this.luxRippleColor = rippleConfiguration.color;
                    _this.luxRippleCentered = rippleConfiguration.centered;
                    _this.luxRippleDisabled = rippleConfiguration.disabled;
                    _this.luxRippleRadius = rippleConfiguration.radius;
                    _this.luxRippleUnbounded = rippleConfiguration.unbounded;
                }
            });
        };
        LuxRippleDirective.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            if (this.configSubscription) {
                this.configSubscription.unsubscribe();
            }
        };
        LuxRippleDirective.ctorParameters = function () { return [
            { type: LuxComponentsConfigService },
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: platform.Platform },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [material.MAT_RIPPLE_GLOBAL_OPTIONS,] }] },
            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxRippleDirective.prototype, "luxRippleColor", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxRippleDirective.prototype, "luxRippleUnbounded", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxRippleDirective.prototype, "luxRippleCentered", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxRippleDirective.prototype, "luxRippleRadius", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxRippleDirective.prototype, "luxRippleDisabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxRippleDirective.prototype, "luxRippleEnterDuration", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxRippleDirective.prototype, "luxRippleExitDuration", null);
        LuxRippleDirective = __decorate([
            core.Directive({
                selector: '[luxRipple], [lux-ripple]',
                host: {
                    class: 'mat-ripple lux-ripple',
                    '[class.mat-ripple-unbounded]': 'unbounded'
                }
            }),
            __param(4, core.Optional()), __param(4, core.Inject(material.MAT_RIPPLE_GLOBAL_OPTIONS)),
            __param(5, core.Optional()), __param(5, core.Inject(animations.ANIMATION_MODULE_TYPE)),
            __metadata("design:paramtypes", [LuxComponentsConfigService,
                core.ElementRef,
                core.NgZone,
                platform.Platform, Object, String])
        ], LuxRippleDirective);
        return LuxRippleDirective;
    }(material.MatRipple));

    var LuxAriaExpandedDirective = /** @class */ (function (_super) {
        __extends(LuxAriaExpandedDirective, _super);
        function LuxAriaExpandedDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-expanded') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            if (!_this.luxAriaExpandedSelector) {
                var tagName = elementRef.nativeElement.tagName.toLowerCase();
                if (tagName === 'lux-button') {
                    _this.luxAriaExpandedSelector = 'button';
                }
            }
            return _this;
        }
        Object.defineProperty(LuxAriaExpandedDirective.prototype, "luxAriaExpanded", {
            get: function () {
                return this._luxAriaExpanded;
            },
            set: function (expanded) {
                this._luxAriaExpanded = expanded;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaExpandedDirective.prototype.getSelector = function () {
            return this.luxAriaExpandedSelector;
        };
        LuxAriaExpandedDirective.prototype.getValue = function () {
            return this._luxAriaExpanded;
        };
        LuxAriaExpandedDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaExpandedDirective.prototype, "luxAriaExpandedSelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaExpandedDirective.prototype, "luxAriaExpanded", null);
        LuxAriaExpandedDirective = __decorate([
            core.Directive({
                selector: '[luxAriaExpanded]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaExpandedDirective);
        return LuxAriaExpandedDirective;
    }(LuxAriaBase));

    var LuxAriaRoleDirective = /** @class */ (function (_super) {
        __extends(LuxAriaRoleDirective, _super);
        function LuxAriaRoleDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'role') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        Object.defineProperty(LuxAriaRoleDirective.prototype, "luxAriaRole", {
            get: function () {
                return this._luxAriaRole;
            },
            set: function (role) {
                this._luxAriaRole = role;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaRoleDirective.prototype.getSelector = function () {
            return this.luxAriaRoleSelector;
        };
        LuxAriaRoleDirective.prototype.getValue = function () {
            return this._luxAriaRole;
        };
        LuxAriaRoleDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaRoleDirective.prototype, "luxAriaRoleSelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaRoleDirective.prototype, "luxAriaRole", null);
        LuxAriaRoleDirective = __decorate([
            core.Directive({
                selector: '[luxAriaRole]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaRoleDirective);
        return LuxAriaRoleDirective;
    }(LuxAriaBase));

    var LuxAriaHaspopupDirective = /** @class */ (function (_super) {
        __extends(LuxAriaHaspopupDirective, _super);
        function LuxAriaHaspopupDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-haspopup') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            if (!_this.luxAriaHasPopupSelector) {
                var tagName = elementRef.nativeElement.tagName.toLowerCase();
                if (tagName === 'lux-button') {
                    _this.luxAriaHasPopupSelector = 'button';
                }
                else if (tagName === 'lux-app-header-action-nav-item') {
                    _this.luxAriaHasPopupSelector = 'button';
                }
            }
            return _this;
        }
        Object.defineProperty(LuxAriaHaspopupDirective.prototype, "luxAriaHasPopup", {
            get: function () {
                return this._luxAriaHasPopup;
            },
            set: function (hasPopup) {
                this._luxAriaHasPopup = hasPopup;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaHaspopupDirective.prototype.getSelector = function () {
            return this.luxAriaHasPopupSelector;
        };
        LuxAriaHaspopupDirective.prototype.getValue = function () {
            return this._luxAriaHasPopup;
        };
        LuxAriaHaspopupDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaHaspopupDirective.prototype, "luxAriaHasPopupSelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaHaspopupDirective.prototype, "luxAriaHasPopup", null);
        LuxAriaHaspopupDirective = __decorate([
            core.Directive({
                selector: '[luxAriaHasPopup]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaHaspopupDirective);
        return LuxAriaHaspopupDirective;
    }(LuxAriaBase));

    var LuxAriaHiddenDirective = /** @class */ (function (_super) {
        __extends(LuxAriaHiddenDirective, _super);
        function LuxAriaHiddenDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-hidden') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        Object.defineProperty(LuxAriaHiddenDirective.prototype, "luxAriaHidden", {
            get: function () {
                return this._luxAriaHidden;
            },
            set: function (hidden) {
                this._luxAriaHidden = hidden;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaHiddenDirective.prototype.getSelector = function () {
            return this.luxAriaHiddenSelector;
        };
        LuxAriaHiddenDirective.prototype.getValue = function () {
            return this._luxAriaHidden;
        };
        LuxAriaHiddenDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaHiddenDirective.prototype, "luxAriaHiddenSelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaHiddenDirective.prototype, "luxAriaHidden", null);
        LuxAriaHiddenDirective = __decorate([
            core.Directive({
                selector: '[luxAriaHidden]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaHiddenDirective);
        return LuxAriaHiddenDirective;
    }(LuxAriaBase));

    var LuxAriaDescribedbyDirective = /** @class */ (function (_super) {
        __extends(LuxAriaDescribedbyDirective, _super);
        function LuxAriaDescribedbyDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-describedby') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            if (!_this.luxAriaDescribedbySelector) {
                var tagName = elementRef.nativeElement.tagName.toLowerCase();
                if (tagName === 'lux-button') {
                    _this.luxAriaDescribedbySelector = 'button';
                }
                else if (tagName === 'lux-app-header-action-nav-item') {
                    _this.luxAriaDescribedbySelector = 'button';
                }
            }
            return _this;
        }
        Object.defineProperty(LuxAriaDescribedbyDirective.prototype, "luxAriaDescribedby", {
            get: function () {
                return this._luxAriaDescribedby;
            },
            set: function (describedby) {
                this._luxAriaDescribedby = describedby;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaDescribedbyDirective.prototype.getSelector = function () {
            return this.luxAriaDescribedbySelector;
        };
        LuxAriaDescribedbyDirective.prototype.getValue = function () {
            return this._luxAriaDescribedby;
        };
        LuxAriaDescribedbyDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaDescribedbyDirective.prototype, "luxAriaDescribedbySelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaDescribedbyDirective.prototype, "luxAriaDescribedby", null);
        LuxAriaDescribedbyDirective = __decorate([
            core.Directive({
                selector: '[luxAriaDescribedby]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaDescribedbyDirective);
        return LuxAriaDescribedbyDirective;
    }(LuxAriaBase));

    var LuxAriaInvalidDirective = /** @class */ (function (_super) {
        __extends(LuxAriaInvalidDirective, _super);
        function LuxAriaInvalidDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-invalid') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        Object.defineProperty(LuxAriaInvalidDirective.prototype, "luxAriaInvalid", {
            get: function () {
                return this._luxAriaInvalid;
            },
            set: function (invalid) {
                this._luxAriaInvalid = invalid;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaInvalidDirective.prototype.getSelector = function () {
            return this.luxAriaInvalidSelector;
        };
        LuxAriaInvalidDirective.prototype.getValue = function () {
            return this._luxAriaInvalid;
        };
        LuxAriaInvalidDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaInvalidDirective.prototype, "luxAriaInvalidSelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaInvalidDirective.prototype, "luxAriaInvalid", null);
        LuxAriaInvalidDirective = __decorate([
            core.Directive({
                selector: '[luxAriaInvalid]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaInvalidDirective);
        return LuxAriaInvalidDirective;
    }(LuxAriaBase));

    var LuxAriaRequiredDirective = /** @class */ (function (_super) {
        __extends(LuxAriaRequiredDirective, _super);
        function LuxAriaRequiredDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-required') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            return _this;
        }
        Object.defineProperty(LuxAriaRequiredDirective.prototype, "luxAriaRequired", {
            get: function () {
                return this._luxAriaRequired;
            },
            set: function (required) {
                this._luxAriaRequired = required;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaRequiredDirective.prototype.getSelector = function () {
            return this.luxAriaRequiredSelector;
        };
        LuxAriaRequiredDirective.prototype.getValue = function () {
            return this._luxAriaRequired;
        };
        LuxAriaRequiredDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaRequiredDirective.prototype, "luxAriaRequiredSelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaRequiredDirective.prototype, "luxAriaRequired", null);
        LuxAriaRequiredDirective = __decorate([
            core.Directive({
                selector: '[luxAriaRequired]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaRequiredDirective);
        return LuxAriaRequiredDirective;
    }(LuxAriaBase));

    var LuxAriaLabelledbyDirective = /** @class */ (function (_super) {
        __extends(LuxAriaLabelledbyDirective, _super);
        function LuxAriaLabelledbyDirective(elementRef, renderer) {
            var _this = _super.call(this, elementRef, renderer, 'aria-labelledby') || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            if (!_this.luxAriaLabelledbySelector) {
                var tagName = elementRef.nativeElement.tagName.toLowerCase();
                if (tagName === 'lux-button') {
                    _this.luxAriaLabelledbySelector = 'button';
                }
                else if (tagName === 'lux-app-header-action-nav-item') {
                    _this.luxAriaLabelledbySelector = 'button';
                }
            }
            return _this;
        }
        Object.defineProperty(LuxAriaLabelledbyDirective.prototype, "luxAriaLabelledby", {
            get: function () {
                return this._luxAriaLabelledby;
            },
            set: function (labelledby) {
                this._luxAriaLabelledby = labelledby;
                this.renderAria();
            },
            enumerable: true,
            configurable: true
        });
        LuxAriaLabelledbyDirective.prototype.getSelector = function () {
            return this.luxAriaLabelledbySelector;
        };
        LuxAriaLabelledbyDirective.prototype.getValue = function () {
            return this._luxAriaLabelledby;
        };
        LuxAriaLabelledbyDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAriaLabelledbyDirective.prototype, "luxAriaLabelledbySelector", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAriaLabelledbyDirective.prototype, "luxAriaLabelledby", null);
        LuxAriaLabelledbyDirective = __decorate([
            core.Directive({
                selector: '[luxAriaLabelledby]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxAriaLabelledbyDirective);
        return LuxAriaLabelledbyDirective;
    }(LuxAriaBase));

    var LuxBadgeNotificationDirective = /** @class */ (function (_super) {
        __extends(LuxBadgeNotificationDirective, _super);
        function LuxBadgeNotificationDirective(luxNgZone, luxElementRef, luxAriaDescriber, luxRenderer) {
            var _this = _super.call(this, luxNgZone, luxElementRef, luxAriaDescriber, luxRenderer) || this;
            _this.luxNgZone = luxNgZone;
            _this.luxElementRef = luxElementRef;
            _this.luxAriaDescriber = luxAriaDescriber;
            _this.luxRenderer = luxRenderer;
            _this.luxBadgeColor = 'default';
            _this.luxBadgeSize = 'medium';
            _this.luxBadgePosition = 'above after';
            _this.luxBadgeDisabled = false;
            _this.luxBadgeHidden = false;
            _this.luxBadgeOverlap = true;
            luxElementRef.nativeElement.classList.add('lux-badge-notification');
            return _this;
        }
        LuxBadgeNotificationDirective.prototype.ngOnChanges = function (changes) {
            this.updateContent(this.luxBadgeNotification);
            this.color = this.luxBadgeColor;
            this.size = this.luxBadgeSize;
            this.position = this.luxBadgePosition;
            this.disabled = this.luxBadgeDisabled;
            this.hidden = !!this.luxBadgeHidden;
            this.overlap = this.luxBadgeOverlap;
        };
        LuxBadgeNotificationDirective.prototype.ngDoCheck = function () {
            this.checkMaxNumber();
        };
        LuxBadgeNotificationDirective.prototype.updateContent = function (value) {
            var newContent = value;
            if (typeof newContent === 'number') {
                // Wenn der Wert eine Zahl ist, muss dieser für die Weiterverarbeitung in einen String umgewandelt werden.
                newContent = '' + newContent;
            }
            else if (!newContent) {
                // Die Werte "undefined" und "null" zum Leerstring umwandeln,
                // damit diese nicht angezeigt werden.
                newContent = '';
            }
            this.content = newContent;
            this.description = newContent;
        };
        LuxBadgeNotificationDirective.prototype.isHidden = function () {
            return this.hidden || !this.content;
        };
        /**
         * Prüft ob der Inhalt eine Zahl, eine Maximalzahl gegeben und diese überschritten worden ist.
         * Wenn ja, wird der Inhalt mit einem "+" abgekürzt.
         */
        LuxBadgeNotificationDirective.prototype.checkMaxNumber = function () {
            if (this.luxBadgeNotification && this.luxBadgeCap && LuxUtil.isNumber(this.luxBadgeNotification)) {
                if (+this.luxBadgeNotification > this.luxBadgeCap) {
                    this.updateContent(this.luxBadgeCap + '+');
                }
            }
        };
        LuxBadgeNotificationDirective.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: core.ElementRef },
            { type: a11y.AriaDescriber },
            { type: core.Renderer2, decorators: [{ type: core.Optional }] }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgeNotification", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgeColor", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgeSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgePosition", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgeDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgeHidden", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgeOverlap", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxBadgeNotificationDirective.prototype, "luxBadgeCap", void 0);
        LuxBadgeNotificationDirective = __decorate([
            core.Directive({
                selector: '[luxBadgeNotification], [lux-badge-notification]',
                host: {
                    class: 'mat-badge',
                    '[class.mat-badge-overlap]': 'overlap',
                    '[class.mat-badge-above]': 'isAbove()',
                    '[class.mat-badge-below]': '!isAbove()',
                    '[class.mat-badge-before]': '!isAfter()',
                    '[class.mat-badge-after]': 'isAfter()',
                    '[class.mat-badge-small]': 'size === "small"',
                    '[class.mat-badge-medium]': 'size === "medium"',
                    '[class.mat-badge-large]': 'size === "large"',
                    '[class.mat-badge-hidden]': 'hidden || isHidden()',
                    '[class.mat-badge-disabled]': 'disabled',
                    '[class.lux-badge-color-default]': 'color !== "primary" && color !== "warn" && color !== "accent"'
                }
            }),
            __param(3, core.Optional()),
            __metadata("design:paramtypes", [core.NgZone,
                core.ElementRef,
                a11y.AriaDescriber,
                core.Renderer2])
        ], LuxBadgeNotificationDirective);
        return LuxBadgeNotificationDirective;
    }(material.MatBadge));

    var LuxDirectivesModule = /** @class */ (function () {
        function LuxDirectivesModule() {
        }
        LuxDirectivesModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, material.MatTooltipModule, material.MatBadgeModule, material.MatRippleModule, LuxComponentsConfigModule],
                declarations: [
                    LuxInfiniteScrollDirective,
                    LuxTagIdDirective,
                    LuxTooltipDirective,
                    LuxTabIndexDirective,
                    LuxRippleDirective,
                    LuxTabIndexDirective,
                    LuxAriaLabelDirective,
                    LuxAriaExpandedDirective,
                    LuxAriaRoleDirective,
                    LuxAriaHaspopupDirective,
                    LuxAriaHiddenDirective,
                    LuxAriaDescribedbyDirective,
                    LuxAriaInvalidDirective,
                    LuxAriaRequiredDirective,
                    LuxAriaLabelledbyDirective,
                    LuxTabIndexDirective,
                    LuxBadgeNotificationDirective
                ],
                exports: [
                    LuxInfiniteScrollDirective,
                    LuxTagIdDirective,
                    LuxTooltipDirective,
                    LuxTabIndexDirective,
                    LuxAriaLabelDirective,
                    LuxAriaExpandedDirective,
                    LuxAriaRoleDirective,
                    LuxAriaHaspopupDirective,
                    LuxAriaHiddenDirective,
                    LuxAriaDescribedbyDirective,
                    LuxAriaInvalidDirective,
                    LuxAriaRequiredDirective,
                    LuxAriaLabelledbyDirective,
                    LuxTabIndexDirective,
                    LuxBadgeNotificationDirective,
                    LuxAriaLabelledbyDirective,
                    LuxTabIndexDirective,
                    LuxRippleDirective
                ]
            })
        ], LuxDirectivesModule);
        return LuxDirectivesModule;
    }());

    var LuxIconComponent = /** @class */ (function () {
        function LuxIconComponent() {
            this._luxPadding = '4px';
            this._backgroundCSSClass = '';
            this._fontCSSClass = '';
            this.currentIconSize = 1;
            this.styleMargin = '0';
            this.luxRounded = false;
        }
        LuxIconComponent_1 = LuxIconComponent;
        Object.defineProperty(LuxIconComponent.prototype, "luxMargin", {
            get: function () {
                return this.styleMargin;
            },
            // 'standard margin Werte z.B. '5px 4px 3px 2px'
            set: function (margin) {
                this.styleMargin = margin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxIconComponent.prototype, "luxPadding", {
            get: function () {
                return this._luxPadding;
            },
            // standard padding Werte z.B. '5px 4px 3px 2px'
            set: function (padding) {
                this._luxPadding = padding;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxIconComponent.prototype, "luxIconSize", {
            get: function () {
                return this._luxIconSize;
            },
            set: function (iconSizeValue) {
                this._luxIconSize = iconSizeValue;
                if (typeof this.luxIconSize === 'string' && this.luxIconSize.length === 2) {
                    this.currentIconSize = +this.luxIconSize.slice(0, 1);
                }
                else {
                    this.currentIconSize = 1;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxIconComponent.prototype, "luxIconName", {
            get: function () {
                return this._luxIconName;
            },
            set: function (iconNameValue) {
                if (iconNameValue) {
                    this._luxIconName = this.modifiyIconName(iconNameValue);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxIconComponent.prototype, "backgroundCSSClass", {
            get: function () {
                return this._backgroundCSSClass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxIconComponent.prototype, "fontCSSClass", {
            get: function () {
                return this._fontCSSClass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxIconComponent.prototype, "luxColor", {
            set: function (color) {
                if (exports.LuxBackgroundColorsEnum[color]) {
                    var result = LuxUtil.getColorsByBgColorsEnum(color);
                    this._backgroundCSSClass = result.backgroundCSSClass;
                    this._fontCSSClass = result.fontCSSClass;
                }
                else {
                    this._backgroundCSSClass = '';
                    this._fontCSSClass = '';
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Generiert aus dem mitgegebenen Wert einen String-Wert
         * der entweder als Font-Awesome Icon oder als Material-Icon
         * interpretiert werden kann.
         *
         * @param iconName, z.B. fas fa-cogs
         * @returns string
         */
        LuxIconComponent.prototype.modifiyIconName = function (iconName) {
            // Handelt es sich hier um ein Font-Awesome Icon?
            if (iconName.startsWith('fa')) {
                // feststellen, ob ein FA-Präfix vorliegt
                if (iconName.indexOf(LuxIconComponent_1.FA_BRAND) === -1 &&
                    iconName.indexOf(LuxIconComponent_1.FA_SOLID) === -1 &&
                    iconName.indexOf(LuxIconComponent_1.FA_REGULAR) === -1 &&
                    iconName.indexOf(LuxIconComponent_1.FA_LIGHT) === -1) {
                    // Wenn nicht, dann
                    iconName = 'fas ' + iconName;
                }
                this.isIconFA = true;
                return iconName;
            }
            this.isIconFA = false;
            // Ansonsten davon ausgehen das es ein Material Icon ist
            return iconName;
        };
        var LuxIconComponent_1;
        LuxIconComponent.FA_BRAND = 'fab ';
        LuxIconComponent.FA_SOLID = 'fas ';
        LuxIconComponent.FA_REGULAR = 'far ';
        LuxIconComponent.FA_LIGHT = 'fal ';
        __decorate([
            core.HostBinding('style.margin'),
            __metadata("design:type", String)
        ], LuxIconComponent.prototype, "styleMargin", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxIconComponent.prototype, "luxRounded", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxIconComponent.prototype, "luxMargin", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxIconComponent.prototype, "luxPadding", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxIconComponent.prototype, "luxIconSize", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxIconComponent.prototype, "luxIconName", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxIconComponent.prototype, "luxColor", null);
        LuxIconComponent = LuxIconComponent_1 = __decorate([
            core.Component({
                selector: 'lux-icon',
                template: "<ng-container [ngSwitch]=\"isIconFA\">\n  <!-- Wenn Font-Awesome-Icon -->\n  <ng-container *ngSwitchCase=\"true\">\n    <i\n      aria-hidden=\"true\"\n      [ngStyle]=\"{ padding: luxPadding }\"\n      [ngClass]=\"[\n        'lux-fa-icon',\n        luxIconName,\n        'fa-' + currentIconSize + 'x',\n        backgroundCSSClass,\n        fontCSSClass,\n        luxRounded ? 'lux-icon-rounded' : ''\n      ]\"\n    >\n    </i>\n  </ng-container>\n  <!-- Wenn Material-Icon -->\n  <ng-container *ngSwitchCase=\"false\">\n    <mat-icon\n      [ngStyle]=\"{ 'font-size': currentIconSize + 'em', padding: luxPadding }\"\n      [ngClass]=\"['lux-material-icon', backgroundCSSClass, fontCSSClass, luxRounded ? 'lux-icon-rounded' : '']\"\n    >\n      {{ luxIconName }}\n    </mat-icon>\n  </ng-container>\n</ng-container>\n",
                styles: [":host{position:relative;display:inline-block}.lux-material-icon,i.lux-fa-icon{text-align:center}.lux-icon-rounded{border-radius:.9em;width:1.3em;line-height:1.3em}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxIconComponent);
        return LuxIconComponent;
    }());

    var LuxImageComponent = /** @class */ (function () {
        function LuxImageComponent() {
            this.luxImageSrc = '';
            this.luxImageWidth = 'auto';
            this.luxImageHeight = 'auto';
            this.luxRawSrc = false;
        }
        LuxImageComponent.prototype.ngOnChanges = function (simpleChanges) {
            if (simpleChanges.luxImageSrc) {
                if (!this.luxRawSrc) {
                    this.updateImageSrc();
                }
            }
            else if (simpleChanges.luxRawSrc) {
                if (!this.luxRawSrc) {
                    this.updateImageSrc();
                }
            }
        };
        LuxImageComponent.prototype.ngOnInit = function () { };
        LuxImageComponent.prototype.updateImageSrc = function () {
            if (this.luxImageSrc) {
                // Pruefen ob es sich um ein externes Bild handelt
                if (this.luxImageSrc.startsWith('http')) {
                    this.sanitizeImageSrc();
                }
                else {
                    // Wenn nicht, auf den Assets-Ordner verweisen
                    if (this.luxImageSrc.indexOf('asset') === -1) {
                        this.luxImageSrc = 'assets/' + this.luxImageSrc;
                    }
                    this.sanitizeImageSrc();
                }
            }
        };
        LuxImageComponent.prototype.sanitizeImageSrc = function () {
            // Doppelte Slashes entfernen
            this.luxImageSrc = this.luxImageSrc.replace(/\/\/+/g, '/');
            // Fuehrende Slashes entfernen
            if (this.luxImageSrc.startsWith('/')) {
                this.luxImageSrc = this.luxImageSrc.slice(1, this.luxImageSrc.length);
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxImageComponent.prototype, "luxImageSrc", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxImageComponent.prototype, "luxImageWidth", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxImageComponent.prototype, "luxImageHeight", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxImageComponent.prototype, "luxRawSrc", void 0);
        LuxImageComponent = __decorate([
            core.Component({
                selector: 'lux-image',
                template: "<div>\n  <img [src]=\"luxImageSrc\" class=\"lux-image\" [ngStyle]=\"{ width: luxImageWidth, height: luxImageHeight }\" />\n</div>\n",
                styles: [":host{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;max-height:100%;max-width:100%}div{display:-webkit-box;display:-ms-flexbox;display:flex;max-height:100%;height:100%;width:100%}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxImageComponent);
        return LuxImageComponent;
    }());

    var LuxIconModule = /** @class */ (function () {
        function LuxIconModule() {
        }
        LuxIconModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, material.MatIconModule, flexLayout.FlexLayoutModule, LuxComponentsConfigModule],
                declarations: [LuxIconComponent, LuxImageComponent],
                exports: [LuxIconComponent, LuxImageComponent]
            })
        ], LuxIconModule);
        return LuxIconModule;
    }());

    /**
     * Base-Klasse der LuxActionComponents.
     *
     * Enthält die Inputs/Outputs, die allen Action-Components gleich sind.
     */
    var LuxActionComponentBaseClass = /** @class */ (function () {
        function LuxActionComponentBaseClass() {
            this.luxColor = '';
            this.luxIconAlignWithLabel = false;
            this.luxClicked = new core.EventEmitter();
        }
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxActionComponentBaseClass.prototype, "luxLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxActionComponentBaseClass.prototype, "luxColor", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxActionComponentBaseClass.prototype, "luxRaised", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxActionComponentBaseClass.prototype, "luxIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxActionComponentBaseClass.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxActionComponentBaseClass.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxActionComponentBaseClass.prototype, "luxRounded", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxActionComponentBaseClass.prototype, "luxIconAlignWithLabel", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxActionComponentBaseClass.prototype, "luxClicked", void 0);
        return LuxActionComponentBaseClass;
    }());

    var LuxButtonComponent = /** @class */ (function (_super) {
        __extends(LuxButtonComponent, _super);
        function LuxButtonComponent(elementRef, componentsConfigService) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.componentsConfigService = componentsConfigService;
            _this.iconSize = '2x';
            _this.luxType = 'button';
            return _this;
        }
        LuxButtonComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.configSubscription = this.componentsConfigService.config.subscribe(function () {
                // Hintergrund: LuxLink, LuxSideNavItem und LuxMenuItem benutzen alle unter der Haube
                // den LuxButton. Wenn diese nun als Ausnahmen für Uppercase in der Config eingetragen werden,
                // darf eine Uppercase-Einstellung für den LuxButton diese nicht überschreiben.
                // Deshalb prüft der LuxButton hier, ob er Teil einer dieser Komponenten ist.
                _this.detectParent();
            });
        };
        LuxButtonComponent.prototype.ngOnDestroy = function () {
            this.configSubscription.unsubscribe();
        };
        LuxButtonComponent.prototype.clicked = function (event) {
            this.luxClicked.emit(event);
        };
        LuxButtonComponent.prototype.detectParent = function () {
            var className = this.elementRef.nativeElement.className;
            var selector = 'lux-button';
            if (className.indexOf('lux-link') > -1) {
                selector = 'lux-link';
            }
            else if (className.indexOf('lux-side-nav-item') > -1) {
                selector = 'lux-side-nav-item';
            }
            else if (className.indexOf('lux-menu-item') > -1) {
                selector = 'lux-menu-item';
            }
            this.labelUppercase = this.componentsConfigService.isLabelUppercaseForSelector(selector);
        };
        LuxButtonComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxButtonComponent.prototype, "luxType", void 0);
        __decorate([
            core.HostBinding('class.lux-uppercase'),
            __metadata("design:type", Boolean)
        ], LuxButtonComponent.prototype, "labelUppercase", void 0);
        LuxButtonComponent = __decorate([
            core.Component({
                selector: 'lux-button',
                template: "<button\n  *ngIf=\"luxRaised && !luxRounded\"\n  mat-raised-button\n  [color]=\"luxColor\"\n  (click)=\"clicked($event)\"\n  [disabled]=\"luxDisabled\"\n  [type]=\"luxType\"\n  class=\"lux-button lux-bold lux-align-center\"\n  luxTagIdHandler\n  [luxTagId]=\"luxTagId\"\n  [ngClass]=\"{ 'lux-align-baseline': luxIconAlignWithLabel && !!luxIconName, 'lux-icon-button': !!luxIconName }\"\n  [attr.aria-label]=\"luxLabel ? luxLabel : ''\"\n>\n  <ng-container *ngTemplateOutlet=\"luxIconName ? iconTemplate : noIconTemplate\"></ng-container>\n  <span class=\"lux-button-label\" [ngClass]=\"{ 'lux-ml-3': !!luxIconName }\" *ngIf=\"luxLabel\">\n    {{ luxLabel }}\n  </span>\n</button>\n\n<button\n  *ngIf=\"!luxRaised && !luxRounded\"\n  mat-button\n  [color]=\"luxColor\"\n  (click)=\"clicked($event)\"\n  [disabled]=\"luxDisabled\"\n  [type]=\"luxType\"\n  class=\"lux-button lux-bold lux-align-center\"\n  luxTagIdHandler\n  [luxTagId]=\"luxTagId\"\n  [ngClass]=\"{ 'lux-align-baseline': luxIconAlignWithLabel && !!luxIconName, 'lux-icon-button': !!luxIconName }\"\n  [attr.aria-label]=\"luxLabel ? luxLabel : ''\"\n>\n  <ng-container *ngTemplateOutlet=\"luxIconName ? iconTemplate : noIconTemplate\"></ng-container>\n  <span class=\"lux-button-label\" [ngClass]=\"{ 'lux-ml-3': !!luxIconName }\" *ngIf=\"luxLabel\">\n    {{ luxLabel }}\n  </span>\n</button>\n\n<button\n  *ngIf=\"luxRounded\"\n  mat-fab\n  [color]=\"luxColor\"\n  (click)=\"clicked($event)\"\n  [disabled]=\"luxDisabled\"\n  [type]=\"luxType\"\n  class=\"lux-button lux-bold lux-align-center lux-button-rounded mat-elevation-z1\"\n  luxTagIdHandler\n  [luxTagId]=\"luxTagId\"\n  [ngClass]=\"{ 'lux-align-baseline': luxIconAlignWithLabel && !!luxIconName, 'lux-icon-button': !!luxIconName }\"\n  [attr.aria-label]=\"luxLabel ? luxLabel : ''\"\n>\n  <ng-container *ngTemplateOutlet=\"luxIconName ? iconTemplate : noIconTemplate\"></ng-container>\n  <span class=\"lux-button-label\" [ngClass]=\"{ 'lux-ml-3': !!luxIconName }\" *ngIf=\"luxLabel\">\n    {{ luxLabel }}\n  </span>\n</button>\n<ng-template #iconTemplate>\n  <lux-icon [luxIconName]=\"luxIconName\" [luxIconSize]=\"iconSize\" luxMargin=\"0\" luxPadding=\"0\"></lux-icon>\n</ng-template>\n<ng-template #noIconTemplate></ng-template>\n",
                styles: [".lux-align-baseline{padding-bottom:8px!important}.lux-align-baseline ::ng-deep .mat-button-wrapper{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.lux-button-label{line-height:1}.lux-icon-button{height:45px;padding-top:4px;padding-bottom:2px}.lux-icon-button.mat-fab{width:45px}.lux-icon-button.mat-fab ::ng-deep lux-icon i,.lux-icon-button.mat-fab ::ng-deep lux-icon mat-icon{font-size:1.5em}.lux-icon-button.mat-fab ::ng-deep .mat-button-wrapper{padding:0}:host ::ng-deep .mat-button-wrapper{height:100%;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}:host ::ng-deep lux-icon{line-height:1}:host ::ng-deep lux-iconi,:host ::ng-deep lux-iconmat-icon{line-height:1}:host ::ng-deep lux-iconi{display:block}"]
            }),
            __metadata("design:paramtypes", [core.ElementRef, LuxComponentsConfigService])
        ], LuxButtonComponent);
        return LuxButtonComponent;
    }(LuxActionComponentBaseClass));

    var LuxLinkComponent = /** @class */ (function (_super) {
        __extends(LuxLinkComponent, _super);
        function LuxLinkComponent(router, cdr) {
            var _this = _super.call(this) || this;
            _this.router = router;
            _this.cdr = cdr;
            _this.iconSize = '2x';
            _this.luxBlank = false;
            return _this;
        }
        LuxLinkComponent.prototype.ngOnInit = function () { };
        LuxLinkComponent.prototype.ngOnDestroy = function () { };
        LuxLinkComponent.prototype.redirectToHref = function ($event) {
            this.luxClicked.emit($event);
            if (this.luxHref) {
                this.luxHref = this.luxHref.trim();
                if (!this.luxHref.startsWith('http')) {
                    this.router.navigate([this.luxHref]).then(function () { });
                }
                else {
                    window.open(this.luxHref, this.luxBlank ? '_blank' : '_self');
                }
            }
        };
        LuxLinkComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLinkComponent.prototype, "luxHref", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxLinkComponent.prototype, "luxBlank", void 0);
        LuxLinkComponent = __decorate([
            core.Component({
                selector: 'lux-link',
                template: "<lux-button\n  [luxRaised]=\"luxRaised\"\n  [luxColor]=\"luxColor\"\n  [luxLabel]=\"luxLabel\"\n  [luxIconName]=\"luxIconName\"\n  [luxIconAlignWithLabel]=\"luxIconAlignWithLabel\"\n  [luxDisabled]=\"luxDisabled\"\n  [luxRounded]=\"luxRounded\"\n  [luxTagId]=\"luxTagId\"\n  class=\"lux-link\"\n  luxAriaRole=\"link\"\n  luxAriaRoleSelector=\"button\"\n  (luxClicked)=\"redirectToHref($event)\"\n>\n</lux-button>\n",
                styles: [""]
            }),
            __metadata("design:paramtypes", [router.Router, core.ChangeDetectorRef])
        ], LuxLinkComponent);
        return LuxLinkComponent;
    }(LuxActionComponentBaseClass));

    // @dynamic Erklärung steht in der Datei "lux-decorators.ts".
    var LuxMenuItemComponent = /** @class */ (function (_super) {
        __extends(LuxMenuItemComponent, _super);
        function LuxMenuItemComponent() {
            var _this = _super.call(this) || this;
            _this.luxHiddenChange = new core.EventEmitter();
            _this.luxHideLabelIfExtendedChange = new core.EventEmitter();
            _this.luxAlwaysVisibleChange = new core.EventEmitter();
            _this._luxAlwaysVisible = true;
            _this._luxHideLabelIfExtended = false;
            _this._luxHidden = false;
            // Wird vom LuxMenuComponent mit dem berechneten Breitenwert belegt
            _this.width = 0;
            // Wird vom LuxMenuComponent mit dem passenden Zustand belegt
            _this.extended = false;
            return _this;
        }
        Object.defineProperty(LuxMenuItemComponent.prototype, "luxAlwaysVisible", {
            get: function () {
                return this._luxAlwaysVisible;
            },
            set: function (value) {
                this._luxAlwaysVisible = value;
                this.luxAlwaysVisibleChange.emit(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMenuItemComponent.prototype, "luxHideLabelIfExtended", {
            get: function () {
                return this._luxHideLabelIfExtended;
            },
            set: function (value) {
                this._luxHideLabelIfExtended = value;
                this.luxHideLabelIfExtendedChange.emit(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMenuItemComponent.prototype, "luxHidden", {
            get: function () {
                return this._luxHidden;
            },
            set: function (value) {
                this._luxHidden = value;
                this.luxHiddenChange.emit(value);
            },
            enumerable: true,
            configurable: true
        });
        LuxMenuItemComponent.prototype.clicked = function ($event) {
            this.luxClicked.emit($event);
        };
        __decorate([
            core.ViewChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxMenuItemComponent.prototype, "templateRef", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMenuItemComponent.prototype, "luxHiddenChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMenuItemComponent.prototype, "luxHideLabelIfExtendedChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMenuItemComponent.prototype, "luxAlwaysVisibleChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxMenuItemComponent.prototype, "luxAlwaysVisible", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxMenuItemComponent.prototype, "luxHideLabelIfExtended", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxMenuItemComponent.prototype, "luxHidden", null);
        LuxMenuItemComponent = __decorate([
            core.Component({
                selector: 'lux-menu-item',
                template: ''
            }),
            __metadata("design:paramtypes", [])
        ], LuxMenuItemComponent);
        return LuxMenuItemComponent;
    }(LuxActionComponentBaseClass));

    var LuxMenuTriggerComponent = /** @class */ (function () {
        function LuxMenuTriggerComponent() {
        }
        LuxMenuTriggerComponent = __decorate([
            core.Component({
                selector: 'lux-menu-trigger',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxMenuTriggerComponent);
        return LuxMenuTriggerComponent;
    }());

    // @dynamic Erklärung steht in der Datei "lux-decorators.ts".
    var LuxMenuComponent = /** @class */ (function () {
        function LuxMenuComponent(cdr) {
            this.cdr = cdr;
            // Alle verfgb. MenuItems als Array
            this._menuItems = [];
            this.menuItemSubstcriptions = [];
            this.hideToggle = false;
            this.luxMenuClosed = new core.EventEmitter();
            this.luxMenuIconName = 'menu';
            this.luxToggleDisabled = false;
            this._luxDisplayExtended = false;
            this.luxDisplayMenuLeft = true;
            this.luxMaximumExtended = 5;
            this.canvas = document.createElement('canvas');
        }
        LuxMenuComponent_1 = LuxMenuComponent;
        Object.defineProperty(LuxMenuComponent.prototype, "luxDisplayExtended", {
            get: function () {
                return this._luxDisplayExtended;
            },
            set: function (value) {
                this._luxDisplayExtended = value;
                if (this.menuTriggerElRef) {
                    this.updateExtendedMenuItems();
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxMenuComponent.prototype.windowResize = function () {
            this.updateExtendedMenuItems();
        };
        Object.defineProperty(LuxMenuComponent.prototype, "menuItems", {
            get: function () {
                return this._menuItems;
            },
            set: function (menuItems) {
                var _this = this;
                this._menuItems = menuItems ? menuItems : [];
                this.menuItems.forEach(function (item) {
                    _this.menuItemSubstcriptions.push(item.luxHiddenChange.subscribe(function () {
                        _this.updateExtendedMenuItems();
                    }));
                    _this.menuItemSubstcriptions.push(item.luxAlwaysVisibleChange.subscribe(function () {
                        _this.updateExtendedMenuItems();
                    }));
                    _this.menuItemSubstcriptions.push(item.luxHideLabelIfExtendedChange.subscribe(function () {
                        _this.updateExtendedMenuItems();
                    }));
                });
                this.cdr.detectChanges();
            },
            enumerable: true,
            configurable: true
        });
        LuxMenuComponent.prototype.ngAfterViewChecked = function () {
            var _this = this;
            this.luxMenuItemComponents.changes.subscribe(function () {
                _this.menuItems = _this.luxMenuItemComponents.toArray();
                _this.calculateMenuItemWidths();
            });
            this.menuItems = this.luxMenuItemComponents.toArray();
            this.calculateMenuItemWidths();
            this.updateExtendedMenuItems();
        };
        LuxMenuComponent.prototype.ngOnDestroy = function () {
            this.menuItemSubstcriptions.forEach(function (menuItemSubscription) {
                menuItemSubscription.unsubscribe();
            });
        };
        /**
         * Wird beim Klick auf ein MenuItem aufgerufen.
         *
         * @param menuItem
         * @param $event
         */
        LuxMenuComponent.prototype.menuItemClicked = function (menuItem, $event) {
            menuItem.clicked($event);
        };
        /**
         * Wird nach dem Schließen des Menus aufgerufen und emitted die Output-Property.
         * Setzt den Fokus auf den Default-Trigger (Custom-Trigger => eigene Verantwortung).
         */
        LuxMenuComponent.prototype.onMenuClosed = function () {
            this.luxMenuClosed.emit();
            if (this.defaultTriggerElRef) {
                this.defaultTriggerElRef.nativeElement.children.item(0).focus();
            }
        };
        /**
         * Berechnet anhand der verfügbaren Breite des Containers (CSS-Class: lux-menu-extended) und der maximalen Anzahl an
         * extended MenuItems die Anzahl an möglichen MenuItems, die außerhalb des eigentlichen Menus dargestellt werden können.
         */
        LuxMenuComponent.prototype.updateExtendedMenuItems = function () {
            var e_1, _a;
            if (!this.luxDisplayExtended) {
                this.hideToggle = false;
                this.menuItems.forEach(function (menuItem) {
                    menuItem.extended = false;
                });
                return;
            }
            var menuTriggerWidth = this.menuTriggerElRef.nativeElement.offsetWidth;
            var availableWidth = this.menuExtendedContainer.nativeElement.offsetWidth;
            var count = 0;
            availableWidth -= menuTriggerWidth;
            try {
                // mit condition sind hier die Zustände luxVisible = true || false gemeint
                for (var _b = __values([true, false]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var condition = _c.value;
                    for (var i = this.menuItems.length - 1; i >= 0; i--) {
                        var menuItem = this.menuItems[i];
                        if (menuItem.luxHidden) {
                            continue;
                        }
                        if (menuItem.luxAlwaysVisible === condition) {
                            // Wenn es das letzte Menüitem ist, wird geprüft, ob es anstelle des
                            // Menüitemtriggers dargestellt werden kann.
                            if (i === 0 && availableWidth + menuTriggerWidth >= menuItem.width) {
                                availableWidth += menuTriggerWidth;
                            }
                            availableWidth -= menuItem.width;
                            if (availableWidth >= 0 && count < this.luxMaximumExtended) {
                                menuItem.extended = true;
                                count++;
                            }
                            else {
                                menuItem.extended = false;
                            }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // die Anzahl der extended dargestellten Items der Gesamtzahl entspricht blenden wir den Toggle aus
            var extendedMenuItemCount = this.menuItems.filter(function (item) { return item.extended && !item.luxHidden; }).length;
            var visibleMenuItemCount = this.menuItems.filter(function (item) { return !item.luxHidden; }).length;
            this.hideToggle = extendedMenuItemCount === visibleMenuItemCount;
            this.cdr.detectChanges();
        };
        /**
         * Berechnet die Breite für jedes Menuitem und speichert diese abhängig davon ob das Item immer sichtbar sein soll oder nicht
         * in 2 verschiedenen Maps.
         */
        LuxMenuComponent.prototype.calculateMenuItemWidths = function () {
            var _this = this;
            this.menuItems.forEach(function (menuItem) {
                menuItem.extended = false;
                menuItem.width = _this.getMenuItemWidth(menuItem);
            });
        };
        /**
         * Gibt die berechnete Breite des MenuItems zurück.
         * Diese setzt sich aus dem Padding (links und rechts, je 16px), dem Icon (wenn vorhanden, 15px) und der berechneten
         * Textbreite zusammen.
         * @param menuItem
         */
        LuxMenuComponent.prototype.getMenuItemWidth = function (menuItem) {
            if (!menuItem) {
                return 0;
            }
            return (LuxMenuComponent_1.PADDING_PX +
                (menuItem.luxIconName ? LuxMenuComponent_1.ICON_PX : 0) +
                (!menuItem.luxHideLabelIfExtended ? this.getTextWidth(menuItem.luxLabel) : 0) +
                LuxMenuComponent_1.MARGIN_PX);
        };
        /**
         * Berechnet mithilfe eines Canvas-Objekts die Breite eines einzelnen Textes
         * @param text
         */
        LuxMenuComponent.prototype.getTextWidth = function (text) {
            if (!text) {
                return 0;
            }
            var canvas = this.canvas;
            var context = canvas.getContext('2d');
            context.font = LuxMenuComponent_1.FONT_PX + "px sans-serif";
            var metrics = context.measureText(text);
            // zusätzlich nutzen wir hier einen Standard-Offset von 20px
            return metrics.width + 20;
        };
        LuxMenuComponent.prototype.hasVisibleMenuItems = function () {
            var hasVisibleMenuItems = false;
            for (var i = 0; i < this.menuItems.length; i++) {
                var element = this.menuItems[i];
                if (!element.luxHidden && !element.extended) {
                    hasVisibleMenuItems = true;
                    break;
                }
            }
            return hasVisibleMenuItems;
        };
        var LuxMenuComponent_1;
        // Diese Werte müssen angepasst werden, sollte das Styling dieser Component entsprechend geändert worden sein
        LuxMenuComponent.PADDING_PX = 16;
        LuxMenuComponent.MARGIN_PX = 8;
        LuxMenuComponent.FONT_PX = 14;
        LuxMenuComponent.ICON_PX = 22;
        LuxMenuComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild('defaultTrigger', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxMenuComponent.prototype, "defaultTriggerElRef", void 0);
        __decorate([
            core.ViewChild('menuTrigger', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxMenuComponent.prototype, "menuTriggerElRef", void 0);
        __decorate([
            core.ViewChild('menuExtendedContainer', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxMenuComponent.prototype, "menuExtendedContainer", void 0);
        __decorate([
            core.ContentChildren(LuxMenuItemComponent),
            __metadata("design:type", core.QueryList)
        ], LuxMenuComponent.prototype, "luxMenuItemComponents", void 0);
        __decorate([
            core.ContentChild(LuxMenuTriggerComponent, { static: false }),
            __metadata("design:type", LuxMenuTriggerComponent)
        ], LuxMenuComponent.prototype, "luxMenuTriggerComponent", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMenuComponent.prototype, "luxMenuClosed", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMenuComponent.prototype, "luxMenuIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMenuComponent.prototype, "luxClassName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMenuComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxMenuComponent.prototype, "luxToggleDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxMenuComponent.prototype, "luxDisplayExtended", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxMenuComponent.prototype, "luxDisplayMenuLeft", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxMenuComponent.prototype, "luxMaximumExtended", void 0);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], LuxMenuComponent.prototype, "windowResize", null);
        LuxMenuComponent = LuxMenuComponent_1 = __decorate([
            core.Component({
                selector: 'lux-menu',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"end\">\n  <div class=\"lux-menu-extended\" fxFlex=\"auto\" fxLayout=\"row\" fxLayoutAlign=\"end center\" #menuExtendedContainer>\n    <!-- Trigger, wenn luxDisplayMenuLeft === false -->\n    <ng-container *ngIf=\"!luxDisplayMenuLeft\">\n      <ng-container [ngTemplateOutlet]=\"menuTriggerTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngFor=\"let menuItem of menuItems\">\n      <lux-button\n        class=\"lux-menu-item\"\n        [luxLabel]=\"menuItem.luxHideLabelIfExtended ? '' : menuItem.luxLabel\"\n        [luxColor]=\"menuItem.luxColor\"\n        [luxRaised]=\"menuItem.luxRaised\"\n        [luxIconName]=\"menuItem.luxIconName\"\n        [luxDisabled]=\"menuItem.luxDisabled\"\n        [luxTagId]=\"menuItem.luxTagId\"\n        [luxRounded]=\"menuItem.luxRounded\"\n        [luxIconAlignWithLabel]=\"menuItem.luxIconAlignWithLabel\"\n        (luxClicked)=\"menuItemClicked(menuItem, $event)\"\n        luxAriaLabel=\"{{ menuItem.luxLabel }}\"\n        luxAriaLabelSelector=\"button\"\n        luxTabIndex=\"0\"\n        [luxApplyToChildren]=\"['button']\"\n        [ngClass]=\"{ 'lux-display-none': !menuItem.extended || menuItem.luxHidden }\"\n      >\n      </lux-button>\n    </ng-container>\n    <!-- Trigger, wenn luxDisplayMenuLeft === true -->\n    <ng-container *ngIf=\"luxDisplayMenuLeft\">\n      <ng-container [ngTemplateOutlet]=\"menuTriggerTemplate\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<!-- Das eigentliche Material-Menu -->\n<mat-menu [classList]=\"'lux-menu-panel ' + luxClassName\" (closed)=\"onMenuClosed()\" #menu=\"matMenu\">\n  <!-- Alle darin angezeigten MenuItems (Voraussgesetzt diese sind nicht als extended gekennzeichnet) -->\n  <ng-container *ngFor=\"let menuItem of menuItems\">\n    <button\n      mat-menu-item\n      class=\"lux-menu-item\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n      [disabled]=\"menuItem.luxDisabled\"\n      luxTagIdHandler\n      [luxTagId]=\"menuItem.luxTagId\"\n      (click)=\"menuItemClicked(menuItem, $event)\"\n      *ngIf=\"!menuItem.extended && !menuItem.luxHidden\"\n    >\n      <lux-icon\n        [luxIconName]=\"menuItem.luxIconName\"\n        luxPadding=\"0\"\n        luxIconSize=\"2x\"\n        fxFlex=\"0 0 30px\"\n        fxLayout=\"row\"\n        fxLayoutAlign=\"center center\"\n      ></lux-icon>\n      <span class=\"lux-button-label\" fxFlex=\"auto\">\n        {{ menuItem.luxLabel }}\n      </span>\n    </button>\n  </ng-container>\n</mat-menu>\n\n<!-- Der Trigger des Menus -->\n<ng-template #menuTriggerTemplate>\n  <div\n    [matMenuTriggerFor]=\"menu\"\n    class=\"lux-menu-trigger\"\n    fxFlex=\"0 0 auto\"\n    [ngClass]=\"{ 'lux-display-none': hideToggle }\"\n    fxFlexAlign=\"center\"\n    #menuTrigger\n  >\n    <!-- Custom-Trigger, der \u00FCber Content-Projection geladen werden kann -->\n    <ng-content select=\"lux-menu-trigger\"> </ng-content>\n    <!-- Default-Trigger -->\n    <lux-button\n      class=\"lux-menu-trigger-default\"\n      luxTagId=\"lux-menu-default-trigger\"\n      [luxIconName]=\"luxMenuIconName\"\n      luxAriaLabel=\"Menu\"\n      luxAriaLabelSelector=\"button\"\n      luxTabIndex=\"0\"\n      [luxApplyToChildren]=\"['button']\"\n      [luxDisabled]=\"luxToggleDisabled\"\n      #defaultTrigger\n      *ngIf=\"!luxMenuTriggerComponent && hasVisibleMenuItems()\"\n    >\n    </lux-button>\n  </div>\n</ng-template>\n\n<ng-content select=\"lux-menu-item\"></ng-content>\n",
                styles: ["@charset \"UTF-8\";:host{display:block;width:100%}::ng-deep .lux-menu-panel .lux-menu-item{padding:0 8px;font-size:16px}::ng-deep .lux-menu-panel .lux-menu-item lux-icon{min-width:25px;max-width:25px}.lux-display-none{display:none!important}.lux-menu-extended{overflow:hidden;min-width:0;padding:4px 0;position:relative}.lux-menu-extended>lux-button{margin-right:8px}.lux-menu-extended>lux-button ::ng-deep button{padding-left:8px!important;padding-right:8px!important}.lux-menu-extended>lux-button ::ng-deep lux-icon i,.lux-menu-extended>lux-button ::ng-deep lux-icon mat-icon{width:15px;font-size:18px!important}.lux-menu-trigger ::ng-deep button{height:45px;min-width:45px;padding-left:8px!important;padding-right:8px!important}.lux-menu-trigger ::ng-deep button .mat-button-wrapper{display:inherit;font-weight:400}.lux-menu-trigger ::ng-deep button .mat-button-wrapper i,.lux-menu-trigger ::ng-deep button .mat-button-wrapper mat-icon{padding:0;font-size:18px!important}::ng-deep .lux-menu-item lux-icon i,::ng-deep .lux-menu-item lux-icon mat-icon{font-size:15px}"]
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], LuxMenuComponent);
        return LuxMenuComponent;
    }());

    var LuxActionModule = /** @class */ (function () {
        function LuxActionModule() {
        }
        LuxActionModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    LuxIconModule,
                    material.MatButtonModule,
                    material.MatMenuModule,
                    LuxDirectivesModule,
                    flexLayout.FlexLayoutModule,
                    LuxComponentsConfigModule
                ],
                declarations: [LuxButtonComponent, LuxMenuItemComponent, LuxLinkComponent, LuxMenuComponent, LuxMenuTriggerComponent],
                exports: [LuxButtonComponent, LuxLinkComponent, LuxMenuComponent, LuxMenuItemComponent, LuxMenuTriggerComponent],
                entryComponents: [LuxButtonComponent]
            })
        ], LuxActionModule);
        return LuxActionModule;
    }());

    var day = 'Tagen', week = 'Wochen', month = 'Monaten', year = 'Jahren';
    var today = 'Heute', yesterday = 'Gestern', tomorrow = 'Morgen';
    var prefixFuture = 'in', prefixPast = 'vor';
    var MS_PER_DAY = 1000 * 60 * 60 * 24;
    var timeDeltas = [
        { name: year, days: 672, dayUnit: 336 },
        { name: month, days: 56, dayUnit: 28 },
        { name: week, days: 14, dayUnit: 7 },
        { name: day, days: 2, dayUnit: 1 }
    ];
    var timeDeltasRelative = [
        { name: tomorrow, days: 1 },
        { name: yesterday, days: -1 },
        { name: today, days: 0 }
    ];
    var LuxRelativeTimestampPipe = /** @class */ (function () {
        function LuxRelativeTimestampPipe() {
        }
        LuxRelativeTimestampPipe.prototype.transform = function (timestamp, defaultText, prefix) {
            var e_1, _a, e_2, _b;
            if (defaultText === void 0) { defaultText = ''; }
            if (!timestamp) {
                return defaultText;
            }
            var now = new Date();
            var then = new Date(timestamp);
            var delta = this.calcDiff(now, then);
            var timeName = null;
            try {
                for (var timeDeltas_1 = __values(timeDeltas), timeDeltas_1_1 = timeDeltas_1.next(); !timeDeltas_1_1.done; timeDeltas_1_1 = timeDeltas_1.next()) {
                    var timeDelta = timeDeltas_1_1.value;
                    var tempDelta = delta < 0 ? delta * -1 : delta;
                    if (tempDelta >= timeDelta.days) {
                        if (!prefix) {
                            prefix = delta < 0 ? prefixPast : prefixFuture;
                        }
                        var timeUnits = timeDelta.name === day ? tempDelta : Math.floor(tempDelta / timeDelta.dayUnit);
                        timeUnits *= timeUnits < 0 ? -1 : 1;
                        timeName = prefix + " " + timeUnits + " " + timeDelta.name;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (timeDeltas_1_1 && !timeDeltas_1_1.done && (_a = timeDeltas_1.return)) _a.call(timeDeltas_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (timeName === null) {
                try {
                    for (var timeDeltasRelative_1 = __values(timeDeltasRelative), timeDeltasRelative_1_1 = timeDeltasRelative_1.next(); !timeDeltasRelative_1_1.done; timeDeltasRelative_1_1 = timeDeltasRelative_1.next()) {
                        var timeDelta = timeDeltasRelative_1_1.value;
                        if (delta === timeDelta.days) {
                            timeName = timeDelta.name;
                            break;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (timeDeltasRelative_1_1 && !timeDeltasRelative_1_1.done && (_b = timeDeltasRelative_1.return)) _b.call(timeDeltasRelative_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return timeName;
        };
        LuxRelativeTimestampPipe.prototype.calcDiff = function (a, b) {
            var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
            var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
            return Math.floor((utc2 - utc1) / MS_PER_DAY);
        };
        LuxRelativeTimestampPipe = __decorate([
            core.Pipe({
                name: 'luxRelativeTimestamp'
            })
        ], LuxRelativeTimestampPipe);
        return LuxRelativeTimestampPipe;
    }());

    var LuxRenderPropertyPipe = /** @class */ (function () {
        function LuxRenderPropertyPipe() {
        }
        LuxRenderPropertyPipe.prototype.transform = function (value, renderPropertyName) {
            if (!renderPropertyName) {
                return value;
            }
            if (!value || !value[renderPropertyName]) {
                return '';
            }
            return value[renderPropertyName];
        };
        LuxRenderPropertyPipe = __decorate([
            core.Pipe({
                name: 'luxRenderProperty'
            })
        ], LuxRenderPropertyPipe);
        return LuxRenderPropertyPipe;
    }());

    var LuxPropertyFromObjectPipe = /** @class */ (function () {
        function LuxPropertyFromObjectPipe() {
        }
        /**
         * Ruft die Funktion aus Util auf, um ein Property aus einem Objekt (auch mit Unterpfaden) auszulesen.
         */
        LuxPropertyFromObjectPipe.prototype.transform = function (object, propertyNamePath) {
            return LuxUtil.readPropertyValueFromObject(object, propertyNamePath);
        };
        LuxPropertyFromObjectPipe = __decorate([
            core.Pipe({
                name: 'luxPropertyFromObject'
            })
        ], LuxPropertyFromObjectPipe);
        return LuxPropertyFromObjectPipe;
    }());

    var LuxAlphabeticallySortedPipe = /** @class */ (function () {
        function LuxAlphabeticallySortedPipe() {
        }
        LuxAlphabeticallySortedPipe.prototype.transform = function (array) {
            if (!array) {
                return [];
            }
            return this.sortAlphabetically(array);
        };
        LuxAlphabeticallySortedPipe.prototype.sortAlphabetically = function (array) {
            return array.slice().sort(function (a, b) {
                var valueA = a.label || '';
                var valueB = b.label || '';
                var stringA = valueA.toLocaleLowerCase();
                var stringB = valueB.toLocaleLowerCase();
                return stringA.localeCompare(stringB);
            });
        };
        LuxAlphabeticallySortedPipe = __decorate([
            core.Pipe({
                name: 'luxAlphabeticallySorted'
            })
        ], LuxAlphabeticallySortedPipe);
        return LuxAlphabeticallySortedPipe;
    }());

    var LuxPipesModule = /** @class */ (function () {
        function LuxPipesModule() {
        }
        LuxPipesModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, LuxComponentsConfigModule],
                declarations: [
                    LuxRelativeTimestampPipe,
                    LuxRenderPropertyPipe,
                    LuxPropertyFromObjectPipe,
                    LuxAlphabeticallySortedPipe
                ],
                exports: [LuxRelativeTimestampPipe, LuxRenderPropertyPipe, LuxPropertyFromObjectPipe, LuxAlphabeticallySortedPipe]
            })
        ], LuxPipesModule);
        return LuxPipesModule;
    }());

    // The file contents for the current environment will overwrite these during build.
    // The build system defaults to the dev environment which uses `environment.ts`, but if you do
    // `ng build --env=prod` then `environment.prod.ts` will be used instead.
    // The list of which env maps to which file can be found in `.angular-cli.json`.
    var environment = {
        production: false,
        generateLuxTagIds: true
    };

    var noop = function () { return undefined; };
    var LuxConsoleService = /** @class */ (function () {
        function LuxConsoleService(componentsConfigService) {
            // Aus der Konfiguration die Info erhalten, ob Logs angezeigt werden sollen
            componentsConfigService.config.subscribe(function (newConfig) {
                LuxConsoleService_1.config = newConfig;
            });
        }
        LuxConsoleService_1 = LuxConsoleService;
        Object.defineProperty(LuxConsoleService.prototype, "log", {
            /* Nicht-statische Log-Methoden, sie zeigen auch die Quelle des Logs an! */
            get: function () {
                if (LuxConsoleService_1.isDebugMode()) {
                    return console.log.bind.call(console.log, console, LuxConsoleService_1.logDate() + ' -');
                }
                else {
                    return noop;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxConsoleService.prototype, "warn", {
            get: function () {
                if (LuxConsoleService_1.isDebugMode()) {
                    return console.warn.bind.call(console.warn, console, LuxConsoleService_1.logDate() + ' -');
                }
                else {
                    return noop;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxConsoleService.prototype, "error", {
            get: function () {
                if (LuxConsoleService_1.isDebugMode()) {
                    return console.error.bind.call(console.error, console, LuxConsoleService_1.logDate() + ' -');
                }
                else {
                    return noop;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxConsoleService.prototype, "group", {
            get: function () {
                if (LuxConsoleService_1.isDebugMode()) {
                    return console.group.bind.call(console.group, console);
                }
                else {
                    return noop;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxConsoleService.prototype, "info", {
            get: function () {
                if (LuxConsoleService_1.isDebugMode()) {
                    return console.info.bind.call(console.info, console);
                }
                else {
                    return noop;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxConsoleService.prototype, "groupEnd", {
            get: function () {
                if (LuxConsoleService_1.isDebugMode()) {
                    return console.groupEnd.bind.call(console.groupEnd, console);
                }
                else {
                    return noop;
                }
            },
            enumerable: true,
            configurable: true
        });
        /* Statische Log-Methoden, sie zeigen nicht die Quelle des Logs an! */
        LuxConsoleService.LOG = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!LuxConsoleService_1.isDebugMode()) {
                return;
            }
            if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
                console.log(LuxConsoleService_1.logDate() + ' -', args[0]);
            }
            else if (args.length === 1) {
                console.log(LuxConsoleService_1.logDate() + ' -', args[0]);
            }
            else {
                console.log(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
            }
        };
        LuxConsoleService.WARN = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!LuxConsoleService_1.isDebugMode()) {
                return;
            }
            if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
                console.warn(LuxConsoleService_1.logDate() + ' -', args[0]);
            }
            else if (args.length === 1) {
                console.warn(LuxConsoleService_1.logDate() + ' -', args[0]);
            }
            else {
                console.warn(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
            }
        };
        LuxConsoleService.ERROR = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!LuxConsoleService_1.isDebugMode()) {
                return;
            }
            if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
                console.error(LuxConsoleService_1.logDate() + ' -', args[0]);
            }
            else if (args.length === 1) {
                console.error(LuxConsoleService_1.logDate() + ' -', args[0]);
            }
            else {
                console.error(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
            }
        };
        LuxConsoleService.logDate = function () {
            var now = new Date();
            var day = LuxConsoleService_1.checkTime(now.getDate());
            var month = LuxConsoleService_1.checkTime(now.getMonth() + 1);
            var year = LuxConsoleService_1.checkTime(now.getFullYear());
            var hours = LuxConsoleService_1.checkTime(now.getHours());
            var minutes = LuxConsoleService_1.checkTime(now.getMinutes());
            var seconds = LuxConsoleService_1.checkTime(now.getSeconds());
            return day + '.' + month + '.' + year + ' ' + hours + ':' + minutes + ':' + seconds;
        };
        LuxConsoleService.getLogValue = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var logValue = [];
            args.forEach(function (arg) {
                if (arg !== null && typeof arg === 'object') {
                    arg = JSON.stringify(arg);
                }
                logValue.push(arg);
            });
            return logValue;
        };
        LuxConsoleService.isDebugMode = function () {
            return LuxConsoleService_1.config ? LuxConsoleService_1.config.displayLuxConsoleLogs : environment.production;
        };
        LuxConsoleService.checkTime = function (timeUnit) {
            return timeUnit < 10 ? '0' + timeUnit : timeUnit;
        };
        var LuxConsoleService_1;
        LuxConsoleService.config = {};
        LuxConsoleService.ctorParameters = function () { return [
            { type: LuxComponentsConfigService }
        ]; };
        LuxConsoleService.ngInjectableDef = core["ɵɵdefineInjectable"]({ factory: function LuxConsoleService_Factory() { return new LuxConsoleService(core["ɵɵinject"](LuxComponentsConfigService)); }, token: LuxConsoleService, providedIn: "root" });
        LuxConsoleService = LuxConsoleService_1 = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [LuxComponentsConfigService])
        ], LuxConsoleService);
        return LuxConsoleService;
    }());

    var LuxMediaQueryObserverService = /** @class */ (function () {
        function LuxMediaQueryObserverService(breakpointObserver, logger) {
            this.breakpointObserver = breakpointObserver;
            this.logger = logger;
            this._mediaQueryChanged = new rxjs.BehaviorSubject('');
            this._subscriptions = [];
            this.addQuerySubscription(layout.Breakpoints.XSmall, 'xs');
            this.addQuerySubscription(layout.Breakpoints.Small, 'sm');
            this.addQuerySubscription(layout.Breakpoints.Medium, 'md');
            this.addQuerySubscription(layout.Breakpoints.Large, 'lg');
            this.addQuerySubscription(layout.Breakpoints.XLarge, 'xl');
        }
        Object.defineProperty(LuxMediaQueryObserverService.prototype, "activeMediaQuery", {
            get: function () {
                return this._mediaQueryChanged.getValue();
            },
            enumerable: true,
            configurable: true
        });
        LuxMediaQueryObserverService.prototype.ngOnDestroy = function () {
            this._subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this._mediaQueryChanged.complete();
        };
        LuxMediaQueryObserverService.prototype.getMediaQueryChangedAsObservable = function () {
            return this._mediaQueryChanged.asObservable();
        };
        LuxMediaQueryObserverService.prototype.isXS = function () {
            return this.activeMediaQuery === 'xs';
        };
        LuxMediaQueryObserverService.prototype.isSM = function () {
            return this.activeMediaQuery === 'sm';
        };
        LuxMediaQueryObserverService.prototype.isMD = function () {
            return this.activeMediaQuery === 'md';
        };
        LuxMediaQueryObserverService.prototype.isLG = function () {
            return this.activeMediaQuery === 'lg';
        };
        LuxMediaQueryObserverService.prototype.isXL = function () {
            return this.activeMediaQuery === 'xl';
        };
        LuxMediaQueryObserverService.prototype.addQuerySubscription = function (breakpoint, breakpointString) {
            var _this = this;
            this._subscriptions.push(this.breakpointObserver.observe([breakpoint]).subscribe(function (state) {
                if (state.matches) {
                    _this._mediaQueryChanged.next(breakpointString);
                    _this.logger.log("MediaQuery [" + _this.activeMediaQuery + "] activated.");
                }
            }));
        };
        LuxMediaQueryObserverService.ctorParameters = function () { return [
            { type: layout.BreakpointObserver },
            { type: LuxConsoleService }
        ]; };
        LuxMediaQueryObserverService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [layout.BreakpointObserver, LuxConsoleService])
        ], LuxMediaQueryObserverService);
        return LuxMediaQueryObserverService;
    }());

    var LuxAccordionComponent = /** @class */ (function () {
        function LuxAccordionComponent() {
            this.changed$ = new rxjs.Subject();
            this.luxMode = 'default';
            this.luxMulti = false;
            this._luxDisabled = false;
            this._luxHideToggle = false;
        }
        Object.defineProperty(LuxAccordionComponent.prototype, "luxDisabled", {
            get: function () {
                return this._luxDisabled;
            },
            set: function (disabled) {
                this._luxDisabled = disabled;
                this.changed$.next('luxDisabled');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxAccordionComponent.prototype, "luxHideToggle", {
            get: function () {
                return this._luxHideToggle;
            },
            set: function (hideToggle) {
                this._luxHideToggle = hideToggle;
                this.changed$.next('luxHideToggle');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxAccordionComponent.prototype, "luxExpandedHeaderHeight", {
            get: function () {
                return this._luxExpandedHeaderHeight;
            },
            set: function (height) {
                this._luxExpandedHeaderHeight = height;
                this.changed$.next('luxExpandedHeaderHeight');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxAccordionComponent.prototype, "luxCollapsedHeaderHeight", {
            get: function () {
                return this._luxCollapsedHeaderHeight;
            },
            set: function (height) {
                this._luxCollapsedHeaderHeight = height;
                this.changed$.next('luxCollapsedHeaderHeight');
            },
            enumerable: true,
            configurable: true
        });
        LuxAccordionComponent.prototype.ngOnInit = function () { };
        LuxAccordionComponent.prototype.ngOnDestroy = function () {
            this.changed$.complete();
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAccordionComponent.prototype, "luxMode", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxAccordionComponent.prototype, "luxMulti", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxAccordionComponent.prototype, "luxDisabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxAccordionComponent.prototype, "luxHideToggle", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAccordionComponent.prototype, "luxExpandedHeaderHeight", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxAccordionComponent.prototype, "luxCollapsedHeaderHeight", null);
        __decorate([
            core.ViewChild(material.MatAccordion, { static: true }),
            __metadata("design:type", material.MatAccordion)
        ], LuxAccordionComponent.prototype, "matAccordion", void 0);
        LuxAccordionComponent = __decorate([
            core.Component({
                selector: 'lux-accordion',
                template: "<mat-accordion [displayMode]=\"luxMode\" [multi]=\"luxMulti\">\n  <ng-content select=\"lux-panel\"></ng-content>\n</mat-accordion>\n"
            }),
            __metadata("design:paramtypes", [])
        ], LuxAccordionComponent);
        return LuxAccordionComponent;
    }());

    var LuxAppFooterButtonService = /** @class */ (function () {
        function LuxAppFooterButtonService() {
            this._buttonInfos = [];
        }
        Object.defineProperty(LuxAppFooterButtonService.prototype, "buttonInfos", {
            get: function () {
                return this._buttonInfos;
            },
            set: function (buttonInfos) {
                this._buttonInfos = buttonInfos ? buttonInfos : [];
            },
            enumerable: true,
            configurable: true
        });
        LuxAppFooterButtonService.prototype.pushButtonInfos = function () {
            var _a;
            var value = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                value[_i] = arguments[_i];
            }
            if (!this.buttonInfos) {
                this._buttonInfos = [];
            }
            (_a = this._buttonInfos).push.apply(_a, __spread(value));
        };
        LuxAppFooterButtonService.prototype.getButtonInfoByCMD = function (cmd) {
            return this.buttonInfos.find(function (buttonInfo) { return buttonInfo.cmd === cmd; });
        };
        LuxAppFooterButtonService.prototype.removeButtonInfoAtIndex = function (i) {
            this._buttonInfos = this._buttonInfos.filter(function (info, index) { return index !== i; });
        };
        LuxAppFooterButtonService.prototype.removeButtonInfoByCmd = function (cmd) {
            this._buttonInfos = this._buttonInfos.filter(function (info) { return info.cmd !== cmd; });
        };
        LuxAppFooterButtonService.prototype.clearButtonInfos = function () {
            this._buttonInfos = [];
        };
        LuxAppFooterButtonService.prototype.sendButtonCommand = function (buttonCommand) {
            // Den angeklickten Button erhalten und dessen onClick-Funktion aufrufen.
            // Als Parameter den Button selbst mitgeben (falls dieser bearbeitet werden muss, z.B.).
            var clickedButton = this.getButtonInfoByCMD(buttonCommand);
            if (clickedButton) {
                clickedButton.onClick(clickedButton);
            }
        };
        LuxAppFooterButtonService = __decorate([
            core.Injectable()
        ], LuxAppFooterButtonService);
        return LuxAppFooterButtonService;
    }());

    var LuxAppFooterLinkService = /** @class */ (function () {
        function LuxAppFooterLinkService() {
            this._linkInfos = [];
        }
        Object.defineProperty(LuxAppFooterLinkService.prototype, "linkInfos", {
            get: function () {
                return this._linkInfos;
            },
            set: function (value) {
                this._linkInfos = value ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        LuxAppFooterLinkService.prototype.pushLinkInfos = function () {
            var _a;
            var value = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                value[_i] = arguments[_i];
            }
            if (!this._linkInfos) {
                this._linkInfos = [];
            }
            (_a = this._linkInfos).push.apply(_a, __spread(value));
        };
        LuxAppFooterLinkService.prototype.removeLinkInfoAtIndex = function (i) {
            this._linkInfos = this._linkInfos.filter(function (info, index) { return index !== i; });
        };
        LuxAppFooterLinkService.prototype.clearLinkInfos = function () {
            this._linkInfos = [];
        };
        LuxAppFooterLinkService = __decorate([
            core.Injectable()
        ], LuxAppFooterLinkService);
        return LuxAppFooterLinkService;
    }());

    var LuxAppFooterComponent = /** @class */ (function () {
        function LuxAppFooterComponent(buttonService, linkService, mediaObserver) {
            this.buttonService = buttonService;
            this.linkService = linkService;
            this.mediaObserver = mediaObserver;
        }
        LuxAppFooterComponent.prototype.isMediumOrLargerDevice = function () {
            return (this.mediaObserver.isSM() || this.mediaObserver.isMD() || this.mediaObserver.isLG() || this.mediaObserver.isXL());
        };
        LuxAppFooterComponent.prototype.getButtons = function () {
            return this.buttonService.buttonInfos;
        };
        LuxAppFooterComponent.prototype.sendButtonCommand = function (cmd) {
            this.buttonService.sendButtonCommand(cmd);
        };
        LuxAppFooterComponent.prototype.getLinks = function () {
            return this.linkService.linkInfos;
        };
        LuxAppFooterComponent.ctorParameters = function () { return [
            { type: LuxAppFooterButtonService },
            { type: LuxAppFooterLinkService },
            { type: LuxMediaQueryObserverService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppFooterComponent.prototype, "luxVersion", void 0);
        LuxAppFooterComponent = __decorate([
            core.Component({
                selector: 'lux-app-footer',
                template: "<div fxLayout=\"row\" class=\"lux-app-footer lux-p-footer footerFont\" fxFlexFill>\n  <div *ngIf=\"luxVersion\" fxFlex=\"none\" fxLayoutAlign=\"left center\" fxShow=\"false\" fxShow.gt-lg=\"true\" class=\"version\">\n    Version {{ luxVersion }}\n  </div>\n\n  <div *ngIf=\"getLinks()\" fxFlex=\"none\" fxLayoutAlign=\"left center\" fxLayout=\"row\" class=\"lux-app-footer-links\">\n    <ng-container *ngFor=\"let linkItem of getLinks()\">\n      <lux-link\n        [luxLabel]=\"linkItem.label\"\n        *ngIf=\"linkItem.alwaysVisible || isMediumOrLargerDevice()\"\n        [luxHref]=\"linkItem.path\"\n        [luxBlank]=\"linkItem.blank\"\n      >\n      </lux-link>\n    </ng-container>\n  </div>\n\n  <div fxFlex=\"auto\" fxLayoutAlign=\"right center\" class=\"lux-app-footer-buttons\">\n    <lux-menu\n      [luxDisplayExtended]=\"true\"\n      [luxDisplayMenuLeft]=\"false\"\n      luxMenuIconName=\"fa-ellipsis-v\"\n      luxTagId=\"app_footer_menu\"\n    >\n      <ng-container *ngFor=\"let menuItem of getButtons()\">\n        <lux-menu-item\n          [luxLabel]=\"menuItem.label\"\n          [luxIconName]=\"menuItem.iconName\"\n          [luxTagId]=\"menuItem.label\"\n          [luxHidden]=\"menuItem.hidden\"\n          [luxAlwaysVisible]=\"menuItem.alwaysVisible\"\n          [luxDisabled]=\"menuItem.disabled\"\n          [luxRaised]=\"menuItem.raised\"\n          [luxColor]=\"menuItem.color\"\n          (luxClicked)=\"sendButtonCommand(menuItem.cmd)\"\n        >\n        </lux-menu-item>\n      </ng-container>\n    </lux-menu>\n  </div>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;height:60px;min-height:60px;max-height:60px}.lux-app-footer{background-color:#e7ebf0;overflow:hidden}.lux-app-footer-buttons{min-width:0}.lux-app-footer-buttons ::ng-deep button,.lux-app-footer-links ::ng-deep button{height:45px;padding-top:4px;padding-bottom:2px}.footerFont{font-family:Roboto,'Helvetica Neue',sans-serif;font-size:14px;font-weight:500}.version{padding:0 16px}"]
            }),
            __metadata("design:paramtypes", [LuxAppFooterButtonService,
                LuxAppFooterLinkService,
                LuxMediaQueryObserverService])
        ], LuxAppFooterComponent);
        return LuxAppFooterComponent;
    }());

    var LuxAppHeaderRightNavComponent = /** @class */ (function () {
        function LuxAppHeaderRightNavComponent() {
        }
        LuxAppHeaderRightNavComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.ContentChildren(LuxMenuItemComponent),
            __metadata("design:type", Object)
        ], LuxAppHeaderRightNavComponent.prototype, "menuItemComponents", void 0);
        LuxAppHeaderRightNavComponent = __decorate([
            core.Component({
                selector: 'lux-app-header-right-nav',
                template: ''
            }),
            __metadata("design:paramtypes", [])
        ], LuxAppHeaderRightNavComponent);
        return LuxAppHeaderRightNavComponent;
    }());

    var LuxMasterDetailMobileHelperService = /** @class */ (function () {
        function LuxMasterDetailMobileHelperService(mediaObserver) {
            var _this = this;
            this.mediaObserver = mediaObserver;
            this._mdRegistered$ = new rxjs.BehaviorSubject(false);
            this._masterCollapsed$ = new rxjs.BehaviorSubject(true);
            this._hasValue$ = new rxjs.BehaviorSubject(false);
            this.mediaObserver.getMediaQueryChangedAsObservable().subscribe(function () {
                setTimeout(function () {
                    _this.handleMasterCollapseState();
                });
            });
        }
        Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "masterCollapsed$", {
            get: function () {
                return this._masterCollapsed$.getValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "masterCollapsedObservable", {
            get: function () {
                return this._masterCollapsed$.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "isRegisteredObservable", {
            get: function () {
                return this._mdRegistered$.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "isRegistered", {
            get: function () {
                return this._mdRegistered$.getValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "hasValueObservable", {
            get: function () {
                return this._hasValue$.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "hasValue", {
            get: function () {
                return this._hasValue$.getValue();
            },
            set: function (hasValue) {
                this._hasValue$.next(hasValue);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Sendet ueber den masterCollapsed$-Subject ein Event mit dem Wert true.
         * Kennzeichnet das der Master geoeffnet werden soll.
         */
        LuxMasterDetailMobileHelperService.prototype.openMaster = function () {
            this._masterCollapsed$.next(true);
        };
        /**
         * Sendet ueber den masterCollapsed$-Subject ein Event mit dem Wert false.
         * Kennzeichnet das der Master geschlossen werden soll.
         */
        LuxMasterDetailMobileHelperService.prototype.closeMaster = function () {
            this._masterCollapsed$.next(false);
        };
        /**
         * Gibt zurueck ob eine Media-Query fuer XS oder SM aktuell aktiv ist.
         * @returns boolean
         */
        LuxMasterDetailMobileHelperService.prototype.isMobile = function () {
            return this.mediaObserver.isXS() || this.mediaObserver.isSM();
        };
        /**
         * Meldet eine Master-Detail-Komponente fuer diesen Service an.
         */
        LuxMasterDetailMobileHelperService.prototype.register = function () {
            if (!this.isRegistered) {
                this._mdRegistered$.next(true);
            }
            else {
                console.error('Fehler: Ein Master-Detail-Helper-Service kann nur eine registrierte Master-Detail-Komponente haben.');
            }
        };
        /**
         * Meldet die aktuelle Master-Detail-Komponente dieses Services ab.
         */
        LuxMasterDetailMobileHelperService.prototype.unregister = function () {
            if (this.isRegistered) {
                this._mdRegistered$.next(false);
            }
        };
        /**
         * Sendet ein Event um den Master zu oeffnen bzw. zu schliessen
         * wenn sich der Zustand der Media-Query geaendert hat.
         */
        LuxMasterDetailMobileHelperService.prototype.handleMasterCollapseState = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.hasValue && (_this.mediaObserver.isXS() || _this.mediaObserver.isSM())) {
                    _this.closeMaster();
                }
                else {
                    _this.openMaster();
                }
            });
        };
        LuxMasterDetailMobileHelperService.ctorParameters = function () { return [
            { type: LuxMediaQueryObserverService }
        ]; };
        LuxMasterDetailMobileHelperService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [LuxMediaQueryObserverService])
        ], LuxMasterDetailMobileHelperService);
        return LuxMasterDetailMobileHelperService;
    }());

    var LuxSideNavItemComponent = /** @class */ (function () {
        function LuxSideNavItemComponent(cdr) {
            this.cdr = cdr;
            this.luxDisabled = false;
            this.luxSelected = false;
            this.luxCloseOnClick = true;
            this.luxExpandable = false;
            this.luxExpanded = true;
            this.luxClicked = new core.EventEmitter();
        }
        LuxSideNavItemComponent_1 = LuxSideNavItemComponent;
        LuxSideNavItemComponent.prototype.ngOnChanges = function () {
            // Bei Input Änderungen die CD anstossen
            this.cdr.detectChanges();
        };
        LuxSideNavItemComponent.prototype.ngAfterViewInit = function () {
            // Nach Abschluss der Initialisierung die CD anstossen
            this.cdr.detectChanges();
        };
        LuxSideNavItemComponent.prototype.onClick = function ($event) {
            this.luxClicked.emit($event);
            if (this.luxExpandable) {
                this.luxExpanded = !this.luxExpanded;
            }
        };
        var LuxSideNavItemComponent_1;
        LuxSideNavItemComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.ViewChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxSideNavItemComponent.prototype, "templateRef", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSideNavItemComponent.prototype, "luxLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSideNavItemComponent.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSideNavItemComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSideNavItemComponent.prototype, "luxSelected", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSideNavItemComponent.prototype, "luxCloseOnClick", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSideNavItemComponent.prototype, "luxIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSideNavItemComponent.prototype, "luxExpandable", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSideNavItemComponent.prototype, "luxExpanded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxSideNavItemComponent.prototype, "luxClicked", void 0);
        __decorate([
            core.ContentChildren(LuxSideNavItemComponent_1),
            __metadata("design:type", core.QueryList)
        ], LuxSideNavItemComponent.prototype, "sideNavItems", void 0);
        LuxSideNavItemComponent = LuxSideNavItemComponent_1 = __decorate([
            core.Component({
                selector: 'lux-side-nav-item',
                template: "<ng-template>\n  <div class=\"lux-side-nav-item-container\">\n    <div class=\"lux-side-nav-item-button\" [ngClass]=\"{ 'lux-side-nav-item-expandable': luxExpandable }\">\n      <lux-button\n        (luxClicked)=\"onClick($event)\"\n        [luxLabel]=\"luxLabel\"\n        [luxIconName]=\"luxIconName\"\n        [luxDisabled]=\"luxDisabled\"\n        [luxTagId]=\"luxTagId\"\n        class=\"lux-side-nav-item\"\n        [ngClass]=\"{ 'lux-side-nav-item-selected': luxSelected }\"\n      >\n      </lux-button>\n      <ng-container *ngIf=\"luxExpandable\">\n        <lux-icon\n          class=\"lux-side-nav-item-expansion-icon\"\n          [luxIconName]=\"luxExpanded ? 'fas fa-chevron-up' : 'fas fa-chevron-down'\"\n        >\n        </lux-icon>\n      </ng-container>\n    </div>\n    <ng-container *ngIf=\"luxExpanded\">\n      <ng-container *ngFor=\"let sideNavItem of sideNavItems; let i = index\">\n        <div class=\"lux-side-nav-sub-item\" *ngIf=\"i > 0\">\n          <ng-container [ngTemplateOutlet]=\"sideNavItem.templateRef\"></ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n  <ng-content select=\"lux-divider\"></ng-content>\n</ng-template>\n<ng-content select=\"lux-side-nav-item\"></ng-content>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [core.ChangeDetectorRef])
        ], LuxSideNavItemComponent);
        return LuxSideNavItemComponent;
    }());

    var ANIMATION_DURATION = '300ms';
    /**
     * Animation für das Herein-Sliden der Seitennavigation von Links in den Contentbereich hinein und wieder zurück.
     */
    var sideNavAnimation = animations$1.trigger('expandHide', [
        animations$1.state('void', animations$1.style({
            left: '-{{ width }}'
        }), { params: { width: '100%' } }),
        animations$1.state('expanded', animations$1.style({
            left: '0'
        }), { params: { width: '100%' } }),
        animations$1.transition('void => expanded', [animations$1.animate(ANIMATION_DURATION)]),
        animations$1.transition('expanded => void', [animations$1.animate(ANIMATION_DURATION)])
    ]);
    /**
     * Animation um das Overlay für die Sidebar ein- und auszublenden.
     */
    var sideNavOverlayAnimation = animations$1.trigger('expandHideOverlay', [
        animations$1.state('void', animations$1.style({
            opacity: '0'
        })),
        animations$1.state('expanded', animations$1.style({
            opacity: '1'
        })),
        animations$1.transition('void => expanded', [animations$1.animate(ANIMATION_DURATION)]),
        animations$1.transition('expanded => void', [animations$1.animate(ANIMATION_DURATION)])
    ]);

    var LuxSideNavComponent = /** @class */ (function () {
        function LuxSideNavComponent() {
            this.luxDashboardLinkTitle = 'LUX Dashboard';
            this.sideNavExpanded = false;
            this.visibility = 'hidden';
            this.itemClickSubscriptions = [];
        }
        LuxSideNavComponent.prototype.keyEvent = function (event) {
            if (event.key === 'Escape' && this.sideNavExpanded) {
                // Escape soll nur das Menü schließen, wenn es auch geöffnet ist.
                this.toggle();
            }
        };
        LuxSideNavComponent.prototype.windowResize = function () {
            this.calculateWidthHeight();
        };
        LuxSideNavComponent.prototype.ngOnInit = function () { };
        LuxSideNavComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.sideNavItems.changes.subscribe(function () { return _this.updateItemClickListeners(); });
            this.updateItemClickListeners();
            this.calculateWidthHeight();
        };
        LuxSideNavComponent.prototype.ngOnDestroy = function () {
            this.itemClickSubscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        };
        LuxSideNavComponent.prototype.toggle = function () {
            var _this = this;
            this.sideNavExpanded = !this.sideNavExpanded;
            if (this.sideNavExpanded) {
                this.visibility = 'visible';
                this.calculateWidthHeight();
                // Hier wird sich der Menübutton zwischengespeichert
                this.focusElement = document.activeElement;
            }
            else {
                setTimeout(function () {
                    // Wenn das SideNavMenü geschlossen wird, wird wieder der SideNavMenübutton fokusiert.
                    if (_this.focusElement) {
                        _this.focusElement.focus();
                    }
                });
            }
        };
        /**
         * Wenn die Animation beendet ist, wird das Menü ausgeblendet, damit der Fokus weiter zum Inhalt springt und nicht
         * durch das versteckte Menü wandert. Das ist auch für Screenreader nötig.
         */
        LuxSideNavComponent.prototype.updateSideNavAfterAnimationIsFinished = function () {
            var _this = this;
            this.visibility = this.sideNavExpanded ? 'visible' : 'hidden';
            // Den Fokus auf den ersten Button setzen
            if (this.sideNavExpanded && this.sideNavEl && this.sideNavEl.nativeElement) {
                setTimeout(function () {
                    var firstButton = _this.sideNavEl.nativeElement.querySelector('button');
                    if (firstButton) {
                        firstButton.focus();
                    }
                });
            }
        };
        LuxSideNavComponent.prototype.open = function () {
            this.sideNavExpanded = true;
            this.calculateWidthHeight();
        };
        LuxSideNavComponent.prototype.close = function () {
            this.sideNavExpanded = false;
        };
        /**
         * Berechnet die Höhe für den Container der SideNavMenuItems.
         * Dafür wird die Gesamthöhe minus der Höhe des Headers und des Footers sowie eine feste Höhe
         * für den App-Header gerechnet.
         */
        LuxSideNavComponent.prototype.calculateWidthHeight = function () {
            var _this = this;
            setTimeout(function () {
                var totalHeight = _this.sideNavEl.nativeElement.offsetHeight;
                var headerHeight = _this.sideNavHeaderEl.nativeElement.offsetHeight;
                var footerHeight = _this.sideNavFooterEl.nativeElement.offsetHeight;
                _this.height = totalHeight - headerHeight - footerHeight;
                _this.width = _this.sideNavEl.nativeElement.offsetWidth + 20 /* Sicherheitsaufschlag (Schatten, Scrollbar,...) */;
            });
        };
        /**
         * Hängt sich an die Klick-Events der einzelnen SideNavItems, um so, je nach Einstellung der Items,
         * die SideNav zu schließen.
         */
        LuxSideNavComponent.prototype.updateItemClickListeners = function () {
            var _this = this;
            this.itemClickSubscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this.sideNavItems.forEach(function (item) {
                _this.itemClickSubscriptions.push(item.luxClicked.subscribe(function () {
                    if (item.luxCloseOnClick) {
                        _this.close();
                    }
                }));
            });
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSideNavComponent.prototype, "luxDashboardLink", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSideNavComponent.prototype, "luxDashboardLinkTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSideNavComponent.prototype, "luxOpenLinkBlank", void 0);
        __decorate([
            core.ContentChildren(LuxSideNavItemComponent, { descendants: true }),
            __metadata("design:type", core.QueryList)
        ], LuxSideNavComponent.prototype, "sideNavItems", void 0);
        __decorate([
            core.ContentChildren(LuxSideNavItemComponent, { descendants: false }),
            __metadata("design:type", core.QueryList)
        ], LuxSideNavComponent.prototype, "directSideNavItems", void 0);
        __decorate([
            core.ViewChild('sideNav', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxSideNavComponent.prototype, "sideNavEl", void 0);
        __decorate([
            core.ViewChild('sideNavHeader', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxSideNavComponent.prototype, "sideNavHeaderEl", void 0);
        __decorate([
            core.ViewChild('sideNavFooter', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxSideNavComponent.prototype, "sideNavFooterEl", void 0);
        __decorate([
            core.HostListener('window:keyup', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [KeyboardEvent]),
            __metadata("design:returntype", void 0)
        ], LuxSideNavComponent.prototype, "keyEvent", null);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], LuxSideNavComponent.prototype, "windowResize", null);
        LuxSideNavComponent = __decorate([
            core.Component({
                selector: 'lux-side-nav',
                template: "<div [ngStyle]=\"{ visibility: visibility }\">\n  <div\n    class=\"lux-side-nav lux-side-nav-z-index\"\n    [@expandHide]=\"{ value: sideNavExpanded ? 'expanded' : 'void', params: { width: width + 'px' } }\"\n    (@expandHide.done)=\"updateSideNavAfterAnimationIsFinished()\"\n    #sideNav\n  >\n    <div class=\"lux-side-nav-header\" #sideNavHeader>\n      <ng-content select=\"lux-side-nav-header\"></ng-content>\n    </div>\n    <div class=\"lux-side-nav-content\" fxLayout=\"column\" [ngStyle]=\"{ height: height + 'px', visibility: visibility }\">\n      <ng-container *ngIf=\"luxDashboardLink\">\n        <lux-link\n          luxIconName=\"fa-th\"\n          [luxLabel]=\"luxDashboardLinkTitle\"\n          [luxBlank]=\"luxOpenLinkBlank\"\n          [luxHref]=\"luxDashboardLink\"\n        ></lux-link>\n      </ng-container>\n      <ng-container *ngFor=\"let sideNavItem of directSideNavItems\">\n        <ng-container [ngTemplateOutlet]=\"sideNavItem.templateRef\"></ng-container>\n      </ng-container>\n      <ng-content select=\"lux-side-nav-item\"></ng-content>\n    </div>\n    <div class=\"lux-side-nav-footer\" #sideNavFooter>\n      <ng-content select=\"lux-side-nav-footer\"></ng-content>\n    </div>\n  </div>\n  <div\n    class=\"lux-side-nav-overlay lux-side-nav-overlay-z-index\"\n    *ngIf=\"sideNavExpanded\"\n    [@expandHideOverlay]=\"sideNavExpanded ? 'expanded' : 'void'\"\n    (click)=\"close()\"\n  ></div>\n</div>\n",
                animations: [sideNavAnimation, sideNavOverlayAnimation],
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}.lux-side-nav{position:fixed;top:65px;left:-200%;bottom:0;background:#fff;box-shadow:3px 3px 5px 0 rgba(0,0,0,.5)}.lux-side-nav .lux-side-nav-content{overflow-y:auto;min-height:100px}.lux-side-nav .lux-side-nav-content ::ng-deep lux-icon{width:44px;margin-left:-8px!important;margin-right:0!important}.lux-side-nav .lux-side-nav-content ::ng-deep lux-icon i{padding-left:0}.lux-side-nav .lux-side-nav-content ::ng-deep>.lux-side-nav-item-container{padding:0 8px}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item-container{position:relative;min-height:40px}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item-container .lux-side-nav-item-expandable .lux-side-nav-item-expansion-icon{position:absolute;right:0;top:0;bottom:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;z-index:1}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item-container .lux-side-nav-item-button{margin-bottom:2px}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item{display:block;width:100%}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item button{width:100%;display:block;height:40px;z-index:3;padding-top:0;padding-bottom:0}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item button .mat-button-wrapper{height:40px}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item button .mat-button-wrapper .lux-button-label{margin-left:0}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item button[disabled] .mat-button-wrapper{color:rgba(0,0,0,.38)!important}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item .mat-button-wrapper{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-sub-item .mat-button-wrapper{margin-left:36px}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-sub-item .lux-side-nav-sub-item .mat-button-wrapper{margin-left:72px}.lux-side-nav .lux-side-nav-content ::ng-deep .lux-side-nav-item-button{position:relative}.lux-side-nav .lux-side-nav-content lux-link{display:block;min-height:40px;padding:0 8px;margin:10px 0;position:relative}.lux-side-nav .lux-side-nav-content lux-link:after{content:'';left:0;right:0;height:0;position:absolute;margin-top:10px;border-bottom:1px solid rgba(0,0,0,.12)}.lux-side-nav .lux-side-nav-content lux-link ::ng-deep lux-button{display:block}.lux-side-nav .lux-side-nav-content lux-link ::ng-deep lux-button button{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;height:40px}.lux-side-nav .lux-side-nav-content lux-link ::ng-deep lux-button button span{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important}.lux-side-nav .lux-side-nav-content lux-link ::ng-deep lux-button button .lux-button-label{margin-left:0}.lux-side-nav .lux-side-nav-footer,.lux-side-nav .lux-side-nav-header{padding:8px;position:relative}.lux-side-nav .lux-side-nav-footer ::ng-deep .lux-side-nav-footer-content,.lux-side-nav .lux-side-nav-header ::ng-deep .lux-side-nav-footer-content{padding-top:16px}.lux-side-nav .lux-side-nav-header{border-bottom:1px solid rgba(0,0,0,.12)}.lux-side-nav-overlay{position:fixed;top:65px;left:0;bottom:0;right:0;opacity:0;background:rgba(0,0,0,.12)}.lux-side-nav-z-index{z-index:10000}.lux-side-nav-overlay-z-index{z-index:9999}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxSideNavComponent);
        return LuxSideNavComponent;
    }());

    var LuxAppHeaderActionNavComponent = /** @class */ (function () {
        function LuxAppHeaderActionNavComponent() {
        }
        LuxAppHeaderActionNavComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.ViewChild(core.TemplateRef, { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], LuxAppHeaderActionNavComponent.prototype, "templateRef", void 0);
        LuxAppHeaderActionNavComponent = __decorate([
            core.Component({
                selector: 'lux-app-header-action-nav',
                template: "<ng-template>\n  <div\n    class=\"lux-app-header-action-nav\"\n    ngClass.sm=\"lux-app-header-action-nav-mobile\"\n    ngClass.xs=\"lux-app-header-action-nav-mobile\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n    fxLayoutGap=\"4px\"\n  >\n    <ng-content select=\"lux-app-header-action-nav-item\"></ng-content>\n  </div>\n</ng-template>\n",
                styles: [".lux-app-header-action-nav{margin-right:8px}.lux-app-header-action-nav-mobile{margin-right:4px}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxAppHeaderActionNavComponent);
        return LuxAppHeaderActionNavComponent;
    }());

    var LuxAppHeaderComponent = /** @class */ (function () {
        function LuxAppHeaderComponent(mobileHelperService, logger) {
            var _this = this;
            this.mobileHelperService = mobileHelperService;
            this.logger = logger;
            // Wenn die Master-Ansicht der MD-Komponente aendert, muss ein anderer Navigations-Button angezeigt werden
            this.mobileHelperService.masterCollapsedObservable.subscribe(function (isOpen) {
                _this.isMasterOpen = isOpen;
            });
            // Pruefen ob ein Master-Detail aktuell vorhanden ist
            this.mobileHelperService.isRegisteredObservable.subscribe(function (isRegistered) {
                _this.isMasterDetailAvailable = isRegistered;
            });
            // Pruefen ob das Master-Detail einen Wert hat
            this.mobileHelperService.hasValueObservable.subscribe(function (hasValue) {
                _this.masterHasValue = hasValue;
            });
        }
        LuxAppHeaderComponent.prototype.ngOnInit = function () { };
        LuxAppHeaderComponent.prototype.ngOnChanges = function (simpleChanges) {
            if (simpleChanges.luxUserName) {
                this.userNameShort = this.generateUserNameShort();
            }
            if (!this.luxAppTitleShort || this.luxAppTitleShort.length === 0) {
                this.logger.warn('Achtung, der Applikations-Header hat keinen Titel für die mobile Ansicht!');
            }
        };
        LuxAppHeaderComponent.prototype.showMasterClick = function () {
            this.mobileHelperService.openMaster();
        };
        LuxAppHeaderComponent.prototype.isMasterToggleVisible = function () {
            return (this.isMasterDetailAvailable && this.mobileHelperService.isMobile() && !this.isMasterOpen && this.masterHasValue);
        };
        LuxAppHeaderComponent.prototype.onMenuClosed = function () {
            this.customTrigger.nativeElement.focus();
        };
        LuxAppHeaderComponent.prototype.generateUserNameShort = function () {
            var short = this.luxUserName ? this.luxUserName.trim() : '';
            if (short.length > 0) {
                short = short.charAt(0);
            }
            return short.toUpperCase();
        };
        LuxAppHeaderComponent.ctorParameters = function () { return [
            { type: LuxMasterDetailMobileHelperService },
            { type: LuxConsoleService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderComponent.prototype, "luxUserName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderComponent.prototype, "luxAppTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderComponent.prototype, "luxAppTitleShort", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderComponent.prototype, "luxIconName", void 0);
        __decorate([
            core.ViewChild('customTrigger', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxAppHeaderComponent.prototype, "customTrigger", void 0);
        __decorate([
            core.ContentChild(LuxAppHeaderActionNavComponent, { static: false }),
            __metadata("design:type", LuxAppHeaderActionNavComponent)
        ], LuxAppHeaderComponent.prototype, "actionNav", void 0);
        __decorate([
            core.ContentChild(LuxAppHeaderRightNavComponent, { static: false }),
            __metadata("design:type", LuxAppHeaderRightNavComponent)
        ], LuxAppHeaderComponent.prototype, "rightNav", void 0);
        __decorate([
            core.ContentChild(LuxSideNavComponent, { static: false }),
            __metadata("design:type", LuxSideNavComponent)
        ], LuxAppHeaderComponent.prototype, "sideNav", void 0);
        LuxAppHeaderComponent = __decorate([
            core.Component({
                selector: 'lux-app-header',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"lux-app-header lux-p-header\" fxFlex=\"100%\">\n  <!-- ausklappbares Side-Nav (linksb\u00FCndig) -->\n  <div fxLayout=\"row\" fxFlex=\"0 0 auto\" class=\"lux-header-side-nav\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n      <ng-container *ngIf=\"isMasterToggleVisible(); else sideNavTriggerTemplate\">\n        <lux-button\n          (luxClicked)=\"showMasterClick()\"\n          luxIconName=\"keyboard_arrow_left\"\n          class=\"lux-master-toggle\"\n          luxTagId=\"btnMasterToggle\"\n          fxFlex=\"auto\"\n        >\n        </lux-button>\n      </ng-container>\n      <ng-template #sideNavTriggerTemplate>\n        <lux-button\n          class=\"lux-side-nav-trigger\"\n          [ngClass]=\"{ 'lux-side-nav-trigger-active': sideNav.sideNavExpanded }\"\n          (luxClicked)=\"sideNav.toggle()\"\n          luxIconName=\"fas fa-bars\"\n          luxTagId=\"lux-side-nav-trigger\"\n          [luxAriaExpanded]=\"sideNav.sideNavExpanded\"\n          luxAriaLabel=\"Appmen\u00FC\"\n          *ngIf=\"sideNav\"\n        ></lux-button>\n      </ng-template>\n\n      <span class=\"lux-nowrap lux-header-title\" fxFlex=\"auto\">\n        <lux-icon\n          [luxIconName]=\"luxIconName\"\n          class=\"lux-pr-3\"\n          *ngIf=\"luxIconName && !sideNav && !mobileHelperService.isMobile()\"\n        ></lux-icon\n        >{{ mobileHelperService.isMobile() ? luxAppTitleShort : luxAppTitle }}\n      </span>\n    </div>\n  </div>\n  <!-- Action-Menu (mittig) -->\n  <div fxFlex=\"auto\" fxLayoutAlign=\"end center\" class=\"lux-header-action\">\n    <ng-container [ngTemplateOutlet]=\"actionNav.templateRef\" *ngIf=\"actionNav\"></ng-container>\n  </div>\n  <!-- User-Menu (rechtsb\u00FCndig) -->\n  <div\n    fxLayout=\"row\"\n    fxFlex=\"0 0 auto\"\n    fxLayoutAlign=\"end center\"\n    class=\"lux-header-user\"\n    [ngClass]=\"{ 'lux-show-border': !!actionNav }\"\n    *ngIf=\"rightNav\"\n  >\n    <lux-menu\n      class=\"lux-header-menu\"\n      ngClass.sm=\"lux-header-menu-mobile\"\n      ngClass.xs=\"lux-header-menu-mobile\"\n      [luxDisplayExtended]=\"false\"\n      (luxMenuClosed)=\"onMenuClosed()\"\n      luxClassName=\"lux-right-nav-menu\"\n      luxTagId=\"app_header_menu\"\n      fxFlex=\"0 0 auto\"\n    >\n      <ng-container *ngFor=\"let menuItem of rightNav.menuItemComponents\">\n        <lux-menu-item\n          [luxLabel]=\"menuItem.luxLabel\"\n          [luxIconName]=\"menuItem.luxIconName\"\n          [luxTagId]=\"menuItem.luxLabel\"\n          [luxAlwaysVisible]=\"menuItem.luxAlwaysVisible\"\n          [luxDisabled]=\"menuItem.luxDisabled\"\n          [luxRaised]=\"menuItem.luxRaised\"\n          [luxColor]=\"menuItem.luxColor\"\n          [luxRounded]=\"menuItem.luxRounded\"\n          (luxClicked)=\"menuItem.luxClicked.emit($event)\"\n        >\n        </lux-menu-item>\n      </ng-container>\n      <lux-menu-trigger>\n        <button\n          mat-button\n          fxLayout=\"row\"\n          fxLayoutAlign=\"end center\"\n          class=\"lux-right-nav-trigger\"\n          [luxAriaLabel]=\"'Benutzermen\u00FC ' + luxUserName\"\n          aria-haspopup=\"true\"\n          #customTrigger\n        >\n          <span *ngIf=\"luxUserName\">\n            <span class=\"lux-nowrap lux-header-username\" [fxShow.xs]=\"false\" [fxShow.sm]=\"false\">\n              {{ luxUserName }}\n            </span>\n            <span\n              class=\"lux-nowrap lux-header-user-short\"\n              ngClass.gt-sm=\"lux-display-none\"\n              ngClass.sm=\"lux-display-block\"\n              ngClass.xs=\"lux-display-block\"\n            >\n              <span>{{ userNameShort }}</span>\n            </span>\n          </span>\n\n          <lux-icon\n            class=\"lux-icon-menu-0\"\n            luxIconSize=\"1x\"\n            luxIconName=\"fas fa-user\"\n            luxMargin=\"0 0 0 8px\"\n            [fxShow.xs]=\"!luxUserName\"\n            [fxShow.sm]=\"!luxUserName\"\n          >\n          </lux-icon>\n          <lux-icon\n            class=\"lux-icon-menu-1\"\n            luxIconSize=\"1x\"\n            luxIconName=\"fas fa-sort-down\"\n            luxPadding=\"0\"\n            luxMargin=\"-3px 0 0 0\"\n          >\n          </lux-icon>\n        </button>\n      </lux-menu-trigger>\n    </lux-menu>\n  </div>\n</div>\n\n<ng-content select=\"lux-app-header-right-nav\"></ng-content>\n<ng-content select=\"lux-side-nav\"></ng-content>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;max-height:65px;height:65px;max-width:100%;display:block;z-index:999}.lux-app-header{box-shadow:3px 3px 5px 0 rgba(0,0,0,.5);background-color:#335c85;z-index:10000;overflow:hidden;white-space:nowrap}.lux-app-header ::ng-deep button,.lux-app-header>div{height:45px!important}.lux-app-header ::ng-deep button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.lux-app-header ::ng-deep button .mat-button-wrapper{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.lux-app-header>div:not(.lux-header-action) ::ng-deep span{color:#fff}.lux-app-header ::ng-deep span{font-size:16px}.lux-app-header ::ng-deep button:not(.mat-primary):not(.mat-warn):not(.mat-accent):not(.lux-button-rounded){color:#fff}.lux-app-header ::ng-deep i,.lux-app-header ::ng-deep mat-icon{font-size:18px!important}.lux-app-header .lux-header-user>div:first-child{margin-right:3px}.lux-app-header .lux-header-user .lux-header-user-short{margin-right:5px}.lux-app-header .lux-header-user .lux-header-user-short>span{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:25px;border:1px solid;border-radius:50%;color:#335c85;background:#fff;padding:0 4px}.lux-app-header .lux-header-action{min-width:0}.lux-app-header .lux-header-action ::ng-deep button{padding-top:0;padding-bottom:0;font-weight:400!important}.lux-app-header .lux-header-action ::ng-deep button.lux-button-rounded{width:36px!important;height:36px!important;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;box-shadow:unset}.lux-app-header .lux-header-action ::ng-deep button .lux-button-label{font-weight:400!important}.lux-app-header .lux-header-action ::ng-deep .lux-menu-extended{padding:0}.lux-app-header .lux-header-side-nav .lux-side-nav-trigger ::ng-deep i{font-size:1.5em}.lux-app-header .lux-header-side-nav .lux-master-toggle,.lux-app-header .lux-header-side-nav .lux-side-nav-trigger{min-width:45px;width:45px;max-width:45px;margin-right:8px}.lux-app-header .lux-header-side-nav .lux-master-toggle ::ng-deep button,.lux-app-header .lux-header-side-nav .lux-side-nav-trigger ::ng-deep button{min-width:45px;width:45px;max-width:45px;padding:0}.lux-app-header .lux-header-side-nav .lux-side-nav-trigger-active{background:rgba(0,0,0,.12)}.lux-app-header .lux-header-side-nav .lux-right-nav-trigger{cursor:pointer;padding-right:8px;padding-left:8px}.lux-app-header .lux-header-side-nav .lux-right-nav-trigger ::ng-deep .mat-button-wrapper>span{display:inline-block}::ng-deep .lux-right-nav-menu .lux-action-nav-menu lux-button,::ng-deep .lux-right-nav-menu .lux-menu-item,::ng-deep .lux-right-nav-menu lux-button,::ng-deep .lux-side-nav .lux-side-nav-content .lux-action-nav-menu lux-button,::ng-deep .lux-side-nav .lux-side-nav-content .lux-menu-item,::ng-deep .lux-side-nav .lux-side-nav-content lux-button{color:#335c85}::ng-deep .lux-right-nav-menu .lux-action-nav-menu lux-button .mat-button-wrapper,::ng-deep .lux-right-nav-menu .lux-menu-item .mat-button-wrapper,::ng-deep .lux-right-nav-menu lux-button .mat-button-wrapper,::ng-deep .lux-side-nav .lux-side-nav-content .lux-action-nav-menu lux-button .mat-button-wrapper,::ng-deep .lux-side-nav .lux-side-nav-content .lux-menu-item .mat-button-wrapper,::ng-deep .lux-side-nav .lux-side-nav-content lux-button .mat-button-wrapper{font-weight:400!important;font-size:16px}::ng-deep .lux-right-nav-menu lux-icon,::ng-deep .lux-side-nav .lux-side-nav-content lux-icon{color:#616161}::ng-deep .lux-right-nav-menu lux-icon i,::ng-deep .lux-right-nav-menu lux-icon mat-icon,::ng-deep .lux-side-nav .lux-side-nav-content lux-icon i,::ng-deep .lux-side-nav .lux-side-nav-content lux-icon mat-icon{font-size:18px!important}::ng-deep .lux-side-nav-footer,::ng-deep .lux-side-nav-header{color:#0073b3}.lux-display-block{display:block!important}.lux-display-none{display:none!important}.lux-show-border{border-left:1px solid rgba(255,255,255,.12)}.lux-header-menu-mobile ::ng-deep .lux-menu-trigger{padding:0 4px;margin:0}.lux-header-menu-mobile ::ng-deep .lux-menu-trigger button{padding:0 6px}"]
            }),
            __metadata("design:paramtypes", [LuxMasterDetailMobileHelperService, LuxConsoleService])
        ], LuxAppHeaderComponent);
        return LuxAppHeaderComponent;
    }());

    var LuxCardActionsComponent = /** @class */ (function () {
        function LuxCardActionsComponent() {
        }
        LuxCardActionsComponent.prototype.ngOnInit = function () { };
        LuxCardActionsComponent = __decorate([
            core.Component({
                selector: 'lux-card-actions',
                template: '<div fxLayout="row" class="lux-flex-layout-gap-10"><ng-content></ng-content></div>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxCardActionsComponent);
        return LuxCardActionsComponent;
    }());

    var LuxCardContentExpandedComponent = /** @class */ (function () {
        function LuxCardContentExpandedComponent() {
        }
        LuxCardContentExpandedComponent.prototype.ngOnInit = function () { };
        LuxCardContentExpandedComponent = __decorate([
            core.Component({
                selector: 'lux-card-content-expanded',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxCardContentExpandedComponent);
        return LuxCardContentExpandedComponent;
    }());

    var LuxCardContentComponent = /** @class */ (function () {
        function LuxCardContentComponent() {
        }
        LuxCardContentComponent.prototype.ngOnInit = function () { };
        LuxCardContentComponent = __decorate([
            core.Component({
                selector: 'lux-card-content',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxCardContentComponent);
        return LuxCardContentComponent;
    }());

    var LuxCardInfoComponent = /** @class */ (function () {
        function LuxCardInfoComponent() {
        }
        LuxCardInfoComponent.prototype.ngOnInit = function () { };
        LuxCardInfoComponent = __decorate([
            core.Component({
                selector: 'lux-card-info',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxCardInfoComponent);
        return LuxCardInfoComponent;
    }());

    /**
     * Animation für das Aus- und Einklappen des erweiterten Karteninhalts.
     */
    var expansionAnim = animations$1.trigger('expansionAnim', [
        animations$1.transition('void => expand', [
            animations$1.style({ height: '0', opacity: 0 }),
            animations$1.animate('{{ duration }}ms', animations$1.style({
                height: '*',
                opacity: 1
            }))
        ], { params: { duration: '300ms', startHeight: '0' } }),
        animations$1.transition('expand => void', [
            animations$1.style({ height: '*', opacity: 1 }),
            animations$1.animate('{{ duration }}ms', animations$1.style({
                height: '0',
                opacity: 0
            }))
        ], { params: { duration: '300ms', startHeight: '0' } })
    ]);

    var LuxCardComponent = /** @class */ (function () {
        function LuxCardComponent(componentsConfigService, cdr) {
            this.componentsConfigService = componentsConfigService;
            this.cdr = cdr;
            this.luxTitleLineBreak = true;
            this.luxExpanded = false;
            this.luxExpandedChange = new core.EventEmitter();
            this.luxAfterExpansion = new core.EventEmitter();
            this.luxClicked = new core.EventEmitter();
            this.animationDisabled = true;
        }
        LuxCardComponent.prototype.ngOnInit = function () {
            if (!this.luxTagId) {
                this.luxTagId = this.luxTitle;
            }
            if (this.luxClicked.observers && this.luxClicked.observers.length > 0) {
                this.hasCardAction = true;
            }
        };
        LuxCardComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Über die Konfiguration abfragen, ob die Animationen für Cards deaktiviert sind.
            this.configSubscription = this.componentsConfigService.config.subscribe(function (config) {
                _this.animationDisabled = !config.cardExpansionAnimationActive;
                _this.cdr.detectChanges();
            });
        };
        LuxCardComponent.prototype.ngOnDestroy = function () {
            this.configSubscription.unsubscribe();
        };
        Object.defineProperty(LuxCardComponent.prototype, "showButtons", {
            get: function () {
                return !!this.actionsComponent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxCardComponent.prototype, "showIcon", {
            get: function () {
                return this.iconComponents && this.iconComponents.length === 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxCardComponent.prototype, "showExpandedToggle", {
            get: function () {
                return !!this.contentExpandedComponent;
            },
            enumerable: true,
            configurable: true
        });
        LuxCardComponent.prototype.changeContentExpansion = function (event) {
            LuxUtil.stopEventPropagation(event);
            this.luxExpanded = !this.luxExpanded;
            this.luxExpandedChange.emit(this.luxExpanded);
        };
        LuxCardComponent.prototype.clicked = function () {
            if (!this.luxDisabled && !this.showButtons) {
                this.luxClicked.emit(null);
            }
        };
        /**
         * setzt das korrekte Alignment der Titelzeile. Ist der Titel im Zweifel mehrzeilig, so wird das Icon
         * im Titel nach oben ausgerichtet, damit es nicht mittig nebem dem Titel schwebt. Ist der Titel aber
         * einzeilig, so wird das Icon vertikal zum Titel alignt.
         */
        LuxCardComponent.prototype.getTitleAlignment = function () {
            if (this.luxTitleLineBreak && this.showIcon) {
                return 'left top';
            }
            return 'left center';
        };
        /**
         * Gibt den Status der Animation zurück.
         */
        LuxCardComponent.prototype.getAnimState = function () {
            return this.luxExpanded ? 'expand' : 'void';
        };
        /**
         * Gibt die Dauer der Animation abhängig davon ob sie via Config deaktiviert wurden oder nicht zurück.
         */
        LuxCardComponent.prototype.getAnimDuration = function () {
            return this.animationDisabled ? 0 : 300;
        };
        /**
         * Wird am Ende der Ausklappanimation aufgerufen und setzt das animationActive-Flag auf false und gibt ein Event
         * über den luxAfterExpansion-EventEmitter ab.
         */
        LuxCardComponent.prototype.expansionDone = function () {
            this.luxAfterExpansion.emit();
        };
        LuxCardComponent.ctorParameters = function () { return [
            { type: LuxComponentsConfigService },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxCardComponent.prototype, "luxTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxCardComponent.prototype, "luxSubTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxCardComponent.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxCardComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxCardComponent.prototype, "luxTitleLineBreak", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxCardComponent.prototype, "luxExpanded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxCardComponent.prototype, "luxExpandedChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxCardComponent.prototype, "luxAfterExpansion", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxCardComponent.prototype, "luxClicked", void 0);
        __decorate([
            core.ContentChildren(LuxIconComponent, { descendants: false }),
            __metadata("design:type", core.QueryList)
        ], LuxCardComponent.prototype, "iconComponents", void 0);
        __decorate([
            core.ContentChild(LuxCardActionsComponent, { static: false }),
            __metadata("design:type", LuxCardActionsComponent)
        ], LuxCardComponent.prototype, "actionsComponent", void 0);
        __decorate([
            core.ContentChild(LuxCardInfoComponent, { static: false }),
            __metadata("design:type", LuxCardInfoComponent)
        ], LuxCardComponent.prototype, "infoComponent", void 0);
        __decorate([
            core.ContentChild(LuxCardContentExpandedComponent, { static: false }),
            __metadata("design:type", LuxCardContentExpandedComponent)
        ], LuxCardComponent.prototype, "contentExpandedComponent", void 0);
        __decorate([
            core.ContentChild(LuxCardContentComponent, { static: false }),
            __metadata("design:type", LuxCardContentComponent)
        ], LuxCardComponent.prototype, "contentComponent", void 0);
        LuxCardComponent = __decorate([
            core.Component({
                selector: 'lux-card',
                template: "<mat-card\n  (click)=\"clicked()\"\n  fxLayout=\"row\"\n  luxTagIdHandler\n  [luxTagId]=\"luxTagId\"\n  [ngClass]=\"{ 'lux-cursor': !showButtons && hasCardAction, 'lux-m-2': true, 'lux-p-3': true }\"\n  [ngClass.gt-sm]=\"{ 'lux-cursor': !showButtons && hasCardAction, 'lux-m-3': true }\"\n>\n  <div fxFlex=\"flex\" fxLayout=\"column\" class=\"lux-overflow-y-hidden lux-card-content-container\">\n    <mat-card-title\n      class=\"lux-highlight lux-card-title\"\n      [ngClass]=\"{ 'lux-display-none': (!luxTitle || luxTitle.length === 0) && !infoComponent }\"\n    >\n      <div fxLayout=\"row\" fxLayoutAlign=\"{{ getTitleAlignment() }}\" class=\"lux-flex-layout-gap-10\">\n        <div fxFlex=\"none\" *ngIf=\"showIcon\">\n          <div class=\"lux-icon lux-highlight\">\n            <ng-content select=\"lux-icon\"></ng-content>\n          </div>\n        </div>\n\n        <div\n          fxFlex=\"grow\"\n          class=\"lux-card-title-container\"\n          ngClass=\"{{ luxTitleLineBreak ? 'lux-hyphenate' : 'lux-crop' }}\"\n          [ngClass]=\"{ 'lux-pt-1': !!luxTitle, 'lux-pb-2': !!luxTitle }\"\n          title=\"{{ luxTitle }}\"\n        >\n          {{ luxTitle }}\n        </div>\n\n        <div fxFlex=\"none\" fxLayoutAlign=\"end\">\n          <ng-content *ngIf=\"!showExpandedToggle\" select=\"lux-card-info\"></ng-content>\n          <lux-button\n            *ngIf=\"showExpandedToggle\"\n            [luxIconName]=\"luxExpanded ? 'fa-angle-up' : 'fa-angle-down'\"\n            (luxClicked)=\"changeContentExpansion($event)\"\n            luxTagId=\"expandedButton\"\n            class=\"lux-expanded-button\"\n          ></lux-button>\n        </div>\n      </div>\n    </mat-card-title>\n\n    <mat-card-subtitle\n      title=\"{{ luxSubTitle }}\"\n      [ngClass]=\"{\n        'lux-hyphenate': luxTitleLineBreak,\n        'lux-crop': !luxTitleLineBreak,\n        'lux-display-none': !luxSubTitle || luxSubTitle.length === 0,\n        'lux-pb-2': !!luxSubTitle,\n        'lux-pt-2': !!luxSubTitle,\n        'lux-icon-padding': showIcon\n      }\"\n    >\n      {{ luxSubTitle }}\n    </mat-card-subtitle>\n\n    <mat-card-content fxLayout=\"column\" class=\"lux-pb-4 lux-pt-4\">\n      <!-- Der normale Card-Content ist immer sichtbar. -->\n      <div class=\"lux-card-content\">\n        <ng-content select=\"lux-card-content\"></ng-content>\n      </div>\n      <!-- Der expanded Card-Content ist nur sichtbar, wenn der Ausklapp-Button geklickt wurde. -->\n      <div\n        class=\"lux-card-content-expanded\"\n        *ngIf=\"luxExpanded && contentExpandedComponent\"\n        [@expansionAnim]=\"{ value: getAnimState(), params: { duration: getAnimDuration() } }\"\n        (@expansionAnim.done)=\"expansionDone()\"\n      >\n        <ng-content select=\"lux-card-content-expanded\"></ng-content>\n      </div>\n    </mat-card-content>\n\n    <mat-card-actions class=\"lux-card-actions\" [ngClass]=\"{ 'lux-display-none': !showButtons }\" #luxActionButtons>\n      <div fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <ng-content select=\"lux-card-actions\"></ng-content>\n      </div>\n    </mat-card-actions>\n  </div>\n</mat-card>\n",
                animations: [expansionAnim],
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}.lux-highlight{color:#0073b3}.lux-icon{width:24px;height:24px;font-size:24px;font-weight:400;padding:0 8px 0 0}.lux-icon-padding{padding-left:42px}.lux-card-title,::ng-deep .lux-icon lux-icon>i,::ng-deep .lux-icon lux-icon>mat-icon{padding-bottom:0!important;padding-top:0!important;padding-left:0!important}::ng-deep .lux-tab-content .lux-card{margin-right:1px;margin-left:1px}::ng-deep lux-card-info lux-icon>i,::ng-deep lux-card-info lux-icon>mat-icon{padding:0!important}::ng-deep mat-card-actions.lux-card-actions{margin-right:0;margin-left:0}::ng-deep .lux-card-content,::ng-deep .lux-card-content-expanded{width:100%;display:block}::ng-deep .lux-card-content-expanded{background:#fff;overflow:hidden}.lux-card-title-container{overflow-y:hidden}.lux-card-content-container{padding:4px}.lux-card-content-container>*{margin-bottom:0}.lux-expanded-button ::ng-deep button{min-width:30px;height:30px;padding:0}.lux-expanded-button ::ng-deep button i{padding:0}"]
            }),
            __metadata("design:paramtypes", [LuxComponentsConfigService, core.ChangeDetectorRef])
        ], LuxCardComponent);
        return LuxCardComponent;
    }());

    var LuxDividerComponent = /** @class */ (function () {
        function LuxDividerComponent() {
            this._luxVertical = false;
            this.luxInset = false;
            this.classes = '';
        }
        Object.defineProperty(LuxDividerComponent.prototype, "luxVertical", {
            get: function () {
                return this._luxVertical;
            },
            set: function (vertical) {
                this._luxVertical = vertical;
                this.updateHostClasses();
            },
            enumerable: true,
            configurable: true
        });
        LuxDividerComponent.prototype.ngOnInit = function () {
            this.updateHostClasses();
        };
        LuxDividerComponent.prototype.updateHostClasses = function () {
            this.classes = this.luxVertical ? 'lux-vertical-divider' : 'lux-horizontal-divider';
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxDividerComponent.prototype, "luxInset", void 0);
        __decorate([
            core.HostBinding('class'),
            __metadata("design:type", Object)
        ], LuxDividerComponent.prototype, "classes", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxDividerComponent.prototype, "luxVertical", null);
        LuxDividerComponent = __decorate([
            core.Component({
                selector: 'lux-divider',
                template: "<mat-divider [inset]=\"luxInset\" [vertical]=\"luxVertical\"> </mat-divider>\n",
                styles: [".mat-divider-vertical{width:0;height:100%}:host{display:block}:host.lux-vertical-divider{position:relative;margin-left:8px;margin-right:8px;min-width:1px}:host.lux-horizontal-divider{margin-top:8px;margin-bottom:8px;min-height:1px}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxDividerComponent);
        return LuxDividerComponent;
    }());

    var LuxListItemContentComponent = /** @class */ (function () {
        function LuxListItemContentComponent() {
        }
        LuxListItemContentComponent.prototype.ngOnInit = function () { };
        LuxListItemContentComponent = __decorate([
            core.Component({
                selector: 'lux-list-item-content',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxListItemContentComponent);
        return LuxListItemContentComponent;
    }());

    var LuxListItemIconComponent = /** @class */ (function () {
        function LuxListItemIconComponent() {
        }
        LuxListItemIconComponent.prototype.ngOnInit = function () { };
        LuxListItemIconComponent = __decorate([
            core.Component({
                selector: 'lux-list-item-icon',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxListItemIconComponent);
        return LuxListItemIconComponent;
    }());

    var LuxListItemComponent = /** @class */ (function () {
        function LuxListItemComponent(elementRef) {
            this.elementRef = elementRef;
            this.role = 'option';
            this.tabindex = '-1';
            this.luxClicked = new core.EventEmitter();
            this.luxTitleLineBreak = true;
        }
        Object.defineProperty(LuxListItemComponent.prototype, "luxTitle", {
            get: function () {
                return this._luxTitle;
            },
            set: function (title) {
                this._luxTitle = title;
                this.ariaLabel = this.getLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxListItemComponent.prototype, "luxSubTitle", {
            get: function () {
                return this._luxSubTitle;
            },
            set: function (subTitle) {
                this._luxSubTitle = subTitle;
                this.ariaLabel = this.getLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxListItemComponent.prototype, "luxSelected", {
            get: function () {
                return this._luxSelected;
            },
            set: function (selected) {
                this._luxSelected = selected;
                this.ariaSelected = selected;
            },
            enumerable: true,
            configurable: true
        });
        LuxListItemComponent.prototype.clicked = function () {
            this.luxClicked.emit(null);
        };
        LuxListItemComponent.prototype.focus = function () {
            this.elementRef.nativeElement.focus();
        };
        LuxListItemComponent.prototype.getLabel = function () {
            return (this.luxTitle ? this.luxTitle : '') + " " + (this.luxSubTitle ? this.luxSubTitle : '');
        };
        LuxListItemComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.HostBinding('attr.aria-label'),
            __metadata("design:type", Object)
        ], LuxListItemComponent.prototype, "ariaLabel", void 0);
        __decorate([
            core.HostBinding('attr.aria-selected'),
            __metadata("design:type", Object)
        ], LuxListItemComponent.prototype, "ariaSelected", void 0);
        __decorate([
            core.HostBinding('attr.role'),
            __metadata("design:type", Object)
        ], LuxListItemComponent.prototype, "role", void 0);
        __decorate([
            core.HostBinding('attr.tabindex'),
            __metadata("design:type", Object)
        ], LuxListItemComponent.prototype, "tabindex", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxListItemComponent.prototype, "luxClicked", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxListItemComponent.prototype, "luxTitleLineBreak", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxListItemComponent.prototype, "luxTitle", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxListItemComponent.prototype, "luxSubTitle", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxListItemComponent.prototype, "luxSelected", null);
        LuxListItemComponent = __decorate([
            core.Component({
                selector: 'lux-list-item',
                template: "<lux-card\n  [ngClass]=\"{ 'lux-list-item-selected': luxSelected }\"\n  class=\"lux-item\"\n  [luxTitle]=\"luxTitle\"\n  [luxSubTitle]=\"luxSubTitle\"\n  [luxTitleLineBreak]=\"luxTitleLineBreak\"\n  (luxClicked)=\"clicked()\"\n>\n  <lux-card-info>\n    <ng-content select=\"lux-list-item-icon\"></ng-content>\n  </lux-card-info>\n  <lux-card-content>\n    <ng-content select=\"lux-list-item-content\"></ng-content>\n  </lux-card-content>\n</lux-card>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}.lux-card-footer{margin:0}.lux-item{display:block}.lux-item-aria-description,.lux-item-aria-label{position:absolute;height:0;width:0;visibility:hidden}:host ::ng-deep lux-card>mat-card.mat-card{margin:0}"]
            }),
            __metadata("design:paramtypes", [core.ElementRef])
        ], LuxListItemComponent);
        return LuxListItemComponent;
    }());

    var LuxListComponent = /** @class */ (function () {
        function LuxListComponent() {
            this._luxSelectedPosition = 0;
            this.clickSubscriptions = [];
            this.keyManager = new a11y.FocusKeyManager([]);
            this.luxFocusedItemChange = new core.EventEmitter();
            this.luxFocusedPositionChange = new core.EventEmitter();
            this.luxSelectedPositionChange = new core.EventEmitter();
            this.luxEmptyIconName = 'fas fa-info-circle';
            this.luxEmptyIconSize = '5x';
            this.luxEmptyLabel = 'Keine Einträge vorhanden';
            this.role = 'listbox';
            this.tabindex = '0';
            this.ariaMulti = 'true';
        }
        LuxListComponent.prototype.onKeydown = function ($event) {
            this.keydown($event);
        };
        Object.defineProperty(LuxListComponent.prototype, "luxSelectedPosition", {
            get: function () {
                return this._luxSelectedPosition;
            },
            set: function (position) {
                if (position === this.luxSelectedPosition) {
                    return;
                }
                this.focus(position);
                this.select(position);
                this.scroll(position);
            },
            enumerable: true,
            configurable: true
        });
        LuxListComponent.prototype.ngOnInit = function () { };
        LuxListComponent.prototype.isEmpty = function () {
            return !this.luxItems || this.luxItems.length === 0;
        };
        LuxListComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Click-Events der LuxListItems erhalten
            this.listItemsSubscription = this.luxItems.changes.subscribe(function () {
                _this.listenForClicks();
                _this.keyManager = new a11y.FocusKeyManager(_this.luxItems);
                if (_this.previousFocusedPosition) {
                    _this.keyManager.setActiveItem(_this.previousFocusedPosition);
                }
            });
            this.listenForClicks();
            this.keyManager = new a11y.FocusKeyManager(this.luxItems);
            if (this.luxSelectedPosition) {
                this.keyManager.setActiveItem(this.luxSelectedPosition);
            }
        };
        LuxListComponent.prototype.ngOnDestroy = function () {
            var e_1, _a;
            // Sämtliche Subscriptions auflösen
            if (this.listItemsSubscription) {
                this.listItemsSubscription.unsubscribe();
            }
            try {
                for (var _b = __values(this.clickSubscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var subscription = _c.value;
                    subscription.unsubscribe();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * Wird beim Drücken einer Taste ausgeführt und handelt die Aktionen bei speziellen Tasten
         * (UP_ARROW || DOWN_ARROW werden vom KeyManager selbstständig gepflegt)
         * @param $event
         */
        LuxListComponent.prototype.keydown = function ($event) {
            var keyCode = $event.keyCode;
            switch (keyCode) {
                case keycodes.SPACE:
                case keycodes.ENTER:
                    this.select(this.keyManager.activeItemIndex);
                    $event.preventDefault();
                    break;
                case keycodes.HOME:
                case keycodes.END:
                    keyCode === keycodes.HOME ? this.keyManager.setFirstItemActive() : this.keyManager.setLastItemActive();
                    this.focus(this.keyManager.activeItemIndex);
                    $event.preventDefault();
                    break;
                case keycodes.UP_ARROW:
                    this.keyManager.setPreviousItemActive();
                    this.focus(this.keyManager.activeItemIndex);
                    $event.preventDefault();
                    break;
                case keycodes.DOWN_ARROW:
                    this.keyManager.setNextItemActive();
                    this.focus(this.keyManager.activeItemIndex);
                    $event.preventDefault();
                    break;
                default:
                    this.keyManager.onKeydown($event);
            }
        };
        /**
         * Auf Click-Events der hier bekannten LuxListItems hören und entsprechend das selektierte ListItem aktualisieren.
         */
        LuxListComponent.prototype.listenForClicks = function () {
            var _this = this;
            var e_2, _a;
            try {
                for (var _b = __values(this.clickSubscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var subscription = _c.value;
                    subscription.unsubscribe();
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.clickSubscriptions = [];
            this.luxItems.forEach(function (listItem, index) {
                _this.clickSubscriptions.push(listItem.luxClicked.subscribe(function () {
                    _this.focus(index);
                    _this.select(index);
                }));
            });
        };
        /**
         * Merkt sich die position als Selektions-Position und aktualisiert den luxSelected-Wert
         * aller luxItems, die hier bekannt sind.
         * @param position
         */
        LuxListComponent.prototype.select = function (position) {
            this._luxSelectedPosition = position;
            this.previousFocusedPosition = position;
            this.luxSelectedPositionChange.emit(position);
            if (this.luxItems) {
                this.luxItems.forEach(function (listItem) {
                    listItem.luxSelected = false;
                });
                var selectedListItem = this.findListItem(position);
                if (selectedListItem) {
                    selectedListItem.luxSelected = true;
                }
            }
        };
        /**
         * Merkt sich die position als Fokus-Position und aktualisiert die CSS-Klassen der ListItems.
         * @param position
         */
        LuxListComponent.prototype.focus = function (position) {
            this.keyManager.setActiveItem(position);
            this.luxFocusedPositionChange.emit(position);
            this.luxFocusedItemChange.emit(this.keyManager.activeItem);
            this.previousFocusedPosition = position;
        };
        /**
         * Scrollt zu dem Element an der position.
         * @param position
         */
        LuxListComponent.prototype.scroll = function (position) {
            if (this.luxItems) {
                var listItem = this.keyManager.activeItem;
                if (listItem) {
                    listItem.elementRef.nativeElement.scrollIntoView(true);
                }
            }
        };
        /**
         * Gibt das ListItem an der position zurück bzw. null wenn die luxItems undefined/null sind.
         * @param position
         */
        LuxListComponent.prototype.findListItem = function (position) {
            return this.luxItems
                ? this.luxItems.find(function (listItem, index) { return index === position; })
                : null;
        };
        __decorate([
            core.ContentChildren(LuxListItemComponent),
            __metadata("design:type", core.QueryList)
        ], LuxListComponent.prototype, "luxItems", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxListComponent.prototype, "luxFocusedItemChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxListComponent.prototype, "luxFocusedPositionChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxListComponent.prototype, "luxSelectedPositionChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxListComponent.prototype, "luxEmptyIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxListComponent.prototype, "luxEmptyIconSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxListComponent.prototype, "luxEmptyLabel", void 0);
        __decorate([
            core.HostBinding('attr.role'),
            __metadata("design:type", Object)
        ], LuxListComponent.prototype, "role", void 0);
        __decorate([
            core.HostBinding('attr.tabindex'),
            __metadata("design:type", Object)
        ], LuxListComponent.prototype, "tabindex", void 0);
        __decorate([
            core.HostBinding('attr.aria-multiselectable'),
            __metadata("design:type", Object)
        ], LuxListComponent.prototype, "ariaMulti", void 0);
        __decorate([
            core.HostListener('keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], LuxListComponent.prototype, "onKeydown", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxListComponent.prototype, "luxSelectedPosition", null);
        LuxListComponent = __decorate([
            core.Component({
                selector: 'lux-list',
                template: "<!-- die tats\u00E4chlichen LuxListItems via Content-Projection einbinden -->\n<ng-content *ngIf=\"!isEmpty()\"></ng-content>\n<!-- wenn keine gefunden werden konnten, Empty-Icon und Empty-Label anzeigen -->\n<div class=\"lux-list-empty\" fxFill *ngIf=\"isEmpty()\">\n  <div fxFlexFill fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <lux-icon class=\"lux-list-empty-icon\" [luxIconName]=\"luxEmptyIconName\" [luxIconSize]=\"luxEmptyIconSize\"> </lux-icon>\n    <span class=\"lux-list-empty-icon-text\">\n      <strong>{{ luxEmptyLabel }}</strong>\n    </span>\n  </div>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{position:relative;height:100%;width:100%;display:block;overflow-y:auto;box-sizing:border-box}.lux-list-empty{position:absolute;top:0;left:0;right:0;bottom:0}.lux-list-empty-icon,.lux-list-empty-icon-text{opacity:.6;color:rgba(0,0,0,.87);padding:0 8px}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxListComponent);
        return LuxListComponent;
    }());

    var LuxDetailViewComponent = /** @class */ (function () {
        function LuxDetailViewComponent() {
        }
        LuxDetailViewComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxDetailViewComponent.prototype, "tempRef", void 0);
        LuxDetailViewComponent = __decorate([
            core.Component({
                selector: 'lux-detail-view',
                template: '',
                styles: ['']
            }),
            __metadata("design:paramtypes", [])
        ], LuxDetailViewComponent);
        return LuxDetailViewComponent;
    }());

    var LuxMasterFooterComponent = /** @class */ (function () {
        function LuxMasterFooterComponent() {
        }
        LuxMasterFooterComponent.prototype.ngOnInit = function () { };
        LuxMasterFooterComponent = __decorate([
            core.Component({
                selector: 'lux-master-footer',
                template: '<ng-content></ng-content>',
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{border-top:1px solid #d3d3d3;background-color:#e7ebf0;padding:12px 24px;font-weight:500;z-index:100}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxMasterFooterComponent);
        return LuxMasterFooterComponent;
    }());

    var LuxMasterHeaderContentComponent = /** @class */ (function () {
        function LuxMasterHeaderContentComponent() {
        }
        LuxMasterHeaderContentComponent.prototype.ngOnInit = function () { };
        LuxMasterHeaderContentComponent = __decorate([
            core.Component({
                selector: 'lux-master-header-content',
                template: "\n    <ng-content></ng-content>\n  "
            }),
            __metadata("design:paramtypes", [])
        ], LuxMasterHeaderContentComponent);
        return LuxMasterHeaderContentComponent;
    }());

    var LuxMasterHeaderComponent = /** @class */ (function () {
        function LuxMasterHeaderComponent(masterDetailMobileHelperService) {
            var _this = this;
            this.masterDetailMobileHelperService = masterDetailMobileHelperService;
            this.luxClicked = new core.EventEmitter();
            this.isMobile = this.luxToggleHidden;
            this.masterDetailMobileHelperService.masterCollapsedObservable.subscribe(function (isOpen) {
                if (_this.masterDetailMobileHelperService.isMobile()) {
                    _this.iconName = 'keyboard_arrow_right';
                }
                else {
                    if (isOpen) {
                        _this.iconName = 'keyboard_arrow_left';
                    }
                    else {
                        _this.iconName = 'keyboard_arrow_right';
                    }
                }
                _this.open = isOpen;
                _this.isMobile = _this.luxToggleHidden;
            });
        }
        LuxMasterHeaderComponent.prototype.ngOnInit = function () { };
        LuxMasterHeaderComponent.prototype.clicked = function (that) {
            if (this.open) {
                this.masterDetailMobileHelperService.closeMaster();
            }
            else {
                this.masterDetailMobileHelperService.openMaster();
            }
            this.luxClicked.emit(this.open);
            that.elementRef.nativeElement.focus();
        };
        LuxMasterHeaderComponent.ctorParameters = function () { return [
            { type: LuxMasterDetailMobileHelperService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxMasterHeaderComponent.prototype, "luxToggleHidden", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMasterHeaderComponent.prototype, "luxClicked", void 0);
        __decorate([
            core.HostBinding('class.lux-no-toggle'),
            __metadata("design:type", Object)
        ], LuxMasterHeaderComponent.prototype, "isMobile", void 0);
        LuxMasterHeaderComponent = __decorate([
            core.Component({
                selector: 'lux-master-header',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  <div fxFlex=\"calc(100% - 50px)\">\n    <ng-content></ng-content>\n  </div>\n\n  <lux-button\n    (luxClicked)=\"clicked(toggleButton)\"\n    [luxIconName]=\"iconName\"\n    class=\"lux-master-header-collapse\"\n    luxTagId=\"master-detail.toggle\"\n    fxFlex=\"0 0 50px\"\n    fxFlexAlign=\"start\"\n    #toggleButton\n    luxAriaLabel=\"{{ iconName === 'keyboard_arrow_left' ? 'Masterliste zuklappen' : 'Masterliste aufklappen' }}\"\n    luxAriaLabelSelector=\"button\"\n    [luxAriaExpanded]=\"iconName === 'keyboard_arrow_left'\"\n    luxAriaExpandedSelector=\"button\"\n    *ngIf=\"!luxToggleHidden\"\n  >\n  </lux-button>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{box-shadow:0 1px 1px 0 #888;background-color:#708daa;color:#e7ebf0;padding:12px 0 12px 24px;font-weight:500;z-index:100}:host.lux-no-toggle{padding-right:24px}.lux-master-header-collapse ::ng-deep button{padding:0;min-width:50px}"]
            }),
            __metadata("design:paramtypes", [LuxMasterDetailMobileHelperService])
        ], LuxMasterHeaderComponent);
        return LuxMasterHeaderComponent;
    }());

    var LuxMasterSimpleComponent = /** @class */ (function () {
        function LuxMasterSimpleComponent() {
        }
        LuxMasterSimpleComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterSimpleComponent.prototype, "luxTitleProp", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterSimpleComponent.prototype, "luxSubTitleProp", void 0);
        __decorate([
            core.ContentChild('luxSimpleContent', { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxMasterSimpleComponent.prototype, "contentTempRef", void 0);
        __decorate([
            core.ContentChild('luxSimpleIcon', { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxMasterSimpleComponent.prototype, "iconTempRef", void 0);
        LuxMasterSimpleComponent = __decorate([
            core.Component({
                selector: 'lux-master-simple',
                template: ''
            }),
            __metadata("design:paramtypes", [])
        ], LuxMasterSimpleComponent);
        return LuxMasterSimpleComponent;
    }());

    var LuxMasterViewComponent = /** @class */ (function () {
        function LuxMasterViewComponent() {
            this.overflowY = true;
        }
        LuxMasterViewComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.HostBinding('class.lux-overflow-y-auto'),
            __metadata("design:type", Boolean)
        ], LuxMasterViewComponent.prototype, "overflowY", void 0);
        LuxMasterViewComponent = __decorate([
            core.Component({
                selector: 'lux-master-view',
                template: '<ng-content select="lux-master-header"></ng-content>' +
                    '<ng-content></ng-content>' +
                    '<ng-content select="[lux-master-footer]"></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxMasterViewComponent);
        return LuxMasterViewComponent;
    }());

    var LuxTabComponent = /** @class */ (function () {
        function LuxTabComponent() {
            this.luxCounterCap = 10;
            this.luxDisabled = false;
        }
        LuxTabComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTabComponent.prototype, "luxTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTabComponent.prototype, "luxIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTabComponent.prototype, "luxCounter", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTabComponent.prototype, "luxCounterCap", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxTabComponent.prototype, "luxShowNotification", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTabComponent.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTabComponent.prototype, "luxTagIdHeader", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTabComponent.prototype, "luxTagIdContent", void 0);
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxTabComponent.prototype, "contentTemplate", void 0);
        LuxTabComponent = __decorate([
            core.Component({
                selector: 'lux-tab',
                template: ''
            }),
            __metadata("design:paramtypes", [])
        ], LuxTabComponent);
        return LuxTabComponent;
    }());

    var LuxTabsComponent = /** @class */ (function () {
        function LuxTabsComponent(componentsConfigService, queryService) {
            this.componentsConfigService = componentsConfigService;
            this.queryService = queryService;
            this.tabChange$ = new rxjs.ReplaySubject(1);
            this.luxTabAnimationActive = true;
            this.luxActiveTab = 0;
            this.luxIconSize = '2x';
            this.luxDisplayDivider = true;
            this.luxLazyLoading = false;
            this.luxActiveTabChanged = new core.EventEmitter();
        }
        LuxTabsComponent_1 = LuxTabsComponent;
        LuxTabsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.tabChange$
                .asObservable()
                .pipe(operators.debounceTime(LuxTabsComponent_1._DEBOUNCE_TIME))
                .subscribe(function (tabChange) {
                _this.luxActiveTab = tabChange.index;
                _this.luxActiveTabChanged.emit(tabChange);
            });
            this.configSubscription = this.componentsConfigService.config.subscribe(function () {
                _this.labelUppercase = _this.componentsConfigService.isLabelUppercaseForSelector('lux-tab');
            });
        };
        LuxTabsComponent.prototype.ngOnChanges = function (simpleChanges) {
            var activeTabChange = simpleChanges.activeTab;
            if (activeTabChange) {
                if (!activeTabChange.currentValue) {
                    this.luxActiveTab = 0;
                }
            }
        };
        LuxTabsComponent.prototype.ngAfterViewInit = function () {
            this.rerenderTabs();
        };
        LuxTabsComponent.prototype.ngOnDestroy = function () {
            this.configSubscription.unsubscribe();
        };
        LuxTabsComponent.prototype.getNotificationIconColorClassForTab = function (luxTab) {
            return luxTab.luxShowNotification === true || luxTab.luxShowNotification === 'true'
                ? LuxTabsComponent_1._notificationNewClass
                : LuxTabsComponent_1._notificationReadClass;
        };
        /**
         * Forciert Angular die Tab-Header neu zu pruefen, in dem
         * der erste Tab ein Leerzeichen bekommt, welches im naechsten
         * Pruefzyklus entfernt wird.
         */
        LuxTabsComponent.prototype.rerenderTabs = function () {
            var _this = this;
            if (this.luxTabs.length > 0) {
                setTimeout(function () {
                    _this.luxTabs.first.luxTitle += ' ';
                    setTimeout(function () {
                        _this.luxTabs.first.luxTitle = _this.luxTabs.first.luxTitle.trim();
                    });
                });
            }
        };
        LuxTabsComponent.prototype.trackTab = function (index, luxTab) {
            return index;
        };
        var LuxTabsComponent_1;
        LuxTabsComponent._DEBOUNCE_TIME = 50;
        LuxTabsComponent._notificationNewClass = 'lux-notification-new';
        LuxTabsComponent._notificationReadClass = 'lux-notification-read';
        LuxTabsComponent.ctorParameters = function () { return [
            { type: LuxComponentsConfigService },
            { type: LuxMediaQueryObserverService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTabsComponent.prototype, "luxTabAnimationActive", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTabsComponent.prototype, "luxActiveTab", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTabsComponent.prototype, "luxIconSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTabsComponent.prototype, "luxDisplayDivider", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTabsComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTabsComponent.prototype, "luxLazyLoading", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxTabsComponent.prototype, "luxActiveTabChanged", void 0);
        __decorate([
            core.ContentChildren(LuxTabComponent),
            __metadata("design:type", core.QueryList)
        ], LuxTabsComponent.prototype, "luxTabs", void 0);
        __decorate([
            core.ViewChild('matTabs', { read: core.ElementRef, static: true }),
            __metadata("design:type", Object)
        ], LuxTabsComponent.prototype, "tabHeader", void 0);
        LuxTabsComponent = LuxTabsComponent_1 = __decorate([
            core.Component({
                selector: 'lux-tabs',
                template: "<mat-tab-group\n  [dynamicHeight]=\"false\"\n  [selectedIndex]=\"luxActiveTab\"\n  (selectedTabChange)=\"tabChange$.next($event)\"\n  [ngClass]=\"{\n    'lux-tabs-no-divider': !luxDisplayDivider,\n    'lux-tabs-no-anim': !luxTabAnimationActive,\n    'lux-tabs-mobile': queryService.isXS() || queryService.isSM()\n  }\"\n  #matTabs\n  luxTagIdHandler\n  [luxTagId]=\"luxTagId\"\n>\n  <ng-container *ngIf=\"luxTabAnimationActive\">\n    <!-- Lazy Loading\n         ============\n         Durch die Property \"luxLazyLoading\" musste der mat-tab-Teil gedoppelt werden,\n         da ein *ngIf im <ng-template matTabLabel> nicht m\u00F6glich war.\n         Der Testcase \"luxLazyLoading=true mit Animation\" war rot, da der Inhalt beim\n         Testen der Nachbedingung noch nicht zur Verf\u00FCgung stand.\n    -->\n    <ng-container *ngIf=\"luxLazyLoading\">\n      <mat-tab *ngFor=\"let luxTab of luxTabs\" [label]=\"luxTab.luxTitle\" [disabled]=\"luxTab.luxDisabled\">\n        <ng-template matTabLabel>\n          <ng-container *ngTemplateOutlet=\"tabLabelTemplate; context: { $implicit: luxTab }\"></ng-container>\n        </ng-template>\n        <ng-template matTabContent>\n          <div luxTagIdHandler [luxTagId]=\"luxTab.luxTagIdContent\" class=\"lux-mt-3 lux-tab-content\">\n            <ng-container *ngTemplateOutlet=\"luxTab.contentTemplate\"></ng-container>\n            <span>&nbsp;</span>\n          </div>\n        </ng-template>\n      </mat-tab>\n    </ng-container>\n    <ng-container *ngIf=\"!luxLazyLoading\">\n      <mat-tab *ngFor=\"let luxTab of luxTabs\" [label]=\"luxTab.luxTitle\" [disabled]=\"luxTab.luxDisabled\">\n        <ng-template matTabLabel>\n          <ng-container *ngTemplateOutlet=\"tabLabelTemplate; context: { $implicit: luxTab }\"></ng-container>\n        </ng-template>\n        <div luxTagIdHandler [luxTagId]=\"luxTab.luxTagIdContent\" class=\"lux-mt-3 lux-tab-content\">\n          <ng-container *ngTemplateOutlet=\"luxTab.contentTemplate\"></ng-container>\n          <span>&nbsp;</span>\n        </div>\n      </mat-tab>\n    </ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"!luxTabAnimationActive\">\n    <mat-tab *ngFor=\"let luxTab of luxTabs\" [label]=\"luxTab.luxTitle\" [disabled]=\"luxTab.luxDisabled\">\n      <ng-template matTabLabel>\n        <ng-container *ngTemplateOutlet=\"tabLabelTemplate; context: { $implicit: luxTab }\"></ng-container>\n      </ng-template>\n    </mat-tab>\n  </ng-container>\n</mat-tab-group>\n\n<ng-container *ngIf=\"!luxTabAnimationActive\">\n  <ng-container *ngFor=\"let luxTab of luxTabs; trackBy: trackTab; let i = index\">\n    <section\n      luxTagIdHandler\n      [luxTagId]=\"luxTab.luxTagIdContent\"\n      *ngIf=\"!luxLazyLoading\"\n      [class.lux-display-none]=\"i !== luxActiveTab\"\n      class=\"lux-mt-3 lux-tab-content\"\n    >\n      <ng-container *ngTemplateOutlet=\"luxTab.contentTemplate\"></ng-container>\n      <span>&nbsp;</span>\n    </section>\n    <section\n      luxTagIdHandler\n      [luxTagId]=\"luxTab.luxTagIdContent\"\n      *ngIf=\"luxLazyLoading && i === luxActiveTab\"\n      class=\"lux-mt-3 lux-tab-content\"\n    >\n      <ng-container *ngTemplateOutlet=\"luxTab.contentTemplate\"></ng-container>\n      <span>&nbsp;</span>\n    </section>\n  </ng-container>\n</ng-container>\n\n<ng-template #tabLabelTemplate let-luxTab>\n  <div luxTagIdHandler [luxTagId]=\"luxTab.luxTagIdHeader\" class=\"lux-mt-3 lux-mb-3\">\n    <div fxFlex=\"auto\" fxLayout.gt-sm=\"column\" fxLayout.xs=\"row\">\n      <lux-icon\n        fxFlex=\"0 0 auto\"\n        [luxIconName]=\"luxTab.luxIconName\"\n        [luxIconSize]=\"luxIconSize\"\n        *ngIf=\"luxTab.luxIconName\"\n      ></lux-icon>\n\n      <div\n        fxLayout.gt-sm=\"row\"\n        ngClass.gt-md=\"lux-label-lower\"\n        [luxBadgeNotification]=\"luxTab.luxCounter\"\n        [luxBadgeCap]=\"luxTab.luxCounterCap\"\n        [luxBadgeOverlap]=\"false\"\n      >\n        <div\n          class=\"lux-tab-title\"\n          [ngClass]=\"{ 'lux-uppercase': labelUppercase }\"\n          fxShow.sm=\"false\"\n          fxShow.xs=\"false\"\n          fxShow=\"true\"\n          *ngIf=\"luxTab.luxIconName\"\n        >\n          {{ luxTab.luxTitle }}\n        </div>\n        <div\n          class=\"lux-tab-title\"\n          [ngClass]=\"{ 'lux-uppercase': labelUppercase }\"\n          fxShow=\"true\"\n          *ngIf=\"!luxTab.luxIconName\"\n        >\n          {{ luxTab.luxTitle }}\n        </div>\n\n        <div\n          fxFlex=\"auto\"\n          [ngClass]=\"[\n            'lux-tabs-notification-icon',\n            getNotificationIconColorClassForTab(luxTab),\n            luxTab.luxCounter !== null && luxTab.luxCounter !== undefined ? 'lux-badge-notification-visible' : ''\n          ]\"\n          *ngIf=\"luxTab.luxShowNotification\"\n        ></div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}mat-tab-group.lux-tabs-no-divider ::ng-deep mat-tab-header{border-bottom:none}.lux-tabs-notification-icon{margin-top:-4px;border:1px solid #000;height:12px;width:12px;border-radius:9px;position:absolute;right:-12px;top:4px}.lux-tabs-notification-icon.lux-badge-notification-visible{top:-8px;right:-27px;z-index:1}.lux-tab-title{margin-left:4px;margin-top:3px}.lux-notification-read{visibility:hidden}.lux-notification-new{background-color:#95bc4c}.lux-counter-offset{margin-right:-7px}.lux-label-lower{padding-top:4px}.lux-tabs-no-anim ::ng-deep .mat-ink-bar{-webkit-transition:none!important;transition:none!important}.lux-locked{pointer-events:none;background:red;color:red}:host ::ng-deep .mat-tab-label{min-height:60px;height:auto;position:relative}:host ::ng-deep .mat-tab-label mat-chip{background:#fff!important}@media (max-width:959px){:host ::ng-deep :host ::ng-deep .mat-tab-label{min-width:108px}}@media (max-width:599px){:host ::ng-deep :host ::ng-deep .mat-tab-label{min-width:70px;width:70px}}"]
            }),
            __metadata("design:paramtypes", [LuxComponentsConfigService,
                LuxMediaQueryObserverService])
        ], LuxTabsComponent);
        return LuxTabsComponent;
    }());

    var LuxDetailWrapperComponent = /** @class */ (function () {
        function LuxDetailWrapperComponent() {
            this.luxDetailRendered = new core.EventEmitter();
        }
        Object.defineProperty(LuxDetailWrapperComponent.prototype, "luxDetailTemplate", {
            get: function () {
                return this._luxDetailTemplate;
            },
            set: function (ref) {
                this._luxDetailTemplate = ref;
            },
            enumerable: true,
            configurable: true
        });
        LuxDetailWrapperComponent.prototype.ngOnInit = function () { };
        LuxDetailWrapperComponent.prototype.ngAfterViewInit = function () {
            this.luxDetailRendered.emit();
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxDetailWrapperComponent.prototype, "luxDetailRendered", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxDetailWrapperComponent.prototype, "luxDetailContext", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", core.TemplateRef),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], LuxDetailWrapperComponent.prototype, "luxDetailTemplate", null);
        LuxDetailWrapperComponent = __decorate([
            core.Component({
                selector: 'lux-detail-wrapper',
                template: '<ng-container *ngTemplateOutlet="luxDetailTemplate; context: luxDetailContext"></ng-container>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxDetailWrapperComponent);
        return LuxDetailWrapperComponent;
    }());

    var LuxMasterDetailComponent = /** @class */ (function () {
        function LuxMasterDetailComponent(mobileHelperService, cdr, cfr, liveAnnouncer) {
            this.mobileHelperService = mobileHelperService;
            this.cdr = cdr;
            this.cfr = cfr;
            this.liveAnnouncer = liveAnnouncer;
            this.luxSelectedDetailChange = new core.EventEmitter();
            this.luxScrolled = new core.EventEmitter();
            this.overflowY = true;
            this._luxMasterList = new rxjs.BehaviorSubject([]);
            this._luxOpen = true;
            this.updateDetail$ = new rxjs.ReplaySubject(1);
            this.detailContext = { $implicit: {} };
            // Flag welches bestimmt ob die Empty-Anzeigen der Masterliste anhand der Detail-Ansicht ausgerichtet werden
            this.alignEmptyIndicators = true;
            this.luxEmptyIconMaster = 'fas fa-info-circle';
            this.luxEmptyLabelMaster = 'Keine Einträge vorhanden';
            this.luxEmptyIconDetail = 'fas fa-info-circle';
            this.luxEmptyLabelDetail = 'Kein Element ausgewählt';
            this.luxEmptyIconMasterSize = '5x';
            this.luxEmptyIconDetailSize = '5x';
            this.luxMasterSpinnerDelay = 1000;
            this.luxTitleLineBreak = false;
            this.luxMasterIsLoading = false;
            this.luxCompareWith = function (o1, o2) { return o1 === o2; };
            this.mobileHelperService.register();
        }
        Object.defineProperty(LuxMasterDetailComponent.prototype, "luxOpen", {
            get: function () {
                return this._luxOpen;
            },
            set: function (open) {
                if (open) {
                    this.mobileHelperService.openMaster();
                }
                else {
                    this.mobileHelperService.closeMaster();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMasterDetailComponent.prototype, "luxSelectedDetail", {
            /* Selected Detail Get/Set */
            get: function () {
                return this._luxSelectedDetail;
            },
            set: function (value) {
                this.updateDetail$.next(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMasterDetailComponent.prototype, "luxMasterList", {
            /* Master List Get/Set */
            get: function () {
                return this._luxMasterList.getValue();
            },
            set: function (value) {
                if (this.masterListLength && value && this.masterListLength < value.length) {
                    this.announcePossibleInfiniteScrolling();
                }
                this._luxMasterList.next(value);
                this.masterListLength = value ? value.length : 0;
            },
            enumerable: true,
            configurable: true
        });
        LuxMasterDetailComponent.prototype.ngOnInit = function () {
            this.handleMasterListUpdate();
            this.handleViewCollapse();
            this.mobileHelperService.openMaster();
        };
        LuxMasterDetailComponent.prototype.ngAfterViewInit = function () {
            this.handleDetailUpdate();
            this.handleMasterQueryList();
        };
        LuxMasterDetailComponent.prototype.ngOnDestroy = function () {
            this.mobileHelperService.unregister();
            this.updateDetailSubscription.unsubscribe();
        };
        LuxMasterDetailComponent.prototype.ngDoCheck = function () {
            // Wurde ein Element in die Masterliste gepusht oder entfernt?
            if (this.luxMasterList && this.luxMasterList.length !== this.masterListLength) {
                if (this.luxMasterList.length > this.masterListLength) {
                    this.announcePossibleInfiniteScrolling();
                }
                // Wenn ja, das selektierte Detail neurendern
                this.masterListLength = this.luxMasterList.length;
                this.luxSelectedDetail = this.luxMasterList[this.selectedPosition];
                this.announcePossibleInfiniteScrolling();
            }
            // Ausrichtung der Empty-Indikatoren der Masterliste prüfen
            if (!this.mobileHelperService.isMobile() && (!this.luxMasterList || this.luxMasterList.length === 0)) {
                this.checkEmptyIndicatorAlignment();
            }
        };
        /**
         * Wenn in der LuxList ein neuer Selected-Wert gepusht wird, diesen abfangen und
         * ein neues Detail auswählen.
         * @param $event
         */
        LuxMasterDetailComponent.prototype.onSelectedChange = function ($event) {
            if ($event > -1) {
                this.selectedPosition = $event;
                this.updateDetail$.next(this.luxMasterList[$event]);
                if (this.mobileHelperService.isMobile()) {
                    this.mobileHelperService.closeMaster();
                }
            }
        };
        /**
         * Bestimmt ob die Masterliste auf- oder eingeklappt ist.
         * @param open
         */
        LuxMasterDetailComponent.prototype.toggleList = function (open) {
            if (open) {
                this.mobileHelperService.openMaster();
            }
            else {
                this.mobileHelperService.closeMaster();
            }
            if (this.tabsComponent) {
                this.tabsComponent.rerenderTabs();
            }
        };
        /**
         * Prueft ob die Detailansicht gerade fuer den User sichtbar ist.
         * @returns boolean
         */
        LuxMasterDetailComponent.prototype.isDetailInvisible = function () {
            return this.mobileHelperService.isMobile() && this.luxOpen;
        };
        LuxMasterDetailComponent.prototype.onInfiniteScrollingLoad = function ($event) {
            this.luxScrolled.emit($event);
        };
        LuxMasterDetailComponent.prototype.onSwipeLeft = function () {
            if (this.mobileHelperService.isMobile()) {
                this.mobileHelperService.closeMaster();
            }
        };
        LuxMasterDetailComponent.prototype.onSwipeRight = function () {
            if (this.mobileHelperService.isMobile()) {
                this.mobileHelperService.openMaster();
            }
        };
        /**
         * Kapselung von der übergebenen luxCompareWith-Funktion.
         * Fängt undefinierte Objekte ab und returned stattdessen false.
         * @param o1
         * @param o2
         */
        LuxMasterDetailComponent.prototype.compareObjects = function (o1, o2) {
            if (!o1 || !o2) {
                return false;
            }
            return this.luxCompareWith(o1, o2);
        };
        /**
         * Steuert das Breitenverhaeltnis von Master und Detail je nachdem
         * ob der Master auf- oder eingeklappt ist und ob eine Mobilansicht aktiv ist.
         */
        LuxMasterDetailComponent.prototype.updateOpen = function () {
            if (this.luxOpen) {
                if (this.mobileHelperService.isMobile()) {
                    this.flexMaster = '100';
                    this.flexDetail = '0';
                }
                else {
                    this.flexMaster = '30';
                    this.flexDetail = '70';
                }
            }
            else {
                if (this.mobileHelperService.isMobile()) {
                    this.flexMaster = '0';
                    this.flexDetail = '100';
                }
                else {
                    this.flexMaster = '5';
                    this.flexDetail = '95';
                }
            }
        };
        /**
         * Kümmert sich um Änderungen an der HTML-Node der Master-Liste.
         * Rückt dabei das selektierte Element in den Fokus und berechnet wie viele Elemente
         * gerade in der Liste sichtbar sein können (für das Durchschalten mit Pfeiltasten benötigt).
         */
        LuxMasterDetailComponent.prototype.handleMasterQueryList = function () {
            var _this = this;
            this.luxMasterQueryList.changes.subscribe(function (masterListElements) {
                if (masterListElements.first) {
                    var nativeElement = masterListElements.first.nativeElement;
                    _this.maxItemsVisible = Math.floor(nativeElement.offsetHeight / nativeElement.offsetHeight);
                }
                // Der Abschnitt hier fängt den Fall ab, dass z.B. das LuxMasterList-Array selbst angepasst wird (z.B. durch Array.reverse)
                // Das sorgt dafür, dass das visuell selektierte Element auch das passende zur Detail-View ist.
                var newSelectedPosition = _this.luxMasterList.indexOf(_this.luxSelectedDetail);
                if (newSelectedPosition !== _this.selectedPosition) {
                    setTimeout(function () {
                        _this.selectedPosition = newSelectedPosition;
                    });
                }
            });
        };
        /**
         * Kümmert sich um die Kollabierung der Master-Liste, wenn zwischen Mobil- und Desktopansicht gewechselt wird.
         */
        LuxMasterDetailComponent.prototype.handleViewCollapse = function () {
            var _this = this;
            this.mobileHelperService.masterCollapsedObservable.subscribe(function (open) {
                // Falls nichts selektiert ist, sollte die Darstellung beim Wechsel in kleine Media Queries die Masterliste zeigen
                if (_this.mobileHelperService.isMobile() && !_this.luxSelectedDetail && !open) {
                    open = true;
                }
                _this._luxOpen = open;
                _this.updateOpen();
            });
        };
        /**
         * Kümmert sich um Änderungen an dem selektierten Detail.
         * Dabei werden mehrere Zuweisungen an das Detail über throttleTime gebündelt und nur das Aktuellste genommen.
         * Anschließend wird die Komponente angewiesen das neue Detail-Objekt zu rendern.
         */
        LuxMasterDetailComponent.prototype.handleDetailUpdate = function () {
            var _this = this;
            this.updateDetailSubscription = this.updateDetail$.asObservable().subscribe(function (detail) {
                if (!detail) {
                    _this.detailViewContainerRef.clear();
                    _this.setNewDetail(detail);
                }
                else {
                    if (!_this.compareObjects(_this.luxSelectedDetail, detail)) {
                        _this.detailViewContainerRef.clear();
                        if (detail) {
                            _this.detailContext = { $implicit: detail };
                            // Den Detail-Wrapper erzeugen und abfangen, wann die Nodes geladen worden sind
                            var child = _this.cfr.resolveComponentFactory(LuxDetailWrapperComponent);
                            var childRef = _this.detailViewContainerRef.createComponent(child);
                            var instance = childRef.instance;
                            instance.luxDetailContext = _this.detailContext;
                            instance.luxDetailTemplate = _this.detailView.tempRef;
                            instance.luxDetailRendered.subscribe(function () {
                                _this.setNewDetail(detail);
                            });
                            // Die Detailansicht nach dem Wechsel wieder nach oben scrollen lassen
                            _this.detailViewContainerRef.element.nativeElement.parentNode.scrollTop = 0;
                            _this.cdr.detectChanges();
                        }
                    }
                }
            });
        };
        /**
         * Wird aufgerufen nachdem ein neues Detail-Template gerendert wurde und aktualisiert
         * luxSelectedDetail dementsprechend.
         */
        LuxMasterDetailComponent.prototype.setNewDetail = function (detail) {
            if (!this.compareObjects(this.luxSelectedDetail, detail)) {
                this._luxSelectedDetail = detail;
                this.selectedPosition = this.luxMasterList.indexOf(detail);
                this.luxSelectedDetailChange.emit(this.luxSelectedDetail);
                // Die Master-Liste fokussieren (die Liste gibt es nur einmal, weil wir auf Changes hören, ist sie aber in einer QueryList)
                this.luxMasterQueryList.first.nativeElement.focus();
                if (this.mobileHelperService.isMobile()) {
                    this.luxOpen = false;
                }
                this.mobileHelperService.hasValue = !!this._luxSelectedDetail;
                this.cdr.detectChanges();
            }
        };
        /**
         * Kümmert sich um den Fall, dass die Master-Liste selbst sich ändert.
         */
        LuxMasterDetailComponent.prototype.handleMasterListUpdate = function () {
            var _this = this;
            this._luxMasterList
                .asObservable()
                .pipe(
            // Workaround um ExpressionChanged-Fehler zu vermeiden
            operators.delay(0), operators.tap(function () {
                if (!_this.luxMasterList || _this.luxMasterList.length === 0) {
                    _this.luxSelectedDetail = undefined;
                }
            }))
                .subscribe();
        };
        /**
         * Prüft ob das Header- oder -Footer-Element der Masterliste ca. 50% der Master-Höhe einnehmen.
         *
         * Wenn ja, wird die Ausrichtung des Master-Empty-Labels und Master-Empty-Icons nicht mehr anhand des Detail bestimmt.
         */
        LuxMasterDetailComponent.prototype.checkEmptyIndicatorAlignment = function () {
            var headerHeight = this.masterHeader ? this.masterHeader.nativeElement.offsetHeight : 0;
            var footerHeight = this.masterFooter ? this.masterFooter.nativeElement.offsetHeight : 0;
            if (this.masterContainer) {
                // Max-Height ist die Hälfte der Master-Container Höhe minus eine kleine Pauschale von 100px damit
                // die Ansicht nicht zu knapp ist
                var maxHeight = this.masterContainer.nativeElement.offsetHeight / 2 - 100;
                this.alignEmptyIndicators = !(headerHeight > maxHeight || footerHeight > maxHeight);
            }
        };
        /**
         * Meldet über den LiveAnnouncer, dass evtl. weitere Daten via InfiniteScrolling nachgeladen werden könnten.
         *
         * "assertive", damit die Meldung auf jeden Fall vom ScreenReader vorgelesen wird und nicht von etwaigen anderen
         * Aussagen verdeckt wird.
         */
        LuxMasterDetailComponent.prototype.announcePossibleInfiniteScrolling = function () {
            this.liveAnnouncer.announce('Die Masterliste hat weitere Einträge erhalten. ' +
                'Aufgrund des Infinite-Scrollings könnten vielleicht noch mehr Einträge nachgeladen werden.', 'assertive');
        };
        LuxMasterDetailComponent.ctorParameters = function () { return [
            { type: LuxMasterDetailMobileHelperService },
            { type: core.ChangeDetectorRef },
            { type: core.ComponentFactoryResolver },
            { type: a11y.LiveAnnouncer }
        ]; };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMasterDetailComponent.prototype, "luxSelectedDetailChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMasterDetailComponent.prototype, "luxScrolled", void 0);
        __decorate([
            core.ContentChild(LuxMasterSimpleComponent, { static: false }),
            __metadata("design:type", Object)
        ], LuxMasterDetailComponent.prototype, "masterSimple", void 0);
        __decorate([
            core.ContentChild(LuxDetailViewComponent, { static: false }),
            __metadata("design:type", Object)
        ], LuxMasterDetailComponent.prototype, "detailView", void 0);
        __decorate([
            core.ContentChild(LuxMasterFooterComponent, { static: false, read: core.ElementRef }),
            __metadata("design:type", core.ElementRef)
        ], LuxMasterDetailComponent.prototype, "masterFooter", void 0);
        __decorate([
            core.ViewChildren(LuxListComponent, { read: core.ElementRef }),
            __metadata("design:type", core.QueryList)
        ], LuxMasterDetailComponent.prototype, "luxMasterQueryList", void 0);
        __decorate([
            core.ViewChildren(LuxListItemComponent),
            __metadata("design:type", core.QueryList)
        ], LuxMasterDetailComponent.prototype, "luxMasterListItemQueryList", void 0);
        __decorate([
            core.ViewChild(LuxMasterHeaderComponent, { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxMasterDetailComponent.prototype, "masterHeader", void 0);
        __decorate([
            core.ViewChild(LuxListItemComponent, { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxMasterDetailComponent.prototype, "luxMasterEntryElementRef", void 0);
        __decorate([
            core.ContentChild(LuxTabsComponent, { static: false }),
            __metadata("design:type", LuxTabsComponent)
        ], LuxMasterDetailComponent.prototype, "tabsComponent", void 0);
        __decorate([
            core.ViewChild('masterSpinnerCard', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxMasterDetailComponent.prototype, "masterSpinnerCard", void 0);
        __decorate([
            core.ViewChild('detailContainer', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxMasterDetailComponent.prototype, "detailFrame", void 0);
        __decorate([
            core.ViewChild('detailEmpty', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxMasterDetailComponent.prototype, "detailEmpty", void 0);
        __decorate([
            core.ViewChild('detailViewContainerRef', { read: core.ViewContainerRef, static: true }),
            __metadata("design:type", core.ViewContainerRef)
        ], LuxMasterDetailComponent.prototype, "detailViewContainerRef", void 0);
        __decorate([
            core.ViewChild('masterContainer', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxMasterDetailComponent.prototype, "masterContainer", void 0);
        __decorate([
            core.HostBinding('class.lux-overflow-y-auto'),
            __metadata("design:type", Boolean)
        ], LuxMasterDetailComponent.prototype, "overflowY", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterDetailComponent.prototype, "luxEmptyIconMaster", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterDetailComponent.prototype, "luxEmptyLabelMaster", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterDetailComponent.prototype, "luxEmptyIconDetail", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterDetailComponent.prototype, "luxEmptyLabelDetail", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxMasterDetailComponent.prototype, "luxEmptyIconMasterSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxMasterDetailComponent.prototype, "luxEmptyIconDetailSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxMasterDetailComponent.prototype, "luxMasterSpinnerDelay", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterDetailComponent.prototype, "luxTagIdMaster", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxMasterDetailComponent.prototype, "luxTagIdDetail", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxMasterDetailComponent.prototype, "luxTitleLineBreak", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxMasterDetailComponent.prototype, "luxMasterIsLoading", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxMasterDetailComponent.prototype, "luxCompareWith", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxMasterDetailComponent.prototype, "luxOpen", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxMasterDetailComponent.prototype, "luxSelectedDetail", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], LuxMasterDetailComponent.prototype, "luxMasterList", null);
        LuxMasterDetailComponent = __decorate([
            core.Component({
                selector: 'lux-master-detail',
                template: "<div\n  class=\"lux-master-detail\"\n  fxLayout=\"row\"\n  fxFlex=\"grow\"\n  (swipeleft)=\"onSwipeLeft()\"\n  (swiperight)=\"onSwipeRight()\"\n  fxFill\n>\n  <div\n    [fxFlex]=\"flexMaster\"\n    fxLayout=\"column\"\n    class=\"lux-master-container\"\n    tabindex=\"1\"\n    luxTagIdHandler\n    [luxTagId]=\"luxTagIdMaster\"\n    [ngClass]=\"{\n      'lux-hidden': !luxOpen && mobileHelperService.isMobile(),\n      'lux-0-width': !luxOpen && mobileHelperService.isMobile(),\n      'lux-master-container-mobile': mobileHelperService.isMobile(),\n      'lux-empty-elements-aligned': alignEmptyIndicators\n    }\"\n    #masterContainer\n  >\n    <!-- Header Element ueber der Master-Liste -->\n    <lux-master-header\n      (luxClicked)=\"toggleList($event)\"\n      [luxToggleHidden]=\"\n        (mobileHelperService.isMobile() && !this.luxSelectedDetail && !luxOpen) || mobileHelperService.isMobile()\n      \"\n      [ngClass]=\"{\n        'lux-not-open': !luxOpen,\n        'lux-hidden': !luxOpen && mobileHelperService.isMobile()\n      }\"\n    >\n      <ng-content select=\"lux-master-header-content\" *ngIf=\"luxOpen\"></ng-content>\n    </lux-master-header>\n\n    <!-- Master Simple Component gesetzt? -> Standard Lux Liste als Master nutzen  (window:keydown)=\"handleMasterKeyInput($event)\" -->\n    <lux-master-view fxFlex=\"grow\" [ngClass]=\"{ 'lux-hidden': !luxOpen && !mobileHelperService.isMobile() }\">\n      <lux-list\n        fxFlex=\"grow\"\n        class=\"lux-overflow-y-auto lux-overflow-wrap-break-word\"\n        luxInfiniteScroll\n        [luxScrollPercent]=\"85\"\n        [luxImmediateCallback]=\"true\"\n        [luxIsLoading]=\"luxMasterIsLoading\"\n        [luxEmptyIconSize]=\"luxEmptyIconMasterSize\"\n        [luxEmptyLabel]=\"luxEmptyLabelMaster\"\n        [luxEmptyIconName]=\"luxEmptyIconMaster\"\n        [luxSelectedPosition]=\"selectedPosition\"\n        (luxSelectedPositionChange)=\"onSelectedChange($event)\"\n        (luxScrolled)=\"onInfiniteScrollingLoad($event)\"\n      >\n        <lux-list-item\n          *ngFor=\"let masterElement of luxMasterList\"\n          [luxTitleLineBreak]=\"luxTitleLineBreak\"\n          luxTitle=\"{{ masterElement | luxPropertyFromObject: masterSimple.luxTitleProp }}\"\n          luxSubTitle=\"{{ masterElement | luxPropertyFromObject: masterSimple.luxSubTitleProp }}\"\n        >\n          <lux-list-item-icon>\n            <ng-container\n              *ngTemplateOutlet=\"masterSimple.iconTempRef; context: { $implicit: masterElement }\"\n            ></ng-container>\n          </lux-list-item-icon>\n          <lux-list-item-content>\n            <ng-container\n              *ngTemplateOutlet=\"masterSimple.contentTempRef; context: { $implicit: masterElement }\"\n            ></ng-container>\n          </lux-list-item-content>\n        </lux-list-item>\n\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"center\"\n          #masterSpinnerCard\n          [@masterIsLoadingChanged]=\"luxMasterIsLoading\"\n          [ngClass]=\"{ 'lux-spinner-hidden': !luxMasterIsLoading }\"\n        >\n          <br *ngIf=\"luxMasterIsLoading\" />\n          <mat-progress-spinner class=\"lux-m-3\" color=\"primary\" mode=\"indeterminate\" diameter=\"48\" fxFlex=\"0 0 auto\">\n          </mat-progress-spinner>\n          <br *ngIf=\"luxMasterIsLoading\" />\n        </div>\n      </lux-list>\n    </lux-master-view>\n\n    <!-- Kein Master Simple Component gesetzt? -> Von Aufrufer eingegebenen Content als Master nutzen -->\n    <ng-content *ngIf=\"!masterSimple\" select=\"lux-master-view\"></ng-content>\n\n    <!-- Footer Element unter der Master-Liste -->\n    <ng-content select=\"lux-master-footer\" *ngIf=\"luxOpen\"></ng-content>\n  </div>\n\n  <div\n    [fxFlex]=\"flexDetail\"\n    fxFill\n    luxTagIdHandler\n    class=\"lux-detail-container lux-overflow-y-auto\"\n    [ngClass]=\"{ 'lux-display-none': isDetailInvisible() }\"\n    [luxTagId]=\"luxTagIdDetail\"\n    tabindex=\"2\"\n  >\n    <ng-template #detailViewContainerRef></ng-template>\n\n    <!-- Das Empty-Icon und Empty-Label, wenn kein Detail gegeben ist -->\n    <div\n      class=\"lux-detail-empty\"\n      [ngClass]=\"{ 'lux-display-none': isDetailInvisible() || selectedPosition > -1 }\"\n      fxLayout=\"column\"\n      fxLayoutAlign=\"center center\"\n      #detailEmpty\n    >\n      <lux-icon class=\"lux-detail-empty-icon\" [luxIconName]=\"luxEmptyIconDetail\" [luxIconSize]=\"luxEmptyIconDetailSize\">\n      </lux-icon>\n      <span class=\"lux-detail-empty-icon-text\">\n        <strong>{{ luxEmptyLabelDetail }}</strong>\n      </span>\n    </div>\n  </div>\n</div>\n",
                animations: [
                    animations$1.trigger('masterIsLoadingChanged', [
                        animations$1.state('true', animations$1.style({ opacity: 1 })),
                        animations$1.state('false', animations$1.style({ opacity: 0 })),
                        animations$1.transition('1 => 0', animations$1.animate('0.5s')),
                        animations$1.transition('0 => 1', animations$1.animate('1s'))
                    ])
                ],
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:focus{outline:0}.lux-master-detail{max-width:100%;z-index:10}.lux-master-container{border-right:1px solid #d3d3d3;border-left:1px solid #d3d3d3;border-bottom:1px solid #d3d3d3;min-width:50px;position:relative}.lux-master-container .lux-not-open{padding:12px 0}.lux-master-container:not(.lux-master-container-mobile).lux-empty-elements-aligned lux-list{position:static!important}.lux-spinner-hidden{display:none!important}:host ::ng-deep lux-master-header-content div,:host ::ng-deep lux-master-header-content span{color:#e7ebf0}lux-list-item{margin-bottom:1px}lux-list-item ::ng-deep lux-card{border-bottom:1px solid rgba(0,0,0,.08);border-right:1px solid rgba(0,0,0,.08)}lux-list-item ::ng-deep lux-card mat-card{box-shadow:unset!important}lux-list-item ::ng-deep lux-card mat-card:hover{background:rgba(0,0,0,.2)}lux-list-item,lux-list-item-content{display:block}.lux-display-none{display:none!important}.lux-0-width{width:0;min-width:0}.lux-detail-container{position:relative}.lux-detail-container .lux-detail-empty{position:absolute;top:0;left:0;right:0;bottom:0}.lux-detail-container .lux-detail-empty-icon,.lux-detail-container .lux-detail-empty-icon-text{opacity:.6;color:rgba(0,0,0,.87);padding:0 8px}"]
            }),
            __metadata("design:paramtypes", [LuxMasterDetailMobileHelperService,
                core.ChangeDetectorRef,
                core.ComponentFactoryResolver,
                a11y.LiveAnnouncer])
        ], LuxMasterDetailComponent);
        return LuxMasterDetailComponent;
    }());

    var LuxPanelActionComponent = /** @class */ (function () {
        function LuxPanelActionComponent() {
        }
        LuxPanelActionComponent.prototype.ngOnInit = function () { };
        LuxPanelActionComponent = __decorate([
            core.Component({
                selector: 'lux-panel-action',
                template: '<mat-action-row><ng-content></ng-content></mat-action-row>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxPanelActionComponent);
        return LuxPanelActionComponent;
    }());

    var LuxPanelContentComponent = /** @class */ (function () {
        function LuxPanelContentComponent() {
        }
        LuxPanelContentComponent.prototype.ngOnInit = function () { };
        LuxPanelContentComponent = __decorate([
            core.Component({
                selector: 'lux-panel-content',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxPanelContentComponent);
        return LuxPanelContentComponent;
    }());

    var LuxPanelHeaderDescriptionComponent = /** @class */ (function () {
        function LuxPanelHeaderDescriptionComponent() {
        }
        LuxPanelHeaderDescriptionComponent.prototype.ngOnInit = function () { };
        LuxPanelHeaderDescriptionComponent = __decorate([
            core.Component({
                selector: 'lux-panel-header-description',
                template: '<mat-panel-description><ng-content></ng-content></mat-panel-description>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxPanelHeaderDescriptionComponent);
        return LuxPanelHeaderDescriptionComponent;
    }());

    var LuxPanelHeaderTitleComponent = /** @class */ (function () {
        function LuxPanelHeaderTitleComponent() {
        }
        LuxPanelHeaderTitleComponent.prototype.ngOnInit = function () { };
        LuxPanelHeaderTitleComponent = __decorate([
            core.Component({
                selector: 'lux-panel-header-title',
                template: '<mat-panel-title><ng-content></ng-content></mat-panel-title>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxPanelHeaderTitleComponent);
        return LuxPanelHeaderTitleComponent;
    }());

    var LuxPanelComponent = /** @class */ (function () {
        function LuxPanelComponent(parent) {
            this.parent = parent;
            this.luxExpanded = false;
            this.luxOpened = new core.EventEmitter();
            this.luxClosed = new core.EventEmitter();
            this.luxExpandedChange = new core.EventEmitter();
            this.pr1 = true;
            this.pl1 = true;
        }
        LuxPanelComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.parent) {
                if (this.luxHideToggle === undefined) {
                    this.luxHideToggle = this.parent.luxHideToggle;
                }
                if (this.luxDisabled === undefined) {
                    this.luxDisabled = this.parent.luxDisabled;
                }
                if (this.luxExpandedHeaderHeight === undefined) {
                    this.luxExpandedHeaderHeight = this.parent.luxExpandedHeaderHeight;
                }
                if (this.luxCollapsedHeaderHeight === undefined) {
                    this.luxCollapsedHeaderHeight = this.parent.luxCollapsedHeaderHeight;
                }
                // Diese Zeile wird benötigt, damit der Multi-Mode
                // (nur ein Abschnitt darf geöffnet sein) des Accordions funktioniert.
                this.matExpansionPanel.accordion = this.parent.matAccordion;
                // Um eine zyklische Abhängigkeit mit dem lux-accordion zu vermeiden,
                // wurde hier ein Event verwendet.
                this.subscription = this.parent.changed$.subscribe(function (propertyName) {
                    if (propertyName === 'luxHideToggle') {
                        _this.luxHideToggle = _this.parent.luxHideToggle;
                    }
                    else if (propertyName === 'luxDisabled') {
                        _this.luxDisabled = _this.parent.luxDisabled;
                    }
                    else if (propertyName === 'luxExpandedHeaderHeight') {
                        _this.luxExpandedHeaderHeight = _this.parent.luxExpandedHeaderHeight;
                    }
                    else if (propertyName === 'luxCollapsedHeaderHeight') {
                        _this.luxCollapsedHeaderHeight = _this.parent.luxCollapsedHeaderHeight;
                    }
                });
            }
        };
        LuxPanelComponent.prototype.ngOnDestroy = function () {
            if (this.parent) {
                this.subscription.unsubscribe();
            }
        };
        LuxPanelComponent.prototype.onOpened = function (eventValue) {
            this.luxOpened.emit(eventValue);
            this.luxExpanded = true;
            this.luxExpandedChange.emit(this.luxExpanded);
        };
        LuxPanelComponent.prototype.onClosed = function (eventValue) {
            this.luxClosed.emit(eventValue);
            this.luxExpanded = false;
            this.luxExpandedChange.emit(this.luxExpanded);
        };
        LuxPanelComponent.ctorParameters = function () { return [
            { type: LuxAccordionComponent, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core.forwardRef(function () { return LuxAccordionComponent; }),] }] }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxPanelComponent.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxPanelComponent.prototype, "luxExpanded", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxPanelComponent.prototype, "luxHideToggle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxPanelComponent.prototype, "luxCollapsedHeaderHeight", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxPanelComponent.prototype, "luxExpandedHeaderHeight", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxPanelComponent.prototype, "luxOpened", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxPanelComponent.prototype, "luxClosed", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxPanelComponent.prototype, "luxExpandedChange", void 0);
        __decorate([
            core.ViewChild(material.MatExpansionPanel, { static: true }),
            __metadata("design:type", material.MatExpansionPanel)
        ], LuxPanelComponent.prototype, "matExpansionPanel", void 0);
        __decorate([
            core.HostBinding('class.lux-pr-1'),
            __metadata("design:type", Boolean)
        ], LuxPanelComponent.prototype, "pr1", void 0);
        __decorate([
            core.HostBinding('class.lux-pl-1'),
            __metadata("design:type", Boolean)
        ], LuxPanelComponent.prototype, "pl1", void 0);
        LuxPanelComponent = __decorate([
            core.Component({
                selector: 'lux-panel',
                template: "<mat-expansion-panel\n  [disabled]=\"luxDisabled\"\n  [expanded]=\"luxExpanded\"\n  [hideToggle]=\"luxHideToggle\"\n  (opened)=\"onOpened($event)\"\n  (closed)=\"onClosed($event)\"\n  ngClass.sm=\"lux-panel-mobile\"\n  ngClass.xs=\"lux-panel-mobile\"\n>\n  <mat-expansion-panel-header [expandedHeight]=\"luxExpandedHeaderHeight\" [collapsedHeight]=\"luxCollapsedHeaderHeight\">\n    <ng-content select=\"lux-panel-header-title\"></ng-content>\n    <ng-content select=\"lux-panel-header-description\"></ng-content>\n  </mat-expansion-panel-header>\n  <ng-content select=\"lux-panel-content\"></ng-content>\n  <ng-content select=\"lux-panel-action\"></ng-content>\n</mat-expansion-panel>\n",
                styles: [":host{display:block}.lux-panel-mobile .mat-expansion-panel-header{padding:0 12px!important}.lux-panel-mobile ::ng-deep .mat-expansion-panel-body{padding:0 12px 8px!important}.lux-panel-mobile ::ng-deep .mat-expansion-panel-body .mat-expansion-panel-content,.lux-panel-mobile ::ng-deep .mat-expansion-panel-body .mat-expansion-panel-header{position:relative}"]
            }),
            __param(0, core.Optional()), __param(0, core.Inject(core.forwardRef(function () { return LuxAccordionComponent; }))),
            __metadata("design:paramtypes", [LuxAccordionComponent])
        ], LuxPanelComponent);
        return LuxPanelComponent;
    }());

    var LuxStepContentComponent = /** @class */ (function () {
        function LuxStepContentComponent() {
        }
        LuxStepContentComponent.prototype.ngOnInit = function () { };
        LuxStepContentComponent = __decorate([
            core.Component({
                selector: 'lux-step-content',
                template: '<ng-content></ng-content>',
                styles: ['']
            }),
            __metadata("design:paramtypes", [])
        ], LuxStepContentComponent);
        return LuxStepContentComponent;
    }());

    var LuxStepHeaderComponent = /** @class */ (function () {
        function LuxStepHeaderComponent(componentsConfigService) {
            this.componentsConfigService = componentsConfigService;
        }
        LuxStepHeaderComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.configSubscription = this.componentsConfigService.config.subscribe(function () {
                _this.labelUppercase = _this.componentsConfigService.isLabelUppercaseForSelector('lux-step');
            });
        };
        LuxStepHeaderComponent.prototype.ngOnDestroy = function () {
            this.configSubscription.unsubscribe();
        };
        LuxStepHeaderComponent.ctorParameters = function () { return [
            { type: LuxComponentsConfigService }
        ]; };
        LuxStepHeaderComponent = __decorate([
            core.Component({
                selector: 'lux-step-header',
                template: "\n    <div [ngClass]=\"{ 'lux-uppercase': labelUppercase }\">\n      <ng-content></ng-content>\n    </div>\n  ",
                styles: ['']
            }),
            __metadata("design:paramtypes", [LuxComponentsConfigService])
        ], LuxStepHeaderComponent);
        return LuxStepHeaderComponent;
    }());

    var LuxStepComponent = /** @class */ (function () {
        function LuxStepComponent() {
            this._iconChange = new rxjs.BehaviorSubject(false);
            this._luxIconName = undefined;
            this.luxIconSize = '1x';
            this.luxOptional = false;
            this.luxEditable = true;
            this.luxCompleted = true;
        }
        Object.defineProperty(LuxStepComponent.prototype, "luxIconName", {
            get: function () {
                return this._luxIconName;
            },
            set: function (iconName) {
                this._luxIconName = iconName;
                this._iconChange.next(true);
            },
            enumerable: true,
            configurable: true
        });
        LuxStepComponent.prototype.getIconChangeObsv = function () {
            return this._iconChange.asObservable();
        };
        /**
         * Gibt an, ob der Step als abgeschlossen gilt.
         *
         * Möglichkeiten:
         *  1. Hat ein luxStepControl, welches valid ist
         *  2. Der Wert luxCompleted ist true
         *  3. Der Wert luxOptional ist true
         */
        LuxStepComponent.prototype.isCompleted = function () {
            if (this.luxStepControl) {
                return this.luxStepControl.valid;
            }
            return this.luxCompleted || this.luxOptional;
        };
        __decorate([
            core.ViewChild('header', { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], LuxStepComponent.prototype, "headerTemplate", void 0);
        __decorate([
            core.ViewChild('content', { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], LuxStepComponent.prototype, "contentTemplate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxStepComponent.prototype, "luxIconSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxStepComponent.prototype, "luxOptional", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxStepComponent.prototype, "luxEditable", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxStepComponent.prototype, "luxCompleted", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", forms.FormGroup)
        ], LuxStepComponent.prototype, "luxStepControl", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxStepComponent.prototype, "luxIconName", null);
        LuxStepComponent = __decorate([
            core.Component({
                selector: 'lux-step',
                template: "\n    <ng-template #header>\n      <ng-content select=\"lux-step-header\"></ng-content>\n    </ng-template>\n    <ng-template #content>\n      <ng-content select=\"lux-step-content\"></ng-content>\n    </ng-template>\n  "
            }),
            __metadata("design:paramtypes", [])
        ], LuxStepComponent);
        return LuxStepComponent;
    }());

    var LuxStepperHelperService = /** @class */ (function () {
        function LuxStepperHelperService() {
            this.switchStep = new Map();
        }
        /**
         * Springt im Stepper zum naechsten Step.
         * Alternativ (ohne Stepper als Parameter) laesst die Funktion alle
         * bekannten Stepper einen Schritt nach vorne springen.
         *
         * Voraussetzung: luxLinear = false oder aktuell Form ist valide.
         */
        LuxStepperHelperService.prototype.nextStep = function (stepper) {
            if (stepper) {
                var subject = this.switchStep.get(stepper);
                if (subject) {
                    subject.next(true);
                }
            }
            else {
                this.switchStep.forEach(function (switchStep) { return switchStep.next(true); });
            }
        };
        /**
         * Springt im Stepper zum vorherigen Step.
         * Alternativ (ohne Stepper als Parameter) laesst die Funktion alle
         * Bekannten Stepper einen Schritt zurueckspringen.
         */
        LuxStepperHelperService.prototype.previousStep = function (stepper) {
            if (stepper) {
                var subject = this.switchStep.get(stepper);
                if (subject) {
                    subject.next(false);
                }
            }
            else {
                this.switchStep.forEach(function (switchStep) { return switchStep.next(false); });
            }
        };
        /**
         * Gibt das Observable der internen Map fuer den Stepper zurueck.
         * @param stepper
         * @returns Observable<boolean> | Observable<any>
         */
        LuxStepperHelperService.prototype.getObservable = function (stepper) {
            var subject = this.switchStep.get(stepper);
            return subject ? subject.asObservable() : rxjs.of(null);
        };
        /**
         * Traegt den Stepper in die Map der dem Service bekannten Stepper ein.
         * @param stepper
         */
        LuxStepperHelperService.prototype.registerStepper = function (stepper) {
            if (!this.switchStep.get(stepper)) {
                this.switchStep.set(stepper, new rxjs.BehaviorSubject(false));
            }
        };
        LuxStepperHelperService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], LuxStepperHelperService);
        return LuxStepperHelperService;
    }());

    var LuxStepperComponent = /** @class */ (function () {
        function LuxStepperComponent(stepperService, cdr, cfr, elementRef) {
            this.stepperService = stepperService;
            this.cdr = cdr;
            this.cfr = cfr;
            this.elementRef = elementRef;
            this._DEFAULT_PREV_BTN_CONF = {
                label: 'Zurück'
            };
            this._DEFAULT_NEXT_BTN_CONF = {
                label: 'Weiter'
            };
            this._DEFAULT_FIN_BTN_CONF = {
                label: 'Abschließen',
                color: 'primary'
            };
            this.luxFinishButtonClicked = new core.EventEmitter();
            this.luxStepChanged = new core.EventEmitter();
            this.luxCurrentStepNumberChange = new core.EventEmitter();
            this.stepperConfiguration = {
                luxCurrentStepNumber: 0,
                luxShowNavigationButtons: true,
                luxHorizontalStepAnimationActive: true,
                luxEditedIconName: 'fa-pencil'
            };
            // Die Default-Konfiguration präventiv als Startwert setzen
            this.luxPreviousButtonConfig = this._DEFAULT_PREV_BTN_CONF;
            this.luxNextButtonConfig = this._DEFAULT_NEXT_BTN_CONF;
            this.luxFinishButtonConfig = this._DEFAULT_FIN_BTN_CONF;
            // Den Stepper im Helper-Service bekannt machen
            this.stepperService.registerStepper(this);
        }
        LuxStepperComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Änderungen an den luxSteps sollten auch dem Konfigurationsobjekt bekannt gemacht werden
            this.luxSteps.changes.subscribe(function () {
                _this.stepperConfiguration.luxSteps = _this.luxSteps.toArray();
                _this.cdr.detectChanges();
            });
            // Initial die aktuellen luxSteps in die Konfiguration schreiben
            this.stepperConfiguration.luxSteps = this.luxSteps.toArray();
            this.cdr.detectChanges();
            // Falls initial bereits bestimmt wurde, dass individuelle Icons genutzt werden, diese generieren
            if (this.stepperConfiguration.luxUseCustomIcons) {
                this.generateCustomIcons();
            }
            // Auf next/previous Aufrufe aus dem Service horchen und entsprechend reagieren
            this.stepperService.getObservable(this).subscribe(function (next) {
                // Voraussetzung: Stepper nicht deaktiviert
                if (!_this.stepperConfiguration.luxDisabled) {
                    if (next === true) {
                        _this.checkValidation();
                        _this.matStepper.next();
                        _this.matStepper._stepHeader.toArray()[_this.matStepper.selectedIndex].focus();
                    }
                    else if (next === false) {
                        _this.matStepper.previous();
                        _this.matStepper._stepHeader.toArray()[_this.matStepper.selectedIndex].focus();
                    }
                }
            });
            // Änderungen an den Icons jedes einzelnen Steps führt zu Neugenerierung aller individuellen Icons
            // ==> Material erlaubt leider nur alle Icons identisch zu ändern, nicht für jeden Step einzeln, deshalb
            // generieren wir selbst die Icons.
            this.luxSteps.toArray().forEach(function (luxStep) {
                luxStep.getIconChangeObsv().subscribe(function (iconChange) {
                    if (_this.stepperConfiguration.luxUseCustomIcons && iconChange) {
                        _this.clearCustomIcons();
                        _this.generateCustomIcons();
                    }
                });
            });
            this.setFocusedCSS(this.luxCurrentStepNumber);
            this.cdr.detectChanges();
        };
        /**
         * Wird beim Wechsel des aktuellen Steps (Klick auf Tab oder .next()/.previous() Aufruf) aufgerufen.
         * @param $event
         */
        LuxStepperComponent.prototype.onStepChanged = function ($event) {
            this.luxCurrentStepNumber = $event.selectedIndex;
            this.luxStepChanged.emit($event);
            var matStepHeaders = this.elementRef.nativeElement.querySelectorAll('mat-step-header');
            if (matStepHeaders.item($event.selectedIndex).className.indexOf('lux-step-header-touched') === -1) {
                matStepHeaders.item($event.selectedIndex).className += ' lux-step-header-touched';
            }
            this.setFocusedCSS($event.selectedIndex);
        };
        /**
         * Generiert die individuellen Icons fuer die Steps.
         */
        LuxStepperComponent.prototype.generateCustomIcons = function () {
            var _this = this;
            var factory = this.cfr.resolveComponentFactory(LuxIconComponent);
            var index = 0;
            this.matStepLabels.forEach(function (stepLabel) {
                _this.generateCustomIconForStep(stepLabel, _this.luxSteps.toArray()[index], factory);
                index++;
            });
        };
        /**
         * Entfernt die eigenen Icons fuer die Steps.
         */
        LuxStepperComponent.prototype.clearCustomIcons = function () {
            this.matStepLabels.forEach(function (stepLabel) {
                stepLabel.clear();
            });
        };
        /**
         * Stößt die Validierungsprüfung für den aktuell sichtbaren Step und dessen StepControl (wenn vorhanden) an.
         */
        LuxStepperComponent.prototype.checkValidation = function () {
            var stepControl = this.luxSteps.toArray()[this.stepperConfiguration.luxCurrentStepNumber].luxStepControl;
            if (stepControl) {
                LuxUtil.showValidationErrors(stepControl);
            }
        };
        /**
         * Generiert die Icons fuer einen einzelnen Step
         * @param stepLabel
         * @param luxStep
         * @param factory
         */
        LuxStepperComponent.prototype.generateCustomIconForStep = function (stepLabel, luxStep, factory) {
            if (luxStep && luxStep.luxIconName) {
                // Das edited und normal Icon generieren
                var componentIconEdited = stepLabel.createComponent(factory);
                var instanceIconEdited = componentIconEdited.instance;
                instanceIconEdited.luxIconName = this.luxEditedIconName;
                instanceIconEdited.luxIconSize = '2x';
                instanceIconEdited.luxRounded = true;
                instanceIconEdited.luxMargin = '0 8px 0 0';
                componentIconEdited.location.nativeElement.className += ' lux-stepper-edited-icon';
                var componentIconNormal = stepLabel.createComponent(factory);
                var instanceIconNormal = componentIconNormal.instance;
                instanceIconNormal.luxIconName = luxStep.luxIconName;
                instanceIconNormal.luxIconSize = '2x';
                instanceIconNormal.luxRounded = true;
                instanceIconNormal.luxMargin = '0 8px 0 0';
                componentIconNormal.location.nativeElement.className += ' lux-stepper-normal-icon';
            }
        };
        /**
         * Aktualisiert die aktuellen Icons, entfernt zunächst die individuellen Icons und
         * versucht anschließend diese neu zu generieren (nötig bei Änderungen).
         */
        LuxStepperComponent.prototype.updateIcons = function () {
            if (this.matStepLabels) {
                this.clearCustomIcons();
                if (this.stepperConfiguration.luxUseCustomIcons) {
                    this.generateCustomIcons();
                }
            }
        };
        LuxStepperComponent.prototype.setFocusedCSS = function (index) {
            var matStepHeaders = this.elementRef.nativeElement.querySelectorAll('mat-step-header');
            if (matStepHeaders.item(index).className.indexOf('lux-step-header-touched') === -1) {
                matStepHeaders.item(index).className += ' lux-step-header-touched';
            }
        };
        Object.defineProperty(LuxStepperComponent.prototype, "luxCurrentStepNumber", {
            // region ###### Accessoren, die auf die stepperConfiguration verweisen ######
            /**** Getter/Setter luxCurrentStepNumber ****/
            get: function () {
                return this.stepperConfiguration.luxCurrentStepNumber;
            },
            set: function (step) {
                var _this = this;
                if (step !== this.luxCurrentStepNumber) {
                    setTimeout(function () {
                        // OutOfBound-Steps abfangen
                        step = step < 0 ? 0 : step;
                        step = step >= _this.luxSteps.length ? _this.luxSteps.length - 1 : step;
                        _this.stepperConfiguration.luxCurrentStepNumber = step;
                        _this.luxCurrentStepNumberChange.emit(_this.stepperConfiguration.luxCurrentStepNumber);
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxUseCustomIcons", {
            /**** Getter/Setter luxUseCustomIcons ****/
            get: function () {
                return this.stepperConfiguration.luxUseCustomIcons;
            },
            set: function (use) {
                var _this = this;
                this.stepperConfiguration.luxUseCustomIcons = use;
                setTimeout(function () {
                    _this.updateIcons();
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxEditedIconName", {
            /**** Getter/Setter luxEditedIconName ****/
            get: function () {
                return this.stepperConfiguration.luxEditedIconName;
            },
            set: function (iconName) {
                this.stepperConfiguration.luxEditedIconName = iconName;
                this.updateIcons();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxVerticalStepper", {
            /**** Getter/Setter luxVerticalStepper ****/
            get: function () {
                return this.stepperConfiguration.luxVerticalStepper;
            },
            set: function (vertical) {
                this.stepperConfiguration.luxVerticalStepper = vertical;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxLinear", {
            /**** Getter/Setter luxLinear ****/
            get: function () {
                return this.stepperConfiguration.luxLinear;
            },
            set: function (linear) {
                this.stepperConfiguration.luxLinear = linear;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxDisabled", {
            /**** Getter/Setter luxDisabled ****/
            get: function () {
                return this.stepperConfiguration.luxDisabled;
            },
            set: function (disabled) {
                this.stepperConfiguration.luxDisabled = disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxShowNavigationButtons", {
            /**** Getter/Setter luxShowNavigationButtons ****/
            get: function () {
                return this.stepperConfiguration.luxShowNavigationButtons;
            },
            set: function (showNavButtons) {
                this.stepperConfiguration.luxShowNavigationButtons = showNavButtons;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxHorizontalStepAnimationActive", {
            /**** Getter/Setter luxHorizontalStepAnimationActive ****/
            get: function () {
                return this.stepperConfiguration.luxHorizontalStepAnimationActive;
            },
            set: function (animationActive) {
                this.stepperConfiguration.luxHorizontalStepAnimationActive = animationActive;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxPreviousButtonConfig", {
            /**** Getter/Setter luxPreviousButtonConfig ****/
            get: function () {
                return this.stepperConfiguration.luxPreviousButtonConfig;
            },
            set: function (config) {
                this.stepperConfiguration.luxPreviousButtonConfig = config ? config : this._DEFAULT_PREV_BTN_CONF;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxNextButtonConfig", {
            /**** Getter/Setter luxNextButtonConfig ****/
            get: function () {
                return this.stepperConfiguration.luxNextButtonConfig;
            },
            set: function (config) {
                this.stepperConfiguration.luxNextButtonConfig = config ? config : this._DEFAULT_NEXT_BTN_CONF;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxStepperComponent.prototype, "luxFinishButtonConfig", {
            /**** Getter/Setter luxFinishButtonConfig ****/
            get: function () {
                return this.stepperConfiguration.luxFinishButtonConfig;
            },
            set: function (config) {
                this.stepperConfiguration.luxFinishButtonConfig = config ? config : this._DEFAULT_FIN_BTN_CONF;
            },
            enumerable: true,
            configurable: true
        });
        LuxStepperComponent.ctorParameters = function () { return [
            { type: LuxStepperHelperService },
            { type: core.ChangeDetectorRef },
            { type: core.ComponentFactoryResolver },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ContentChildren(LuxStepComponent),
            __metadata("design:type", core.QueryList)
        ], LuxStepperComponent.prototype, "luxSteps", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperComponent.prototype, "luxFinishButtonClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperComponent.prototype, "luxStepChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperComponent.prototype, "luxCurrentStepNumberChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxStepperComponent.prototype, "luxCurrentStepNumber", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxStepperComponent.prototype, "luxUseCustomIcons", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxStepperComponent.prototype, "luxEditedIconName", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxStepperComponent.prototype, "luxVerticalStepper", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxStepperComponent.prototype, "luxLinear", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxStepperComponent.prototype, "luxDisabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxStepperComponent.prototype, "luxShowNavigationButtons", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxStepperComponent.prototype, "luxHorizontalStepAnimationActive", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxStepperComponent.prototype, "luxPreviousButtonConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxStepperComponent.prototype, "luxNextButtonConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxStepperComponent.prototype, "luxFinishButtonConfig", null);
        LuxStepperComponent = __decorate([
            core.Component({
                selector: 'lux-stepper',
                template: "<ng-container [ngSwitch]=\"luxVerticalStepper\">\n  <!-- VERTIKALER STEPPER -->\n  <lux-stepper-vertical\n    [luxStepperConfig]=\"stepperConfiguration\"\n    (luxMatStepperLoaded)=\"matStepper = $event\"\n    (luxMatStepLabelsLoaded)=\"matStepLabels = $event\"\n    (luxStepChanged)=\"onStepChanged($event)\"\n    (luxFinButtonClicked)=\"luxFinishButtonClicked.emit($event)\"\n    (luxPrevButtonClicked)=\"stepperService.previousStep(this)\"\n    (luxNextButtonClicked)=\"stepperService.nextStep(this)\"\n    (luxCheckValidation)=\"checkValidation()\"\n    ngClass.sm=\"lux-stepper-mobile\"\n    ngClass.xs=\"lux-stepper-mobile\"\n    *ngSwitchCase=\"true\"\n  >\n  </lux-stepper-vertical>\n  <!-- HORIZONTALER STEPPER -->\n  <lux-stepper-horizontal\n    [luxStepperConfig]=\"stepperConfiguration\"\n    (luxMatStepperLoaded)=\"matStepper = $event\"\n    (luxMatStepLabelsLoaded)=\"matStepLabels = $event\"\n    (luxStepChanged)=\"onStepChanged($event)\"\n    (luxFinButtonClicked)=\"luxFinishButtonClicked.emit($event)\"\n    (luxPrevButtonClicked)=\"stepperService.previousStep(this)\"\n    (luxNextButtonClicked)=\"stepperService.nextStep(this)\"\n    (luxCheckValidation)=\"checkValidation()\"\n    ngClass.sm=\"lux-stepper-mobile\"\n    ngClass.xs=\"lux-stepper-mobile\"\n    *ngSwitchDefault\n  >\n  </lux-stepper-horizontal>\n</ng-container>\n\n<ng-content select=\"lux-step\"></ng-content>\n<div class=\"lux-stepper-disabled-overlay\" [class.lux-hidden]=\"!luxDisabled\"></div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{position:relative;display:block}:host ::ng-deep .lux-stepper-content-section,:host ::ng-deep .mat-horizontal-stepper-content[aria-expanded=true],:host ::ng-deep .mat-vertical-stepper-content{padding:8px}:host ::ng-deep .mat-horizontal-stepper-header-container{padding:8px 8px 0}:host ::ng-deep .mat-vertical-stepper-header{margin:8px 8px 0}:host ::ng-deep mat-step-header .mat-step-icon,:host ::ng-deep mat-step-header .mat-step-icon-not-touched{width:40px;height:40px;font-size:2em;box-sizing:border-box}:host ::ng-deep mat-step-header .mat-step-icon .mat-icon{font-size:32px;width:32px;height:32px}:host ::ng-deep mat-step-header .mat-step-label{height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;font-weight:400}:host ::ng-deep mat-step-header lux-step-header{color:rgba(0,0,0,.38)!important}:host ::ng-deep mat-step-header .mat-step-icon{background:rgba(0,0,0,.38);color:#fff}:host ::ng-deep mat-step-header.lux-step-header-touched .mat-step-icon-state-edit+.mat-step-label lux-step-header,:host ::ng-deep mat-step-header.lux-step-header-touched[aria-selected=true] lux-step-header{color:rgba(0,0,0,.87)!important}:host ::ng-deep mat-step-header.lux-step-header-touched .mat-step-icon-state-edit+.mat-step-label .lux-stepper-edited-icon i,:host ::ng-deep mat-step-header.lux-step-header-touched .mat-step-icon-state-edit+.mat-step-label .lux-stepper-edited-icon mat-icon,:host ::ng-deep mat-step-header.lux-step-header-touched .mat-step-icon-state-edit+.mat-step-label .lux-stepper-normal-icon i,:host ::ng-deep mat-step-header.lux-step-header-touched .mat-step-icon-state-edit+.mat-step-label .lux-stepper-normal-icon mat-icon,:host ::ng-deep mat-step-header.lux-step-header-touched[aria-selected=true] .lux-stepper-edited-icon i,:host ::ng-deep mat-step-header.lux-step-header-touched[aria-selected=true] .lux-stepper-edited-icon mat-icon,:host ::ng-deep mat-step-header.lux-step-header-touched[aria-selected=true] .lux-stepper-normal-icon i,:host ::ng-deep mat-step-header.lux-step-header-touched[aria-selected=true] .lux-stepper-normal-icon mat-icon{background-color:#335c85}:host ::ng-deep mat-step-header.lux-step-header-touched .mat-step-icon-state-edit,:host ::ng-deep mat-step-header.lux-step-header-touched[aria-selected=true] .mat-step-icon-state-number{background:#335c85;color:#fff}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header .mat-step-icon,:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header .mat-step-icon-not-touched{display:none}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon{margin-right:8px!important}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon>.lux-material-icon,:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon>i{font-size:25px;width:32px;height:32px;text-align:center}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon.lux-stepper-edited-icon{display:none}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon.lux-stepper-normal-icon{display:block}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon>i,:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon>mat-icon{background-color:rgba(0,0,0,.38);color:#fff}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header lux-icon>i:before{padding-top:2px;display:block}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header .mat-step-icon-state-edit+.mat-step-label lux-icon.lux-stepper-edited-icon{display:block}:host ::ng-deep .lux-ignore-mat-step-icons ::ng-deep mat-step-header .mat-step-icon-state-edit+.mat-step-label lux-icon.lux-stepper-normal-icon{display:none}:host ::ng-deep .mat-step-optional{position:absolute;bottom:15px;right:0;font-style:italic}:host ::ng-deep lux-step-content>lux-card>mat-card{margin:0!important}.lux-stepper-disabled-overlay{position:absolute;top:0;left:0;right:0;bottom:0;background-color:rgba(0,0,0,.04)}.lux-stepper-mobile ::ng-deep .lux-stepper-content-section,.lux-stepper-mobile ::ng-deep .mat-horizontal-stepper-content[aria-expanded=true],.lux-stepper-mobile ::ng-deep .mat-vertical-stepper-content{padding:4px}.lux-stepper-mobile ::ng-deep .mat-vertical-stepper-content{padding-left:8px}.lux-stepper-mobile ::ng-deep .mat-horizontal-stepper-header-container{padding:4px 4px 0}.lux-stepper-mobile ::ng-deep .mat-vertical-stepper-header{margin:4px 4px 0}.lux-stepper-mobile ::ng-deep mat-horizontal-stepper lux-step-header{display:none}.lux-stepper-mobile ::ng-deep mat-horizontal-stepper .mat-stepper-horizontal-line{margin:0;min-width:16px}.lux-stepper-mobile ::ng-deep mat-horizontal-stepper mat-step-header{padding:0 8px}.lux-stepper-mobile ::ng-deep mat-horizontal-stepper.lux-ignore-mat-step-icons .mat-step-label{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;min-width:40px}.lux-stepper-mobile ::ng-deep mat-horizontal-stepper.lux-ignore-mat-step-icons .mat-step-label .lux-stepper-edited-icon,.lux-stepper-mobile ::ng-deep mat-horizontal-stepper.lux-ignore-mat-step-icons .mat-step-label .lux-stepper-normal-icon{margin:0!important}.lux-stepper-mobile ::ng-deep mat-horizontal-stepper:not(.lux-ignore-mat-step-icons) .mat-step-label{display:none}.lux-stepper-mobile ::ng-deep mat-horizontal-stepper:not(.lux-ignore-mat-step-icons) .mat-step-icon{margin:0!important}"]
            }),
            __metadata("design:paramtypes", [LuxStepperHelperService,
                core.ChangeDetectorRef,
                core.ComponentFactoryResolver,
                core.ElementRef])
        ], LuxStepperComponent);
        return LuxStepperComponent;
    }());

    var LuxTileComponent = /** @class */ (function () {
        function LuxTileComponent(queryService) {
            this.queryService = queryService;
            this.luxLabel = undefined;
            this.luxTagId = undefined;
            this.luxCounterCap = 10;
            this.luxClicked = new core.EventEmitter();
        }
        LuxTileComponent_1 = LuxTileComponent;
        LuxTileComponent.prototype.clicked = function () {
            this.luxClicked.emit();
        };
        LuxTileComponent.prototype.getNotificationIconColorClass = function () {
            return this.luxShowNotification === true || this.luxShowNotification === 'true'
                ? LuxTileComponent_1._notificationNewClass
                : LuxTileComponent_1._notificationReadClass;
        };
        var LuxTileComponent_1;
        LuxTileComponent._notificationNewClass = 'lux-notification-new';
        LuxTileComponent._notificationReadClass = 'lux-notification-read';
        LuxTileComponent.ctorParameters = function () { return [
            { type: LuxMediaQueryObserverService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTileComponent.prototype, "luxLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTileComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxTileComponent.prototype, "luxShowNotification", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTileComponent.prototype, "luxCounter", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTileComponent.prototype, "luxCounterCap", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxTileComponent.prototype, "luxClicked", void 0);
        LuxTileComponent = LuxTileComponent_1 = __decorate([
            core.Component({
                selector: 'lux-tile',
                template: "<mat-card\n  (click)=\"clicked()\"\n  (keydown.enter)=\"clicked()\"\n  (keydown.space)=\"clicked()\"\n  luxTagIdHandler\n  [luxTagId]=\"luxTagId\"\n  tabindex=\"0\"\n  class=\"lux-cursor lux-highlight\"\n  ngClass=\"lux-tile-small-font lux-m-2\"\n  ngClass.gt-sm=\"lux-tile-normal-font lux-m-3\"\n  [luxBadgeNotification]=\"luxCounter\"\n  [luxBadgeCap]=\"luxCounterCap\"\n  [luxBadgeOverlap]=\"true\"\n>\n  <mat-card-content>\n    <div fxLayout=\"column\" fxFill>\n      <div fxFlex=\"1 1 100px\" fxLayoutAlign=\"center center\" class=\"lux-tile-content\">\n        <ng-content select=\"lux-icon\"></ng-content>\n        <ng-content select=\"lux-image\"></ng-content>\n      </div>\n      <lux-divider fxFlex=\"0 0 2px\" *ngIf=\"luxLabel\" aria-hidden=\"true\"></lux-divider>\n\n      <h2 fxFlex=\"0 1 45px\" fxLayoutAlign=\"center center\" class=\"lux-tile-label\" [attr.aria-label]=\"luxLabel\">\n        <span>{{ luxLabel }}</span>\n      </h2>\n    </div>\n  </mat-card-content>\n</mat-card>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex}mat-card{padding:0}lux-divider{margin-bottom:0!important}h2{margin:0}.lux-highlight{color:#0073b3}.lux-tile-small-font{-webkit-box-flex:0;-ms-flex:0 0 140px;flex:0 0 140px;max-width:140px!important;min-width:140px!important}.lux-tile-small-font ::ng-deep h2>*{font-size:.75em}.lux-tile-normal-font{-webkit-box-flex:0;-ms-flex:0 0 240px;flex:0 0 240px;max-width:240px!important;min-width:240px!important}.lux-tile-normal-font ::ng-deep h2>*{font-size:1em}.lux-tile-content,.lux-tile-content ::ng-deep lux-image{height:100px}.lux-tile-content ::ng-deep lux-icon i,.lux-tile-content ::ng-deep lux-icon mat-icon{font-size:4em}.lux-tile-label{padding:24px;text-align:center}.lux-notification-read{visibility:hidden}.lux-notification-new{background-color:#95bc4c}.lux-tile-small-font ::ng-deep .mat-badge-content{top:-4px!important;right:-4px!important}"]
            }),
            __metadata("design:paramtypes", [LuxMediaQueryObserverService])
        ], LuxTileComponent);
        return LuxTileComponent;
    }());

    var LuxSideNavFooterComponent = /** @class */ (function () {
        function LuxSideNavFooterComponent() {
        }
        LuxSideNavFooterComponent.prototype.ngOnInit = function () { };
        LuxSideNavFooterComponent = __decorate([
            core.Component({
                selector: 'lux-side-nav-footer',
                template: '<lux-divider></lux-divider><div class="lux-side-nav-footer-content"><ng-content></ng-content></div>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxSideNavFooterComponent);
        return LuxSideNavFooterComponent;
    }());

    var LuxSideNavHeaderComponent = /** @class */ (function () {
        function LuxSideNavHeaderComponent() {
        }
        LuxSideNavHeaderComponent.prototype.ngOnInit = function () { };
        LuxSideNavHeaderComponent = __decorate([
            core.Component({
                selector: 'lux-side-nav-header',
                template: '<div class="lux-side-nav-header-content"><ng-content></ng-content></div>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxSideNavHeaderComponent);
        return LuxSideNavHeaderComponent;
    }());

    var LuxAppContentComponent = /** @class */ (function () {
        function LuxAppContentComponent() {
        }
        LuxAppContentComponent.prototype.ngOnInit = function () { };
        LuxAppContentComponent = __decorate([
            core.Component({
                selector: 'lux-app-content',
                template: "<div class=\"lux-app-content-container\">\n  <router-outlet></router-outlet>\n  <ng-content></ng-content>\n</div>\n",
                styles: [":host{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;overflow-y:auto}:host .lux-app-content-container{position:absolute;top:0;left:0;right:0;bottom:0}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxAppContentComponent);
        return LuxAppContentComponent;
    }());

    /**
     * Parent-Klasse für den LuxStepperVertical und LuxStepperHorizontal, beide Komponenten werden ausschließlich von
     * dem LuxStepper zur Darstellung genutzt.
     */
    var LuxStepperParent = /** @class */ (function () {
        function LuxStepperParent() {
            // Diese Outputs werden bei den Klicks auf die Stepper-eigenen Navigations-Buttons augelöst und informieren die
            // LuxStepperComponent
            this.luxFinButtonClicked = new core.EventEmitter();
            this.luxNextButtonClicked = new core.EventEmitter();
            this.luxPrevButtonClicked = new core.EventEmitter();
            // Wird beim Wechsel des Steps (über Header oder Button) aufgerufen
            this.luxStepChanged = new core.EventEmitter();
            this.luxCheckValidation = new core.EventEmitter();
            // Wird beim AfterViewInit und bei jeder Aktualisierung der MatStepLabels aufgerufen um die LuxStepperComponent
            // über die aktuellen Elemente informiert zu halten
            this.luxMatStepperLoaded = new core.EventEmitter();
            this.luxMatStepLabelsLoaded = new core.EventEmitter();
        }
        LuxStepperParent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Sobald die Component initialisiert ist, dem Parent (luxStepper) den
            // MatStepper und die MatStepLabels mitteilen
            this.luxMatStepperLoaded.emit(this.matStepper);
            this.luxMatStepLabelsLoaded.emit(this.matStepLabels.toArray());
            this.matStepLabels.changes.subscribe(function () {
                _this.luxMatStepLabelsLoaded.emit(_this.matStepLabels.toArray());
            });
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperParent.prototype, "luxFinButtonClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperParent.prototype, "luxNextButtonClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperParent.prototype, "luxPrevButtonClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperParent.prototype, "luxStepChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperParent.prototype, "luxCheckValidation", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperParent.prototype, "luxMatStepperLoaded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperParent.prototype, "luxMatStepLabelsLoaded", void 0);
        __decorate([
            core.ViewChild('stepper', { static: true }),
            __metadata("design:type", Object)
        ], LuxStepperParent.prototype, "matStepper", void 0);
        __decorate([
            core.ViewChildren('matStepLabel', { read: core.ViewContainerRef }),
            __metadata("design:type", core.QueryList)
        ], LuxStepperParent.prototype, "matStepLabels", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxStepperParent.prototype, "luxStepperConfig", void 0);
        return LuxStepperParent;
    }());

    var LuxStepperHorizontalComponent = /** @class */ (function (_super) {
        __extends(LuxStepperHorizontalComponent, _super);
        function LuxStepperHorizontalComponent() {
            return _super.call(this) || this;
        }
        LuxStepperHorizontalComponent = __decorate([
            core.Component({
                selector: 'lux-stepper-horizontal',
                template: "<!-- Horizontaler Stepper, die Konfiguration stammt aus dem LuxStepper und wird hier angewandt -->\n<mat-horizontal-stepper\n  [linear]=\"luxStepperConfig.luxLinear\"\n  [selectedIndex]=\"luxStepperConfig.luxCurrentStepNumber\"\n  [ngClass]=\"{\n    'lux-ignore-mat-step-icons': luxStepperConfig.luxUseCustomIcons,\n    'lux-block-pointer-events': luxStepperConfig.luxDisabled,\n    'lux-linear-stepper': luxStepperConfig.luxLinear,\n    'lux-no-animation': !luxStepperConfig.luxHorizontalStepAnimationActive\n  }\"\n  (selectionChange)=\"luxStepChanged.emit($event)\"\n  #stepper\n>\n  <!-- Alle aktuell bekannten Steps zeichnen -->\n  <ng-container *ngFor=\"let luxStep of luxStepperConfig.luxSteps; let i = index\">\n    <mat-step [completed]=\"luxStep.isCompleted()\" [optional]=\"luxStep.luxOptional\" [editable]=\"luxStep.luxEditable\">\n      <!-- Header des Steps -->\n      <ng-template matStepLabel>\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" (click)=\"luxCheckValidation.emit()\">\n          <ng-template #matStepLabel></ng-template>\n          <ng-container *ngTemplateOutlet=\"luxStep.headerTemplate\"></ng-container>\n        </div>\n      </ng-template>\n      <!-- Content des Steps, wenn Animationen aktiviert sind -->\n      <ng-container *ngIf=\"luxStepperConfig.luxHorizontalStepAnimationActive\">\n        <ng-container *ngTemplateOutlet=\"luxStep.contentTemplate\"></ng-container>\n        <ng-container *ngTemplateOutlet=\"navButtonsTemplate; context: { index: i, step: luxStep }\"></ng-container>\n      </ng-container>\n    </mat-step>\n  </ng-container>\n</mat-horizontal-stepper>\n\n<!-- Content des Steps, wenn Animationen deaktiviert sind -->\n<ng-container *ngIf=\"!luxStepperConfig.luxHorizontalStepAnimationActive\">\n  <ng-container *ngFor=\"let luxStep of luxStepperConfig.luxSteps; let i = index\">\n    <section\n      class=\"lux-stepper-content-section\"\n      [class.lux-display-none]=\"i !== matStepper.selectedIndex\"\n      *ngIf=\"matStepper\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"luxStep.contentTemplate ? luxStep.contentTemplate : noDataTemplate\"\n      ></ng-container>\n      <ng-container *ngTemplateOutlet=\"navButtonsTemplate; context: { index: i, step: luxStep }\"></ng-container>\n    </section>\n  </ng-container>\n</ng-container>\n<ng-template #noDataTemplate></ng-template>\n\n<!-- Nav-Buttons in separatem Template (da 2 mal hier verwendet) -->\n<ng-template #navButtonsTemplate let-i=\"index\" let-step=\"step\">\n  <lux-stepper-nav-buttons\n    [luxIndex]=\"i\"\n    [luxStep]=\"step\"\n    [luxStepperConfig]=\"luxStepperConfig\"\n    (luxPrevClick)=\"luxPrevButtonClicked.emit()\"\n    (luxNextClick)=\"luxNextButtonClicked.emit()\"\n    (luxFinClick)=\"luxFinButtonClicked.emit()\"\n    *ngIf=\"luxStepperConfig.luxShowNavigationButtons\"\n  >\n  </lux-stepper-nav-buttons>\n</ng-template>\n",
                styles: [".lux-no-animation ::ng-deep .mat-horizontal-content-container{height:0}::ng-deep .mat-horizontal-content-container{padding:0!important}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxStepperHorizontalComponent);
        return LuxStepperHorizontalComponent;
    }(LuxStepperParent));

    var LuxStepperNavButtonsComponent = /** @class */ (function () {
        function LuxStepperNavButtonsComponent() {
            this.luxPrevClick = new core.EventEmitter();
            this.luxNextClick = new core.EventEmitter();
            this.luxFinClick = new core.EventEmitter();
        }
        LuxStepperNavButtonsComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperNavButtonsComponent.prototype, "luxPrevClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperNavButtonsComponent.prototype, "luxNextClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxStepperNavButtonsComponent.prototype, "luxFinClick", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxStepperNavButtonsComponent.prototype, "luxIndex", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", LuxStepComponent)
        ], LuxStepperNavButtonsComponent.prototype, "luxStep", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxStepperNavButtonsComponent.prototype, "luxStepperConfig", void 0);
        LuxStepperNavButtonsComponent = __decorate([
            core.Component({
                selector: 'lux-stepper-nav-buttons',
                template: "<div class=\"lux-mt-3\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n  <!-- Previous-Button -->\n  <lux-button\n    [luxLabel]=\"luxStepperConfig.luxPreviousButtonConfig?.label\"\n    [luxColor]=\"luxStepperConfig.luxPreviousButtonConfig?.color\"\n    [luxIconName]=\"luxStepperConfig.luxPreviousButtonConfig?.iconName\"\n    [luxIconAlignWithLabel]=\"luxStepperConfig.luxPreviousButtonConfig?.alignIconWithLabel\"\n    (luxClicked)=\"luxPrevClick.emit()\"\n    luxTagId=\"luxStepper.previousStep\"\n    *ngIf=\"luxIndex > 0\"\n  >\n  </lux-button>\n  <!-- Next-Button -->\n  <lux-button\n    [luxLabel]=\"luxStepperConfig.luxNextButtonConfig?.label\"\n    [luxColor]=\"luxStepperConfig.luxNextButtonConfig?.color\"\n    [luxIconName]=\"luxStepperConfig.luxNextButtonConfig?.iconName\"\n    [luxIconAlignWithLabel]=\"luxStepperConfig.luxNextButtonConfig?.alignIconWithLabel\"\n    (luxClicked)=\"luxNextClick.emit()\"\n    [luxDisabled]=\"!luxStep.isCompleted() && luxStepperConfig.luxLinear\"\n    luxTagId=\"luxStepper.nextStep\"\n    *ngIf=\"luxIndex < luxStepperConfig.luxSteps.length - 1\"\n  >\n  </lux-button>\n  <!-- Finish-Button -->\n  <lux-button\n    [luxLabel]=\"luxStepperConfig.luxFinishButtonConfig?.label\"\n    [luxColor]=\"luxStepperConfig.luxFinishButtonConfig?.color\"\n    [luxIconName]=\"luxStepperConfig.luxFinishButtonConfig?.iconName\"\n    [luxIconAlignWithLabel]=\"luxStepperConfig.luxFinishButtonConfig?.alignIconWithLabel\"\n    (luxClicked)=\"luxFinClick.emit()\"\n    [luxDisabled]=\"!luxStep.isCompleted() && luxStepperConfig.luxLinear\"\n    luxTagId=\"luxStepper.finished\"\n    *ngIf=\"luxIndex === luxStepperConfig.luxSteps.length - 1\"\n  >\n  </lux-button>\n</div>\n",
                styles: [""]
            }),
            __metadata("design:paramtypes", [])
        ], LuxStepperNavButtonsComponent);
        return LuxStepperNavButtonsComponent;
    }());

    var LuxStepperVerticalComponent = /** @class */ (function (_super) {
        __extends(LuxStepperVerticalComponent, _super);
        function LuxStepperVerticalComponent() {
            return _super.call(this) || this;
        }
        LuxStepperVerticalComponent = __decorate([
            core.Component({
                selector: 'lux-stepper-vertical',
                template: "<!-- Vertikaler Stepper, die Konfiguration stammt aus dem LuxStepper und wird hier angewandt -->\n<mat-vertical-stepper\n  [linear]=\"luxStepperConfig.luxLinear\"\n  [selectedIndex]=\"luxStepperConfig.luxCurrentStepNumber\"\n  [ngClass]=\"{\n    'lux-ignore-mat-step-icons': luxStepperConfig.luxUseCustomIcons,\n    'lux-block-pointer-events': luxStepperConfig.luxDisabled,\n    'lux-linear-stepper': luxStepperConfig.luxLinear\n  }\"\n  (selectionChange)=\"luxStepChanged.emit($event)\"\n  #stepper\n>\n  <ng-container *ngFor=\"let luxStep of luxStepperConfig.luxSteps; let i = index\">\n    <mat-step [completed]=\"luxStep.isCompleted()\" [optional]=\"luxStep.luxOptional\" [editable]=\"luxStep.luxEditable\">\n      <!-- Header des Steps -->\n      <ng-template matStepLabel>\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" (click)=\"luxCheckValidation.emit()\">\n          <ng-template #matStepLabel></ng-template>\n          <ng-container *ngTemplateOutlet=\"luxStep.headerTemplate\"></ng-container>\n        </div>\n      </ng-template>\n      <!-- Content des Steps, wenn Animationen aktiviert sind -->\n      <ng-container *ngTemplateOutlet=\"luxStep.contentTemplate\"></ng-container>\n      <!-- Nav-Buttons, wenn aktiviert -->\n      <lux-stepper-nav-buttons\n        [luxIndex]=\"i\"\n        [luxStep]=\"luxStep\"\n        [luxStepperConfig]=\"luxStepperConfig\"\n        (luxPrevClick)=\"luxPrevButtonClicked.emit()\"\n        (luxNextClick)=\"luxNextButtonClicked.emit()\"\n        (luxFinClick)=\"luxFinButtonClicked.emit()\"\n        *ngIf=\"luxStepperConfig.luxShowNavigationButtons\"\n      >\n      </lux-stepper-nav-buttons>\n    </mat-step>\n  </ng-container>\n</mat-vertical-stepper>\n",
                styles: [":host ::ng-deep .mat-step-label{height:44px!important}:host ::ng-deep .mat-step-optional{bottom:0}:host ::ng-deep .mat-vertical-content{padding:0!important}:host ::ng-deep mat-step-header{padding-left:10px}:host ::ng-deep .mat-stepper-vertical-line::before{top:-10px;bottom:-18px}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxStepperVerticalComponent);
        return LuxStepperVerticalComponent;
    }(LuxStepperParent));

    var LuxAppHeaderActionNavItemComponent = /** @class */ (function () {
        function LuxAppHeaderActionNavItemComponent() {
            this.luxClicked = new core.EventEmitter();
        }
        LuxAppHeaderActionNavItemComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderActionNavItemComponent.prototype, "luxLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderActionNavItemComponent.prototype, "luxIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderActionNavItemComponent.prototype, "luxColor", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxAppHeaderActionNavItemComponent.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAppHeaderActionNavItemComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxAppHeaderActionNavItemComponent.prototype, "luxClicked", void 0);
        LuxAppHeaderActionNavItemComponent = __decorate([
            core.Component({
                selector: 'lux-app-header-action-nav-item',
                template: "<lux-button\n  [ngClass]=\"{ 'lux-button-with-label': !!luxLabel }\"\n  [luxLabel]=\"luxLabel\"\n  [luxIconName]=\"luxIconName\"\n  [luxColor]=\"luxColor\"\n  [luxRaised]=\"false\"\n  [luxRounded]=\"false\"\n  [luxDisabled]=\"luxDisabled\"\n  [luxTagId]=\"luxTagId\"\n  (luxClicked)=\"luxClicked.emit($event)\"\n>\n</lux-button>\n",
                styles: ["lux-button ::ng-deep button{padding:0;min-width:30px;max-height:30px!important;min-height:30px!important}lux-button.lux-button-with-label ::ng-deep button{padding:0 4px;max-height:45px!important;min-height:45px!important}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxAppHeaderActionNavItemComponent);
        return LuxAppHeaderActionNavItemComponent;
    }());

    var LuxLayoutModule = /** @class */ (function () {
        function LuxLayoutModule() {
        }
        LuxLayoutModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    router.RouterModule,
                    flexLayout.FlexLayoutModule,
                    material.MatButtonModule,
                    material.MatCardModule,
                    material.MatIconModule,
                    material.MatFormFieldModule,
                    material.MatTabsModule,
                    material.MatExpansionModule,
                    material.MatStepperModule,
                    material.MatDividerModule,
                    LuxIconModule,
                    LuxActionModule,
                    LuxDirectivesModule,
                    LuxPipesModule,
                    LuxComponentsConfigModule,
                    material.MatProgressSpinnerModule
                ],
                declarations: [
                    LuxAppHeaderComponent,
                    LuxAppFooterComponent,
                    LuxListItemComponent,
                    LuxListItemIconComponent,
                    LuxListItemContentComponent,
                    LuxListComponent,
                    LuxMasterDetailComponent,
                    LuxMasterViewComponent,
                    LuxDetailViewComponent,
                    LuxMasterSimpleComponent,
                    LuxMasterFooterComponent,
                    LuxMasterHeaderComponent,
                    LuxMasterHeaderContentComponent,
                    LuxTabComponent,
                    LuxTabsComponent,
                    LuxCardComponent,
                    LuxCardInfoComponent,
                    LuxCardContentComponent,
                    LuxCardContentExpandedComponent,
                    LuxCardActionsComponent,
                    LuxAccordionComponent,
                    LuxPanelComponent,
                    LuxPanelContentComponent,
                    LuxPanelActionComponent,
                    LuxPanelHeaderTitleComponent,
                    LuxPanelHeaderDescriptionComponent,
                    LuxStepperComponent,
                    LuxStepComponent,
                    LuxStepHeaderComponent,
                    LuxStepContentComponent,
                    LuxDividerComponent,
                    LuxAppHeaderRightNavComponent,
                    LuxTileComponent,
                    LuxDetailWrapperComponent,
                    LuxSideNavComponent,
                    LuxSideNavFooterComponent,
                    LuxSideNavHeaderComponent,
                    LuxSideNavItemComponent,
                    LuxAppContentComponent,
                    LuxStepperHorizontalComponent,
                    LuxStepperNavButtonsComponent,
                    LuxStepperVerticalComponent,
                    LuxAppHeaderActionNavComponent,
                    LuxAppHeaderActionNavItemComponent
                ],
                exports: [
                    LuxAppHeaderComponent,
                    LuxAppFooterComponent,
                    LuxListItemComponent,
                    LuxListItemIconComponent,
                    LuxListItemContentComponent,
                    LuxListComponent,
                    LuxMasterDetailComponent,
                    LuxMasterViewComponent,
                    LuxDetailViewComponent,
                    LuxMasterSimpleComponent,
                    LuxMasterFooterComponent,
                    LuxMasterHeaderComponent,
                    LuxMasterHeaderContentComponent,
                    LuxTabComponent,
                    LuxTabsComponent,
                    LuxCardComponent,
                    LuxCardInfoComponent,
                    LuxCardContentComponent,
                    LuxCardContentExpandedComponent,
                    LuxCardActionsComponent,
                    LuxAccordionComponent,
                    LuxPanelComponent,
                    LuxPanelContentComponent,
                    LuxPanelActionComponent,
                    LuxPanelHeaderTitleComponent,
                    LuxPanelHeaderDescriptionComponent,
                    LuxStepperComponent,
                    LuxStepComponent,
                    LuxStepHeaderComponent,
                    LuxStepContentComponent,
                    LuxDividerComponent,
                    LuxAppHeaderRightNavComponent,
                    LuxTileComponent,
                    LuxDetailWrapperComponent,
                    LuxSideNavComponent,
                    LuxSideNavFooterComponent,
                    LuxSideNavHeaderComponent,
                    LuxSideNavItemComponent,
                    LuxAppContentComponent,
                    LuxStepperHorizontalComponent,
                    LuxStepperNavButtonsComponent,
                    LuxStepperVerticalComponent,
                    LuxAppHeaderActionNavComponent,
                    LuxAppHeaderActionNavItemComponent
                ],
                providers: [LuxMediaQueryObserverService],
                entryComponents: [LuxIconComponent, LuxDetailWrapperComponent]
            })
        ], LuxLayoutModule);
        return LuxLayoutModule;
    }());

    var LuxAutocompleteComponent = /** @class */ (function (_super) {
        __extends(LuxAutocompleteComponent, _super);
        function LuxAutocompleteComponent(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.config = config;
            _this.selected$ = new rxjs.ReplaySubject(1);
            _this.luxPlaceholder = '';
            _this.luxOptions = [];
            _this.luxOptionLabelProp = 'label';
            _this.luxLookupDelay = 500;
            _this.luxErrorMessageNotAnOption = 'Der eingegebene Wert ist nicht Teil der Auswahl.';
            _this.luxSelectAllOnClick = true;
            _this.luxStrict = true;
            _this.luxValueChange = new core.EventEmitter();
            _this.luxOptionSelected = new core.EventEmitter();
            _this.luxBlur = new core.EventEmitter();
            _this.luxFocus = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(LuxAutocompleteComponent.prototype, "luxValue", {
            get: function () {
                return this.getValue();
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        LuxAutocompleteComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.selected$.pipe(operators.distinctUntilChanged()).subscribe(function (value) {
                if (_this.luxStrict) {
                    if (value === '') {
                        _this.luxOptionSelected.emit(null);
                        _this.luxValueChange.emit(null);
                    }
                    else {
                        var selectedOption = _this.luxOptions.find(function (option) { return value === option; });
                        if (selectedOption) {
                            _this.luxOptionSelected.emit(selectedOption);
                            _this.luxValueChange.emit(selectedOption);
                        }
                    }
                }
                else {
                    _this.luxOptionSelected.emit(value);
                    _this.luxValueChange.emit(value);
                }
            });
        };
        LuxAutocompleteComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.matAutoComplete.panelClosingActions
                .pipe(operators.debounceTime(this.luxLookupDelay))
                .subscribe(function (value) {
                if (_this.luxStrict) {
                    var filterResult = _this.filter(_this.getOptionLabel(_this.luxValue));
                    if (filterResult.length === 1) {
                        _this.formControl.setValue(filterResult[0]);
                    }
                    _this.handleErrors();
                }
            });
            this.filteredOptions = this.formControl.valueChanges.pipe(operators.startWith(''), operators.debounceTime(this.luxLookupDelay), operators.map(function (value) { return _this.getOptionLabel(value); }), operators.map(function () {
                var filterLabel = _this.getOptionLabel(_this.luxValue);
                return filterLabel ? _this.filter(filterLabel) : _this.luxOptions;
            }));
        };
        /**
         * @override errorMessageModifier - Modifikation der Fehlermeldung
         * @param value
         * @param errors
         */
        LuxAutocompleteComponent.prototype.errorMessageModifier = function (value, errors) {
            if (errors['incorrect']) {
                return this.luxErrorMessageNotAnOption;
            }
            return undefined;
        };
        /**
         * Regelt die Darstellung der gewaehlten Option im Normalfall.
         * (Ausnahme: Focus-Verlust)
         * @param option
         * @returns string
         */
        LuxAutocompleteComponent.prototype.displayFn = function (option) {
            return this.getOptionLabel(this.luxValue);
        };
        /**
         * Filtert das Options-Array nach dem filterTerm und
         * gibt das Ergebnis als Array zurueck.
         * @param filterTerm
         * @returns any[]
         */
        LuxAutocompleteComponent.prototype.filter = function (filterTerm) {
            var _this = this;
            return this.luxOptions.filter(function (option) {
                var compareValue = _this.getOptionLabel(option);
                return (compareValue
                    .trim()
                    .toLowerCase()
                    .indexOf(filterTerm.trim().toLowerCase()) > -1);
            });
        };
        /**
         * Click-Event Handling
         * Selektiert den gesamten Text im Input, wenn selectAllOnClick = true ist.
         * @param clickEvent
         */
        LuxAutocompleteComponent.prototype.onClick = function (clickEvent) {
            if (this.luxSelectAllOnClick) {
                clickEvent.target.setSelectionRange(0, clickEvent.target.value.length);
            }
        };
        /**
         * Gibt den darzustellenden Wert einer Option bzw.
         * die Option selbst (wenn string) wider.
         * @param option
         * @returns any
         */
        LuxAutocompleteComponent.prototype.getOptionLabel = function (option) {
            if (typeof option === 'string') {
                return option;
            }
            else if (!option) {
                return '';
            }
            else {
                return option[this.luxOptionLabelProp];
            }
        };
        LuxAutocompleteComponent.prototype.selected = function ($event) {
            this.luxValue = $event.option.value;
        };
        LuxAutocompleteComponent.prototype.handleErrors = function () {
            var errors = this.formControl ? this.formControl.errors : null;
            if (this.luxOptions.indexOf(this.luxValue) > -1 ||
                (!!errors && Object.keys(errors).length > 0 && errors['required'])) {
                this.handleOtherErrors(errors);
            }
            else {
                this.handleIncorrectError(errors);
            }
        };
        LuxAutocompleteComponent.prototype.handleOtherErrors = function (errors) {
            if (errors && errors['incorrect']) {
                delete errors['incorrect'];
            }
            this.formControl.setErrors(errors && Object.keys(errors).length !== 0 ? errors : null);
        };
        LuxAutocompleteComponent.prototype.handleIncorrectError = function (errors) {
            if (this.luxStrict && this.luxValue) {
                errors = errors ? errors : {};
                if (!errors['incorrect']) {
                    errors['incorrect'] = true;
                }
                this.formControl.setErrors(errors);
            }
        };
        // region overridden methods
        LuxAutocompleteComponent.prototype.notifyFormValueChanged = function (formValue) {
            this.selected$.next(formValue);
            this.luxValueChange.emit(formValue);
            if (formValue && formValue[this.luxOptionLabelProp]) {
                this.matInput.nativeElement.value = formValue[this.luxOptionLabelProp];
            }
        };
        LuxAutocompleteComponent.prototype.triggerOutputPatternCheck = function () {
            this.checkOutputPatternViolation(this.luxValueChange.observers);
        };
        LuxAutocompleteComponent.prototype.triggerInputPatternCheck = function (simpleChanges) {
            this.checkInputPatternViolation(simpleChanges.luxValue);
        };
        LuxAutocompleteComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAutocompleteComponent.prototype, "luxPlaceholder", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxAutocompleteComponent.prototype, "luxReadonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], LuxAutocompleteComponent.prototype, "luxOptions", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAutocompleteComponent.prototype, "luxOptionLabelProp", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxAutocompleteComponent.prototype, "luxLookupDelay", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAutocompleteComponent.prototype, "luxErrorMessageNotAnOption", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxAutocompleteComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxAutocompleteComponent.prototype, "luxSelectAllOnClick", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxAutocompleteComponent.prototype, "luxStrict", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxAutocompleteComponent.prototype, "luxValueChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxAutocompleteComponent.prototype, "luxOptionSelected", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxAutocompleteComponent.prototype, "luxBlur", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxAutocompleteComponent.prototype, "luxFocus", void 0);
        __decorate([
            core.ViewChild('autoCompleteInput', { read: material.MatAutocompleteTrigger, static: false }),
            __metadata("design:type", material.MatAutocompleteTrigger)
        ], LuxAutocompleteComponent.prototype, "matAutoComplete", void 0);
        __decorate([
            core.ViewChild('autoCompleteInput', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxAutocompleteComponent.prototype, "matInput", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxAutocompleteComponent.prototype, "luxValue", null);
        LuxAutocompleteComponent = __decorate([
            core.Component({
                selector: 'lux-autocomplete',
                template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <div class=\"lux-input-row\">\n    <input\n      type=\"text\"\n      matInput\n      autocomplete=\"off\"\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [formControl]=\"formControl\"\n      [placeholder]=\"luxPlaceholder\"\n      [matAutocomplete]=\"auto\"\n      [required]=\"luxRequired\"\n      (click)=\"onClick($event)\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"luxFocusIn.emit($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [id]=\"uid\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      #autoCompleteInput\n    />\n    <mat-autocomplete\n      #auto=\"matAutocomplete\"\n      [class]=\"'lux-autocomplete-panel'\"\n      [displayWith]=\"displayFn.bind(this)\"\n      (optionSelected)=\"selected($event)\"\n    >\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        <ng-container *ngTemplateOutlet=\"optionTemplate; context: { $implicit: option }\"></ng-container>\n      </mat-option>\n    </mat-autocomplete>\n  </div>\n</lux-form-control>\n\n<ng-template #optionTemplate let-option>\n  <ng-container *ngIf=\"option[luxOptionLabelProp]; else showObjectTemplate\">\n    {{ option | luxRenderProperty: luxOptionLabelProp }}\n  </ng-container>\n  <ng-template #showObjectTemplate>\n    {{ option }}\n  </ng-template>\n</ng-template>\n",
                styles: ["::ng-deep .lux-autocomplete-panel mat-option:not(:last-of-type){margin-bottom:2px}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxAutocompleteComponent);
        return LuxAutocompleteComponent;
    }(LuxFormComponentBase));

    /**
     * Basis-Klasse für FormComponents, die einen ähnlichen Grundaufbau für das Aktivieren eines Boolean-Wertes besitzen
     * (LuxToggle und LuxCheckbox z.B.).
     */
    var LuxFormCheckableBaseClass = /** @class */ (function (_super) {
        __extends(LuxFormCheckableBaseClass, _super);
        function LuxFormCheckableBaseClass(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.luxCheckedChange = new core.EventEmitter();
            return _this;
        }
        Object.defineProperty(LuxFormCheckableBaseClass.prototype, "luxChecked", {
            get: function () {
                return this.getValue();
            },
            set: function (checked) {
                this.setValue(checked);
            },
            enumerable: true,
            configurable: true
        });
        // region Overridden methods
        LuxFormCheckableBaseClass.prototype.notifyFormValueChanged = function (formValue) {
            // Aktualisierungen an dem FormControl-Value sollen auch via EventEmitter bekannt gemacht werden
            this.luxCheckedChange.emit(formValue);
            // Bei luxRequired = true && einem false-Wert entsprechend einen Fehler setzen
            if (formValue === false && this.luxRequired && this.formControl.errors === null) {
                this.formControl.setErrors({ required: true });
            }
        };
        LuxFormCheckableBaseClass.prototype.errorMessageModifier = function (value, errors) {
            if (errors.required) {
                return 'Das ist ein Pflichtfeld';
            }
            return undefined;
        };
        LuxFormCheckableBaseClass.prototype.checkValidatorsContainRequired = function (validators) {
            // Fall: required = true, aber neue Validatoren werden gesetzt
            if (this.luxRequired === true) {
                // Sind es mehrere Validatoren, aber kein .requiredTrue? Dann wird er ergänzt
                if (Array.isArray(validators) && validators.indexOf(forms.Validators.requiredTrue) === -1) {
                    validators.push(forms.Validators.requiredTrue);
                }
                else if (!Array.isArray(validators) && validators !== forms.Validators.requiredTrue) {
                    // Ist es nur ein einzelner Validator und nicht .requiredTrue? Dann Array erstellen und beide kombinieren
                    validators = [validators, forms.Validators.requiredTrue];
                }
            }
            else if (this.luxRequired === false) {
                if (Array.isArray(validators)) {
                    validators = validators.filter(function (validator) { return validator !== forms.Validators.requiredTrue; });
                }
                else if (validators === forms.Validators.requiredTrue) {
                    validators = undefined;
                }
            }
            return validators;
        };
        LuxFormCheckableBaseClass.prototype.triggerOutputPatternCheck = function () {
            this.checkOutputPatternViolation(this.luxCheckedChange.observers);
        };
        LuxFormCheckableBaseClass.prototype.triggerInputPatternCheck = function (simpleChanges) {
            this.checkInputPatternViolation(simpleChanges.luxChecked);
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormCheckableBaseClass.prototype, "luxCheckedChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormCheckableBaseClass.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFormCheckableBaseClass.prototype, "luxReadonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxFormCheckableBaseClass.prototype, "luxChecked", null);
        return LuxFormCheckableBaseClass;
    }(LuxFormComponentBase));

    var LuxCheckboxComponent = /** @class */ (function (_super) {
        __extends(LuxCheckboxComponent, _super);
        function LuxCheckboxComponent(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.controlContainer = controlContainer;
            return _this;
        }
        LuxCheckboxComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        LuxCheckboxComponent = __decorate([
            core.Component({
                selector: 'lux-checkbox',
                template: "<lux-form-control\n  [luxFormComponent]=\"this\"\n  [luxHideBottomBorder]=\"true\"\n  [formGroup]=\"formGroup\"\n  [luxIgnoreDefaultLabel]=\"true\"\n  (click)=\"formControl.markAsTouched()\"\n  *ngIf=\"formGroup\"\n>\n  <mat-checkbox\n    [formControl]=\"formControl\"\n    [disableRipple]=\"true\"\n    [required]=\"luxRequired\"\n    luxTagIdHandler\n    [luxTagId]=\"luxTagId\"\n    [id]=\"uid\"\n    [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n    luxAriaDescribedbySelector=\".mat-checkbox-input\"\n    [luxAriaRequired]=\"luxRequired\"\n    luxAriaRequiredSelector=\".mat-checkbox-input\"\n    [luxAriaInvalid]=\"formControl.invalid\"\n    luxAriaInvalidSelector=\".mat-checkbox-input\"\n    (focusin)=\"luxFocusIn.emit($event)\"\n    (focusout)=\"luxFocusOut.emit($event)\"\n    tabIndex=\"{{ luxReadonly ? -1 : 0 }}\"\n  >\n    <label class=\"lux-form-label\" [for]=\"uid + '-input'\" *ngIf=\"formLabelComponent || luxLabel\">\n      <ng-container *ngIf=\"luxLabel; else formLabelTemplate\">\n        {{ luxLabel }}\n      </ng-container>\n      <ng-template #formLabelTemplate>\n        <ng-container *ngTemplateOutlet=\"formLabelComponent.templateRef\"></ng-container>\n      </ng-template>\n      {{ luxRequired ? ' *' : '' }}\n    </label>\n  </mat-checkbox>\n</lux-form-control>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{position:relative}:host ::ng-deep .mat-checkbox-label{-ms-word-break:break-word;word-break:break-word;white-space:normal}:host ::ng-deep .mat-checkbox-ripple{display:none}:host ::ng-deep .mat-checkbox-inner-container{width:20px;height:20px;margin-top:-2px}.mat-checkbox-disabled ::ng-deep label{color:rgba(0,0,0,.38)}.mat-checkbox-disabled ::ng-deep label div div.mat-checkbox-frame{border-color:rgba(0,0,0,.15)}.mat-checkbox-checked:not(.mat-checkbox-disabled) ::ng-deep label div div.mat-checkbox-background{background-color:#335c85}.mat-checkbox-checked:not(.mat-checkbox-disabled) ::ng-deep label div div.mat-checkbox-background svg{background-color:#335c85}.lux-checkbox-wrapper{padding-bottom:12px}.lux-form-label{cursor:pointer}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxCheckboxComponent);
        return LuxCheckboxComponent;
    }(LuxFormCheckableBaseClass));

    var LuxChipGroupComponent = /** @class */ (function () {
        function LuxChipGroupComponent() {
            this._luxColor = 'primary';
            this.luxChipClicked = new core.EventEmitter();
            this.luxChipAdded = new core.EventEmitter();
            this.luxChipRemoved = new core.EventEmitter();
            this.luxChipSelected = new core.EventEmitter();
            this.luxLabels = [];
            this.luxDisabled = false;
            this.luxRemovable = true;
            this.luxSelected = true;
        }
        Object.defineProperty(LuxChipGroupComponent.prototype, "luxColor", {
            get: function () {
                return this._luxColor;
            },
            set: function (color) {
                if (color !== 'primary' && color !== 'accent' && color !== 'warn') {
                    color = undefined;
                }
                this._luxColor = color;
            },
            enumerable: true,
            configurable: true
        });
        LuxChipGroupComponent.prototype.ngOnInit = function () { };
        LuxChipGroupComponent.prototype.add = function (label) {
            this.luxLabels.push(label);
            this.luxChipAdded.emit(label);
        };
        LuxChipGroupComponent.prototype.remove = function (index) {
            this.luxChipRemoved.emit(index);
            this.luxLabels.splice(index, 1);
        };
        LuxChipGroupComponent.prototype.click = function (index) {
            this.luxChipClicked.emit(index);
        };
        LuxChipGroupComponent.prototype.select = function (selected, index) {
            this.luxChipSelected.emit({ index: index, selected: selected });
        };
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxChipGroupComponent.prototype, "tempRef", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipGroupComponent.prototype, "luxChipClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipGroupComponent.prototype, "luxChipAdded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipGroupComponent.prototype, "luxChipRemoved", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipGroupComponent.prototype, "luxChipSelected", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], LuxChipGroupComponent.prototype, "luxLabels", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipGroupComponent.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipGroupComponent.prototype, "luxRemovable", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipGroupComponent.prototype, "luxSelected", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxChipGroupComponent.prototype, "luxColor", null);
        LuxChipGroupComponent = __decorate([
            core.Component({
                selector: 'lux-chip-group',
                template: ''
            }),
            __metadata("design:paramtypes", [])
        ], LuxChipGroupComponent);
        return LuxChipGroupComponent;
    }());

    var LuxChipComponent = /** @class */ (function () {
        function LuxChipComponent() {
            this.removeClicked = false;
            this._luxColor = 'primary';
            this.luxChipRemoved = new core.EventEmitter();
            this.luxChipClicked = new core.EventEmitter();
            this.luxChipSelected = new core.EventEmitter();
            this.luxDisabled = false;
            this.luxRemovable = true;
            this.luxSelected = true;
        }
        Object.defineProperty(LuxChipComponent.prototype, "luxColor", {
            get: function () {
                return this._luxColor;
            },
            set: function (color) {
                if (color !== 'primary' && color !== 'accent' && color !== 'warn') {
                    color = undefined;
                }
                this._luxColor = color;
            },
            enumerable: true,
            configurable: true
        });
        LuxChipComponent.prototype.ngOnInit = function () { };
        LuxChipComponent.prototype.remove = function (index) {
            this.luxChipRemoved.emit(index);
            this.removeClicked = true;
        };
        LuxChipComponent.prototype.click = function (index) {
            if (!this.removeClicked) {
                this.luxChipClicked.emit(index);
            }
        };
        LuxChipComponent.prototype.select = function (selected, index) {
            this.luxSelected = selected;
            this.luxChipSelected.emit({ index: index, selected: selected });
        };
        __decorate([
            core.ViewChild(core.TemplateRef, { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], LuxChipComponent.prototype, "templateRef", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipComponent.prototype, "luxChipRemoved", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipComponent.prototype, "luxChipClicked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipComponent.prototype, "luxChipSelected", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipComponent.prototype, "luxDisabled", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipComponent.prototype, "luxRemovable", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipComponent.prototype, "luxSelected", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxChipComponent.prototype, "luxColor", null);
        LuxChipComponent = __decorate([
            core.Component({
                selector: 'lux-chip',
                template: "\n    <ng-template>\n      <ng-content></ng-content>\n    </ng-template>\n  "
            }),
            __metadata("design:paramtypes", [])
        ], LuxChipComponent);
        return LuxChipComponent;
    }());

    var LuxChipsComponent = /** @class */ (function () {
        function LuxChipsComponent(controlContainer) {
            var _this = this;
            this.controlContainer = controlContainer;
            this.inputValueSubscription = new rxjs.Subscription();
            this.newChipSubscription = new rxjs.Subscription();
            this._luxDisabled = false;
            this._luxAutocompleteOptions = [];
            this._luxLabel = 'Neu';
            this.filteredOptions = [];
            this.inputValue$ = new rxjs.Subject();
            this.newChip$ = new rxjs.Subject();
            this.luxOrientation = 'horizontal';
            this.luxInputAllowed = false;
            this.luxMultiple = true;
            this.luxChipAdded = new core.EventEmitter();
            this.newChipSubscription = this.newChip$.subscribe(function (value) {
                _this.add(value);
                _this.filteredOptions = _this.luxAutocompleteOptions ? _this.luxAutocompleteOptions : [];
            });
            this.inputValueSubscription = this.inputValue$
                .asObservable()
                .pipe(operators.startWith(''), operators.distinctUntilChanged(), operators.map(function (value) {
                if (!value) {
                    _this.filteredOptions = __spread(_this.luxAutocompleteOptions);
                }
                else {
                    _this.filteredOptions = _this.luxAutocompleteOptions.filter(function (compareValue) {
                        return compareValue
                            .trim()
                            .toLowerCase()
                            .indexOf(value.trim().toLowerCase()) > -1;
                    });
                }
            }))
                .subscribe();
        }
        Object.defineProperty(LuxChipsComponent.prototype, "luxDisabled", {
            get: function () {
                return this._luxDisabled;
            },
            set: function (disabled) {
                var _this = this;
                this._luxDisabled = disabled;
                setTimeout(function () {
                    _this.luxChipGroupComponents.forEach(function (chipGroup) { return (chipGroup.luxDisabled = disabled); });
                    _this.luxChipComponents.forEach(function (chip) { return (chip.luxDisabled = disabled); });
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxChipsComponent.prototype, "luxAutocompleteOptions", {
            get: function () {
                return this._luxAutocompleteOptions;
            },
            set: function (options) {
                this._luxAutocompleteOptions = options ? options : [];
                this.filteredOptions = this.luxAutocompleteOptions;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxChipsComponent.prototype, "luxInputLabel", {
            get: function () {
                return this._luxLabel;
            },
            set: function (label) {
                this._luxLabel = label;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxChipsComponent.prototype, "luxLabel", {
            // Für lux-form-control, diese ruft luxLabel auf
            get: function () {
                return this._luxLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxChipsComponent.prototype, "chipComponents", {
            get: function () {
                return this.luxChipComponents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxChipsComponent.prototype, "chipGroupComponents", {
            get: function () {
                return this.luxChipGroupComponents;
            },
            enumerable: true,
            configurable: true
        });
        LuxChipsComponent.prototype.ngOnDestroy = function () {
            if (this.newChipSubscription) {
                this.newChipSubscription.unsubscribe();
            }
            if (this.inputValueSubscription) {
                this.inputValueSubscription.unsubscribe();
            }
        };
        /**
         * Fuegt einen Chip hinzu.
         * Fuegt ihn entweder der explizit mitgeteilten newChipList hinzu oder einfach
         * der letzten mitgegebenen Liste.
         * @param value
         */
        LuxChipsComponent.prototype.add = function (value) {
            var _this = this;
            if (value && value.trim().length > 0) {
                if (this.luxNewChipGroup) {
                    this.luxNewChipGroup.add(value);
                }
                else {
                    this.luxChipAdded.emit(value);
                }
                // Autocomplete-Feld in jedem Fall schließen (Delay über Timeout, damit kein visuelles Flackern entsteht)
                setTimeout(function () { return _this.matAutocompleteTrigger.closePanel(); });
            }
        };
        /**
         * Wird bei Eingabe von Werten in das Input-Feld aufgerufen und schreibt einen neuen Wert
         * in das inputValue-Subject.
         * @param value
         */
        LuxChipsComponent.prototype.inputChanged = function (value) {
            this.inputValue$.next(value);
        };
        /**
         * Wird beim Selektieren einer Option im Autocomplete ausgeführt.
         * @param input
         * @param value
         */
        LuxChipsComponent.prototype.autoCompleteAdd = function (input, value) {
            this.newChip$.next(value);
            input.value = '';
        };
        /**
         * Wird beim Input-Event des Eingabefelds ausgeführt, fragt aber vorher ab, ob das Autocomplete offen ist.
         * Wenn ja, wird kein neuer Chip erzeugt, da das Autocomplete dies übernimmt.
         * @param input
         */
        LuxChipsComponent.prototype.inputAdd = function (input) {
            if (!this.matAutocomplete.isOpen) {
                // falls nur eine Option übrig ist, diese als value nehmen anstelle des input textes
                if (this.luxAutocompleteOptions &&
                    this.luxAutocompleteOptions.length > 1 &&
                    this.filteredOptions &&
                    this.filteredOptions.length === 1) {
                    this.newChip$.next(this.filteredOptions[0]);
                    input.value = '';
                }
                else {
                    this.newChip$.next(input.value);
                    input.value = '';
                }
            }
        };
        LuxChipsComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxChipsComponent.prototype, "luxOrientation", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipsComponent.prototype, "luxInputAllowed", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", LuxChipGroupComponent)
        ], LuxChipsComponent.prototype, "luxNewChipGroup", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxChipsComponent.prototype, "luxMultiple", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LuxChipsComponent.prototype, "luxChipAdded", void 0);
        __decorate([
            core.ContentChildren(LuxChipComponent),
            __metadata("design:type", core.QueryList)
        ], LuxChipsComponent.prototype, "luxChipComponents", void 0);
        __decorate([
            core.ContentChildren(LuxChipGroupComponent),
            __metadata("design:type", core.QueryList)
        ], LuxChipsComponent.prototype, "luxChipGroupComponents", void 0);
        __decorate([
            core.ViewChildren(material.MatChip),
            __metadata("design:type", core.QueryList)
        ], LuxChipsComponent.prototype, "matChips", void 0);
        __decorate([
            core.ViewChild('input', { read: material.MatAutocompleteTrigger, static: false }),
            __metadata("design:type", material.MatAutocompleteTrigger)
        ], LuxChipsComponent.prototype, "matAutocompleteTrigger", void 0);
        __decorate([
            core.ViewChild('auto', { read: material.MatAutocomplete, static: false }),
            __metadata("design:type", material.MatAutocomplete)
        ], LuxChipsComponent.prototype, "matAutocomplete", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxChipsComponent.prototype, "luxDisabled", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], LuxChipsComponent.prototype, "luxAutocompleteOptions", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxChipsComponent.prototype, "luxInputLabel", null);
        LuxChipsComponent = __decorate([
            core.Component({
                selector: 'lux-chips',
                template: "<div class=\"lux-chips\" fxLayout=\"column\">\n  <lux-form-control\n    [luxScalableHeight]=\"true\"\n    [luxFormComponent]=\"this\"\n    [luxHideBottomBorder]=\"!luxInputAllowed\"\n    [luxIgnoreDefaultLabel]=\"!luxInputAllowed\"\n  >\n    <mat-chip-list\n      [ngClass]=\"[\n        luxOrientation.toLocaleLowerCase() === 'vertical' ? 'mat-chip-list-stacked' : 'mat-chip-list-horizontal',\n        luxOrientation === 'horizontal' && luxInputAllowed ? 'lux-chips-list-offset' : 'lux-chips-list'\n      ]\"\n      [disabled]=\"luxDisabled\"\n      [aria-orientation]=\"luxOrientation\"\n      [multiple]=\"luxMultiple\"\n      #chips\n    >\n      <!-- Direkte Chip-Components -->\n      <ng-container *ngFor=\"let chip of chipComponents; let i = index\">\n        <mat-chip\n          [removable]=\"chip.luxRemovable\"\n          [disabled]=\"chip.luxDisabled\"\n          [selectable]=\"!chip.luxDisabled\"\n          [selected]=\"chip.luxSelected\"\n          [color]=\"chip.luxColor\"\n          (keydown.delete)=\"chip.remove(i)\"\n          (selectionChange)=\"chip.select($event.selected, i)\"\n          (click)=\"chip.click(i)\"\n        >\n          <ng-template *ngTemplateOutlet=\"chip.templateRef\"></ng-template>\n          <lux-icon\n            matChipRemove\n            luxIconName=\"cancel\"\n            luxMargin=\"0 0 0 6px\"\n            luxPadding=\"2px\"\n            class=\"lux-cursor\"\n            (click)=\"chip.remove(i)\"\n            *ngIf=\"chip.luxRemovable\"\n          ></lux-icon>\n        </mat-chip>\n      </ng-container>\n\n      <!-- Chips via ChipGroup-Components -->\n      <ng-container *ngFor=\"let chipGroup of chipGroupComponents\">\n        <ng-container *ngFor=\"let label of chipGroup.luxLabels; let i = index\">\n          <mat-chip\n            [removable]=\"chipGroup.luxRemovable\"\n            [disabled]=\"chipGroup.luxDisabled\"\n            [selectable]=\"!chipGroup.luxDisabled\"\n            [selected]=\"chipGroup.luxSelected\"\n            [color]=\"chipGroup.luxColor\"\n            (keydown.delete)=\"chipGroup.remove(i)\"\n            (selectionChange)=\"chipGroup.select($event.selected, i)\"\n            (click)=\"chipGroup.click(i)\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"chipGroup.tempRef ? chipGroup.tempRef : noTemplateRef; context: { $implicit: label }\"\n            ></ng-container>\n            <lux-icon\n              matChipRemove\n              luxIconName=\"cancel\"\n              luxMargin=\"0 0 0 6px\"\n              luxPadding=\"2px\"\n              class=\"lux-cursor\"\n              (click)=\"chipGroup.remove(i)\"\n              *ngIf=\"chipGroup.luxRemovable\"\n            ></lux-icon>\n          </mat-chip>\n        </ng-container>\n      </ng-container>\n\n      <ng-container *ngIf=\"luxInputAllowed\">\n        <input\n          [matChipInputFor]=\"chips\"\n          [matChipInputAddOnBlur]=\"true\"\n          [matAutocomplete]=\"auto\"\n          [disabled]=\"luxDisabled\"\n          (matChipInputTokenEnd)=\"inputAdd(input)\"\n          (keyup)=\"inputChanged(input.value)\"\n          type=\"text\"\n          fxFlex=\"1 1 auto\"\n          #input\n        />\n        <mat-autocomplete\n          [class]=\"'lux-autocomplete-panel'\"\n          (optionSelected)=\"autoCompleteAdd(input, $event.option.value)\"\n          #auto=\"matAutocomplete\"\n        >\n          <mat-option *ngFor=\"let option of filteredOptions\" [value]=\"option\">\n            {{ option }}\n          </mat-option>\n        </mat-autocomplete>\n      </ng-container>\n    </mat-chip-list>\n  </lux-form-control>\n</div>\n\n<ng-template #noTemplateRef let-label>\n  {{ label }}\n</ng-template>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}mat-chip-list{display:block}.mat-chip-list-stacked{display:-webkit-box;display:-ms-flexbox;display:flex}.mat-chip-list-stacked ::ng-deep mat-chip{width:auto!important}.mat-chip-list-stacked ::ng-deep .mat-chip-input{-webkit-box-flex:unset;-ms-flex:unset;flex:unset}.mat-chip-list-stacked ::ng-deep .mat-chip-list-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important;width:100%}.lux-chips input{margin-bottom:10px;width:auto}.lux-chips mat-chip.mat-chip-disabled{background-color:rgba(0,0,0,.38)!important;color:#fff!important;pointer-events:none}.lux-chips mat-chip.mat-chip-disabled lux-icon ::ng-deep i,.lux-chips mat-chip.mat-chip-disabled lux-icon ::ng-deep mat-icon{color:#fff}.lux-chips .lux-chips-list-offset mat-chip{margin-bottom:10px}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer])
        ], LuxChipsComponent);
        return LuxChipsComponent;
    }());

    /**
     * Basis-Klasse für FormComponents, die einen ähnlichen Grundaufbau für das Eintippen von String-Daten haben
     * (Input und Textarea z.B.).
     */
    var LuxFormInputBaseClass = /** @class */ (function (_super) {
        __extends(LuxFormInputBaseClass, _super);
        function LuxFormInputBaseClass(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.luxValueChange = new core.EventEmitter();
            _this.luxBlur = new core.EventEmitter();
            _this.luxFocus = new core.EventEmitter();
            _this.luxPlaceholder = '';
            _this.luxAutocomplete = 'on';
            return _this;
        }
        Object.defineProperty(LuxFormInputBaseClass.prototype, "luxValue", {
            get: function () {
                return this.getValue();
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        // region Overridden methods
        LuxFormInputBaseClass.prototype.notifyFormValueChanged = function (formValue) {
            // Aktualisierungen an dem FormControl-Value sollen auch via EventEmitter bekannt gemacht werden
            this.luxValueChange.emit(formValue);
        };
        LuxFormInputBaseClass.prototype.triggerOutputPatternCheck = function () {
            this.checkOutputPatternViolation(this.luxValueChange.observers);
        };
        LuxFormInputBaseClass.prototype.triggerInputPatternCheck = function (simpleChanges) {
            this.checkInputPatternViolation(simpleChanges.luxValue);
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormInputBaseClass.prototype, "luxValueChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormInputBaseClass.prototype, "luxBlur", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormInputBaseClass.prototype, "luxFocus", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormInputBaseClass.prototype, "luxPlaceholder", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFormInputBaseClass.prototype, "luxReadonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormInputBaseClass.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormInputBaseClass.prototype, "luxAutocomplete", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxFormInputBaseClass.prototype, "luxValue", null);
        return LuxFormInputBaseClass;
    }(LuxFormComponentBase));

    var LuxDatepickerAdapter = /** @class */ (function (_super) {
        __extends(LuxDatepickerAdapter, _super);
        function LuxDatepickerAdapter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // dd.MM.yyyy
            _this.dotRegExp = new RegExp(/\d{1,2}\.\d{1,2}\.\d{4}/);
            // MM/dd/yyyy
            _this.backslashRegExp = new RegExp(/\d{1,2}\/\d{1,2}\/\d{4}/);
            // dd-MM-yyyy
            _this.hyphenRegExp = new RegExp(/\d{1,2}-\d{1,2}-\d{4}/);
            // yyyy-MM-dd
            _this.hyphenRegExp_1 = new RegExp(/\d{4}-\d{1,2}-\d{1,2}/);
            return _this;
        }
        LuxDatepickerAdapter.prototype.format = function (date, displayFormat) {
            if (date) {
                if (displayFormat) {
                    if (typeof date === 'string') {
                        date = new Date(date);
                    }
                    return date.toLocaleDateString(this.locale, displayFormat);
                }
                else {
                    return date.toLocaleDateString(this.locale);
                }
            }
            else {
                return '';
            }
        };
        LuxDatepickerAdapter.prototype.parse = function (value) {
            if (value) {
                // Prüfen, ob der Wert ein ISO-String ist
                if (LuxUtil.ISO_8601_FULL.test(value)) {
                    return new Date(value);
                }
                // Hat der String das Format dd.MM.YYYY ?
                if (this.dotRegExp.test(value)) {
                    return this.getUTCNulled_ddMMYYYY(value, '.');
                }
                else if (this.backslashRegExp.test(value)) {
                    return this.getUTCNulled_MMddYYY(value, '/');
                }
                else if (this.hyphenRegExp.test(value)) {
                    return this.getUTCNulled_ddMMYYYY(value, '-');
                }
                else if (this.hyphenRegExp_1.test(value)) {
                    return this.getUTCNulled_YYYYMMdd(value, '-');
                }
                return value;
            }
            return null;
        };
        /**
         * UTC Date mit 0-Werten für Time aus einem ddMMYYYY-String erhalten.
         * @param dateString
         * @param separator
         */
        LuxDatepickerAdapter.prototype.getUTCNulled_ddMMYYYY = function (dateString, separator) {
            var splitDate = dateString.split(separator);
            var tempDate = new Date(0);
            tempDate.setUTCFullYear(+splitDate[2], +splitDate[1] - 1, +splitDate[0]);
            return tempDate;
        };
        /**
         * UTC Date mit 0-Werten für Time aus einem YYYYMMdd-String erhalten.
         * @param dateString
         * @param separator
         */
        LuxDatepickerAdapter.prototype.getUTCNulled_YYYYMMdd = function (dateString, separator) {
            var splitDate = dateString.split(separator);
            var tempDate = new Date(0);
            tempDate.setUTCFullYear(+splitDate[0], +splitDate[1] - 1, +splitDate[2]);
            return tempDate;
        };
        /**
         * UTC Date mit 0-Werten für Time aus einem MMddYYYY-String erhalten.
         * @param dateString
         * @param separator
         */
        LuxDatepickerAdapter.prototype.getUTCNulled_MMddYYY = function (dateString, separator) {
            var splitDate = dateString.split(separator);
            var tempDate = new Date(0);
            tempDate.setUTCFullYear(+splitDate[2], +splitDate[0] - 1, +splitDate[1]);
            return tempDate;
        };
        LuxDatepickerAdapter.prototype.isValid = function (date) {
            return LuxUtil.isDate(date);
        };
        LuxDatepickerAdapter = __decorate([
            core.Injectable()
        ], LuxDatepickerAdapter);
        return LuxDatepickerAdapter;
    }(material.NativeDateAdapter));

    var APP_DATE_FORMATS = {
        parse: {
            dateInput: { month: '2-digit', year: 'numeric', day: '2-digit' }
        },
        display: {
            dateInput: { month: '2-digit', year: 'numeric', day: '2-digit' },
            monthYearLabel: { year: 'numeric', month: 'long' },
            dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
            monthYearA11yLabel: { year: 'numeric', month: 'long' }
        }
    };
    var LuxDatepickerComponent = /** @class */ (function (_super) {
        __extends(LuxDatepickerComponent, _super);
        function LuxDatepickerComponent(controlContainer, dateAdapter, mediaObserver, elementRef, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.dateAdapter = dateAdapter;
            _this.mediaObserver = mediaObserver;
            _this.elementRef = elementRef;
            _this.luxStartView = 'month';
            _this.luxTouchUi = false;
            _this.luxOpened = false;
            _this.luxStartDate = null;
            _this.luxShowToggle = true;
            _this.luxLocale = 'de-DE';
            _this.luxCustomFilter = undefined;
            _this.luxMaxDate = undefined;
            _this.luxMinDate = undefined;
            // den Standard-Wert für Autocomplete für Datepicker ausschalten
            _this.luxAutocomplete = 'off';
            _this.dateAdapter.setLocale(_this.luxLocale);
            return _this;
        }
        Object.defineProperty(LuxDatepickerComponent.prototype, "luxValue", {
            get: function () {
                return this.getValue();
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        LuxDatepickerComponent.prototype.ngOnChanges = function (simpleChanges) {
            var _this = this;
            _super.prototype.ngOnChanges.call(this, simpleChanges);
            if (simpleChanges.luxOpened) {
                // Evtl. gibt es ohne das Timeout sonst Fehler, weil der matDatepicker noch nicht gesetzt ist
                setTimeout(function () {
                    _this.triggerOpenClose();
                });
            }
            if (simpleChanges.luxLocale && simpleChanges.luxLocale.currentValue) {
                this.dateAdapter.setLocale(simpleChanges.luxLocale.currentValue);
            }
            if (simpleChanges.luxMaxDate && typeof simpleChanges.luxMaxDate.currentValue === 'string') {
                this.max = this.dateAdapter.parse(simpleChanges.luxMaxDate.currentValue, {});
            }
            if (simpleChanges.luxMinDate && typeof simpleChanges.luxMinDate.currentValue === 'string') {
                this.min = this.dateAdapter.parse(simpleChanges.luxMinDate.currentValue, {});
            }
            if (simpleChanges.luxStartDate && typeof simpleChanges.luxStartDate.currentValue === 'string') {
                this.start = this.dateAdapter.parse(simpleChanges.luxStartDate.currentValue, {});
            }
        };
        LuxDatepickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.originalTouchUi = this.luxTouchUi;
            this.mediaSubscription = this.mediaObserver.getMediaQueryChangedAsObservable().subscribe(function () {
                _this.checkMediaObserver();
            });
        };
        LuxDatepickerComponent.prototype.ngOnDestroy = function () {
            this.mediaSubscription.unsubscribe();
        };
        /**
         * Erzeugt für die Unter- bzw. Überschreitung
         * @param value
         * @param errors
         */
        LuxDatepickerComponent.prototype.errorMessageModifier = function (value, errors) {
            if (errors.matDatepickerMin) {
                return 'Das Datum unterschreitet den Minimalwert';
            }
            else if (errors.matDatepickerMax) {
                return 'Das Datum überschreitet den Maximalwert';
            }
            else if (errors.required) {
                if (this.datepickerInput && this.datepickerInput.nativeElement.value) {
                    return 'Das Datum ist ungültig';
                }
                else {
                    return 'Das Datum darf nicht leer sein';
                }
            }
            return undefined;
        };
        /**
         * Checkt ob eine mobile Media-Query vorliegt.
         * Wenn ja, wird automagisch die TouchUI aktiviert.
         * Wenn nein, wird der vom Aufrufer/originale luxTouchUI-Wert genutzt.
         */
        LuxDatepickerComponent.prototype.checkMediaObserver = function () {
            if (this.mediaObserver.isXS() || this.mediaObserver.isSM()) {
                this.luxTouchUi = true;
            }
            else {
                this.luxTouchUi = this.originalTouchUi;
            }
        };
        /**
         * Führt .open() bzw. .close() vom MatDatepicker aus, abhängig vom Wert für luxOpened.
         */
        LuxDatepickerComponent.prototype.triggerOpenClose = function () {
            if (this.luxOpened) {
                this.matDatepicker.open();
            }
            else {
                this.matDatepicker.close();
            }
        };
        /**
         * Aktualisiert den FormControl-Value und den Wert im Parent über valueChange mithilfe des übergebenen ISO-Strings.
         * @param isoValue
         */
        LuxDatepickerComponent.prototype.setISOValue = function (isoValue) {
            var _this = this;
            setTimeout(function () {
                _this.previousISO = isoValue;
                // valueChange-Emitter anstoßen
                _this.notifyFormValueChanged(isoValue);
                // "silently" den FormControl auf den (potentiell) geänderten Wert aktualisieren
                _this.formControl.setValue(isoValue, {
                    emitEvent: false,
                    emitModelToViewChange: false,
                    emitViewToModelChange: false
                });
                // Per Hand dem Input-Element einen formatierten String übergeben
                if (!_this.datepickerInput.nativeElement.value && isoValue) {
                    _this.datepickerInput.nativeElement.value = _this.dateAdapter.format(isoValue, APP_DATE_FORMATS.display.dateInput);
                }
            });
        };
        // region overridden methods
        LuxDatepickerComponent.prototype.setValue = function (value) {
            if (value !== this.luxValue) {
                if (!this.formControl) {
                    this._initialValue = value;
                    return;
                }
                this.formControl.setValue(value);
            }
        };
        LuxDatepickerComponent.prototype.initFormValueSubscription = function () {
            var _this = this;
            // Aktualisierungen an dem FormControl-Value sollen auch via EventEmitter bekannt gemacht werden
            this._formValueChangeSubscr = this.formControl.valueChanges.subscribe(function (value) {
                _this.updateDateValue(value);
            });
            if (this.formControl.value) {
                // Es kann vorkommen, dass der initiale Wert nicht im ISO-Format angegeben ist.
                // Dann muss der Wert noch umgewandelt werden.
                this.updateDateValue(this.formControl.value);
            }
            else if (this._initialValue !== null && this._initialValue !== undefined) {
                // Vorhandenen Initialwert setzen
                this.formControl.setValue(this._initialValue);
            }
        };
        LuxDatepickerComponent.prototype.updateDateValue = function (value) {
            if (!value) {
                this.setISOValue(value);
                return;
            }
            // Nachfolgend erstellen
            if (typeof value === 'string') {
                value = this.dateAdapter.parse(value, {});
            }
            var eventDate = value;
            var tempDate = new Date(0);
            tempDate.setUTCFullYear(eventDate.getFullYear(), eventDate.getMonth(), eventDate.getDate());
            tempDate.setUTCHours(0, 0, 0, 0);
            // Sicherheitshalber noch einmal prüfen, kann vorkommen das ein unsinniger Wert eingetragen wird
            // z.B. 'asdf', das führt zu InvalidDate's
            if (LuxUtil.isDate(tempDate) && this.previousISO !== tempDate.toISOString()) {
                this.setISOValue(tempDate.toISOString());
            }
        };
        LuxDatepickerComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: material.DateAdapter },
            { type: LuxMediaQueryObserverService },
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxDatepickerComponent.prototype, "luxStartView", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxDatepickerComponent.prototype, "luxTouchUi", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxDatepickerComponent.prototype, "luxOpened", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxDatepickerComponent.prototype, "luxStartDate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxDatepickerComponent.prototype, "luxShowToggle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxDatepickerComponent.prototype, "luxLocale", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxDatepickerComponent.prototype, "luxCustomFilter", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxDatepickerComponent.prototype, "luxMaxDate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxDatepickerComponent.prototype, "luxMinDate", void 0);
        __decorate([
            core.ViewChild(material.MatDatepicker, { static: false }),
            __metadata("design:type", material.MatDatepicker)
        ], LuxDatepickerComponent.prototype, "matDatepicker", void 0);
        __decorate([
            core.ViewChild('datepickerInput', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxDatepickerComponent.prototype, "datepickerInput", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxDatepickerComponent.prototype, "luxValue", null);
        LuxDatepickerComponent = __decorate([
            core.Component({
                selector: 'lux-datepicker',
                template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" #datepickerFormControl *ngIf=\"formGroup\">\n  <div class=\"lux-input-row\" fxLayout=\"row\">\n    <input\n      fxFlex=\"auto\"\n      matInput\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [matDatepicker]=\"datepicker\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [matDatepickerFilter]=\"luxCustomFilter\"\n      [placeholder]=\"luxPlaceholder\"\n      [required]=\"luxRequired\"\n      [readonly]=\"luxReadonly\"\n      [formControl]=\"formControl\"\n      [autocomplete]=\"luxAutocomplete\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"luxFocusIn.emit($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [id]=\"uid\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      #datepickerInput\n    />\n    <mat-datepicker-toggle\n      [disabled]=\"luxDisabled || luxReadonly\"\n      [for]=\"datepicker\"\n      *ngIf=\"luxShowToggle\"\n      fxFlex=\"auto\"\n      matSuffix\n    ></mat-datepicker-toggle>\n    <mat-datepicker\n      [startView]=\"luxStartView\"\n      [startAt]=\"start\"\n      [touchUi]=\"luxTouchUi\"\n      [disabled]=\"luxDisabled || luxReadonly\"\n      [panelClass]=\"'lux-datepicker-panel'\"\n      #datepicker\n    >\n    </mat-datepicker>\n  </div>\n</lux-form-control>\n",
                providers: [
                    { provide: material.DateAdapter, useClass: LuxDatepickerAdapter, deps: [core$1.MAT_DATE_LOCALE, platform.Platform] },
                    { provide: material.MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS }
                ]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                material.DateAdapter,
                LuxMediaQueryObserverService,
                core.ElementRef,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxDatepickerComponent);
        return LuxDatepickerComponent;
    }(LuxFormInputBaseClass));


    (function (LuxFileErrorCause) {
        LuxFileErrorCause["MaxSizeError"] = "luxMaximumSize";
        LuxFileErrorCause["ReadingFileError"] = "luxReadingFile";
        LuxFileErrorCause["UploadFileError"] = "luxUploadFile";
        LuxFileErrorCause["FileNotAccepted"] = "luxUnacceptedFile";
        LuxFileErrorCause["MultipleForbidden"] = "luxMultipleForbidden";
    })(exports.LuxFileErrorCause || (exports.LuxFileErrorCause = {}));

    var LuxFormFileBase = /** @class */ (function (_super) {
        __extends(LuxFormFileBase, _super);
        function LuxFormFileBase(controlContainer, cdr, logger, config, http, liveAnnouncer) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.http = http;
            _this.liveAnnouncer = liveAnnouncer;
            _this.defaultReadFileDelay = 1000;
            _this._luxAccept = '';
            _this._luxUploadActionConfig = {
                disabled: false,
                hidden: false,
                iconName: 'fas fa-cloud-upload-alt',
                label: 'Hochladen'
            };
            _this._luxDeleteActionConfig = {
                disabled: false,
                hidden: false,
                iconName: 'fas fa-trash',
                label: 'Löschen'
            };
            _this._luxViewActionConfig = {
                disabled: false,
                hidden: true,
                iconName: 'fas fa-eye',
                label: 'Ansehen'
            };
            _this._luxDownloadActionConfig = {
                disabled: false,
                hidden: true,
                iconName: 'fas fa-download',
                label: 'Download'
            };
            _this.progress = -1;
            _this.forceProgressIndeterminate = false;
            _this.luxSelectedFilesChange = new core.EventEmitter();
            _this.luxUploadReportProgress = false;
            _this.luxContentsAsBlob = false;
            _this.luxMaxSizeMB = 10;
            _this.luxCapture = '';
            _this.luxUploadUrl = '';
            _this.luxDnDActive = true;
            _this.isDragActive = false;
            return _this;
        }
        LuxFormFileBase.prototype.onDragOver = function ($event) {
            if (this.isDnDAllowed()) {
                this.handleDragOver($event);
            }
        };
        LuxFormFileBase.prototype.onDragLeave = function ($event) {
            if (this.isDnDAllowed()) {
                this.handleDragLeave($event);
            }
        };
        LuxFormFileBase.prototype.onDrop = function ($event) {
            if (this.isDnDAllowed()) {
                this.handleDrop($event);
            }
        };
        Object.defineProperty(LuxFormFileBase.prototype, "luxUploadActionConfig", {
            get: function () {
                return this._luxUploadActionConfig;
            },
            set: function (config) {
                if (config) {
                    this._luxUploadActionConfig = config;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormFileBase.prototype, "luxDeleteActionConfig", {
            get: function () {
                return this._luxDeleteActionConfig;
            },
            set: function (config) {
                if (config) {
                    this._luxDeleteActionConfig = config;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormFileBase.prototype, "luxViewActionConfig", {
            get: function () {
                return this._luxViewActionConfig;
            },
            set: function (config) {
                if (config) {
                    this._luxViewActionConfig = config;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormFileBase.prototype, "luxDownloadActionConfig", {
            get: function () {
                return this._luxDownloadActionConfig;
            },
            set: function (config) {
                if (config) {
                    this._luxDownloadActionConfig = config;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormFileBase.prototype, "luxSelectedFiles", {
            get: function () {
                return this.getValue();
            },
            set: function (selectedFiles) {
                this.setValue(selectedFiles);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormFileBase.prototype, "luxAccept", {
            get: function () {
                return this._luxAccept;
            },
            set: function (accepts) {
                if (!accepts) {
                    accepts = '';
                }
                this._luxAccept = Array.isArray(accepts) ? accepts.join(',') : accepts;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormFileBase.prototype, "progressMode", {
            get: function () {
                return (this.progress === 0 && !this.luxUploadReportProgress) || this.forceProgressIndeterminate
                    ? 'indeterminate'
                    : 'determinate';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormFileBase.prototype, "isProgressVisible", {
            get: function () {
                return this.progress >= 0 || this.forceProgressIndeterminate;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Wird beim Fokussieren des Elements aufgerufen und markiert das FormControl als "touched".
         * @param $event
         */
        LuxFormFileBase.prototype.onFocusIn = function ($event) {
            this.formControl.markAsTouched();
            this.luxFocusIn.emit($event);
        };
        /**
         * Entfernt die aktuell selektierten Dateien und entfernt etwaige (spezifische) Fehler aus dem FormControl.
         * @param $event
         */
        LuxFormFileBase.prototype.clearFiles = function ($event) {
            this.formControl.markAsTouched();
            this.formControl.markAsDirty();
            this.luxSelectedFiles = undefined;
            this.notifyFormValueChanged();
            this.clearFormControlErrors();
            if (this.luxDeleteActionConfig.onClick) {
                this.luxDeleteActionConfig.onClick();
            }
            this.announceAllFilesRemove();
        };
        /**
         * Löst den Download der übergebenen Datei aus.
         * @param file
         */
        LuxFormFileBase.prototype.downloadFile = function (file) {
            this.formControl.markAsTouched();
            file = Array.isArray(file) ? file[0] : file;
            var downloadLink = this.downloadLink.nativeElement;
            downloadLink.download = file.name;
            if (file.content instanceof Blob) {
                if (window.navigator.msSaveBlob) {
                    // IE
                    window.navigator.msSaveOrOpenBlob(file.content, file.name);
                }
                else {
                    var url = window.URL.createObjectURL(file.content);
                    downloadLink.href = url;
                    downloadLink.click();
                    window.URL.revokeObjectURL(url);
                }
            }
            else {
                if (window.navigator.msSaveBlob) {
                    // IE
                    try {
                        var arrBuffer = LuxUtil.base64ToArrayBuffer(file.content.split(',')[1]);
                        window.navigator.msSaveOrOpenBlob(new Blob([arrBuffer], { type: file.type }), file.name);
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
                else {
                    downloadLink.href = file.content;
                    downloadLink.click();
                }
            }
            if (this.luxDownloadActionConfig.onClick) {
                this.luxDownloadActionConfig.onClick(file);
            }
        };
        /**
         * Löst den base64Callback der übergebenen Datei aus.
         * Schreibt dann anschließend den Base64-String in die Datei.
         * @param file
         */
        LuxFormFileBase.prototype.viewFile = function (file) {
            var _this = this;
            this.formControl.markAsTouched();
            // Wenn die Datei bereits einen Base64-Wert besitzt, den onClick-Callback ausführen
            if (file.content) {
                this.triggerViewFileClick(file);
                return;
            }
            var callbackResult = file.contentCallback();
            // Wenn der Callback ein Observable ist, dieses auflösen und dem File-Base64 zuweisen
            if (rxjs.isObservable(callbackResult)) {
                callbackResult.subscribe(function (content) {
                    file.content = content;
                    _this.triggerViewFileClick(file);
                });
            }
            else {
                // Wenn der Callback ein normaler String oder Promise ist, diesen auflösen und den File-Base64 aktualisieren
                Promise.resolve(callbackResult).then(function (content) {
                    file.content = content;
                    _this.triggerViewFileClick(file);
                });
            }
        };
        /**
         * Wandelt File-Objekt zu LuxFileObjects um und versucht diese Hochzuladen.
         * Gibt ein Promise mit den neuen FileObjects zurück bzw. einen Fehler aus den internen Promises.
         * @param files
         */
        LuxFormFileBase.prototype.updateSelectedFiles = function (files) {
            return __awaiter(this, void 0, void 0, function () {
                var newFiles_1, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            newFiles_1 = [];
                            return [4 /*yield*/, this.mapFilesToFileObjects(files).then(function (fileObjects) { return (newFiles_1 = fileObjects); })];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.uploadFiles(newFiles_1)];
                        case 2:
                            _a.sent();
                            if (this.luxUploadActionConfig.onClick) {
                                this.luxUploadActionConfig.onClick(newFiles_1 && newFiles_1.length === 1 ? newFiles_1[0] : newFiles_1);
                            }
                            this.formControl.markAsTouched();
                            this.formControl.markAsDirty();
                            return [2 /*return*/, Promise.resolve(newFiles_1)];
                        case 3:
                            error_1 = _a.sent();
                            return [2 /*return*/, Promise.reject(error_1)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Stößt das Hochladen der Dateien zu einer bestimmten URL an.
         */
        LuxFormFileBase.prototype.uploadFiles = function (files) {
            return __awaiter(this, void 0, void 0, function () {
                var formData, selectedFiles;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.luxUploadUrl) {
                                this.forceProgressIndeterminate = false;
                                return [2 /*return*/, Promise.resolve()];
                            }
                            if (this.luxUploadReportProgress) {
                                this.forceProgressIndeterminate = false;
                            }
                            this.progress = 0;
                            formData = new FormData();
                            selectedFiles = [];
                            if (!files) {
                                selectedFiles = [];
                            }
                            else if (!Array.isArray(files)) {
                                selectedFiles.push(files);
                            }
                            else {
                                selectedFiles.push.apply(selectedFiles, __spread(files));
                            }
                            selectedFiles.forEach(function (fileObject) {
                                formData.append(fileObject.name, fileObject.content);
                            });
                            return [4 /*yield*/, new Promise(function (resolve, reject) {
                                    var options = {};
                                    if (_this.luxUploadReportProgress) {
                                        options['reportProgress'] = true;
                                        options['observe'] = 'events';
                                    }
                                    options['responseType'] = 'blob';
                                    _this.http.post(_this.luxUploadUrl, formData, options).subscribe(function (event) {
                                        // wenn wir eine determinierte Fortschrittsanzeige haben, dann muss der Fortschritt auch korrekt abgefangen werden
                                        if (_this.luxUploadReportProgress) {
                                            if (event.type === http.HttpEventType.UploadProgress) {
                                                _this.progress = Math.round((event.loaded / event.total) * 100);
                                            }
                                            else if (event.type === http.HttpEventType.Response) {
                                                resolve();
                                            }
                                        }
                                        else {
                                            resolve();
                                        }
                                    }, function (error) {
                                        // Hier geben wir den speziellen Fehler noch mal in die console
                                        console.error(error);
                                        // Für den Fall das der Upload fehlschlägt, melden wir einen Fehler am Component
                                        reject(error);
                                        return rxjs.throwError(error);
                                    });
                                }).then(function () {
                                    _this.progress = -1;
                                    _this.forceProgressIndeterminate = false;
                                    return Promise.resolve();
                                }, function (error) {
                                    _this.progress = -1;
                                    _this.forceProgressIndeterminate = false;
                                    return Promise.reject({
                                        cause: exports.LuxFileErrorCause.UploadFileError,
                                        exception: error,
                                        file: files
                                    });
                                })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Liest die übergebenen Dateien aus und erzeugt daraus ein Promise, welches abgefragt werden kann.
         * Fängt potentielle Fehler ab und gibt diese als abgelehnte Promises zurück.
         * @param files
         */
        LuxFormFileBase.prototype.mapFilesToFileObjects = function (files) {
            return __awaiter(this, void 0, void 0, function () {
                var e_1, _a, filesArray, newFiles, _loop_1, this_1, filesArray_1, filesArray_1_1, file, state_1, e_1_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this._luxSelectedFiles = [];
                            filesArray = Array.from(files);
                            newFiles = [];
                            _loop_1 = function (file) {
                                var splitAccepted, splitFileEnding, fileEnding, isAccepted;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!file) {
                                                return [2 /*return*/, "continue"];
                                            }
                                            // Prüfen ob Dateigröße überschritten worden ist
                                            if (this_1.getFileSizeInMB(file) > this_1.luxMaxSizeMB) {
                                                return [2 /*return*/, { value: Promise.reject({
                                                            cause: exports.LuxFileErrorCause.MaxSizeError,
                                                            exception: this_1.getMaxSizeErrorMessage(file),
                                                            file: file
                                                        }) }];
                                            }
                                            splitAccepted = this_1.luxAccept ? this_1.luxAccept.split(',') : [];
                                            splitFileEnding = file.name.split('.');
                                            fileEnding = "." + splitFileEnding[splitFileEnding.length - 1];
                                            isAccepted = splitAccepted.length === 0 ? true : false;
                                            splitAccepted.forEach(function (accepted) {
                                                if (accepted) {
                                                    accepted = accepted.toLocaleLowerCase();
                                                    if (accepted === '.txt') {
                                                        accepted = 'text/plain';
                                                    }
                                                }
                                                if (!isAccepted) {
                                                    // Für spezielle Wildcards nutzen wir diese Umwandlung
                                                    switch (accepted) {
                                                        case 'image/*':
                                                            accepted = 'image';
                                                            break;
                                                        case 'video/*':
                                                            accepted = 'video';
                                                            break;
                                                        case 'audio/*':
                                                            accepted = 'audio';
                                                            break;
                                                    }
                                                    if (accepted === fileEnding.toLocaleLowerCase() || file.type.toLocaleLowerCase().indexOf(accepted) > -1) {
                                                        isAccepted = true;
                                                    }
                                                }
                                            });
                                            if (!isAccepted) {
                                                return [2 /*return*/, { value: Promise.reject({
                                                            cause: exports.LuxFileErrorCause.FileNotAccepted,
                                                            exception: this_1.getFileNotAcceptedMessage(file),
                                                            file: file
                                                        }) }];
                                            }
                                            if (!this_1.luxContentsAsBlob) return [3 /*break*/, 1];
                                            // Wenn direkt die Blobs genutzt werden sollen, einfach die Datei als content merken
                                            newFiles.push({ name: file.name, content: file, type: file.type });
                                            return [3 /*break*/, 3];
                                        case 1: 
                                        // Das Auslesen der Datei anstoßen, wenn erfolgreich, wird die Datei zu selectedFiles hinzugefügt.
                                        // Bei einem Fehler wird das Promise rejected und gibt einen Fehler zurück.
                                        return [4 /*yield*/, this_1.readFile(file)
                                                .then(function (content) {
                                                newFiles.push({ name: file.name, content: content, type: file.type });
                                            })
                                                .catch(function (error) {
                                                return Promise.reject({
                                                    cause: exports.LuxFileErrorCause.ReadingFileError,
                                                    exception: error,
                                                    file: file
                                                });
                                            })];
                                        case 2:
                                            // Das Auslesen der Datei anstoßen, wenn erfolgreich, wird die Datei zu selectedFiles hinzugefügt.
                                            // Bei einem Fehler wird das Promise rejected und gibt einen Fehler zurück.
                                            _a.sent();
                                            _a.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            };
                            this_1 = this;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, 7, 8]);
                            filesArray_1 = __values(filesArray), filesArray_1_1 = filesArray_1.next();
                            _b.label = 2;
                        case 2:
                            if (!!filesArray_1_1.done) return [3 /*break*/, 5];
                            file = filesArray_1_1.value;
                            return [5 /*yield**/, _loop_1(file)];
                        case 3:
                            state_1 = _b.sent();
                            if (typeof state_1 === "object")
                                return [2 /*return*/, state_1.value];
                            _b.label = 4;
                        case 4:
                            filesArray_1_1 = filesArray_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _b.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (filesArray_1_1 && !filesArray_1_1.done && (_a = filesArray_1.return)) _a.call(filesArray_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8: 
                        // Das Array mit den neuen Dateien zurückgeben
                        return [2 /*return*/, Promise.resolve(newFiles)];
                    }
                });
            });
        };
        /**
         * Liest (asynchron) den Base64-String aus der übergebenen Datei heraus bzw. gibt den Fehler zurück, wenn einer
         * aufgetreten ist.
         * @param file
         */
        LuxFormFileBase.prototype.readFile = function (file) {
            return new Promise(function (resolve, reject) {
                var reader = new window['FileReader']();
                reader.onload = function (fileData) { return resolve(fileData.target.result); };
                reader.onerror = function (error) { return reject(error); };
                reader.readAsDataURL(file);
            });
        };
        /**
         * Wird beim Drag-Over über dem LuxFormControl aufgerufen.
         * @param $event
         */
        LuxFormFileBase.prototype.handleDragOver = function ($event) {
            this.isDragActive = true;
            $event.stopPropagation();
            $event.preventDefault();
            // Der Drop Effect wird nur gesetzt, wenn die Property auch
            // vorhanden ist. In den Tests gibt es keinen Drop Effect.
            if ($event.dataTransfer && $event.dataTransfer.dropEffect) {
                $event.dataTransfer.dropEffect = 'copy';
            }
        };
        /**
         * Wird beim Drag-Leave über dem LuxFormControl aufgerufen.
         * @param $event
         */
        LuxFormFileBase.prototype.handleDragLeave = function ($event) {
            if ($event.target.nodeName.toLocaleLowerCase() === 'lux-file-input') {
                this.isDragActive = false;
            }
            $event.stopPropagation();
            $event.preventDefault();
        };
        /**
         * Wird beim Drop eines/mehrerer gezogener Elemente über dem LuxFormControl aufgerufen und löst
         * die Auswähl-Methoden für die entsprechenden Dateien aus.
         */
        LuxFormFileBase.prototype.handleDrop = function ($event) {
            this.forceProgressIndeterminate = true;
            this.isDragActive = false;
            $event.stopPropagation();
            $event.preventDefault();
            if ($event.dataTransfer) {
                this.selectFiles($event.dataTransfer.files);
            }
        };
        /**
         * Prüft ob der Base64-String für die Datei gesetzt ist und ob ein onClick-Aufruf für die View-Action vorhanden ist.
         * Wenn ja, wird dieser ausgeführt.
         * @param file
         */
        LuxFormFileBase.prototype.triggerViewFileClick = function (file) {
            if (file.content && this.luxViewActionConfig.onClick) {
                this.luxViewActionConfig.onClick(file);
            }
        };
        /**
         * Entfernt die in dieser Component gesetzten Fehlermeldungen.
         */
        LuxFormFileBase.prototype.clearFormControlErrors = function () {
            var e_2, _a;
            // Das aktuelle Fehlerobjekt auslesen
            var errors = this.formControl.errors;
            if (errors) {
                try {
                    // Die componentspezifischen Fehler aus dem Objekt entfernen
                    for (var _b = __values(Object.keys(exports.LuxFileErrorCause)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var cause = _c.value;
                        delete errors[exports.LuxFileErrorCause[cause]];
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                // Falls errors ein leeres Objekt ist, nehmen wir stattdessen null
                errors = Object.keys(errors).length === 0 ? null : errors;
                // Das neue Fehlerobjekt in das FormControl schreiben
                this.formControl.setErrors(errors);
            }
        };
        /**
         * Aktualisiert das Fehlerobjekt am FormControl, damit eine entsprechende Fehlermeldung angezeigt werden kann.
         * Leert die Anzeige und gibt Events mit leerem Array aus.
         * @param error
         */
        LuxFormFileBase.prototype.setFormControlErrors = function (error) {
            this.forceProgressIndeterminate = false;
            // Vorherige definierte Fehler entfernen
            this.clearFormControlErrors();
            // Hier aktualisieren wir das Fehlerobjekt an dem zugrunde liegenden FormControl dieser Component
            var errors = this.formControl.errors ? this.formControl.errors : {};
            errors[error.cause] = { file: error.file };
            this.formControl.setErrors(errors);
        };
        /**
         * Berechnet die Größe der übergebenen Datei in MB.
         * @param file
         */
        LuxFormFileBase.prototype.getFileSizeInMB = function (file) {
            return file.size / 1000000;
        };
        /**
         * Gibt die Message für Überschreitung der maximalen Dateigröße zurück.
         * @param file
         */
        LuxFormFileBase.prototype.getMaxSizeErrorMessage = function (file) {
            return ("Die Datei \"" + file.name + "\" \u00FCberschreitet mit " + +this.getFileSizeInMB(file).toFixed(2) + "MB " +
                ("die erlaubte Dateigr\u00F6\u00DFe von " + +this.luxMaxSizeMB.toFixed(2) + "MB"));
        };
        /**
         * Gibt die Message für Fehler beim Auslesen einer Datei zurück.
         * @param file
         */
        LuxFormFileBase.prototype.getReadingFileErrorMessage = function (file) {
            return "Beim Lesen der Datei \"" + file.name + "\" ist ein Fehler aufgetreten";
        };
        /**
         * Gibt die Message für Fehler beim Upload einer Datei zurück.
         * @param files
         */
        LuxFormFileBase.prototype.getUploadFileErrorMessage = function (files) {
            if (!files) {
                return 'Das Hochladen ist fehlgeschlagen';
            }
            return "Das Hochladen der " + (files.length > 1 ? 'ausgewählten Dateien' : 'ausgewählten Datei') + " ist fehlgeschlagen";
        };
        /**
         * Gibt die Message für falsche Dateitypen zurück.
         * @param file
         */
        LuxFormFileBase.prototype.getFileNotAcceptedMessage = function (file) {
            return "Die Datei \"" + file.name + "\" hat einen nicht akzeptierten Dateityp";
        };
        /**
         * Gibt die Message für falsche Dateitypen zurück.
         * @param file
         */
        LuxFormFileBase.prototype.getMultipleForbiddenMessage = function () {
            return "Es darf nur eine Datei ausgew\u00E4hlt werden";
        };
        /**
         * Meldet dem ScreenReader, dass gerade eine/mehrere Dateien bearbeitet werden (Ladeanzeige).
         * @param multiple
         */
        LuxFormFileBase.prototype.announceFileProcess = function (multiple) {
            this.liveAnnouncer.announce("Bitte warten. Die " + (multiple ? 'Dateien werden' : 'Datei wird') + " verarbeitet.", 'assertive');
        };
        /**
         * Meldet dem ScreenReader, dass alle Dateien entfernt werden sollen.
         */
        LuxFormFileBase.prototype.announceAllFilesRemove = function () {
            this.liveAnnouncer.announce("Alle Dateien werden entfernt.", 'assertive');
        };
        /**
         * Meldet dem ScreenReader, dass eine bestimmte Datei entfernt werden soll.
         * @param fileName
         */
        LuxFormFileBase.prototype.announceFileRemove = function (fileName) {
            this.liveAnnouncer.announce("Die Datei " + fileName + " wird entfernt.", 'assertive');
        };
        /**
         * Gibt wieder, ob Drag-and-Drop gerade aktiv und möglich ist.
         */
        LuxFormFileBase.prototype.isDnDAllowed = function () {
            return this.luxDnDActive && !this.luxDisabled && !this.luxReadonly;
        };
        // region Overridden methods
        LuxFormFileBase.prototype.errorMessageModifier = function (value, errors) {
            if (errors[exports.LuxFileErrorCause.MaxSizeError]) {
                return this.getMaxSizeErrorMessage(errors[exports.LuxFileErrorCause.MaxSizeError].file);
            }
            else if (errors[exports.LuxFileErrorCause.ReadingFileError]) {
                return this.getReadingFileErrorMessage(errors[exports.LuxFileErrorCause.ReadingFileError].file);
            }
            else if (errors[exports.LuxFileErrorCause.UploadFileError]) {
                return this.getUploadFileErrorMessage(errors[exports.LuxFileErrorCause.UploadFileError].file);
            }
            else if (errors[exports.LuxFileErrorCause.FileNotAccepted]) {
                return this.getFileNotAcceptedMessage(errors[exports.LuxFileErrorCause.FileNotAccepted].file);
            }
            else if (errors[exports.LuxFileErrorCause.MultipleForbidden]) {
                return this.getMultipleForbiddenMessage();
            }
            return undefined;
        };
        LuxFormFileBase.prototype.notifyFormValueChanged = function () {
            this.luxSelectedFilesChange.emit(this.luxSelectedFiles);
            // Wir leeren nach jedem Value-Change das Input, da wir das FormControl bereits als SSoT besitzen
            // und das Input durch den Browser gelegentlich sonst geblockt werden (wenn eine Datei ausgewählt worden ist)
            this.fileuploadInput.nativeElement.value = null;
        };
        LuxFormFileBase.prototype.updateValidators = function (validators) {
            if (!validators && this.luxRequired) {
                validators = forms.Validators.required;
            }
            _super.prototype.updateValidators.call(this, validators);
        };
        LuxFormFileBase.prototype.initFormValueSubscription = function () {
            var _this = this;
            this._formValueChangeSubscr = this.formControl.valueChanges.subscribe(function () {
                // Wenn die Dateien erfolgreich gelesen werden konnten, die (spezifischen) Fehler entfernen
                _this.clearFormControlErrors();
            });
            if (this._initialValue !== null && this._initialValue !== undefined) {
                this.setValue(this._initialValue);
            }
        };
        LuxFormFileBase.prototype.triggerOutputPatternCheck = function () {
            this.checkOutputPatternViolation(this.luxSelectedFilesChange.observers);
        };
        LuxFormFileBase.prototype.triggerInputPatternCheck = function (simpleChanges) {
            this.checkInputPatternViolation(simpleChanges.luxSelectedFiles);
        };
        __decorate([
            core.ViewChild('downloadLink', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxFormFileBase.prototype, "downloadLink", void 0);
        __decorate([
            core.ViewChild('fileupload', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxFormFileBase.prototype, "fileuploadInput", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormFileBase.prototype, "luxSelectedFilesChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFormFileBase.prototype, "luxUploadReportProgress", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFormFileBase.prototype, "luxContentsAsBlob", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormFileBase.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxFormFileBase.prototype, "luxMaxSizeMB", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormFileBase.prototype, "luxCapture", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormFileBase.prototype, "luxUploadUrl", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFormFileBase.prototype, "luxDnDActive", void 0);
        __decorate([
            core.HostBinding('class.lux-file-highlight'),
            __metadata("design:type", Boolean)
        ], LuxFormFileBase.prototype, "isDragActive", void 0);
        __decorate([
            core.HostListener('dragover', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], LuxFormFileBase.prototype, "onDragOver", null);
        __decorate([
            core.HostListener('dragleave', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], LuxFormFileBase.prototype, "onDragLeave", null);
        __decorate([
            core.HostListener('drop', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], LuxFormFileBase.prototype, "onDrop", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFormFileBase.prototype, "luxUploadActionConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFormFileBase.prototype, "luxDeleteActionConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFormFileBase.prototype, "luxViewActionConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFormFileBase.prototype, "luxDownloadActionConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFormFileBase.prototype, "luxSelectedFiles", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFormFileBase.prototype, "luxAccept", null);
        LuxFormFileBase = __decorate([
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService,
                http.HttpClient,
                a11y.LiveAnnouncer])
        ], LuxFormFileBase);
        return LuxFormFileBase;
    }(LuxFormComponentBase));

    var LuxFileInputComponent = /** @class */ (function (_super) {
        __extends(LuxFileInputComponent, _super);
        function LuxFileInputComponent(controlContainer, cdr, logger, http, liveAnnouncer, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config, http, liveAnnouncer) || this;
            _this.luxBlur = new core.EventEmitter();
            _this.luxFocus = new core.EventEmitter();
            _this.luxPlaceholder = '';
            return _this;
        }
        /**
         * Wird bei der Auswahl von Dateien (Dialog oder DnD) aufgerufen.
         * Aktualisiert die aktuell selektierten Dateien, stößt einen Upload an, handelt Fehlermeldungen und
         * emittet die entspechenden Events.
         * @param files
         */
        LuxFileInputComponent.prototype.selectFiles = function (files) {
            var _this = this;
            this.formControl.markAsTouched();
            this.formControl.markAsDirty();
            this.forceProgressIndeterminate = true;
            this.announceFileProcess(files && files.length > 1);
            if (!files || files.length === 0) {
                this.forceProgressIndeterminate = false;
                return;
            }
            // Timeout, um Flackern durch Progress zu vermeiden
            setTimeout(function () {
                _this.updateSelectedFiles(files).then(function (newFiles) {
                    _this.luxSelectedFiles = newFiles[0];
                    _this.notifyFormValueChanged();
                }, function (error) { return _this.setFormControlErrors(error); });
            }, this.defaultReadFileDelay);
        };
        // region Overridden methods
        LuxFileInputComponent.prototype.errorMessageModifier = function (value, errors) {
            if (errors.required) {
                return 'Es muss eine Datei ausgewählt werden';
            }
            return _super.prototype.errorMessageModifier.call(this, value, errors);
        };
        LuxFileInputComponent.prototype.setFormControlErrors = function (error) {
            this.luxSelectedFiles = undefined;
            _super.prototype.setFormControlErrors.call(this, error);
        };
        LuxFileInputComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: http.HttpClient },
            { type: a11y.LiveAnnouncer },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.ViewChild('visibleInput', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxFileInputComponent.prototype, "visibleInput", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFileInputComponent.prototype, "luxBlur", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFileInputComponent.prototype, "luxFocus", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFileInputComponent.prototype, "luxPlaceholder", void 0);
        LuxFileInputComponent = __decorate([
            core.Component({
                selector: 'lux-file-input',
                template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <div class=\"lux-file-container lux-input-row\" fxLayout=\"row\">\n    <!-- Das Input ist nur f\u00FCr die visuelle Darstellung der ausgew\u00E4hlten Dateien zust\u00E4ndig -->\n    <input\n      class=\"lux-file-visible-input\"\n      matInput\n      luxTagIdHandler\n      type=\"text\"\n      autocomplete=\"off\"\n      [luxTagId]=\"luxTagId\"\n      [placeholder]=\"luxPlaceholder\"\n      [required]=\"luxRequired\"\n      [readonly]=\"true\"\n      [id]=\"uid\"\n      [value]=\"luxSelectedFiles?.name\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"onFocusIn($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      fxFlex=\"1 0 100px\"\n      #visibleInput\n    />\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 65px\">\n      <lux-menu\n        luxMenuIconName=\"fas fa-ellipsis-v\"\n        luxTagId=\"{{ 'lux-file-input-actions' }}\"\n        [luxToggleDisabled]=\"luxDisabled || luxReadonly\"\n        [luxDisplayExtended]=\"true\"\n      >\n        <lux-menu-item\n          luxTagId=\"lux-file-view\"\n          [luxIconName]=\"luxViewActionConfig.iconName\"\n          [luxDisabled]=\"luxViewActionConfig.disabled || luxDisabled || !luxSelectedFiles || luxReadonly\"\n          [luxLabel]=\"luxViewActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"false\"\n          luxColor=\"primary\"\n          (luxClicked)=\"viewFile(luxSelectedFiles)\"\n          [luxHidden]=\"!!luxViewActionConfig.hidden\"\n        >\n        </lux-menu-item>\n        <lux-menu-item\n          luxTagId=\"lux-file-download\"\n          [luxIconName]=\"luxDownloadActionConfig.iconName\"\n          [luxDisabled]=\"luxDownloadActionConfig.disabled || luxDisabled || !luxSelectedFiles || luxReadonly\"\n          [luxLabel]=\"luxDownloadActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"false\"\n          luxColor=\"primary\"\n          (luxClicked)=\"downloadFile(luxSelectedFiles)\"\n          [luxHidden]=\"!!luxDownloadActionConfig.hidden\"\n        >\n        </lux-menu-item>\n        <lux-menu-item\n          luxTagId=\"lux-file-remove\"\n          [luxIconName]=\"luxDeleteActionConfig.iconName\"\n          [luxDisabled]=\"!luxSelectedFiles || luxDisabled || luxDeleteActionConfig.disabled || luxReadonly\"\n          [luxLabel]=\"luxDeleteActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"false\"\n          luxColor=\"primary\"\n          (luxClicked)=\"clearFiles($event)\"\n          [luxHidden]=\"!!luxDeleteActionConfig.hidden\"\n        >\n        </lux-menu-item>\n        <lux-menu-item\n          luxTagId=\"lux-file-upload\"\n          [luxIconName]=\"luxUploadActionConfig.iconName\"\n          [luxDisabled]=\"luxUploadActionConfig.disabled || luxDisabled || luxReadonly\"\n          [luxLabel]=\"luxUploadActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"false\"\n          luxColor=\"primary\"\n          (luxClicked)=\"fileupload.click()\"\n          [luxHidden]=\"!!luxUploadActionConfig.hidden\"\n        >\n        </lux-menu-item>\n      </lux-menu>\n    </div>\n  </div>\n</lux-form-control>\n\n<!-- Das tats\u00E4chliche Input-Element f\u00FCr die File-Auswahl -->\n<input\n  class=\"lux-file-input\"\n  type=\"file\"\n  [multiple]=\"false\"\n  [accept]=\"luxAccept\"\n  [luxFileCapture]=\"luxCapture\"\n  [required]=\"luxRequired\"\n  (change)=\"selectFiles($event.target.files)\"\n  #fileupload\n/>\n\n<!-- Download-Node -->\n<a class=\"lux-file-download-anchor\" download=\"\" #downloadLink></a>\n\n<!-- Ladeanzeige f\u00FCr den File-Upload -->\n<lux-file-progress [luxMode]=\"progressMode\" [luxProgress]=\"progress\" *ngIf=\"isProgressVisible\"> </lux-file-progress>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{display:-webkit-box;display:-ms-flexbox;display:flex;position:relative}:host.lux-file-highlight *,:host.lux-file-highlight ::ng-deep *{pointer-events:none}:host.lux-file-highlight:after{content:'';position:absolute;top:0;left:0;right:0;bottom:0;border:2px dashed rgba(0,0,0,.38);background:rgba(0,0,0,.12);border-radius:4px;pointer-events:none}:host lux-menu ::ng-deep .lux-menu-extended .lux-menu-trigger,:host lux-menu ::ng-deep .lux-menu-extended>lux-button{margin:0!important}:host lux-menu ::ng-deep i,:host lux-menu ::ng-deep mat-icon{width:auto!important}:host lux-menu ::ng-deep lux-button{cursor:pointer!important;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}:host lux-menu ::ng-deep lux-button ::ng-deep button{padding:0;width:45px;min-width:45px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}:host lux-menu ::ng-deep lux-button ::ng-deep button:focus{background:rgba(51,92,133,.1)}.lux-file-download-anchor,.lux-file-input{display:none}lux-form-control{display:block}.lux-file-container input{width:auto!important}.lux-file-container lux-menu{height:40px;margin-top:0}.lux-file-container lux-menu ::ng-deep>div{height:40px}.lux-file-container lux-menu ::ng-deep .lux-menu-extended lux-button{height:15px}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                http.HttpClient,
                a11y.LiveAnnouncer,
                LuxComponentsConfigService])
        ], LuxFileInputComponent);
        return LuxFileInputComponent;
    }(LuxFormFileBase));

    var LuxFileListComponent = /** @class */ (function (_super) {
        __extends(LuxFileListComponent, _super);
        function LuxFileListComponent(controlContainer, cdr, logger, http, liveAnnouncer, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config, http, liveAnnouncer) || this;
            _this._luxUploadActionConfig = {
                disabled: false,
                disabledHeader: false,
                hidden: false,
                hiddenHeader: false,
                iconName: 'fas fa-cloud-upload-alt',
                iconNameHeader: 'fas fa-cloud-upload-alt',
                label: 'Hochladen',
                labelHeader: 'Neue Dateien hochladen'
            };
            _this._luxDeleteActionConfig = {
                disabled: false,
                disabledHeader: false,
                hidden: false,
                hiddenHeader: false,
                iconName: 'fas fa-trash',
                iconNameHeader: 'fas fa-trash',
                label: 'Löschen',
                labelHeader: 'Alle Dateien entfernen'
            };
            _this.fileIcons = [];
            _this.rowWidth = 0;
            _this.iconActionBarWidth = 50;
            _this.alwaysVisibleView = false;
            _this.alwaysVisibleUpload = false;
            _this.alwaysVisibleDownload = false;
            _this.alwaysVisibleDelete = false;
            _this.luxShowPreview = true;
            _this.luxMultiple = true;
            _this.luxBackgroundIconName = 'fas fa-cloud-upload-alt';
            return _this;
        }
        Object.defineProperty(LuxFileListComponent.prototype, "luxUploadActionConfig", {
            get: function () {
                return this._luxUploadActionConfig;
            },
            set: function (config) {
                if (config) {
                    this._luxUploadActionConfig = config;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFileListComponent.prototype, "luxDeleteActionConfig", {
            get: function () {
                return this._luxDeleteActionConfig;
            },
            set: function (config) {
                if (config) {
                    this._luxDeleteActionConfig = config;
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxFileListComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this._fileEntryNodesChangeSubscr = this.fileEntries.changes.subscribe(function () {
                _this.updateIconAndImage();
            });
            this.updateIconAndImage();
        };
        LuxFileListComponent.prototype.updateIconAndImage = function () {
            this.setFileIcons();
            if (this.luxShowPreview) {
                this.setImgSrcs();
            }
        };
        LuxFileListComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            if (this._fileEntryNodesChangeSubscr) {
                this._fileEntryNodesChangeSubscr.unsubscribe();
            }
        };
        LuxFileListComponent.prototype.shouldDisplayPreviewImg = function (index) {
            return (this.luxShowPreview && this.fileIcons && this.fileIcons[index] && this.fileIcons[index] === 'fas fa-file-image');
        };
        /**
         * Entfernt eine Datei aus den selektierten Dateien.
         * @param index
         */
        LuxFileListComponent.prototype.removeFile = function (index) {
            var _this = this;
            this.formControl.markAsTouched();
            this.formControl.markAsDirty();
            // Wenn mehrere Dateien selektiert sind, diese nach der entfernten Datei filtern ansonsten "undefined" nutzen
            var newFiles = Array.isArray(this.luxSelectedFiles)
                ? this.luxSelectedFiles.filter(function (file, searchIndex) { return searchIndex !== index; })
                : undefined;
            // Via LiveAnnouncer mitteilen welche Datei entfernt wird
            this.announceFileRemove(Array.isArray(this.luxSelectedFiles) ? this.luxSelectedFiles[index].name : this.luxSelectedFiles.name);
            // Wir entfernen hier nur eine Datei, deshalb ist das neue Auslesen der Base64-Strings nicht nötig
            this.uploadFiles(newFiles).then(function () {
                _this.luxSelectedFiles = newFiles && newFiles.length === 1 ? newFiles[0] : newFiles;
                _this.notifyFormValueChanged();
            }, function (error) { return _this.setFormControlErrors(error); });
            if (this.luxDeleteActionConfig.onClick) {
                this.luxDeleteActionConfig.onClick();
            }
        };
        /**
         * Fügt weitere Dateien zu den bereits vorhandenen hinzu bzw. ersetzt diese.
         * @param files
         */
        LuxFileListComponent.prototype.selectFiles = function (files) {
            var _this = this;
            this.formControl.markAsTouched();
            this.formControl.markAsDirty();
            this.forceProgressIndeterminate = true;
            this.announceFileProcess(files && files.length > 1);
            if (!files || files.length === 0) {
                this.forceProgressIndeterminate = false;
                return;
            }
            // Timeout, um Flackern durch Progress zu vermeiden
            setTimeout(function () {
                // Prüfen ob die Dateien bereits vorhanden sind
                var selectedFilesArray = [];
                var replaceableFilesMap = new Map();
                if (_this.luxSelectedFiles) {
                    files = Array.from(files);
                    selectedFilesArray = Array.isArray(_this.luxSelectedFiles) ? _this.luxSelectedFiles : [_this.luxSelectedFiles];
                    // zu ersetzende Indizes herausfinden
                    files.forEach(function (file) {
                        var index = selectedFilesArray.findIndex(function (compareFile) { return compareFile.name === file.name; });
                        if (index > -1) {
                            replaceableFilesMap.set(index, file);
                        }
                    });
                }
                // Wenn mehrere Dateien selektiert sind und luxMultiple dies unterbindet, Fehler werfen und Fn beenden
                // Ausnahme ist, wenn die Dateien nur ersetzt werden sollen
                if (!_this.luxMultiple &&
                    ((!_this.luxSelectedFiles && files.length > 1) ||
                        (_this.luxSelectedFiles && _this.luxSelectedFiles.length > 1) ||
                        (_this.luxSelectedFiles && replaceableFilesMap.size !== files.length))) {
                    _this.setFormControlErrors({
                        cause: exports.LuxFileErrorCause.MultipleForbidden,
                        exception: _this.getMultipleForbiddenMessage(),
                        file: null
                    });
                    return;
                }
                _this.updateSelectedFiles(files).then(function (newFiles) {
                    var tempSelectedFiles = selectedFilesArray;
                    // die zu ersetzenden Dateien durchgehen und aktualisieren
                    replaceableFilesMap.forEach(function (file, index) {
                        var replaceableFileObject = newFiles.find(function (newFile) { return newFile.name === file.name; });
                        // das gefundene Objekt aus den newFiles entfernen
                        newFiles = newFiles.filter(function (newFile) { return newFile !== replaceableFileObject; });
                        // die selectedFiles aktualisieren
                        tempSelectedFiles[index] = replaceableFileObject;
                    });
                    // die übrigen neuen Dateien anfügen
                    tempSelectedFiles.push.apply(tempSelectedFiles, __spread(newFiles));
                    _this.luxSelectedFiles =
                        tempSelectedFiles && tempSelectedFiles.length === 1 ? tempSelectedFiles[0] : tempSelectedFiles;
                    _this.notifyFormValueChanged();
                }, function (error) { return _this.setFormControlErrors(error); });
            }, this.defaultReadFileDelay);
        };
        /**
         * Aktualisiert die Preview-Bilder für die (Image-)Dateien.
         *
         * Aktualisierung absichtlich via Funktion und nicht Property-Binding, da potentiell Stack-Size Fehler auftreten,
         * wenn (große) Base64-Strings gegen die src gebunden werden.
         */
        LuxFileListComponent.prototype.setImgSrcs = function () {
            var _this = this;
            this.fileEntries.forEach(function (item, index) {
                var imgElement = item.nativeElement.querySelector('img');
                if (imgElement && _this.luxSelectedFiles) {
                    var targetFileContent = Array.isArray(_this.luxSelectedFiles)
                        ? _this.luxSelectedFiles[index].content
                        : _this.luxSelectedFiles.content;
                    if (targetFileContent instanceof Blob) {
                        _this.readFile(targetFileContent).then(function (content) {
                            imgElement.src = content;
                        });
                    }
                    else {
                        imgElement.src = targetFileContent;
                    }
                }
            });
        };
        /**
         * Setzt die Icons für die Elemente in der Auflistung
         */
        LuxFileListComponent.prototype.setFileIcons = function () {
            var _this = this;
            if (!this.luxSelectedFiles) {
                return;
            }
            this.fileIcons = [];
            var selectedFiles = [];
            if (!Array.isArray(this.luxSelectedFiles)) {
                selectedFiles.push(this.luxSelectedFiles);
            }
            else {
                selectedFiles.push.apply(selectedFiles, __spread(this.luxSelectedFiles));
            }
            selectedFiles.forEach(function (selectedFile) {
                var newFileIcon = 'fas fa-file';
                if (selectedFile.type) {
                    if (selectedFile.type.indexOf('image') > -1) {
                        newFileIcon = 'fas fa-file-image';
                    }
                    else if (selectedFile.type.indexOf('pdf') > -1) {
                        newFileIcon = 'fas fa-file-pdf';
                    }
                    else if (selectedFile.type.indexOf('spreadsheet') > -1) {
                        newFileIcon = 'fas fa-file-excel';
                    }
                    else if (selectedFile.type.indexOf('officedocument') > -1) {
                        newFileIcon = 'fas fa-file-signature';
                    }
                    else if (selectedFile.type.indexOf('json') > -1) {
                        newFileIcon = 'fas fa-file-code';
                    }
                }
                _this.fileIcons.push(newFileIcon);
            });
            this.cdr.detectChanges();
        };
        LuxFileListComponent.prototype.ngAfterViewChecked = function () {
            this.resizeIconActionBar();
        };
        LuxFileListComponent.prototype.isArray = function (object) {
            return object && Array.isArray(object);
        };
        LuxFileListComponent.prototype.resizeIconActionBar = function () {
            if (this.fileEntries && this.fileEntries.first && this.cdr) {
                var newRowWidth = this.fileEntries.first.nativeElement.offsetWidth;
                if (this.rowWidth !== newRowWidth) {
                    this.rowWidth = newRowWidth;
                    if (this.rowWidth >= 500) {
                        this.iconActionBarWidth = 200;
                        this.alwaysVisibleView = true;
                        this.alwaysVisibleUpload = true;
                        this.alwaysVisibleDownload = true;
                        this.alwaysVisibleDelete = true;
                    }
                    else if (this.rowWidth >= 400) {
                        this.iconActionBarWidth = 150;
                        this.alwaysVisibleView = false;
                        this.alwaysVisibleUpload = false;
                        this.alwaysVisibleDownload = true;
                        this.alwaysVisibleDelete = true;
                    }
                    else {
                        this.iconActionBarWidth = 50;
                        this.alwaysVisibleView = false;
                        this.alwaysVisibleUpload = false;
                        this.alwaysVisibleDownload = false;
                        this.alwaysVisibleDelete = false;
                    }
                    this.cdr.detectChanges();
                }
            }
        };
        // region Overridden methods
        LuxFileListComponent.prototype.errorMessageModifier = function (value, errors) {
            if (errors.required) {
                return 'Es muss mindestens eine Datei ausgewählt werden';
            }
            return _super.prototype.errorMessageModifier.call(this, value, errors);
        };
        LuxFileListComponent.prototype.triggerViewFileClick = function (file) {
            _super.prototype.triggerViewFileClick.call(this, file);
            this.updateIconAndImage();
        };
        LuxFileListComponent.prototype.notifyFormValueChanged = function () {
            _super.prototype.notifyFormValueChanged.call(this);
            this.formControl.updateValueAndValidity();
            this.fileuploadSingleInput.nativeElement.value = null;
        };
        LuxFileListComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: http.HttpClient },
            { type: a11y.LiveAnnouncer },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.ViewChildren('fileEntry', { read: core.ElementRef }),
            __metadata("design:type", core.QueryList)
        ], LuxFileListComponent.prototype, "fileEntries", void 0);
        __decorate([
            core.ViewChild('fileuploadSingle', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxFileListComponent.prototype, "fileuploadSingleInput", void 0);
        __decorate([
            core.ViewChild(LuxCardComponent, { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxFileListComponent.prototype, "fileCard", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFileListComponent.prototype, "luxShowPreview", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFileListComponent.prototype, "luxMultiple", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFileListComponent.prototype, "luxBackgroundIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFileListComponent.prototype, "luxUploadActionConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFileListComponent.prototype, "luxDeleteActionConfig", null);
        LuxFileListComponent = __decorate([
            core.Component({
                selector: 'lux-file-list',
                template: "<lux-card\n  class=\"lux-file-list\"\n  [ngClass]=\"{ 'lux-file-list-disabled': luxDisabled }\"\n  [luxTitle]=\"(luxLabel ? luxLabel : '') + (luxRequired ? ' *' : '')\"\n  [luxAriaInvalid]=\"formControl?.invalid\"\n  tabindex=\"0\"\n>\n  <lux-card-info *ngIf=\"luxMultiple || !luxSelectedFiles\">\n    <lux-button\n      class=\"lux-file-list-header-clear\"\n      [luxIconName]=\"luxDeleteActionConfig.iconNameHeader\"\n      luxTagId=\"lux-file-clear\"\n      luxColor=\"primary\"\n      [luxDisabled]=\"\n        !luxSelectedFiles ||\n        luxSelectedFiles.length === 0 ||\n        luxDeleteActionConfig.disabledHeader ||\n        luxDisabled ||\n        luxReadonly\n      \"\n      (luxClicked)=\"clearFiles($event)\"\n      fxFlex=\"0 0 auto\"\n      [luxAriaLabel]=\"luxDeleteActionConfig.labelHeader\"\n      luxAriaLabelSelector=\"button\"\n      *ngIf=\"!luxDeleteActionConfig.hiddenHeader\"\n    >\n    </lux-button>\n    <lux-button\n      class=\"lux-file-list-header-add\"\n      [luxIconName]=\"luxUploadActionConfig.iconNameHeader\"\n      luxTagId=\"lux-file-add\"\n      (luxClicked)=\"fileupload.click()\"\n      fxFlex=\"0 0 auto\"\n      [luxDisabled]=\"luxUploadActionConfig.disabledHeader || luxDisabled || luxReadonly\"\n      luxColor=\"primary\"\n      [luxAriaLabel]=\"luxUploadActionConfig.labelHeader\"\n      luxAriaLabelSelector=\"button\"\n      *ngIf=\"!luxUploadActionConfig.hiddenHeader\"\n    >\n    </lux-button>\n  </lux-card-info>\n  <lux-card-content>\n    <div\n      class=\"lux-file-list-content\"\n      fxFlex=\"1 0 75px\"\n      fxLayout=\"column\"\n      fxLayoutAlign=\"{{ !luxSelectedFiles || luxSelectedFiles.length === 0 ? 'center center' : 'start start' }}\"\n    >\n      <div\n        class=\"lux-file-icon-hint\"\n        fxFlexFill\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center center\"\n        *ngIf=\"!luxSelectedFiles || luxSelectedFiles.length === 0\"\n      >\n        <lux-divider></lux-divider>\n        <lux-icon\n          class=\"lux-file-icon\"\n          [luxIconSize]=\"'3x'\"\n          [luxIconName]=\"luxUploadActionConfig.iconName\"\n          [luxPadding]=\"'0'\"\n          [luxMargin]=\"'0'\"\n          *ngIf=\"luxUploadActionConfig.iconName\"\n        >\n        </lux-icon>\n        <mat-hint [id]=\"uid + '-misc'\" fxFlexOffset=\"8px\" *ngIf=\"formHintComponent || luxHint\">\n          <ng-container *ngIf=\"luxHint; else formHintTemplate\">\n            {{ luxHint }}\n          </ng-container>\n          <ng-template #formHintTemplate>\n            <ng-container *ngTemplateOutlet=\"formHintComponent.templateRef\"></ng-container>\n          </ng-template>\n        </mat-hint>\n      </div>\n      <div class=\"lux-file-list-entries\" fxFlexFill *ngIf=\"luxSelectedFiles\">\n        <!-- Mehrere Dateien ausgew\u00E4hlt -->\n        <ng-container *ngIf=\"isArray(luxSelectedFiles)\">\n          <lux-divider></lux-divider>\n          <ng-container *ngFor=\"let selectedFile of luxSelectedFiles; let i = index\">\n            <ng-container *ngTemplateOutlet=\"fileListEntryTemplate; context: { selectedFile: selectedFile, index: i }\">\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <!-- Nur eine Datei ausgew\u00E4hlt -->\n        <ng-container *ngIf=\"!isArray(luxSelectedFiles)\">\n          <lux-divider></lux-divider>\n          <ng-container\n            *ngTemplateOutlet=\"fileListEntryTemplate; context: { selectedFile: luxSelectedFiles, index: 0 }\"\n          >\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </lux-card-content>\n  <lux-card-actions fxLayout=\"column\" fxFlexFill *ngIf=\"errorMessage && formControl?.touched\">\n    <mat-error [id]=\"uid + '-misc'\">\n      {{ errorMessage }}\n    </mat-error>\n  </lux-card-actions>\n</lux-card>\n<!-- Template f\u00FCr eine File-Entry -->\n<ng-template let-selectedFile=\"selectedFile\" let-index=\"index\" #fileListEntryTemplate>\n  <div\n    class=\"lux-file-list-entry lux-mt-2 lux-mb-2\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n    tabindex=\"0\"\n    [attr.aria-label]=\"'Datei ' + selectedFile.name\"\n    #fileEntry\n  >\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"0 1 100%\">\n      <!-- Icon bzw. Img der Datei -->\n      <ng-container [ngSwitch]=\"shouldDisplayPreviewImg(index)\">\n        <ng-container *ngSwitchCase=\"false\">\n          <lux-icon\n            class=\"lux-file-list-entry-icon\"\n            luxPadding=\"0\"\n            luxMargin=\"0\"\n            [luxIconName]=\"fileIcons[index]\"\n            luxIconSize=\"2x\"\n            fxFlex=\"0 0 30px\"\n            aria-hidden\n          >\n          </lux-icon>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"true\">\n          <img fxFlex=\"0 0 30px\" aria-hidden />\n        </ng-container>\n      </ng-container>\n      <!-- Der Name der Datei -->\n      <span class=\"lux-file-list-entry-label lux-mr-3\" fxFlex=\"0 1 auto\" fxFlexOffset=\"8px\">\n        {{ selectedFile.name }}\n      </span>\n    </div>\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" [fxFlex]=\"'1 0 ' + iconActionBarWidth + 'px'\">\n      <!-- Buttons zum erneuten Hochladen bzw. L\u00F6schen der Datei -->\n      <lux-menu\n        luxMenuIconName=\"fas fa-ellipsis-v\"\n        luxTagId=\"{{ 'lux-file-list-entry-' + index + '-actions' }}\"\n        (luxMenuClosed)=\"fileEntry.focus()\"\n        [luxToggleDisabled]=\"luxDisabled || luxReadonly\"\n        [luxDisplayExtended]=\"true\"\n      >\n        <lux-menu-item\n          luxTagId=\"lux-file-list-entry-view\"\n          [luxIconName]=\"luxViewActionConfig.iconName\"\n          [luxDisabled]=\"luxViewActionConfig.disabled || luxDisabled || luxReadonly\"\n          [luxLabel]=\"luxViewActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"alwaysVisibleView\"\n          luxColor=\"primary\"\n          (luxClicked)=\"viewFile(selectedFile)\"\n          [luxHidden]=\"!!luxViewActionConfig.hidden\"\n        >\n        </lux-menu-item>\n        <lux-menu-item\n          luxTagId=\"lux-file-list-entry-download\"\n          [luxIconName]=\"luxDownloadActionConfig.iconName\"\n          [luxDisabled]=\"luxDownloadActionConfig.disabled || luxDisabled || luxReadonly\"\n          [luxLabel]=\"luxDownloadActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"alwaysVisibleDownload\"\n          luxColor=\"primary\"\n          (luxClicked)=\"downloadFile(selectedFile)\"\n          [luxHidden]=\"!!luxDownloadActionConfig.hidden\"\n        >\n        </lux-menu-item>\n        <lux-menu-item\n          luxTagId=\"lux-file-list-entry-remove\"\n          [luxIconName]=\"luxDeleteActionConfig.iconName\"\n          [luxDisabled]=\"luxDeleteActionConfig.disabled || luxDisabled || luxReadonly\"\n          [luxLabel]=\"luxDeleteActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"alwaysVisibleDelete\"\n          luxColor=\"primary\"\n          (luxClicked)=\"removeFile(index)\"\n          [luxHidden]=\"!!luxDeleteActionConfig.hidden\"\n        >\n        </lux-menu-item>\n        <lux-menu-item\n          luxTagId=\"lux-file-list-entry-upload\"\n          [luxIconName]=\"luxUploadActionConfig.iconName\"\n          [luxDisabled]=\"luxUploadActionConfig.disabled || luxDisabled || luxReadonly\"\n          [luxLabel]=\"luxUploadActionConfig.label\"\n          [luxHideLabelIfExtended]=\"true\"\n          [luxAlwaysVisible]=\"alwaysVisibleUpload\"\n          luxColor=\"primary\"\n          (luxClicked)=\"fileuploadSingle.click()\"\n          [luxHidden]=\"!!luxUploadActionConfig.hidden\"\n        >\n        </lux-menu-item>\n      </lux-menu>\n    </div>\n  </div>\n  <ng-container *ngIf=\"luxSelectedFiles.length\">\n    <lux-divider *ngIf=\"index !== this.luxSelectedFiles.length - 1\"></lux-divider>\n  </ng-container>\n</ng-template>\n\n<!-- File-Upload Input -->\n<input\n  class=\"lux-file-input lux-file-input-multiple\"\n  type=\"file\"\n  [multiple]=\"luxMultiple\"\n  [accept]=\"luxAccept\"\n  [luxFileCapture]=\"luxCapture\"\n  (change)=\"selectFiles($event.target.files)\"\n  #fileupload\n/>\n<!-- File-Upload Single Input -->\n<input\n  class=\"lux-file-input lux-file-input-single\"\n  type=\"file\"\n  [multiple]=\"false\"\n  [accept]=\"luxAccept\"\n  [luxFileCapture]=\"luxCapture\"\n  (change)=\"selectFiles($event.target.files)\"\n  #fileuploadSingle\n/>\n\n<!-- Download-Node -->\n<a class=\"lux-file-download\" #downloadLink></a>\n\n<!-- Ladeanzeige f\u00FCr den File-Upload -->\n<lux-file-progress [luxMode]=\"progressMode\" [luxProgress]=\"progress\" *ngIf=\"isProgressVisible\"> </lux-file-progress>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host{display:-webkit-box;display:-ms-flexbox;display:flex;position:relative}:host.lux-file-highlight *,:host.lux-file-highlight ::ng-deep *{pointer-events:none}:host.lux-file-highlight:after{content:'';position:absolute;top:0;left:0;right:0;bottom:0;border:2px dashed rgba(0,0,0,.38);background:rgba(0,0,0,.12);border-radius:4px;pointer-events:none}:host lux-menu ::ng-deep .lux-menu-extended .lux-menu-trigger,:host lux-menu ::ng-deep .lux-menu-extended>lux-button{margin:0!important}:host lux-menu ::ng-deep i,:host lux-menu ::ng-deep mat-icon{width:auto!important}:host lux-menu ::ng-deep lux-button{cursor:pointer!important;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}:host lux-menu ::ng-deep lux-button ::ng-deep button{padding:0;width:45px;min-width:45px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}:host lux-menu ::ng-deep lux-button ::ng-deep button:focus{background:rgba(51,92,133,.1)}.lux-file-download-anchor,.lux-file-input{display:none}.lux-file-list{width:100%;border-radius:4px;position:relative}.lux-file-list lux-icon,.lux-file-list span{color:#bfbfbf}.lux-file-list lux-button ::ng-deep button:not([disabled]) .mat-button-focus-overlay{display:none}.lux-file-list .lux-file-icon-hint mat-hint,.lux-file-list lux-card-actions ::ng-deep{font-size:12px}.lux-file-list ::ng-deep mat-card-title lux-button{cursor:pointer!important;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.lux-file-list ::ng-deep mat-card-title lux-button ::ng-deep button{padding:0;width:45px;min-width:45px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.lux-file-list ::ng-deep mat-card-title lux-button ::ng-deep button:focus{background:rgba(51,92,133,.1)}.lux-file-list ::ng-deep mat-card-title>div{min-height:45px}.lux-file-list ::ng-deep mat-card-title .lux-card-title-container{color:#335c85}.lux-file-list .lux-file-list-entries .lux-file-list-entry{min-height:60px}.lux-file-list .lux-file-list-entries .lux-file-list-entry .lux-file-list-entry-label{-ms-word-break:break-all;word-break:break-all}.lux-file-list.lux-file-list-disabled{pointer-events:none}.lux-file-list.lux-file-list-disabled ::ng-deep i,.lux-file-list.lux-file-list-disabled ::ng-deep mat-card-content,.lux-file-list.lux-file-list-disabled ::ng-deep mat-card-title *,.lux-file-list.lux-file-list-disabled ::ng-deep span{color:rgba(0,0,0,.26)}.lux-file-list.lux-file-list-disabled .lux-file-icon-hint span{-webkit-text-decoration-color:rgba(0,0,0,.26)!important;text-decoration-color:rgba(0,0,0,.26)!important}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                http.HttpClient,
                a11y.LiveAnnouncer,
                LuxComponentsConfigService])
        ], LuxFileListComponent);
        return LuxFileListComponent;
    }(LuxFormFileBase));

    /**
     * Diese Component ist nur eine leichte Ergänzung zu LuxProgress und wird nicht vom Modul exportiert.
     *
     * Leider musste das CSS kopiert werden, da wir hier nicht direkt LuxProgress nutzen können.
     * (Stand: 12.06.2019, LuxProgress ist Teil des LuxCommonModule und sorgt für Cycle-Dependencies) - DRon
     */
    var LuxFileProgressComponent = /** @class */ (function () {
        function LuxFileProgressComponent() {
            this.luxProgress = 0;
            this.luxMode = 'indeterminate';
        }
        LuxFileProgressComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxFileProgressComponent.prototype, "luxProgress", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFileProgressComponent.prototype, "luxMode", void 0);
        LuxFileProgressComponent = __decorate([
            core.Component({
                selector: 'lux-file-progress',
                template: "<div class=\"lux-file-overlay\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <mat-spinner [mode]=\"luxMode\" [value]=\"luxProgress\"></mat-spinner>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}.lux-file-overlay{position:absolute;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.12);border-radius:4px;pointer-events:none}.lux-file-overlay mat-spinner,.lux-file-overlay mat-spinner ::ng-deep svg{height:48px!important;width:48px!important}.lux-file-overlay mat-spinner ::ng-deep circle,.lux-file-overlay mat-spinner ::ng-deep svg ::ng-deep circle{stroke:#335c85;background:#335c85;-webkit-animation-duration:8s!important;animation-duration:8s!important}.lux-file-overlay mat-spinner{background:0 0!important}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxFileProgressComponent);
        return LuxFileProgressComponent;
    }());

    var LuxInputPrefixComponent = /** @class */ (function () {
        function LuxInputPrefixComponent() {
        }
        LuxInputPrefixComponent.prototype.ngOnInit = function () { };
        LuxInputPrefixComponent = __decorate([
            core.Component({
                selector: 'lux-input-prefix',
                template: "\n    <ng-content></ng-content>\n  "
            }),
            __metadata("design:paramtypes", [])
        ], LuxInputPrefixComponent);
        return LuxInputPrefixComponent;
    }());

    var LuxInputSuffixComponent = /** @class */ (function () {
        function LuxInputSuffixComponent() {
        }
        LuxInputSuffixComponent.prototype.ngOnInit = function () { };
        LuxInputSuffixComponent = __decorate([
            core.Component({
                selector: 'lux-input-suffix',
                template: "\n    <ng-content></ng-content>\n  "
            }),
            __metadata("design:paramtypes", [])
        ], LuxInputSuffixComponent);
        return LuxInputSuffixComponent;
    }());

    var LuxInputComponent = /** @class */ (function (_super) {
        __extends(LuxInputComponent, _super);
        function LuxInputComponent(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.symbolRegExp = /[,.]/;
            _this.luxType = 'text';
            _this.luxNumberAlignLeft = false;
            return _this;
        }
        /**
         * Wird bei jedem Tastendruck auf dem Inputfeld aufgerufen.
         * @param $event
         */
        LuxInputComponent.prototype.onKeyDown = function ($event) {
            // Soll nur für number-Inputs greifen
            if (this.inputElement) {
                var value = this.inputElement.nativeElement.value;
                // Doppelte Punkt-/Komma-Setzung und E's vermeiden
                if (value &&
                    this.symbolRegExp.test($event.key) &&
                    (this.inputElement.nativeElement.value.match(this.symbolRegExp) || []).length > 0) {
                    $event.preventDefault();
                }
            }
        };
        LuxInputComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxInputComponent.prototype, "luxType", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxInputComponent.prototype, "luxNumberAlignLeft", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxInputComponent.prototype, "luxMaxLength", void 0);
        __decorate([
            core.ContentChild(LuxInputPrefixComponent, { static: false }),
            __metadata("design:type", LuxInputPrefixComponent)
        ], LuxInputComponent.prototype, "inputPrefix", void 0);
        __decorate([
            core.ContentChild(LuxInputSuffixComponent, { static: false }),
            __metadata("design:type", LuxInputSuffixComponent)
        ], LuxInputComponent.prototype, "inputSuffix", void 0);
        __decorate([
            core.ViewChild('input', { read: core.ElementRef, static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxInputComponent.prototype, "inputElement", void 0);
        LuxInputComponent = __decorate([
            core.Component({
                selector: 'lux-input',
                template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <div class=\"lux-input-row\" fxLayout=\"row\">\n    <span class=\"lux-input-prefix-container\" fxFlex=\"auto\" matPrefix *ngIf=\"inputPrefix\">\n      <ng-content select=\"lux-input-prefix\"></ng-content>\n    </span>\n    <input\n      fxFlex=\"auto\"\n      matInput\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [placeholder]=\"luxPlaceholder\"\n      [type]=\"luxType\"\n      [luxMaxLengthAttr]=\"luxMaxLength\"\n      [formControl]=\"formControl\"\n      [required]=\"luxRequired\"\n      [readonly]=\"luxReadonly\"\n      [autocomplete]=\"luxAutocomplete\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"luxFocusIn.emit($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      [id]=\"uid\"\n      #input\n      *ngIf=\"luxType !== 'number'\"\n    />\n    <input\n      fxFlex=\"auto\"\n      matInput\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [placeholder]=\"luxPlaceholder\"\n      type=\"number\"\n      [luxMaxLengthAttr]=\"luxMaxLength\"\n      [formControl]=\"formControl\"\n      [required]=\"luxRequired\"\n      [readonly]=\"luxReadonly\"\n      [autocomplete]=\"luxAutocomplete\"\n      [ngClass]=\"{\n        'lux-number ': luxType === 'number',\n        'lux-number-left': luxType !== 'number' || (luxType === 'number' && luxNumberAlignLeft)\n      }\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"luxFocusIn.emit($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      (keydown)=\"onKeyDown($event)\"\n      [id]=\"uid\"\n      #input\n      *ngIf=\"luxType === 'number'\"\n    />\n    <span class=\"lux-input-suffix-container\" fxFlex=\"auto\" matSuffix *ngIf=\"inputSuffix\">\n      <ng-content select=\"lux-input-suffix\"></ng-content>\n    </span>\n  </div>\n</lux-form-control>\n",
                styles: ["@charset \"UTF-8\";.lux-label{display:block;margin-bottom:2px}input.lux-number{text-align:right!important}input.lux-number-left{text-align:left!important}input.lux-number::-webkit-inner-spin-button,input.lux-number::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input.lux-number::-ms-clear{display:none}input[type=number]{-moz-appearance:textfield}@-webkit-keyframes autofill{to{color:#666;background:0 0}}input:-webkit-autofill{-webkit-animation-name:autofill;-webkit-animation-fill-mode:both}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxInputComponent);
        return LuxInputComponent;
    }(LuxFormInputBaseClass));

    /**
     * Basis-Klasse für FormComponents, die einen ähnlichen Grundaufbau für die Auswahl von
     * Optionen aus einem Array anbieten (Radio-Buttons und Selects z.B.).
     */
    var LuxFormSelectableBase = /** @class */ (function (_super) {
        __extends(LuxFormSelectableBase, _super);
        function LuxFormSelectableBase(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this._luxOptions = [];
            _this.luxSelectedChange = new core.EventEmitter();
            _this.luxOptionLabelProp = '';
            _this.luxCompareWith = function (o1, o2) { return o1 === o2; };
            /**
             * Kapselung von der übergebenen luxCompareWith-Funktion.
             * Fängt undefinierte Objekte ab und returned stattdessen false.
             * @param o1
             * @param o2
             */
            _this.compareObjects = function (o1, o2) {
                if ((!o1 && o2) || (o1 && !o2)) {
                    return false;
                }
                else if (_this.luxCompareWith && !!o1 && !!o2) {
                    return _this.luxCompareWith(o1, o2);
                }
                else {
                    return o1 === o2;
                }
            };
            return _this;
        }
        Object.defineProperty(LuxFormSelectableBase.prototype, "luxSelected", {
            get: function () {
                return this.getValue();
            },
            set: function (selected) {
                this.setValue(selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxFormSelectableBase.prototype, "luxOptions", {
            get: function () {
                return this._luxOptions;
            },
            set: function (options) {
                this._luxOptions = options;
                this.checkSelectedAndUpdate(this.luxSelected);
            },
            enumerable: true,
            configurable: true
        });
        // region Overridden methods
        LuxFormSelectableBase.prototype.notifyFormValueChanged = function (formValue) {
            this.checkSelectedAndUpdate(formValue);
        };
        // endregion
        /**
         * Versucht, wenn Options und FormControl vorhanden sind, den selected-Wert mit den Options
         * zu vergleichen und dann auch wenn möglich als luxSelected-Wert zu sichern.
         * @param selected
         */
        LuxFormSelectableBase.prototype.checkSelectedAndUpdate = function (selected) {
            var _this = this;
            if (this.luxOptions && this.luxOptions.length > 0 && this.formControl) {
                if (this.luxPickValue && selected instanceof Object && !Array.isArray(selected)) {
                    // Wenn der Wert zufälligerweise noch ein Objekt sein sollte, versuchen den Key auszulesen
                    selected = this.luxPickValue(selected);
                    // Da der Wert neu gesetzt wurde, diesen im nächsten Zyklus erst in die Werte schreiben
                    setTimeout(function () {
                        _this.checkSelectedAndUpdate(selected);
                    });
                }
                else {
                    // Für den Fall, das der eingesetzte Wert sich doch noch vom FormControl-Value unterscheidet,
                    // diesen ergänzen
                    if (this.luxSelected !== selected) {
                        this.luxSelected = selected;
                    }
                    this.checkSelectedInOptions(selected);
                    setTimeout(function () {
                        _this.luxSelectedChange.emit(selected);
                    });
                }
            }
        };
        /**
         * Prüft ob der übergebene Wert in den luxOptions ist.
         * Kann auch ein Array als "selected" enthalten.
         * Wenn der Wert nicht gefunden werden konnte wird eine Fehlermeldung in der console ausgegeben.
         * @param selected
         */
        LuxFormSelectableBase.prototype.checkSelectedInOptions = function (selected) {
            var selectedAsArray = Array.isArray(selected) ? selected : [selected];
            if (selected && this.luxOptions && !this.allSelectedInOptions(selectedAsArray)) {
                // Selected nicht in Options = einen Fehler in die Console loggen
                this.logSelectedNotFound(selected);
            }
        };
        /**
         * Prüft ob die übergebenen Select-Objekte in den luxOptions enthalten sind.
         * @param selectedAsArray
         */
        LuxFormSelectableBase.prototype.allSelectedInOptions = function (selectedAsArray) {
            var _this = this;
            // Prüfen ob ein Unterarray von Elementen existiert.
            var optionsHasSubarray = this.luxOptions.length === 0
                ? false
                : // Dieses kann direkt in den Options stehen oder als value-Property
                    Array.isArray(this.luxOptions[0]) ||
                        (!!this.luxPickValue && Array.isArray(this.luxPickValue(this.luxOptions[0])));
            var targetLength = optionsHasSubarray ? 1 : selectedAsArray.length;
            var length = this.luxOptions.filter(function (optionEntry) {
                if (optionsHasSubarray) {
                    return _this.luxPickValue
                        ? _this.luxPickValue(optionEntry) === selectedAsArray
                        : _this.compareObjects(optionEntry, selectedAsArray);
                }
                else {
                    return selectedAsArray.find(function (selectedEntry) {
                        return _this.luxPickValue
                            ? _this.luxPickValue(optionEntry) === selectedEntry
                            : _this.compareObjects(optionEntry, selectedEntry);
                    });
                }
            }).length;
            return length === targetLength;
        };
        /**
         * Loggt die Fehlermeldung in die Console, wenn das neue Value-Objekt nicht in den Options gefunden
         * werden konnte.
         * @param selected
         */
        LuxFormSelectableBase.prototype.logSelectedNotFound = function (selected) {
            this.logger.error("\n### Das Objekt " + JSON.stringify(selected) + " ist nicht Teil der m\u00F6glichen Optionen.\n" +
                ("\n### Komponente: \"" + this + "\"\n") +
                "Pr\u00FCfen Sie evtl. die luxCompareWith-Funktion, um Properties anstelle ganzer Objekte zu vergleichen.");
        };
        LuxFormSelectableBase.prototype.triggerOutputPatternCheck = function () {
            this.checkOutputPatternViolation(this.luxSelectedChange.observers);
        };
        LuxFormSelectableBase.prototype.triggerInputPatternCheck = function (simpleChanges) {
            this.checkInputPatternViolation(simpleChanges.luxSelected);
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxFormSelectableBase.prototype, "luxSelectedChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormSelectableBase.prototype, "luxOptionLabelProp", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxFormSelectableBase.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], LuxFormSelectableBase.prototype, "luxPickValue", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxFormSelectableBase.prototype, "luxReadonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxFormSelectableBase.prototype, "luxCompareWith", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxFormSelectableBase.prototype, "luxSelected", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], LuxFormSelectableBase.prototype, "luxOptions", null);
        return LuxFormSelectableBase;
    }(LuxFormComponentBase));

    var LuxRadioComponent = /** @class */ (function (_super) {
        __extends(LuxRadioComponent, _super);
        function LuxRadioComponent(controlContainer, cdr, logger, config, mediaObserver) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.mediaObserver = mediaObserver;
            _this.forceVertical = false;
            _this.pb3 = true;
            _this.luxGroupName = '';
            _this.luxOrientationVertical = true;
            _this.mediaSubscription$ = _this.mediaObserver.getMediaQueryChangedAsObservable().subscribe(function () {
                _this.forceVertical = _this.mediaObserver.isXS();
            });
            _this.forceVertical = _this.mediaObserver.isXS();
            return _this;
        }
        Object.defineProperty(LuxRadioComponent.prototype, "isVertical", {
            get: function () {
                return this.luxOrientationVertical || this.forceVertical;
            },
            enumerable: true,
            configurable: true
        });
        LuxRadioComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.mediaSubscription$.unsubscribe();
            this.mediaSubscription$ = null;
        };
        LuxRadioComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService },
            { type: LuxMediaQueryObserverService }
        ]; };
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxRadioComponent.prototype, "tempRef", void 0);
        __decorate([
            core.HostBinding('class.lux-pb-3'),
            __metadata("design:type", Boolean)
        ], LuxRadioComponent.prototype, "pb3", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxRadioComponent.prototype, "luxGroupName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxRadioComponent.prototype, "luxOrientationVertical", void 0);
        LuxRadioComponent = __decorate([
            core.Component({
                selector: 'lux-radio',
                template: "<lux-form-control\n  [luxFormComponent]=\"this\"\n  [luxHideBottomBorder]=\"true\"\n  [luxScalableHeight]=\"true\"\n  [formGroup]=\"formGroup\"\n  *ngIf=\"formGroup\"\n>\n  <mat-radio-group\n    luxTagIdHandler\n    [luxTagId]=\"luxTagId\"\n    [name]=\"luxGroupName\"\n    [formControl]=\"formControl\"\n    fxLayoutGap=\"10px\"\n    [ngClass]=\"{ 'lux-vertical': isVertical, 'lux-horizontal': !isVertical }\"\n    fxLayout=\"{{ isVertical ? 'column' : 'row wrap' }}\"\n    fxLayoutAlign=\"start stretch\"\n    [required]=\"luxRequired\"\n    (focusin)=\"luxFocusIn.emit($event)\"\n    (focusout)=\"luxFocusOut.emit($event)\"\n    [luxAriaLabelledby]=\"uid + '-label'\"\n    [id]=\"uid\"\n  >\n    <mat-radio-button\n      [value]=\"luxPickValue ? luxPickValue(option) : option\"\n      [disableRipple]=\"true\"\n      fxFlex=\"0 0 auto\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      luxAriaDescribedbySelector=\".mat-radio-input\"\n      [luxAriaRequired]=\"luxRequired\"\n      luxAriaRequiredSelector=\".mat-radio-input\"\n      [luxAriaInvalid]=\"formControl.invalid\"\n      luxAriaInvalidSelector=\".mat-radio-input\"\n      *ngFor=\"let option of luxOptions\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          tempRef && !luxOptionLabelProp ? tempRef : noTemplateRefTemplate;\n          context: { $implicit: option }\n        \"\n      ></ng-container>\n    </mat-radio-button>\n  </mat-radio-group>\n  <ng-content select=\"lux-form-hint\"></ng-content>\n</lux-form-control>\n\n<ng-template #noTemplateRefTemplate let-option>\n  <ng-container *ngIf=\"option && option[luxOptionLabelProp]; else showObjectTemplate\">\n    {{ option | luxRenderProperty: luxOptionLabelProp }}\n  </ng-container>\n  <ng-template #showObjectTemplate>\n    <ng-container *ngIf=\"!!option\">\n      {{ option }}\n    </ng-container>\n  </ng-template>\n</ng-template>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host ::ng-deep .mat-radio-label{width:100%}:host ::ng-deep .mat-radio-label .mat-radio-label-content{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host ::ng-deep .mat-radio-button .mat-radio-ripple{display:none}:host ::ng-deep .mat-radio-container{margin-top:-2px}.lux-vertical mat-radio-button:first-child{margin-top:0}.lux-horizontal mat-radio-button:first-child{margin-left:0}.mat-radio-checked ::ng-deep label div.mat-radio-container div.mat-radio-inner-circle{background-color:#335c85}.mat-radio-checked ::ng-deep label div.mat-radio-container div.mat-radio-outer-circle{border-color:#335c85}.mat-radio-checked.mat-radio-disabled ::ng-deep label div.mat-radio-container div.mat-radio-inner-circle{background-color:rgba(0,0,0,.38)}.mat-radio-checked.mat-radio-disabled ::ng-deep label div.mat-radio-container div.mat-radio-outer-circle{border-color:rgba(0,0,0,.38)}.mat-radio-disabled ::ng-deep label.mat-radio-label .mat-radio-container div.mat-radio-inner-circle{background-color:rgba(0,0,0,.15)}.mat-radio-disabled ::ng-deep label.mat-radio-label .mat-radio-container div.mat-radio-outer-circle{border-color:rgba(0,0,0,.15)}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService,
                LuxMediaQueryObserverService])
        ], LuxRadioComponent);
        return LuxRadioComponent;
    }(LuxFormSelectableBase));

    var LuxSelectComponent = /** @class */ (function (_super) {
        __extends(LuxSelectComponent, _super);
        function LuxSelectComponent(controlContainer, cdr, logger, config, liveAnnouncer) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.liveAnnouncer = liveAnnouncer;
            _this.luxMultiple = false;
            return _this;
        }
        LuxSelectComponent.prototype.notifyFormValueChanged = function (formValue) {
            _super.prototype.notifyFormValueChanged.call(this, formValue);
            var matOption = this.matOptions.find(function (option) { return option.value === formValue; });
            if (matOption) {
                this.displayedViewValue = matOption.viewValue;
                this.liveAnnouncer.announce(matOption.viewValue, 'assertive');
            }
        };
        LuxSelectComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService },
            { type: a11y.LiveAnnouncer }
        ]; };
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxSelectComponent.prototype, "tempRef", void 0);
        __decorate([
            core.ViewChildren(material.MatOption),
            __metadata("design:type", core.QueryList)
        ], LuxSelectComponent.prototype, "matOptions", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSelectComponent.prototype, "luxPlaceholder", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSelectComponent.prototype, "luxMultiple", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSelectComponent.prototype, "luxTagId", void 0);
        LuxSelectComponent = __decorate([
            core.Component({
                selector: 'lux-select',
                template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <mat-select\n    luxTagIdHandler\n    [luxTagId]=\"luxTagId\"\n    [placeholder]=\"luxPlaceholder\"\n    [multiple]=\"luxMultiple\"\n    [compareWith]=\"compareObjects\"\n    [required]=\"luxRequired\"\n    [formControl]=\"formControl\"\n    [attr.aria-invalid]=\"formControl.invalid\"\n    [attr.aria-required]=\"luxRequired\"\n    [id]=\"uid\"\n    [panelClass]=\"'lux-select-panel'\"\n    [luxAriaLabelledby]=\"uid + '-label'\"\n    [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n    (focusin)=\"luxFocusIn.emit($event)\"\n    (focusout)=\"luxFocusOut.emit($event)\"\n  >\n    <mat-option *ngFor=\"let item of luxOptions\" [value]=\"luxPickValue ? luxPickValue(item) : item\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          tempRef && !luxOptionLabelProp ? tempRef : noTemplateRefTemplate;\n          context: { $implicit: item }\n        \"\n      >\n      </ng-container>\n    </mat-option>\n  </mat-select>\n</lux-form-control>\n\n<ng-template #noTemplateRefTemplate let-option>\n  <ng-container *ngIf=\"option && option[luxOptionLabelProp]; else showObjectTemplate\">\n    {{ option | luxRenderProperty: luxOptionLabelProp }}\n  </ng-container>\n  <ng-template #showObjectTemplate>\n    <ng-container *ngIf=\"!!option\">\n      {{ option }}\n    </ng-container>\n  </ng-template>\n</ng-template>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}::ng-deep .mat-pseudo-checkbox-checked{background-color:#335c85!important}::ng-deep .lux-select-panel mat-option:not(:last-of-type){margin-bottom:2px}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService,
                a11y.LiveAnnouncer])
        ], LuxSelectComponent);
        return LuxSelectComponent;
    }(LuxFormSelectableBase));

    // @dynamic Erklärung steht in der Datei "lux-decorators.ts".
    var LuxSliderComponent = /** @class */ (function (_super) {
        __extends(LuxSliderComponent, _super);
        function LuxSliderComponent(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.luxChange = new core.EventEmitter();
            _this.luxInput = new core.EventEmitter();
            _this.luxValueChange = new core.EventEmitter();
            _this.luxValuePercent = new core.EventEmitter();
            _this.luxColor = 'primary';
            _this.luxVertical = false;
            _this.luxInvert = false;
            _this.luxShowThumbLabel = true;
            _this.luxShowThumbLabelAlways = true;
            _this.luxTickInterval = 0;
            _this.luxTagId = undefined;
            _this._luxMax = 100;
            _this._luxRequired = false;
            _this._luxMin = 0;
            _this._luxStep = 1;
            return _this;
        }
        Object.defineProperty(LuxSliderComponent.prototype, "luxValue", {
            get: function () {
                return this.getValue();
            },
            set: function (value) {
                if (!this.luxReadonly && !this.luxDisabled) {
                    this.setValue(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxSliderComponent.prototype, "luxMax", {
            get: function () {
                return this._luxMax;
            },
            set: function (value) {
                this._luxMax = value;
                if (value > 0 && value > this.luxMin) {
                    this._luxMax = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxSliderComponent.prototype, "luxMin", {
            get: function () {
                return this._luxMin;
            },
            set: function (value) {
                this._luxMin = value;
                if (value >= 0 && value < this.luxMax) {
                    this._luxMin = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxSliderComponent.prototype, "luxStep", {
            get: function () {
                return this._luxStep;
            },
            set: function (value) {
                this._luxStep = value;
                if (value <= this.luxMax - this.luxMin) {
                    this._luxStep = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxSliderComponent.prototype, "luxRequired", {
            get: function () {
                return this._luxRequired;
            },
            set: function (value) {
                this._luxRequired = value;
                if (value === true) {
                    this.logger.error('Der LuxSlider kann nicht als Required-Feld deklariert werden.');
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxSliderComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.formControl.statusChanges.subscribe(function (status) {
                if (status === 'DISABLED') {
                    _this.redrawSliderWorkaround();
                }
            });
        };
        LuxSliderComponent.prototype.ngOnChanges = function (simpleChanges) {
            _super.prototype.ngOnChanges.call(this, simpleChanges);
            if (simpleChanges.luxDisabled) {
                this.redrawSliderWorkaround();
            }
        };
        /**
         * Wird beim Aendern des Slider-Wertes aufgerufen.
         * @param changeEvent
         */
        LuxSliderComponent.prototype.onChange = function (changeEvent) {
            this.luxValue = changeEvent.value;
            this.luxChange.emit(changeEvent);
        };
        /**
         * Wird beim Bewegen des Sliders aufgerufen.
         * @param inputEvent
         */
        LuxSliderComponent.prototype.onInput = function (inputEvent) {
            this.luxValue = inputEvent.value;
            this.luxInput.emit(inputEvent);
            if (!this.formControl.touched) {
                this.formControl.markAsTouched();
            }
        };
        // region Overridden methods
        LuxSliderComponent.prototype.notifyFormValueChanged = function (formValue) {
            var _this = this;
            if (this.luxValue < this.luxMin) {
                setTimeout(function () {
                    _this.luxValue = _this.luxMin;
                });
            }
            else if (this.luxValue > this.luxMax) {
                setTimeout(function () {
                    _this.luxValue = _this.luxMax;
                });
            }
            else {
                this.luxValueChange.emit(formValue);
                this.luxValuePercent.emit(((formValue - this.luxMin) * 100) / (this.luxMax - this.luxMin));
            }
        };
        // endregion
        /**
         * Workaround, ohne den der Slider leider nicht beim Wechsel zum disabled-State den Gab
         * um den Thumb herum zeichnet. - dron
         */
        LuxSliderComponent.prototype.redrawSliderWorkaround = function () {
            var _this = this;
            if (!this.matSlider) {
                return;
            }
            this.matSlider.step = this.luxStep - 1;
            setTimeout(function () {
                _this.matSlider.step = _this.luxStep;
            });
        };
        LuxSliderComponent.prototype.triggerOutputPatternCheck = function () {
            this.checkOutputPatternViolation(this.luxValueChange.observers);
        };
        LuxSliderComponent.prototype.triggerInputPatternCheck = function (simpleChanges) {
            this.checkInputPatternViolation(simpleChanges.luxValue);
        };
        LuxSliderComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.ViewChild(material.MatSlider, { static: false }),
            __metadata("design:type", material.MatSlider)
        ], LuxSliderComponent.prototype, "matSlider", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxSliderComponent.prototype, "luxChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxSliderComponent.prototype, "luxInput", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxSliderComponent.prototype, "luxValueChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxSliderComponent.prototype, "luxValuePercent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSliderComponent.prototype, "luxColor", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSliderComponent.prototype, "luxVertical", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSliderComponent.prototype, "luxInvert", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSliderComponent.prototype, "luxShowThumbLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSliderComponent.prototype, "luxShowThumbLabelAlways", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxSliderComponent.prototype, "luxTickInterval", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxSliderComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], LuxSliderComponent.prototype, "luxDisplayWith", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxSliderComponent.prototype, "luxValue", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxSliderComponent.prototype, "luxMax", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxSliderComponent.prototype, "luxMin", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxSliderComponent.prototype, "luxStep", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxSliderComponent.prototype, "luxRequired", null);
        LuxSliderComponent = __decorate([
            core.Component({
                selector: 'lux-slider',
                template: "<lux-form-control\n  [luxFormComponent]=\"this\"\n  [luxHideBottomBorder]=\"true\"\n  [formGroup]=\"formGroup\"\n  [luxScalableHeight]=\"luxVertical\"\n  *ngIf=\"formGroup\"\n>\n  <mat-slider\n    luxTagIdHandler\n    [luxTagId]=\"luxTagId\"\n    [color]=\"luxColor\"\n    [invert]=\"luxInvert\"\n    [max]=\"luxMax\"\n    [min]=\"luxMin\"\n    [step]=\"luxStep\"\n    [thumbLabel]=\"luxShowThumbLabel\"\n    [tickInterval]=\"luxTickInterval\"\n    [vertical]=\"luxVertical\"\n    [value]=\"luxValue\"\n    [displayWith]=\"luxDisplayWith\"\n    (change)=\"onChange($event)\"\n    (input)=\"onInput($event)\"\n    [formControl]=\"formControl\"\n    [ngClass]=\"{\n      'lux-show-thumb-label-always': luxShowThumbLabelAlways && luxShowThumbLabel,\n      'lux-thumb-label-1k': luxValue >= 1000,\n      'lux-thumb-label-10k': luxValue >= 10000\n    }\"\n    [id]=\"uid\"\n    [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n    [luxAriaInvalid]=\"formControl.invalid\"\n    [luxAriaRequired]=\"luxRequired\"\n    [luxAriaLabel]=\"luxLabel\"\n    tabIndex=\"{{ luxReadonly ? -1 : 0 }}\"\n  >\n  </mat-slider>\n</lux-form-control>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}mat-error{font-size:75%;margin-top:.54166667em;top:calc(100% - 1.66666667em);line-height:12px}.lux-readonly{pointer-events:none}.cdk-focused:not(.lux-show-thumb-label-always).mat-slider-vertical ::ng-deep .mat-slider-thumb-label,.lux-show-thumb-label-always.mat-slider-vertical ::ng-deep .mat-slider-thumb-label{-webkit-transform:rotate(-45deg)!important;-ms-transform:rotate(-45deg)!important;transform:rotate(-45deg)!important;border-radius:0 50% 50%!important}.cdk-focused:not(.lux-show-thumb-label-always).mat-slider-horizontal ::ng-deep .mat-slider-thumb-label,.lux-show-thumb-label-always.mat-slider-horizontal ::ng-deep .mat-slider-thumb-label{-webkit-transform:rotate(45deg)!important;-ms-transform:rotate(45deg)!important;transform:rotate(45deg)!important;border-radius:50% 50% 0!important}.lux-show-thumb-label-always ::ng-deep .mat-slider-thumb{-webkit-transform:scale(0)!important;-ms-transform:scale(0)!important;transform:scale(0)!important}.lux-show-thumb-label-always ::ng-deep .mat-slider-thumb-label-text{opacity:1!important}.lux-show-thumb-label-always.mat-slider-disabled ::ng-deep .mat-slider-thumb-label{display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;background-color:rgba(0,0,0,.38)}.lux-show-thumb-label-always.mat-slider-disabled.mat-slider-horizontal ::ng-deep .mat-slider-track-background,.lux-show-thumb-label-always.mat-slider-disabled.mat-slider-vertical ::ng-deep .mat-slider-track-background{visibility:hidden}.lux-show-thumb-label-always.mat-slider-disabled.mat-slider-horizontal ::ng-deep .mat-slider-track-fill,.lux-show-thumb-label-always.mat-slider-disabled.mat-slider-vertical ::ng-deep .mat-slider-track-fill{-webkit-transform:translateX(0) scale3d(1,1,1)!important;transform:translateX(0) scale3d(1,1,1)!important}mat-slider ::ng-deep .mat-slider-thumb-label{width:24px;height:24px}mat-slider.mat-slider-horizontal ::ng-deep .mat-slider-thumb-label{top:-32px;right:-13px}mat-slider.mat-slider-vertical ::ng-deep .mat-slider-thumb-label{bottom:-11px;left:10px}mat-slider.lux-thumb-label-1k.mat-slider-horizontal ::ng-deep .mat-slider-thumb-label{top:-36px;right:-13px}mat-slider.lux-thumb-label-1k.mat-slider-vertical ::ng-deep .mat-slider-thumb-label{bottom:-15px;left:10px}mat-slider.lux-thumb-label-1k ::ng-deep .mat-slider-thumb-label{width:28px;height:28px}mat-slider.lux-thumb-label-10k.mat-slider-horizontal ::ng-deep .mat-slider-thumb-label{top:-44px;right:-16px}mat-slider.lux-thumb-label-10k.mat-slider-vertical ::ng-deep .mat-slider-thumb-label{bottom:-18px;left:10px}mat-slider.lux-thumb-label-10k ::ng-deep .mat-slider-thumb-label{width:34px;height:34px}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxSliderComponent);
        return LuxSliderComponent;
    }(LuxFormComponentBase));

    var LuxTextareaComponent = /** @class */ (function (_super) {
        __extends(LuxTextareaComponent, _super);
        function LuxTextareaComponent(controlContainer, cdr, logger, config) {
            var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
            _this.luxMaxRows = -1;
            _this.luxMinRows = 0;
            return _this;
        }
        LuxTextareaComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        LuxTextareaComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTextareaComponent.prototype, "luxMaxRows", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTextareaComponent.prototype, "luxMinRows", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTextareaComponent.prototype, "luxMaxLength", void 0);
        LuxTextareaComponent = __decorate([
            core.Component({
                selector: 'lux-textarea',
                template: "<lux-form-control [luxFormComponent]=\"this\" [luxScalableHeight]=\"true\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <textarea\n    matInput\n    luxTagIdHandler\n    [luxTagId]=\"luxTagId\"\n    [placeholder]=\"luxPlaceholder\"\n    [formControl]=\"formControl\"\n    [luxMaxLengthAttr]=\"luxMaxLength\"\n    matTextareaAutosize\n    [matAutosizeMinRows]=\"luxMinRows\"\n    [matAutosizeMaxRows]=\"luxMaxRows\"\n    [required]=\"luxRequired\"\n    [readonly]=\"luxReadonly\"\n    (blur)=\"luxBlur.emit($event)\"\n    (focus)=\"luxFocus.emit($event)\"\n    (focusin)=\"luxFocusIn.emit($event)\"\n    (focusout)=\"luxFocusOut.emit($event)\"\n    [id]=\"uid\"\n    [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n  ></textarea>\n</lux-form-control>\n",
                styles: [""]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxTextareaComponent);
        return LuxTextareaComponent;
    }(LuxFormInputBaseClass));

    var LuxToggleComponent = /** @class */ (function (_super) {
        __extends(LuxToggleComponent, _super);
        function LuxToggleComponent(controlContainer, cdr, logger, config) {
            return _super.call(this, controlContainer, cdr, logger, config) || this;
        }
        LuxToggleComponent.ctorParameters = function () { return [
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        LuxToggleComponent = __decorate([
            core.Component({
                selector: 'lux-toggle',
                template: "<lux-form-control\n  [luxFormComponent]=\"this\"\n  [luxHideBottomBorder]=\"true\"\n  [formGroup]=\"formGroup\"\n  [luxIgnoreDefaultLabel]=\"true\"\n  (click)=\"formControl.markAsTouched()\"\n  *ngIf=\"formGroup\"\n>\n  <mat-slide-toggle\n    luxTagIdHandler\n    [luxTagId]=\"luxTagId\"\n    [disableRipple]=\"true\"\n    [required]=\"luxRequired\"\n    [formControl]=\"formControl\"\n    (focusin)=\"luxFocusIn.emit($event)\"\n    (focusout)=\"luxFocusOut.emit($event)\"\n    [id]=\"uid\"\n    [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n    luxAriaDescribedbySelector=\".mat-slide-toggle-input\"\n    [luxAriaRequired]=\"luxRequired\"\n    luxAriaRequiredSelector=\".mat-slide-toggle-input\"\n    [luxAriaInvalid]=\"formControl.invalid\"\n    luxAriaInvalidSelector=\".mat-slide-toggle-input\"\n    tabIndex=\"{{ luxReadonly ? -1 : 0 }}\"\n  >\n    <label class=\"lux-form-label\" [for]=\"uid + '-input'\" *ngIf=\"formLabelComponent || luxLabel\">\n      <ng-container *ngIf=\"luxLabel; else formLabelTemplate\">\n        {{ luxLabel }}\n      </ng-container>\n      <ng-template #formLabelTemplate>\n        <ng-container *ngTemplateOutlet=\"formLabelComponent.templateRef\"></ng-container>\n      </ng-template>\n      {{ luxRequired ? ' *' : '' }}\n    </label>\n  </mat-slide-toggle>\n</lux-form-control>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host ::ng-deep .mat-slide-toggle-ripple.mat-ripple{display:none}:host ::ng-deep .mat-slide-toggle-bar{margin-top:-2px}.mat-checked:not(.mat-disabled) ::ng-deep label div div div.mat-slide-toggle-thumb{background-color:#335c85}.mat-checked:not(.mat-disabled) ::ng-deep label div.mat-slide-toggle-bar{background-color:#c2ceda}.mat-disabled.mat-checked ::ng-deep label div div div.mat-slide-toggle-thumb{background-color:rgba(0,0,0,.87)}.mat-disabled ::ng-deep label{color:#000}.mat-disabled ::ng-deep label div.mat-slide-toggle-bar{background-color:#c2ceda}.lux-form-label{cursor:pointer}"]
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxToggleComponent);
        return LuxToggleComponent;
    }(LuxFormCheckableBaseClass));

    var LuxFileCaptureDirective = /** @class */ (function () {
        function LuxFileCaptureDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        Object.defineProperty(LuxFileCaptureDirective.prototype, "luxFileCapture", {
            get: function () {
                return this._luxFileCapture;
            },
            set: function (label) {
                this._luxFileCapture = label;
                if (this._luxFileCapture) {
                    this.renderer.setAttribute(this.elementRef.nativeElement, 'capture', this._luxFileCapture);
                }
                else {
                    this.renderer.removeAttribute(this.elementRef.nativeElement, 'capture');
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxFileCaptureDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxFileCaptureDirective.prototype, "luxFileCapture", null);
        LuxFileCaptureDirective = __decorate([
            core.Directive({
                selector: '[luxFileCapture]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxFileCaptureDirective);
        return LuxFileCaptureDirective;
    }());

    var LuxMaxLengthDirective = /** @class */ (function () {
        function LuxMaxLengthDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
        }
        Object.defineProperty(LuxMaxLengthDirective.prototype, "luxMaxLengthAttr", {
            get: function () {
                return this._luxMaxLengthAttr;
            },
            set: function (maxLength) {
                this._luxMaxLengthAttr = maxLength;
                if (this._luxMaxLengthAttr) {
                    this.renderer.setAttribute(this.elementRef.nativeElement, 'maxlength', this._luxMaxLengthAttr);
                }
                else {
                    this.renderer.removeAttribute(this.elementRef.nativeElement, 'maxlength');
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxMaxLengthDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxMaxLengthDirective.prototype, "luxMaxLengthAttr", null);
        LuxMaxLengthDirective = __decorate([
            core.Directive({
                selector: '[luxMaxLengthAttr]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2])
        ], LuxMaxLengthDirective);
        return LuxMaxLengthDirective;
    }());

    var LuxFormModule = /** @class */ (function () {
        function LuxFormModule() {
        }
        LuxFormModule = __decorate([
            core.NgModule({
                declarations: [
                    LuxToggleComponent,
                    LuxSelectComponent,
                    LuxInputComponent,
                    LuxInputPrefixComponent,
                    LuxInputSuffixComponent,
                    LuxCheckboxComponent,
                    LuxChipsComponent,
                    LuxChipComponent,
                    LuxChipGroupComponent,
                    LuxRadioComponent,
                    LuxDatepickerComponent,
                    LuxAutocompleteComponent,
                    LuxSliderComponent,
                    LuxTextareaComponent,
                    LuxFormControlComponent,
                    LuxFormHintComponent,
                    LuxFormLabelComponent,
                    LuxFileListComponent,
                    LuxFileInputComponent,
                    LuxFileProgressComponent,
                    LuxFileCaptureDirective,
                    LuxMaxLengthDirective
                ],
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    flexLayout.FlexLayoutModule,
                    forms.ReactiveFormsModule,
                    material.MatSlideToggleModule,
                    material.MatSelectModule,
                    material.MatFormFieldModule,
                    material.MatInputModule,
                    material.MatCheckboxModule,
                    material.MatChipsModule,
                    material.MatRadioModule,
                    material.MatDatepickerModule,
                    material.MatNativeDateModule,
                    material.MatAutocompleteModule,
                    material.MatSliderModule,
                    LuxIconModule,
                    LuxDirectivesModule,
                    LuxPipesModule,
                    LuxComponentsConfigModule,
                    LuxActionModule,
                    LuxLayoutModule,
                    material.MatProgressBarModule,
                    material.MatProgressSpinnerModule
                ],
                exports: [
                    LuxToggleComponent,
                    LuxSelectComponent,
                    LuxInputComponent,
                    LuxInputPrefixComponent,
                    LuxInputSuffixComponent,
                    LuxCheckboxComponent,
                    LuxChipsComponent,
                    LuxChipComponent,
                    LuxChipGroupComponent,
                    LuxRadioComponent,
                    LuxDatepickerComponent,
                    LuxAutocompleteComponent,
                    LuxSliderComponent,
                    LuxTextareaComponent,
                    LuxFormControlComponent,
                    LuxFormHintComponent,
                    LuxFormLabelComponent,
                    LuxFileListComponent,
                    LuxFileInputComponent,
                    LuxFileCaptureDirective,
                    LuxMaxLengthDirective
                ],
                providers: [LuxMediaQueryObserverService]
            })
        ], LuxFormModule);
        return LuxFormModule;
    }());

    var LuxSpinnerComponent = /** @class */ (function () {
        function LuxSpinnerComponent() {
            this.luxIndeterminate = true;
            this.luxValue = 0;
        }
        Object.defineProperty(LuxSpinnerComponent.prototype, "mode", {
            get: function () {
                return this.luxIndeterminate ? 'indeterminate' : 'determinate';
            },
            enumerable: true,
            configurable: true
        });
        LuxSpinnerComponent.prototype.ngOnInit = function () { };
        LuxSpinnerComponent.prototype.isIE = function () {
            return LuxUtil.isIE();
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxSpinnerComponent.prototype, "luxIndeterminate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxSpinnerComponent.prototype, "luxValue", void 0);
        LuxSpinnerComponent = __decorate([
            core.Component({
                selector: 'lux-spinner',
                template: "<div fxLayoutAlign=\"center none\" fxLayout=\"row\" [ngClass]=\"{ 'lux-spinner-ie-dasharray': isIE() }\">\n  <mat-progress-spinner [value]=\"luxValue\" [mode]=\"mode\"></mat-progress-spinner>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}:host ::ng-deep .mat-progress-spinner{margin-top:8px;-webkit-animation-duration:8s!important;animation-duration:8s!important}:host ::ng-deep .mat-progress-spinner>svg>circle{-webkit-animation-duration:8s!important;animation-duration:8s!important;stroke:#0073b3}:host ::ng-deep .mat-progress-spinner,:host ::ng-deep .mat-progress-spinner>svg{height:33px!important;width:33px!important}.lux-spinner-ie-dasharray ::ng-deep .mat-progress-spinner>svg>circle{stroke-dasharray:200px!important}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxSpinnerComponent);
        return LuxSpinnerComponent;
    }());

    var LuxLabelComponent = /** @class */ (function () {
        function LuxLabelComponent() {
        }
        LuxLabelComponent.prototype.ngOnInit = function () {
            if (!this.luxId) {
                console.error('lux-label -> Das Attribut "luxId" muss gesetzt werden.');
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxLabelComponent.prototype, "luxId", void 0);
        LuxLabelComponent = __decorate([
            core.Component({
                selector: 'lux-label',
                template: '<span [id]="luxId"><ng-content></ng-content></span>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxLabelComponent);
        return LuxLabelComponent;
    }());

    var LuxBadgeComponent = /** @class */ (function () {
        function LuxBadgeComponent() {
            this.ICON_SIZE = '1x';
            this.DEFAULT_BADGE_COLOR = exports.LuxBackgroundColorsEnum.gray;
            this.luxUppercase = true;
            this.luxIconName = '';
            this._backgroundCSSClass = '';
            this._fontCSSClass = '';
            this.luxColor = this.DEFAULT_BADGE_COLOR;
        }
        Object.defineProperty(LuxBadgeComponent.prototype, "backgroundCSSClass", {
            get: function () {
                return this._backgroundCSSClass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxBadgeComponent.prototype, "fontCSSClass", {
            get: function () {
                return this._fontCSSClass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxBadgeComponent.prototype, "luxColor", {
            set: function (color) {
                var result = LuxUtil.getColorsByBgColorsEnum(color);
                this._backgroundCSSClass = result.backgroundCSSClass;
                this._fontCSSClass = result.fontCSSClass;
                if (!exports.LuxBackgroundColorsEnum[color]) {
                    this.luxColor = this.DEFAULT_BADGE_COLOR;
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxBadgeComponent.prototype.ngOnInit = function () { };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxBadgeComponent.prototype, "luxUppercase", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxBadgeComponent.prototype, "luxIconName", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxBadgeComponent.prototype, "luxColor", null);
        LuxBadgeComponent = __decorate([
            core.Component({
                selector: 'lux-badge',
                template: "<div\n  class=\"lux-badge lux-mt-1 lux-mb-1 lux-ml-1 lux-mr-1 lux-pt-1 lux-pb-1 lux-pl-3 lux-pr-3\"\n  [ngClass]=\"[backgroundCSSClass, fontCSSClass, luxUppercase ? 'lux-badge-uppercase' : '']\"\n  *ngIf=\"backgroundCSSClass\"\n>\n  <lux-icon [luxIconName]=\"luxIconName\" [luxIconSize]=\"ICON_SIZE\" luxMargin=\"0 8px 0 0\" *ngIf=\"luxIconName\"></lux-icon>\n  <ng-content select=\"lux-label\"></ng-content>\n</div>\n",
                styles: [".lux-badge{border-radius:8px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex:initial;-ms-flex:initial;flex:initial}.lux-badge.lux-badge-uppercase ::ng-deep *{text-transform:uppercase}.lux-badge>lux-icon ::ng-deep *{padding:0!important}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxBadgeComponent);
        return LuxBadgeComponent;
    }());

    var LuxProgressComponent = /** @class */ (function () {
        function LuxProgressComponent() {
            this.DEFAULT_PROGRESS_COLOR = exports.LuxBackgroundColorsEnum.blue;
            this.isIE = false;
            this.animDurationCSS = '';
            this.typeCSS = '';
            this.luxValue = 0;
            // Nur für ProgressBar
            this.luxSize = 'medium';
            this.luxMode = 'indeterminate';
            this.luxType = 'Progressbar';
        }
        Object.defineProperty(LuxProgressComponent.prototype, "luxColor", {
            get: function () {
                return this._luxColor;
            },
            set: function (value) {
                this._luxColor = exports.LuxBackgroundColorsEnum[value] ? exports.LuxBackgroundColorsEnum[value] : this.DEFAULT_PROGRESS_COLOR;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxProgressComponent.prototype, "luxMode", {
            get: function () {
                if (this._luxMode !== 'determinate' && this._luxMode !== 'indeterminate') {
                    return 'indeterminate';
                }
                return this._luxMode;
            },
            set: function (mode) {
                this._luxMode = mode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxProgressComponent.prototype, "luxType", {
            get: function () {
                return this._luxType;
            },
            set: function (type) {
                this._luxType = type;
                if (this._luxType === 'Progressbar') {
                    this.typeCSS = 'lux-progress-bar';
                }
                else if (this._luxType === 'Spinner') {
                    this.typeCSS = 'lux-progress-spinner';
                }
                else {
                    this.luxType = 'Progressbar';
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxProgressComponent.prototype.ngOnInit = function () {
            this.isIE = LuxUtil.isIE();
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxProgressComponent.prototype, "luxValue", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxProgressComponent.prototype, "luxSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxProgressComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxProgressComponent.prototype, "luxColor", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxProgressComponent.prototype, "luxMode", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LuxProgressComponent.prototype, "luxType", null);
        LuxProgressComponent = __decorate([
            core.Component({
                selector: 'lux-progress',
                template: "<div [class]=\"animDurationCSS\" [ngSwitch]=\"luxType\" [ngClass]=\"['lux-progress-' + luxSize]\">\n  <ng-container *ngSwitchCase=\"'Progressbar'\">\n    <mat-progress-bar\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [ngClass]=\"[typeCSS, 'lux-bg-color-' + luxColor]\"\n      [mode]=\"luxMode\"\n      [value]=\"luxValue\"\n    >\n    </mat-progress-bar>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'Spinner'\">\n    <mat-progress-spinner\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [ngClass]=\"[typeCSS, 'lux-bg-color-' + luxColor]\"\n      [mode]=\"luxMode\"\n      [value]=\"luxValue\"\n      [class.lux-ie-dasharray]=\"isIE\"\n    >\n    </mat-progress-spinner>\n  </ng-container>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}.lux-ie-dasharray ::ng-deep .mat-progress-spinner>svg>circle{stroke-dasharray:200px!important}:host ::ng-deep .mat-progress-bar-fill:after,:host ::ng-deep .mat-progress-spinner>svg>circle{stroke:#0073b3;background:#0073b3}:host ::ng-deep .lux-progress-bar,:host ::ng-deep .lux-progress-spinner{-webkit-animation-duration:8s!important;animation-duration:8s!important}:host ::ng-deep .lux-progress-bar svg>circle,:host ::ng-deep .lux-progress-spinner svg>circle{-webkit-animation-duration:8s!important;animation-duration:8s!important}:host ::ng-deep .lux-progress-bar .mat-progress-bar-background,:host ::ng-deep .lux-progress-spinner .mat-progress-bar-background{-webkit-animation-duration:8s!important;animation-duration:8s!important}:host ::ng-deep .lux-progress-bar .mat-progress-bar-primary,:host ::ng-deep .lux-progress-bar .mat-progress-bar-primary:after,:host ::ng-deep .lux-progress-bar .mat-progress-bar-secondary,:host ::ng-deep .lux-progress-bar .mat-progress-bar-secondary:after,:host ::ng-deep .lux-progress-spinner .mat-progress-bar-primary,:host ::ng-deep .lux-progress-spinner .mat-progress-bar-primary:after,:host ::ng-deep .lux-progress-spinner .mat-progress-bar-secondary,:host ::ng-deep .lux-progress-spinner .mat-progress-bar-secondary:after{-webkit-animation-duration:8s!important;animation-duration:8s!important}mat-progress-spinner{background:0 0!important}.lux-progress-small ::ng-deep mat-progress-bar{height:6px}.lux-progress-small ::ng-deep mat-progress-spinner,.lux-progress-small ::ng-deep mat-progress-spinner>svg{height:24px!important;width:24px!important}.lux-progress-medium ::ng-deep mat-progress-bar{height:12px}.lux-progress-medium ::ng-deep mat-progress-spinner,.lux-progress-medium ::ng-deep mat-progress-spinner>svg{height:48px!important;width:48px!important}.lux-progress-large ::ng-deep mat-progress-bar{height:24px}.lux-progress-large ::ng-deep mat-progress-spinner,.lux-progress-large ::ng-deep mat-progress-spinner>svg{height:96px!important;width:96px!important}.lux-bg-color-red ::ng-deep .mat-progress-bar-primary:after,.lux-bg-color-red ::ng-deep .mat-progress-bar-secondary:after{background:#b01211}.lux-bg-color-green ::ng-deep .mat-progress-bar-primary:after,.lux-bg-color-green ::ng-deep .mat-progress-bar-secondary:after{background:#95bc4c}.lux-bg-color-yellow ::ng-deep .mat-progress-bar-primary:after,.lux-bg-color-yellow ::ng-deep .mat-progress-bar-secondary:after{background:#ebc000}.lux-bg-color-blue ::ng-deep .mat-progress-bar-primary:after,.lux-bg-color-blue ::ng-deep .mat-progress-bar-secondary:after{background:#335c85}.lux-bg-color-gray ::ng-deep .mat-progress-bar-primary:after,.lux-bg-color-gray ::ng-deep .mat-progress-bar-secondary:after{background:#c8c8c8}.lux-bg-color-orange ::ng-deep .mat-progress-bar-primary:after,.lux-bg-color-orange ::ng-deep .mat-progress-bar-secondary:after{background:#ec9c1b}.lux-bg-color-brown ::ng-deep .mat-progress-bar-primary:after,.lux-bg-color-brown ::ng-deep .mat-progress-bar-secondary:after{background:#783f04}mat-progress-spinner.lux-bg-color-red ::ng-deep circle{stroke:#b01211}mat-progress-spinner.lux-bg-color-green ::ng-deep circle{stroke:#95bc4c}mat-progress-spinner.lux-bg-color-yellow ::ng-deep circle{stroke:#ebc000}mat-progress-spinner.lux-bg-color-blue ::ng-deep circle{stroke:#335c85}mat-progress-spinner.lux-bg-color-gray ::ng-deep circle{stroke:#c8c8c8}mat-progress-spinner.lux-bg-color-orange ::ng-deep circle{stroke:#ec9c1b}mat-progress-spinner.lux-bg-color-brown ::ng-deep circle{stroke:#783f04}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxProgressComponent);
        return LuxProgressComponent;
    }());

    /**
     * Diese Ableitung berücksichtigt bei der Sortierung Sonderzeichen (z.B. öäüßé,...)
     * und ignoriert die Groß- und Kleinschreibung.
     */
    var LuxTableDataSource = /** @class */ (function (_super) {
        __extends(LuxTableDataSource, _super);
        function LuxTableDataSource() {
            var _this_1 = _super !== null && _super.apply(this, arguments) || this;
            _this_1.selectedEntries = new Set();
            return _this_1;
        }
        /**
         * Diese Methode liefert eine sortierte Kopie des Datenarrays zurück.
         * Die Sortierung berücksichtig ist nicht Case-Sensitive und berücksichtig
         * Sonderzeichen (z.B. öäüßé,...)
         */
        LuxTableDataSource.prototype._orderData = function (data) {
            var _this_1 = this;
            var _this = this;
            if (!this.sort || !this.sort.active || this.sort.direction === '') {
                return data;
            }
            var active = this.sort.active;
            var direction = this.sort.direction;
            if (active === 'multiSelect') {
                // muss checken welche in dem sorted array sind und alle anderen darunter
                var selected_1 = data.filter(function (value) { return _this_1.selectedEntries.has(value); });
                var notSelected = data.filter(function (value) { return !selected_1.some(function (selectedValue) { return selectedValue === value; }); });
                if (direction === 'asc') {
                    return __spread(selected_1, notSelected);
                }
                else if (direction === 'desc') {
                    return __spread(notSelected, selected_1);
                }
                else {
                    return data.slice();
                }
            }
            return data.slice().sort(function (a, b) {
                var valueA = _this.sortingDataAccessor(a, active);
                var valueB = _this.sortingDataAccessor(b, active);
                if (!valueA) {
                    valueA = '';
                }
                if (!valueB) {
                    valueB = '';
                }
                if (typeof valueA === 'number' && typeof valueB === 'string') {
                    valueA = '' + valueA;
                }
                if (typeof valueA === 'string' && typeof valueB === 'number') {
                    valueB = '' + valueB;
                }
                if (typeof valueA === 'string' && typeof valueB === 'string') {
                    var stringA = valueA.toLocaleLowerCase();
                    var stringB = valueB.toLocaleLowerCase();
                    return stringA.localeCompare(stringB) * (direction === 'asc' ? 1 : -1);
                }
                return (valueA < valueB ? -1 : 1) * (direction === 'asc' ? 1 : -1);
            });
        };
        /**
         * Override update paginator method
         * to ensure total unfiltered element count is consistent with the http result
         */
        LuxTableDataSource.prototype._updatePaginator = function (filteredDataLength) {
            if (this.filter === '') {
                _super.prototype._updatePaginator.call(this, this.totalElements);
            }
            else {
                _super.prototype._updatePaginator.call(this, filteredDataLength);
            }
        };
        return LuxTableDataSource;
    }(material.MatTableDataSource));

    var LuxPaginatorIntl = /** @class */ (function (_super) {
        __extends(LuxPaginatorIntl, _super);
        function LuxPaginatorIntl() {
            var _this = _super.call(this) || this;
            // Original Properties überschreiben
            _this.itemsPerPageLabel = 'Elemente pro Seite';
            _this.nextPageLabel = 'Nächste Seite';
            _this.previousPageLabel = 'Vorherige Seite';
            _this.lastPageLabel = 'Letzte Seite';
            _this.firstPageLabel = 'Erste Seite';
            _this.getRangeLabel = _this.customRangeLabel;
            return _this;
        }
        /**
         * Deutsche Fassunng des Material-Paginators
         * @param page
         * @param pageSize
         * @param length
         */
        LuxPaginatorIntl.prototype.customRangeLabel = function (page, pageSize, length) {
            if (length === 0 || pageSize === 0) {
                return '0 von ' + length;
            }
            length = Math.max(length, 0);
            var startIndex = page * pageSize;
            // If the start index exceeds the list length, do not try and fix the end index to the end.
            var endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
            return startIndex + 1 + ' - ' + endIndex + ' von ' + length;
        };
        return LuxPaginatorIntl;
    }(material.MatPaginatorIntl));

    var LuxTableColumnHeaderComponent = /** @class */ (function () {
        function LuxTableColumnHeaderComponent() {
        }
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxTableColumnHeaderComponent.prototype, "tempRef", void 0);
        LuxTableColumnHeaderComponent = __decorate([
            core.Component({
                selector: 'lux-table-column-header',
                template: ''
            })
        ], LuxTableColumnHeaderComponent);
        return LuxTableColumnHeaderComponent;
    }());

    var LuxTableColumnContentComponent = /** @class */ (function () {
        function LuxTableColumnContentComponent() {
        }
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxTableColumnContentComponent.prototype, "tempRef", void 0);
        LuxTableColumnContentComponent = __decorate([
            core.Component({
                selector: 'lux-table-column-content',
                template: ''
            })
        ], LuxTableColumnContentComponent);
        return LuxTableColumnContentComponent;
    }());

    var LuxTableColumnFooterComponent = /** @class */ (function () {
        function LuxTableColumnFooterComponent() {
        }
        __decorate([
            core.ContentChild(core.TemplateRef, { static: false }),
            __metadata("design:type", core.TemplateRef)
        ], LuxTableColumnFooterComponent.prototype, "tempRef", void 0);
        LuxTableColumnFooterComponent = __decorate([
            core.Component({
                selector: 'lux-table-column-footer',
                template: ''
            })
        ], LuxTableColumnFooterComponent);
        return LuxTableColumnFooterComponent;
    }());

    var LuxTableColumnComponent = /** @class */ (function () {
        function LuxTableColumnComponent() {
            this.change$ = new rxjs.Subject();
            this.luxColumnDef = undefined;
            this.luxSortable = false;
            this.luxSticky = false;
        }
        LuxTableColumnComponent.prototype.ngOnInit = function () { };
        LuxTableColumnComponent.prototype.ngOnChanges = function (simpleChanges) {
            this.change$.next();
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTableColumnComponent.prototype, "luxColumnDef", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTableColumnComponent.prototype, "luxSortable", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTableColumnComponent.prototype, "luxSticky", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTableColumnComponent.prototype, "luxResponsiveBehaviour", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxTableColumnComponent.prototype, "luxResponsiveAt", void 0);
        __decorate([
            core.ContentChild(LuxTableColumnHeaderComponent, { static: false }),
            __metadata("design:type", LuxTableColumnHeaderComponent)
        ], LuxTableColumnComponent.prototype, "header", void 0);
        __decorate([
            core.ContentChild(LuxTableColumnContentComponent, { static: false }),
            __metadata("design:type", LuxTableColumnContentComponent)
        ], LuxTableColumnComponent.prototype, "content", void 0);
        __decorate([
            core.ContentChild(LuxTableColumnFooterComponent, { static: false }),
            __metadata("design:type", LuxTableColumnFooterComponent)
        ], LuxTableColumnComponent.prototype, "footer", void 0);
        LuxTableColumnComponent = __decorate([
            core.Component({
                selector: 'lux-table-column',
                template: '<ng-content select="lux-table-column-header"></ng-content>' +
                    '<ng-content select="lux-table-column-content"></ng-content>' +
                    '<ng-content select="lux-table-column-footer"></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxTableColumnComponent);
        return LuxTableColumnComponent;
    }());

    var LuxTableComponent = /** @class */ (function () {
        // endregion
        function LuxTableComponent(queryObserver, luxConsole, liveAnnouncer) {
            var _this = this;
            this.queryObserver = queryObserver;
            this.luxConsole = luxConsole;
            this.liveAnnouncer = liveAnnouncer;
            this._luxClasses = [];
            this._luxShowPagination = false;
            this._dataColumnDefs = [];
            this._luxShowFilter = false;
            this._dataSource = new LuxTableDataSource([]);
            this._luxPickValue = function (o) { return o; };
            this._luxCompareWith = function (o1, o2) { return o1 === o2; };
            this.httpRequestConf = {};
            this.columnSubscriptions = [];
            this.filtered$ = new rxjs.Subject();
            this.currentCustomClasses = [];
            this.isIE = false;
            this.movedTableColumns = [];
            this.luxColWidthsPercent = [];
            this.luxFilterText = 'Filter';
            this.luxNoDataText = 'Keine Daten gefunden.';
            this.luxPageSize = 10;
            this.luxPageSizeOptions = [5, 10, 25, 50];
            this.luxMinWidthPx = -1;
            this.luxAutoPaginate = true;
            this.luxHideBorders = false;
            this.luxSelectedChange = new core.EventEmitter();
            this._luxSelected = new Set();
            /**
             * Eigene Implementierung der Filterung für diese Tabelle.
             * Iteriert über die Values des einzelnen Objektes und prüft dann ob der Filter-Wert irgendwo vorkommt.
             * @param data
             * @param filter
             */
            this.customFilterPredicate = function (data, filter) {
                if (filter === void 0) { filter = ''; }
                for (var property in data) {
                    if (data.hasOwnProperty(property)) {
                        var dataEntry = data[property];
                        if (LuxUtil.isDate(dataEntry)) {
                            if (dataEntry
                                .toLocaleString()
                                .toLowerCase()
                                .indexOf(filter) > -1) {
                                return true;
                            }
                        }
                        else {
                            if ((dataEntry + '').toLowerCase().indexOf(filter) > -1) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            };
            // Datasource um eigene Filter-Funktionalitaet ergaenzen
            this.dataSource.filterPredicate = this.customFilterPredicate;
            this.isIE = LuxUtil.isIEorEdge();
            this.mediaQuerySubscription = this.queryObserver.getMediaQueryChangedAsObservable().subscribe(function (query) {
                _this.mediaQuery = query;
                _this.updateColumnsByMediaQuery();
            });
        }
        LuxTableComponent_1 = LuxTableComponent;
        Object.defineProperty(LuxTableComponent.prototype, "luxClasses", {
            // region Setter/Getters
            get: function () {
                return this._luxClasses;
            },
            set: function (classes) {
                if (classes && !Array.isArray(classes)) {
                    classes = [classes];
                }
                this._luxClasses = classes;
                this.insertCustomCSSClasses();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "luxShowPagination", {
            get: function () {
                return this._luxShowPagination;
            },
            set: function (show) {
                var _this = this;
                this._luxShowPagination = show;
                setTimeout(function () {
                    _this.handlePagination();
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "luxShowFilter", {
            get: function () {
                return this._luxShowFilter;
            },
            set: function (show) {
                this._luxShowFilter = show;
                this.handleFilter();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "dataColumnDefs", {
            get: function () {
                return this._dataColumnDefs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "dataSource", {
            get: function () {
                return this._dataSource;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "luxData", {
            get: function () {
                return this.dataSource.data;
            },
            set: function (data) {
                var _this = this;
                data = data ? data : [];
                this.dataSource.data = data;
                if (this.dataSource) {
                    setTimeout(function () {
                        _this.updateDataSourceAttributes(data);
                        _this.handleSort();
                        _this.insertCustomCSSClasses();
                        _this.updateColumnsByMediaQuery();
                        _this.calculateProportions();
                        _this.updateSelection();
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "luxMultiSelect", {
            get: function () {
                return this._luxMultiSelect;
            },
            set: function (multiSelect) {
                var _this = this;
                this._luxMultiSelect = multiSelect;
                if (this.luxMultiSelect) {
                    this.luxSelected.clear();
                    this._dataColumnDefs.unshift('multiSelect');
                }
                else {
                    this._dataColumnDefs = this._dataColumnDefs.filter(function (col) { return col !== 'multiSelect'; });
                }
                setTimeout(function () {
                    _this.calculateProportions();
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "luxSelected", {
            get: function () {
                return this._luxSelected;
            },
            /**
             * Die Auswahl der Selektierten Elemente ist eigentlich ein Set,
             * nimmt aber Arrays von Außen entgegen (zur Vereinfachung).
             * @param selected
             */
            set: function (selected) {
                var _this = this;
                this.luxSelected.clear();
                if (selected) {
                    selected.forEach(function (entry) {
                        _this.luxSelected.add(entry);
                    });
                }
                if (this.luxData && this.luxData.length > 0) {
                    this.updateSelection();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "luxPickValue", {
            get: function () {
                return this._luxPickValue;
            },
            // Funktion, um den zu vergleichenden Wert aus den einzelnen Objekten zu ziehen.
            // Standardmäßig einfach das Objekt zurückgeben.
            set: function (pickFn) {
                this._luxPickValue = pickFn ? pickFn : function (o) { return o; };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxTableComponent.prototype, "luxCompareWith", {
            get: function () {
                return this._luxCompareWith;
            },
            // Vergleichsfunktion; vergleicht standardmäßig einfach die Referenzen der beiden Objekte.
            set: function (compareFn) {
                this._luxCompareWith = compareFn ? compareFn : function (o1, o2) { return o1 === o2; };
            },
            enumerable: true,
            configurable: true
        });
        LuxTableComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                if (_this.luxHttpDAO) {
                    _this.loadHttpDAOData();
                }
                else {
                    _this.updateDataSourceAttributes(_this.luxData);
                    _this.handleSort();
                    _this.insertCustomCSSClasses();
                }
            });
        };
        LuxTableComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.tableColumns) {
                // Für den Fall das Spalten wegfallen/dazu kommen
                this.tableColumnsChangedSubscription = this.tableColumns.changes.subscribe(function () {
                    _this.updateColumnsByMediaQuery();
                    _this.updateColumnSubscriptions();
                });
                // Für den Fall das sich Änderungen innerhalb der Spalten ergeben
                this.updateColumnSubscriptions();
                // Nach dem Init sollten einmal die Spalten aktualisiert werden
                setTimeout(function () {
                    _this.updateColumnsByMediaQuery();
                });
            }
            if (this.luxShowPagination) {
                this.handlePagination();
            }
        };
        LuxTableComponent.prototype.ngDoCheck = function () {
            if (this.tableContainerElement.nativeElement.offsetWidth !== this.previousWidth ||
                this.tableContainerElement.nativeElement.offsetHeight !== this.previousHeight) {
                this.previousWidth = this.tableContainerElement.nativeElement.offsetWidth;
                this.previousHeight = this.tableContainerElement.nativeElement.offsetHeight;
                this.calculateProportions();
            }
        };
        LuxTableComponent.prototype.ngOnDestroy = function () {
            // Subscriptions auflösen
            this.columnSubscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
            if (this.httpDaoSubscription) {
                this.httpDaoSubscription.unsubscribe();
            }
            if (this.filterChangedSubscription) {
                this.filterChangedSubscription.unsubscribe();
            }
            if (this.tableColumnsChangedSubscription) {
                this.tableColumnsChangedSubscription.unsubscribe();
            }
            if (this.sortChangedSubscription) {
                this.sortChangedSubscription.unsubscribe();
            }
            if (this.paginatorPageSubscription) {
                this.paginatorPageSubscription.unsubscribe();
            }
            if (this.selectedSubscription) {
                this.selectedSubscription.unsubscribe();
            }
        };
        /**
         * Zieht sich die aktuellen CSS-Klassen aus den zugewiesenen
         * CSS-Klassen.
         * @param row
         * @returns string
         */
        LuxTableComponent.prototype.getCustomClassesForIndex = function (row) {
            var customClasses = this.currentCustomClasses.find(function (value) { return value.entry === row; });
            return customClasses ? customClasses.classes : '';
        };
        /**
         * TrackBy-Funktion um die Tabelle etwas schneller zu machen.
         * @param index
         * @param item
         */
        LuxTableComponent.prototype.trackFn = function (index, item) {
            return index;
        };
        /**
         * Wird beim Klick auf eine Row aufgerufen und handelt das Sichern und Entfernen von
         * selektierten Einträgen.
         * @param entry
         */
        LuxTableComponent.prototype.changeSelectedEntry = function (entry) {
            if (this.luxMultiSelect) {
                if (this.luxSelected.has(entry)) {
                    this.luxSelected.delete(entry);
                }
                else {
                    this.luxSelected.add(entry);
                }
            }
            else {
                if (this.luxSelected.has(entry)) {
                    // Wenn der selektierte Eintrag erneut angeklickt wird,
                    // wird die Selektion entfernt.
                    this.luxSelected.clear();
                }
                else {
                    this.luxSelected.clear();
                    this.luxSelected.add(entry);
                }
            }
            this.luxSelectedChange.next(Array.from(this.luxSelected));
            this.dataSource.selectedEntries = this.luxSelected;
            this.allSelected = this.checkFilteredAllSelected();
        };
        /**
         * Selektiert/Deselektiert alle Einträge in dieser Tabelle.
         *
         * Voraussetzung dafür ist, das Multiselect aktiv ist und keine Http-Table vorliegt.
         */
        LuxTableComponent.prototype.changeSelectedEntries = function () {
            var _this = this;
            if (this.luxMultiSelect && !this.luxHttpDAO) {
                if (this.checkFilteredAllSelected()) {
                    this.dataSource.filteredData.forEach(function (dataEntry) { return _this.luxSelected.delete(dataEntry); });
                }
                else {
                    this.dataSource.filteredData.forEach(function (dataEntry) { return _this.luxSelected.add(dataEntry); });
                }
                this.luxSelectedChange.next(Array.from(this.luxSelected));
                this.dataSource.selectedEntries = this.luxSelected;
                this.allSelected = this.checkFilteredAllSelected();
            }
        };
        /**
         * Prüft ob die aktuell angezeigten Einträge alle selektiert sind oder nicht.
         */
        LuxTableComponent.prototype.checkFilteredAllSelected = function () {
            var _this = this;
            var result = true;
            if (this.luxSelected.size === 0) {
                result = false;
            }
            else {
                // Prüfen ob die gefilterten Daten selected sind
                this.dataSource.filteredData.forEach(function (dataEntry) {
                    if (!_this.luxSelected.has(dataEntry)) {
                        result = false;
                    }
                });
            }
            return result;
        };
        /**
         * Gibt zurück, ob irgendein Footer-Element für diese Tabelle aktuell sichtbar ist.
         */
        LuxTableComponent.prototype.anyFootersAvailable = function () {
            return this.luxMultiSelect || !!this.tableColumns.find(function (column) { return !!column.footer; });
        };
        /**
         * Aktualisiert die DataSource und evtl. Subscriptions sowie die CustomCSS-Classes
         * nach einer Änderung.
         */
        LuxTableComponent.prototype.updateDataSourceAttributes = function (data) {
            if (!this.luxHttpDAO && this.luxAutoPaginate && data && data.length > LuxTableComponent_1.AUTO_PAGINATION_START) {
                this.luxShowPagination = true;
            }
            if (!this.luxHttpDAO) {
                if (this.luxShowPagination) {
                    this.handlePagination();
                }
            }
            if (!this.luxHttpDAO) {
                this.dataSource.sort = this.sort;
            }
            if (!this.luxHttpDAO) {
                this.dataSource.totalElements = this.dataSource.data ? this.dataSource.data.length : 0;
            }
        };
        /**
         * Prueft anhand der mitgegebenen Callbacks die CSS-Klassen
         * fuer die einzelnen Rows.
         */
        LuxTableComponent.prototype.insertCustomCSSClasses = function () {
            var _this = this;
            if (this.luxClasses && this.dataSource.data) {
                this.currentCustomClasses = [];
                this.dataSource.data.forEach(function (entry, i) {
                    var classes = '';
                    _this.luxClasses.forEach(function (cssClass) {
                        if (cssClass.check(entry)) {
                            classes += cssClass.class + ' ';
                        }
                    });
                    _this.currentCustomClasses.push({ entry: entry, classes: classes });
                });
            }
        };
        /**
         * Gibt das Aria-Label für die Sortierung der Spalten-Überschrift zurück.
         * @param tableColumnDef
         */
        LuxTableComponent.prototype.getAriaSortingLabel = function (tableColumnDef) {
            if (this.sort.active === tableColumnDef) {
                if (this.sort.direction === 'asc') {
                    return 'aufsteigend sortiert';
                }
                if (this.sort.direction === 'desc') {
                    return 'absteigend sortiert';
                }
            }
            return 'nicht sortiert';
        };
        /**
         * Gibt über den liveAnnouncer eine Nachricht aus, dass sich die Sortierung einer Spalte geändert hat.
         * @param $event
         */
        LuxTableComponent.prototype.announceSortChange = function ($event) {
            var index = this.tableColumns
                .toArray()
                .findIndex(function (tableColumn) { return $event.active === tableColumn.luxColumnDef; });
            var columnDef = index > -1 ? this.tableColumns.toArray()[index].luxColumnDef : null;
            if (columnDef === null) {
                columnDef = $event.active === 'multiSelect' ? 'multiSelect' : null;
            }
            if (columnDef !== null) {
                var directionDescription = void 0;
                switch ($event.direction) {
                    case 'desc':
                        directionDescription = 'absteigend';
                        break;
                    case 'asc':
                        directionDescription = 'aufsteigend';
                        break;
                    case '':
                        directionDescription = 'nicht mehr';
                        break;
                }
                this.liveAnnouncer.announce("Spalte " + columnDef + " sortiert nun " + directionDescription, 'assertive');
            }
        };
        /**
         * Aktualisiert die momentan angezeigten Spalten anhand der für sie definierten
         * Responsive-Queries und Verhaltensweisen.
         */
        LuxTableComponent.prototype.updateColumnsByMediaQuery = function () {
            var _this = this;
            if (!this.tableColumns) {
                return;
            }
            this._dataColumnDefs = [];
            // wenn Multiselect, dann benötigen wir hier noch eine Spalte mehr
            if (this.luxMultiSelect) {
                this._dataColumnDefs.push('multiSelect');
            }
            this.tableColumns.forEach(function (column) { return _this._dataColumnDefs.push(column.luxColumnDef); });
            this.movedTableColumns = [];
            // Zuerst die auszublendenden Spalten durchgehen
            this.tableColumns.forEach(function (tableColumn) {
                if ((tableColumn.luxResponsiveAt && !tableColumn.luxResponsiveBehaviour) ||
                    (!tableColumn.luxResponsiveAt && tableColumn.luxResponsiveBehaviour)) {
                    _this.luxConsole.error("Achtung! Die Column '" + tableColumn.luxColumnDef + "' hat entweder keine Media-Queries " +
                        "oder kein Responsive-Verhalten zugewiesen bekommen.");
                }
                else if (_this.doesResponsiveAtApply(tableColumn.luxResponsiveAt)) {
                    // Schauen, ob eine Spalte angegeben wurde, in welche sich diese hier verschieben kann
                    if (_this._dataColumnDefs.find(function (column) { return column === tableColumn.luxResponsiveBehaviour; })) {
                        // Wenn ja, die Spalte merken und vorerst ausblenden
                        _this.movedTableColumns.push(tableColumn);
                    }
                    _this._dataColumnDefs = _this.dataColumnDefs.filter(function (dataColumn) { return dataColumn !== tableColumn.luxColumnDef; });
                }
            });
        };
        /**
         * Prüft ob die aktuelle MediaQuery mit der übergebenen MediaQuery/den übergebenen MediaQueries übereinstimmt.
         * @param responsiveAt
         */
        LuxTableComponent.prototype.doesResponsiveAtApply = function (responsiveAt) {
            var e_1, _a;
            var mediaQueries = [];
            if (!Array.isArray(responsiveAt)) {
                mediaQueries.push(responsiveAt);
            }
            else {
                mediaQueries.push.apply(mediaQueries, __spread(responsiveAt));
            }
            try {
                for (var mediaQueries_1 = __values(mediaQueries), mediaQueries_1_1 = mediaQueries_1.next(); !mediaQueries_1_1.done; mediaQueries_1_1 = mediaQueries_1.next()) {
                    var mediaQuery = mediaQueries_1_1.value;
                    if (mediaQuery === this.mediaQuery) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mediaQueries_1_1 && !mediaQueries_1_1.done && (_a = mediaQueries_1.return)) _a.call(mediaQueries_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        };
        /**
         * Durchläuft die aktuellen TableColumns und hört auf Changes in den Properties
         * der Columns und merkt sich die Subscriptions.
         */
        LuxTableComponent.prototype.updateColumnSubscriptions = function () {
            var _this = this;
            this.columnSubscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
            this.columnSubscriptions = [];
            this.tableColumns.forEach(function (column) {
                _this.columnSubscriptions.push(column.change$.subscribe(function () {
                    _this.updateColumnsByMediaQuery();
                }));
            });
        };
        /**
         * Triggert über das DAO die Abfrage nach neuen Daten.
         * Sendet dabei das Request-Conf Objekt, welches Informationen bzgl.
         * page, pageSize, filter, sort, order mitgibt.
         * @param filteredBy?
         */
        LuxTableComponent.prototype.loadHttpDAOData = function (filteredBy) {
            var _this = this;
            this.isLoadingResults = true;
            this.luxHttpDAO
                .loadData(this.httpRequestConf)
                .pipe(operators.tap(function (data) {
                _this.isLoadingResults = false;
                // Wenn ein Filter-Text gegeben ist, sich dieser aber vom Aktuellen unterscheiden, brechen wir die Datenaktualisierung ab
                if (filteredBy && _this.httpRequestConf.filter !== filteredBy) {
                    return;
                }
                if (data) {
                    _this.dataSource.totalElements = data.totalCount;
                    _this.luxData = data.items;
                    if (_this.luxAutoPaginate && data.totalCount > LuxTableComponent_1.AUTO_PAGINATION_START) {
                        _this.luxShowPagination = true;
                    }
                }
                else {
                    _this.dataSource.totalElements = 0;
                    _this.luxData = [];
                }
            }), operators.catchError(function (error) {
                _this.isLoadingResults = false;
                return rxjs.of(error);
            }))
                .subscribe();
        };
        /**
         * Wird aufgerufen wenn der Sort neu zur DataSource hinzugefügt werden soll (Data wurde neu gesetzt).
         * Resettet die Pagination und aktualisiert wenn es sich um eine asynchrone Tabelle handelt die
         * requestConf.
         */
        LuxTableComponent.prototype.handleSort = function () {
            var _this = this;
            if (this.sort) {
                if (this.sortChangedSubscription) {
                    this.sortChangedSubscription.unsubscribe();
                }
                this.sortChangedSubscription = this.sort.sortChange.subscribe(function (sort) {
                    _this.paginator.pageIndex = 0;
                    if (_this.luxHttpDAO) {
                        _this.httpRequestConf.page = _this.paginator.pageIndex;
                        _this.httpRequestConf.sort = sort.active;
                        _this.httpRequestConf.order = sort.direction;
                        _this.loadHttpDAOData();
                    }
                });
            }
            this.calculateProportions();
        };
        /**
         * Wird nach dem set von luxShowFilter aufgerufen und fängt neue Filter-Operationen ab und
         * aktualisiert dementsprechend die Daten.
         */
        LuxTableComponent.prototype.handleFilter = function () {
            var _this = this;
            if (this.filterChangedSubscription) {
                this.filterChangedSubscription.unsubscribe();
            }
            if (this.luxShowFilter) {
                this.filterChangedSubscription = this.filtered$
                    .asObservable()
                    .pipe(operators.tap(function () { return (_this.isLoadingResults = true); }), operators.debounceTime(500), operators.distinctUntilChanged(function (x, y) {
                    if (x === y) {
                        _this.isLoadingResults = false;
                    }
                    return x === y;
                }))
                    .subscribe(function (filterValue) {
                    filterValue = filterValue.trim();
                    filterValue = filterValue.toLocaleLowerCase();
                    _this.paginator.pageIndex = 0;
                    _this.isLoadingResults = false;
                    if (!_this.luxHttpDAO) {
                        _this.dataSource.filter = filterValue;
                    }
                    if (_this.luxHttpDAO) {
                        _this.httpRequestConf.filter = filterValue;
                        _this.loadHttpDAOData(filterValue);
                    }
                });
            }
            this.calculateProportions();
        };
        /**
         * Wird nach dem set von luxShowPagination aufgerufen und setzt wenn es sich hier um
         * eine asynchrone Tabelle handelt eine Subscription um Pagination-Änderungen zu erhalten.
         */
        LuxTableComponent.prototype.handlePagination = function () {
            var _this = this;
            if (this.luxShowPagination) {
                if (this.luxHttpDAO) {
                    if (this.paginatorPageSubscription) {
                        this.paginatorPageSubscription.unsubscribe();
                    }
                    this.paginatorPageSubscription = this.paginator.page.subscribe(function () {
                        _this.httpRequestConf.page = _this.paginator.pageIndex;
                        _this.httpRequestConf.pageSize = _this.paginator.pageSize;
                        _this.loadHttpDAOData();
                    });
                    this.httpRequestConf.page = this.paginator.pageIndex;
                    this.httpRequestConf.pageSize = this.paginator.pageSize;
                }
                if (!this.luxHttpDAO) {
                    this.dataSource.paginator = this.paginator;
                }
            }
            else {
                this.dataSource.paginator = null;
            }
            this.calculateProportions();
        };
        /**
         * Erzeugt einen neuen String für die Höhenberechnung der Tabelle und setzt die Minimalbreite für die Tabelle
         * (wenn möglich).
         */
        LuxTableComponent.prototype.calculateProportions = function () {
            var _this = this;
            setTimeout(function () {
                var filter = _this.filterElement ? _this.filterElement.nativeElement.offsetHeight : 0;
                var pagination = _this.paginatorElement ? _this.paginatorElement.nativeElement.scrollHeight : 0;
                var temp = 'calc(100% - ' + pagination + 'px' + ' - ' + filter + 'px)';
                if (temp !== _this.tableHeightCSSCalc) {
                    _this.tableHeightCSSCalc = temp;
                }
                _this.tableMinWidth = _this.luxMinWidthPx > -1 ? _this.luxMinWidthPx + 'px' : 'unset';
            });
        };
        /**
         * Aktualisiert die selectedEntries dieser Component anhand der aktuell gesetzten luxSelected-Elemente.
         *
         * Dabei werden die einzelnen Elemente zuerst mithilfe der luxCompareWith- und luxPickValue-Functions miteinander
         * verglichen.
         */
        LuxTableComponent.prototype.updateSelection = function () {
            var _this = this;
            // Prüfen ob selected gesetzt ist
            if (this.luxSelected.size > 0) {
                // Die selected-Einträge durchgehen und schauen ob diese im data-Block enthalten sind
                var foundEntries_1 = [];
                this.luxSelected.forEach(function (entry) {
                    var newEntry = _this.dataSource.data.find(function (dataEntry) {
                        return _this.luxCompareWith(_this.luxPickValue(entry), _this.luxPickValue(dataEntry));
                    });
                    // Merkt sich die Entry wenn sie noch nicht in der Selected-Liste ist (wenn es sich um eine HTTP-Tabelle handelt)
                    if (newEntry && (!_this.luxHttpDAO || (_this.luxHttpDAO && !_this.luxSelected.has(newEntry)))) {
                        foundEntries_1.push(newEntry);
                        _this.luxSelected.delete(entry);
                    }
                });
                // Nur bei nicht-HTTP-Tabellen die Selektion einmal leeren
                if (!this.luxHttpDAO) {
                    this.luxSelected.clear();
                }
                foundEntries_1.forEach(function (entry) { return _this.luxSelected.add(entry); });
            }
            this.dataSource.selectedEntries = this.luxSelected;
            this.luxSelectedChange.next(Array.from(this.luxSelected));
            this.allSelected = this.checkFilteredAllSelected();
        };
        var LuxTableComponent_1;
        LuxTableComponent.AUTO_PAGINATION_START = 100; // 100 Elemente bis automatisch die Pagination aktiviert wird
        LuxTableComponent.ctorParameters = function () { return [
            { type: LuxMediaQueryObserverService },
            { type: LuxConsoleService },
            { type: a11y.LiveAnnouncer }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], LuxTableComponent.prototype, "luxColWidthsPercent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTableComponent.prototype, "luxFilterText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxTableComponent.prototype, "luxNoDataText", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTableComponent.prototype, "luxPageSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxTableComponent.prototype, "luxPageSizeOptions", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxTableComponent.prototype, "luxHttpDAO", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxTableComponent.prototype, "luxMinWidthPx", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTableComponent.prototype, "luxAutoPaginate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxTableComponent.prototype, "luxHideBorders", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxTableComponent.prototype, "luxSelectedChange", void 0);
        __decorate([
            core.ViewChild(material.MatPaginator, { static: true }),
            __metadata("design:type", material.MatPaginator)
        ], LuxTableComponent.prototype, "paginator", void 0);
        __decorate([
            core.ViewChild(material.MatSort, { static: true }),
            __metadata("design:type", material.MatSort)
        ], LuxTableComponent.prototype, "sort", void 0);
        __decorate([
            core.ViewChild('paginator', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxTableComponent.prototype, "paginatorElement", void 0);
        __decorate([
            core.ViewChild('filter', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxTableComponent.prototype, "filterElement", void 0);
        __decorate([
            core.ViewChild('tableContainer', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxTableComponent.prototype, "tableContainerElement", void 0);
        __decorate([
            core.ContentChildren(LuxTableColumnComponent),
            __metadata("design:type", core.QueryList)
        ], LuxTableComponent.prototype, "tableColumns", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxTableComponent.prototype, "luxClasses", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxTableComponent.prototype, "luxShowPagination", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxTableComponent.prototype, "luxShowFilter", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], LuxTableComponent.prototype, "luxData", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], LuxTableComponent.prototype, "luxMultiSelect", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Set),
            __metadata("design:paramtypes", [Set])
        ], LuxTableComponent.prototype, "luxSelected", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxTableComponent.prototype, "luxPickValue", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxTableComponent.prototype, "luxCompareWith", null);
        LuxTableComponent = LuxTableComponent_1 = __decorate([
            core.Component({
                selector: 'lux-table',
                template: "<div fxLayout=\"column\" fxFlex=\"0 0 100%\" class=\"lux-table\">\n  <!-- Progress f\u00FCr das Laden/Filtern von Daten -->\n  <div fxFlex=\"0 0 15px\">\n    <lux-progress\n      luxTagId=\"tableProgress\"\n      luxType=\"Progressbar\"\n      class=\"lux-mb-3\"\n      *ngIf=\"isLoadingResults\"\n    ></lux-progress>\n  </div>\n  <!-- Input-Feld f\u00FCr das Filtern der Datens\u00E4tze dieser Tabelle -->\n  <lux-input\n    class=\"lux-table-filter\"\n    [luxTagId]=\"luxFilterText\"\n    [luxLabel]=\"luxFilterText\"\n    (luxValueChange)=\"filtered$.next($event)\"\n    [ngClass]=\"{ 'lux-hide': !luxShowFilter }\"\n    #filter\n  >\n  </lux-input>\n  <!-- Die eigentliche Struktur der Tabelle -->\n  <div\n    [ngStyle]=\"{ height: tableHeightCSSCalc }\"\n    class=\"lux-table\"\n    [ngClass]=\"{ 'lux-block-pointer-events': isLoadingResults, 'lux-hide-borders': luxHideBorders }\"\n    #tableContainer\n  >\n    <!-- Overlay, welches bei der Anzeige des Ladebalkens die Interaktion mit der Tabelle unterbindet -->\n    <div class=\"lux-table-overlay\" [ngClass]=\"{ 'lux-table-overlay-active': isLoadingResults }\"></div>\n\n    <div class=\"lux-table-content\">\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        [ngClass]=\"{ 'lux-table-ie': isIE, 'lux-multiselect-table': luxMultiSelect }\"\n        [ngStyle]=\"{ 'min-width': tableMinWidth }\"\n        [trackBy]=\"trackFn\"\n        matSort\n        (matSortChange)=\"announceSortChange($event)\"\n        #table\n      >\n        <ng-container *ngIf=\"tableColumns\">\n          <!-- Zellen, welche nur bei Multiselect-Tabellen dargestellt werden und die Checkboxen + Counter beinhalten -->\n          <ng-container matColumnDef=\"multiSelect\" *ngIf=\"luxMultiSelect\">\n            <th\n              class=\"lux-multiselect-th\"\n              [luxAriaLabel]=\"'Spalte multiSelect ' + getAriaSortingLabel('multiSelect')\"\n              luxAriaLabelSelector=\"button\"\n              mat-header-cell\n              *matHeaderCellDef\n              mat-sort-header\n            >\n              <div fxLayout=\"column\">\n                <span class=\"lux-selected-count\"\n                  >{{ luxSelected.size }} {{ !luxHttpDAO ? '/ ' + dataSource.totalElements : '' }}</span\n                >\n              </div>\n            </th>\n            <td class=\"lux-multiselect-td\" mat-cell *matCellDef=\"let element; let i = index\">\n              <lux-checkbox\n                luxTagId=\"lux-table-multiselect-content-{{ i }}\"\n                class=\"lux-multiselect-toggle\"\n                luxTabIndex=\"-1\"\n                [luxApplyToChildren]=\"['input']\"\n                [luxAriaLabel]=\"'Reihe ' + i\"\n                luxAriaLabelSelector=\"input\"\n                [luxChecked]=\"luxSelected.has(element)\"\n              >\n              </lux-checkbox>\n            </td>\n            <td\n              class=\"lux-multiselect-tf\"\n              [ngClass]=\"{ 'lux-ignore-multiselect-tf': !!luxHttpDAO }\"\n              mat-footer-cell\n              *matFooterCellDef\n            >\n              <div\n                fxLayout=\"column\"\n                fxLayoutAlign=\"center\"\n                fxFill\n                class=\"lux-multiselect-toggle-all-wrapper\"\n                *ngIf=\"!luxHttpDAO\"\n              >\n                <lux-checkbox\n                  luxTagId=\"lux-table-multiselect-header\"\n                  class=\"lux-multiselect-toggle-all\"\n                  luxAriaLabel=\"Alle Eintr\u00E4ge\"\n                  luxAriaLabelSelector=\"input\"\n                  luxTabIndex=\"-1\"\n                  [luxApplyToChildren]=\"['input']\"\n                  [luxChecked]=\"allSelected\"\n                >\n                </lux-checkbox>\n              </div>\n            </td>\n          </ng-container>\n          <!-- Diese Zelle wird nur dargestellt wenn keine Daten/die dataSource.totalElements === 0 sind -->\n          <ng-container matColumnDef=\"noData\">\n            <th mat-header-cell *matHeaderCellDef [colSpan]=\"tableColumns.length\">\n              <span class=\"lux-no-data-text\">{{ luxNoDataText }}</span>\n            </th>\n          </ng-container>\n          <!-- Hier sind die eigentlichen Inhalts-Zellen -->\n          <ng-container *ngFor=\"let tableColumn of tableColumns.toArray(); let i = index\">\n            <ng-container\n              [matColumnDef]=\"tableColumn.luxColumnDef\"\n              [sticky]=\"i === 0 && tableColumn.luxSticky\"\n              [stickyEnd]=\"i === tableColumns.length - 1 && tableColumn.luxSticky\"\n            >\n              <th\n                [luxAriaLabel]=\"\n                  'Spalte ' + tableColumn.luxColumnDef + ' ' + getAriaSortingLabel(tableColumn.luxColumnDef)\n                \"\n                luxAriaLabelSelector=\"button\"\n                mat-header-cell\n                *matHeaderCellDef\n                mat-sort-header\n                [ngClass]=\"\n                  'lux-table-column-header-' +\n                  i +\n                  (!tableColumn.luxSortable ? ' lux-table-header-blocked' : '') +\n                  (!tableColumn.header ? ' lux-table-column-header-empty' : '')\n                \"\n                [ngStyle]=\"{\n                  width: luxColWidthsPercent && luxColWidthsPercent[i] ? luxColWidthsPercent[i] + '%' : 'unset'\n                }\"\n              >\n                <ng-container *ngTemplateOutlet=\"tableColumn.header?.tempRef\"></ng-container>\n              </th>\n\n              <!-- Hier enstehen die Zellen mit den Inhalten -->\n              <td\n                mat-cell\n                *matCellDef=\"let element\"\n                [ngStyle]=\"{\n                  width: luxColWidthsPercent && luxColWidthsPercent[i] ? luxColWidthsPercent[i] + '%' : 'unset'\n                }\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"tableColumn.content?.tempRef; context: { $implicit: element }\"\n                ></ng-container>\n\n                <!-- Hier werden die aufgrund von Responsive-Verhalten verschobenen Spalten innerhalb dieser Spalte dargestellt -->\n                <ng-container *ngFor=\"let movedTableColumn of movedTableColumns\">\n                  <ng-container *ngIf=\"movedTableColumn.luxResponsiveBehaviour === tableColumn.luxColumnDef\">\n                    <div class=\"lux-moved-header-title lux-label\">\n                      <ng-container *ngTemplateOutlet=\"movedTableColumn.header?.tempRef\"></ng-container>\n                    </div>\n                    <div>\n                      <ng-container\n                        *ngTemplateOutlet=\"movedTableColumn.content.tempRef; context: { $implicit: element }\"\n                      ></ng-container>\n                    </div>\n                  </ng-container>\n                </ng-container>\n              </td>\n              <td mat-footer-cell *matFooterCellDef>\n                <ng-container *ngTemplateOutlet=\"tableColumn.footer?.tempRef\"></ng-container>\n              </td>\n            </ng-container>\n          </ng-container>\n\n          <!-- Die Table-Row f\u00FCr die Header (standardm\u00E4\u00DFig sticky) -->\n          <tr mat-header-row *matHeaderRowDef=\"dataColumnDefs; sticky: true\"></tr>\n          <!-- Die Table-Row f\u00FCr die \"no-data\"-Anzeige -->\n          <tr\n            mat-header-row\n            *matHeaderRowDef=\"['noData']; sticky: true\"\n            class=\"lux-table-header-no-data\"\n            [ngClass]=\"{ 'lux-display-none': dataSource.totalElements > 0 && dataSource.filteredData.length > 0 }\"\n          ></tr>\n          <!-- Die Table-Rows f\u00FCr alle Inhalts-Spalten -->\n          <tr\n            mat-row\n            *matRowDef=\"let rowData; columns: dataColumnDefs; let i = index\"\n            class=\"lux-row {{ getCustomClassesForIndex(rowData) }}\"\n            tabindex=\"0\"\n            [ngClass]=\"{ 'lux-multiselect-field': luxMultiSelect, 'lux-row-selected': luxSelected.has(rowData) }\"\n            (click)=\"changeSelectedEntry(rowData)\"\n            (keydown.space)=\"changeSelectedEntry(rowData)\"\n            (keydown.enter)=\"changeSelectedEntry(rowData)\"\n          ></tr>\n          <!-- Die Table-Row f\u00FCr den Footer dieser Tabelle -->\n          <tr\n            mat-footer-row\n            *matFooterRowDef=\"dataColumnDefs; sticky: true\"\n            ngClass=\"lux-footer-row\"\n            [ngClass]=\"{\n              'lux-display-none': !anyFootersAvailable(),\n              'lux-multiselect-field': luxMultiSelect && !luxHttpDAO\n            }\"\n            tabindex=\"0\"\n            (click)=\"changeSelectedEntries()\"\n            (keydown.space)=\"changeSelectedEntries()\"\n            (keydown.enter)=\"changeSelectedEntries()\"\n          ></tr>\n        </ng-container>\n      </table>\n    </div>\n  </div>\n  <mat-paginator\n    #paginator\n    [length]=\"dataSource.totalElements\"\n    [pageSize]=\"luxPageSize\"\n    [pageSizeOptions]=\"luxPageSizeOptions\"\n    [showFirstLastButtons]=\"true\"\n    [ngClass]=\"{ 'lux-hide': !luxShowPagination }\"\n    [ngClass.xs]=\"{ 'lux-paginator-xs': true, 'lux-hide': !luxShowPagination }\"\n    fxFlex=\"auto\"\n  >\n  </mat-paginator>\n</div>\n",
                providers: [{ provide: material.MatPaginatorIntl, useClass: LuxPaginatorIntl }],
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}lux-progress ::ng-deep mat-progress-bar{margin-bottom:8px}.lux-row-selected{background-color:rgba(112,141,170,.2)!important}:host{display:block;height:100%}:host>div{padding-bottom:8px}.lux-table{height:100%}.lux-table .lux-table-content{position:relative;overflow:auto;height:100%;width:100%}.lux-table .lux-table-content table{width:100%}.lux-table .lux-table-content table td.mat-table-sticky{z-index:103!important}.lux-table .lux-table-content table td:not(.mat-table-sticky){z-index:97!important}.lux-table .lux-table-content table td.mat-header-cell{z-index:103!important}.lux-table .lux-table-content table ::ng-deep tfoot td.mat-table-sticky:first-of-type{z-index:105!important}.lux-table .lux-table-content table th{vertical-align:top;height:30px}.lux-table .lux-table-content table .lux-table-header-no-data th{height:30px;vertical-align:middle}.lux-table .lux-table-content table td,.lux-table .lux-table-content table th{padding:8px}.lux-table .lux-table-content table td.lux-multiselect-td+td,.lux-table .lux-table-content table td.lux-multiselect-tf+td,.lux-table .lux-table-content table th.lux-multiselect-th+th{padding-left:16px}.lux-table .lux-table-content table ::ng-deep tr.mat-header-row{height:auto}.lux-table .lux-table-content table .lux-moved-header-title{font-size:12px;margin-top:4px}.lux-table .lux-table-content table .lux-moved-header-title:first-of-type{margin-top:8px}.lux-table .lux-table-content table td.mat-cell:last-of-type,.lux-table .lux-table-content table td.mat-footer-cell:last-of-type,.lux-table .lux-table-content table th.mat-header-cell:last-of-type{padding-right:0}.lux-table .lux-table-content table ::ng-deep tbody tr:last-of-type td{border-bottom:none}.lux-table .lux-table-content table .mat-footer-row>td{border-top:1px solid rgba(0,0,0,.12)}.lux-table .lux-table-content .lux-table-header-blocked{pointer-events:none}.lux-table.lux-hide-borders .lux-multiselect-td,.lux-table.lux-hide-borders .lux-multiselect-tf,.lux-table.lux-hide-borders td,.lux-table.lux-hide-borders th{border:unset!important}.lux-table th.lux-table-column-header-empty{display:none}.lux-table-overlay{-webkit-transition:opacity 1s;transition:opacity 1s;position:absolute}.lux-table-overlay-active{pointer-events:none;z-index:1003;left:0;right:0;top:0;bottom:0;opacity:0}.lux-table-ie mat-cell,.lux-table-ie mat-header-cell{height:1em}.lux-hide{display:none!important}.lux-multiselect-td,.lux-multiselect-tf,.lux-multiselect-th{max-width:70px;min-width:70px;width:70px;padding-right:6px;margin-right:6px}.lux-multiselect-td lux-checkbox,.lux-multiselect-tf lux-checkbox,.lux-multiselect-th lux-checkbox{pointer-events:none}.lux-multiselect-td lux-checkbox ::ng-deep .lux-form-control-label,.lux-multiselect-tf lux-checkbox ::ng-deep .lux-form-control-label,.lux-multiselect-th lux-checkbox ::ng-deep .lux-form-control-label{display:none}.lux-multiselect-td ::ng-deep .lux-form-field,.lux-multiselect-tf ::ng-deep .lux-form-field,.lux-multiselect-th ::ng-deep .lux-form-field{margin-bottom:0}.lux-multiselect-td+td,.lux-multiselect-td+th,.lux-multiselect-tf+td,.lux-multiselect-tf+th,.lux-multiselect-th+td,.lux-multiselect-th+th{padding-left:6px}.lux-multiselect-th{padding-left:6px!important;width:1%!important}.lux-multiselect-th span{text-align:start}.lux-multiselect-td,.lux-multiselect-tf:not(.lux-ignore-multiselect-tf){border-right:1px solid rgba(0,0,0,.12)}.lux-multiselect-field{cursor:pointer}.lux-table-header-no-data th{border:unset!important}.lux-multiselect-toggle-all-wrapper{position:relative}::ng-deep .lux-multiselect-toggle ::ng-deep .lux-form-control-label,::ng-deep .lux-multiselect-toggle-all ::ng-deep .lux-form-control-label{display:none}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-container{-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-range-actions{display:block;margin-top:10px}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-range-actions button:first-of-type{margin-left:-10px}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-range-label{margin:0}.lux-table-filter{display:block}.lux-aria-visible{position:absolute;font-size:0;color:transparent;width:0;height:0}"]
            }),
            __metadata("design:paramtypes", [LuxMediaQueryObserverService,
                LuxConsoleService,
                a11y.LiveAnnouncer])
        ], LuxTableComponent);
        return LuxTableComponent;
    }());

    /**
     * Animation für das Aus- und Einklappen der LuxMessageBox.
     */
    var visibilityTrigger = animations$1.trigger('messageBoxVisibility', [
        animations$1.transition(':enter', [
            animations$1.style({ transform: 'translateY(-100%)', height: 0 }),
            animations$1.animate('.5s', animations$1.style({ transform: 'translateY(0)', height: '*' }))
        ]),
        animations$1.transition(':leave', [
            animations$1.style({ transform: 'translateY(0)', height: '*' }),
            animations$1.animate('.5s', animations$1.style({ transform: 'translateY(-100%)', height: 0 }))
        ])
    ]);

    var LuxMessageBoxComponent = /** @class */ (function () {
        function LuxMessageBoxComponent() {
            this._luxMessages = [];
            this._luxMaximumDisplayed = 1;
            this._luxIndex = 0;
            this.displayedMessages = [];
            this.boxShadow = true;
            this.luxMessageChanged = new core.EventEmitter();
            this.luxMessageClosed = new core.EventEmitter();
            this.luxMessageBoxClosed = new core.EventEmitter();
        }
        Object.defineProperty(LuxMessageBoxComponent.prototype, "luxIndex", {
            get: function () {
                return this._luxIndex;
            },
            set: function (index) {
                if (index < 0) {
                    index = 0;
                }
                if (index > this.luxMessages.length) {
                    index = this.luxMessages.length;
                }
                this._luxIndex = index;
                this.updateDisplayedMessages(index);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMessageBoxComponent.prototype, "luxMaximumDisplayed", {
            get: function () {
                return this._luxMaximumDisplayed;
            },
            set: function (max) {
                if (max < 0) {
                    max = 0;
                }
                this._luxMaximumDisplayed = max;
                this.updateDisplayedMessages(this.luxIndex);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxMessageBoxComponent.prototype, "luxMessages", {
            get: function () {
                return this._luxMessages;
            },
            set: function (messages) {
                if (messages && messages.length > 0) {
                    this._luxMessages = messages;
                    this.updateDisplayedMessages(this.luxIndex);
                }
                else {
                    // Wenn es vorher Werte gab, ein Closed-Event ausgeben
                    if (this.luxMessages.length > 0) {
                        this.luxMessageBoxClosed.emit();
                    }
                    this._luxMessages = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxMessageBoxComponent.prototype.ngOnInit = function () { };
        /**
         * Wird aufgerufen, wenn der Close-Button für eine MessageBox aufgerufen wurde.
         *
         * Gibt eine Event-Payload mit der betroffenen Nachricht mit Index weiter.
         * @param $event
         */
        LuxMessageBoxComponent.prototype.messageClosed = function ($event) {
            var eventPayload = {
                index: this.luxMessages.findIndex(function (compareMessage) { return compareMessage === $event; }),
                message: $event
            };
            this.luxMessageClosed.emit(eventPayload);
            this.luxMessages = this.luxMessages.filter(function (message) { return message !== $event; });
        };
        /**
         * Aktualisiert die angezeigten Nachrichten und den Paginator,
         * gibt außerdem das Change-Event mit den angezeigten/vorherigen Nachrichten.
         * @param $event
         */
        LuxMessageBoxComponent.prototype.pageChanged = function ($event) {
            var previousDisplayedMessages = __spread(this.displayedMessages);
            var previousIndex = this.luxIndex;
            this.updateDisplayedMessages($event.pageIndex);
            var messageChangePayload = {
                currentPage: {
                    index: this.luxIndex,
                    messages: __spread(this.displayedMessages)
                },
                previousPage: {
                    index: previousIndex,
                    messages: previousDisplayedMessages
                }
            };
            this.luxMessageChanged.emit(messageChangePayload);
        };
        /**
         * Aktualisiert die aktuell angezeigten Nachrichten anhand des Index.
         * @param pageIndex
         * @param pageSize
         */
        LuxMessageBoxComponent.prototype.updateDisplayedMessages = function (pageIndex) {
            var start = pageIndex * this.luxMaximumDisplayed;
            var end = start + this.luxMaximumDisplayed;
            // Wenn der luxIndex und der PageIndex ungleich sind, den luxIndex aktualisieren
            if (this.luxIndex !== pageIndex) {
                this._luxIndex = pageIndex;
            }
            // Checken, ob der Index nicht die Array-Größe sprengt
            if (this.luxIndex > this.luxMessages.length) {
                this._luxIndex = this.luxMessages.length;
            }
            if (this.luxIndex < 0) {
                this._luxIndex = 0;
            }
            // Nachrichten aktualisieren
            this.displayedMessages = this.luxMessages.slice(start, end);
            // Wenn die angezeigten Nachrichten leer sind, aber noch weitere vorhanden sind, die vorherige Seite anzeigen
            if (this.displayedMessages.length === 0 && this.luxMessages.length > 0 && this.luxIndex > 0) {
                this.updateDisplayedMessages(this.luxIndex - 1);
            }
        };
        __decorate([
            core.HostBinding('class.mat-elevation-z4'),
            __metadata("design:type", Boolean)
        ], LuxMessageBoxComponent.prototype, "boxShadow", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMessageBoxComponent.prototype, "luxMessageChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMessageBoxComponent.prototype, "luxMessageClosed", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMessageBoxComponent.prototype, "luxMessageBoxClosed", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxMessageBoxComponent.prototype, "luxIndex", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number),
            __metadata("design:paramtypes", [Number])
        ], LuxMessageBoxComponent.prototype, "luxMaximumDisplayed", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], LuxMessageBoxComponent.prototype, "luxMessages", null);
        LuxMessageBoxComponent = __decorate([
            core.Component({
                selector: 'lux-message-box',
                template: "<div fxLayout=\"column\" [@messageBoxVisibility] luxAriaRole=\"list\" *ngIf=\"luxMessages && luxMessages.length > 0\">\n  <ng-container *ngFor=\"let displayedMessage of displayedMessages\">\n    <lux-message\n      class=\"lux-message-box mat-elevation-z1\"\n      [luxMessage]=\"displayedMessage\"\n      (luxMessageClosed)=\"messageClosed($event)\"\n    >\n    </lux-message>\n  </ng-container>\n  <div\n    class=\"lux-message-box-footer\"\n    [ngClass]=\"{ 'lux-display-none': luxMessages.length === 1 || luxMaximumDisplayed >= luxMessages.length }\"\n  >\n    <mat-paginator\n      [length]=\"luxMessages.length\"\n      [pageSize]=\"luxMaximumDisplayed\"\n      [hidePageSize]=\"true\"\n      [pageIndex]=\"luxIndex\"\n      (page)=\"pageChanged($event)\"\n    >\n    </mat-paginator>\n  </div>\n</div>\n",
                animations: [visibilityTrigger],
                providers: [{ provide: material.MatPaginatorIntl, useClass: LuxPaginatorIntl }],
                styles: [":host{display:block;overflow:hidden}:host .lux-message-box{margin-bottom:2px}:host .lux-display-none{display:none}:host ::ng-deep lux-button ::ng-deep button,:host ::ng-deep lux-button ::ng-deep lux-icon{width:32px;max-width:32px;min-width:32px;font-size:.75em;padding:0}:host ::ng-deep lux-button ::ng-deep .mat-button-focus-overlay,:host ::ng-deep lux-button ::ng-deep .mat-button-ripple{display:none}:host ::ng-deep .lux-message-container{padding:0 24px}:host ::ng-deep .lux-hidden{visibility:hidden}:host mat-paginator ::ng-deep .mat-paginator-container{padding:0 20px!important}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxMessageBoxComponent);
        return LuxMessageBoxComponent;
    }());

    var LuxMessageComponent = /** @class */ (function () {
        function LuxMessageComponent() {
            this.backgroundCSSClass = 'lux-bg-color-blue';
            this.fontCSSClass = 'lux-font-color-white';
            this.luxMessageClosed = new core.EventEmitter();
        }
        Object.defineProperty(LuxMessageComponent.prototype, "luxMessage", {
            get: function () {
                return this._luxMessage;
            },
            set: function (message) {
                this._luxMessage = message;
                if (this.luxMessage) {
                    this.updateColor();
                }
            },
            enumerable: true,
            configurable: true
        });
        LuxMessageComponent.prototype.ngOnInit = function () { };
        /**
         * Setzt die Messages auf ein leeres Array um so die MessageBox auszublenden.
         */
        LuxMessageComponent.prototype.close = function () {
            this.luxMessageClosed.emit(this.luxMessage);
        };
        /**
         * Aktualisiert die Farbe dieser Box passend zur Farbe der Nachricht.
         */
        LuxMessageComponent.prototype.updateColor = function () {
            var color = this.luxMessage.color;
            var result = LuxUtil.getColorsByBgColorsEnum(color);
            this.fontCSSClass = result.fontCSSClass;
            this.backgroundCSSClass = result.backgroundCSSClass;
        };
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxMessageComponent.prototype, "luxMessageClosed", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxMessageComponent.prototype, "luxMessage", null);
        LuxMessageComponent = __decorate([
            core.Component({
                selector: 'lux-message',
                template: "<div\n  class=\"lux-message-container {{ backgroundCSSClass }} {{ fontCSSClass }}\"\n  fxLayout=\"row\"\n  fxLayoutAlign=\"start center\"\n  luxAriaRole=\"listitem\"\n  [luxAriaLabel]=\"luxMessage.text\"\n  tabindex=\"0\"\n  *ngIf=\"luxMessage\"\n>\n  <div class=\"lux-message-icon\" fxFlex=\"0 0 50px\" fxLayoutAlign=\"start center\">\n    <lux-icon [luxIconName]=\"luxMessage.iconName\" *ngIf=\"luxMessage.iconName\"></lux-icon>\n  </div>\n  <div fxFlex=\"100\" fxFlexFill fxLayoutAlign=\"space-between center\">\n    <div class=\"lux-message-text\" fxFlex=\"1 1 auto\" fxLayoutAlign=\"start\">\n      <p>{{ luxMessage.text }}</p>\n    </div>\n    <lux-button\n      class=\"lux-close-message-btn\"\n      luxIconName=\"fas fa-times\"\n      luxTagId=\"lux-message-box-close-btn\"\n      (luxClicked)=\"close()\"\n      luxAriaLabel=\"Nachricht schlie\u00DFen\"\n    >\n    </lux-button>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], LuxMessageComponent);
        return LuxMessageComponent;
    }());

    var LuxCommonModule = /** @class */ (function () {
        function LuxCommonModule() {
        }
        LuxCommonModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    flexLayout.FlexLayoutModule,
                    material.MatProgressSpinnerModule,
                    material.MatProgressBarModule,
                    material.MatTableModule,
                    material.MatPaginatorModule,
                    material.MatSortModule,
                    LuxFormModule,
                    LuxActionModule,
                    LuxIconModule,
                    LuxDirectivesModule,
                    LuxComponentsConfigModule
                ],
                declarations: [
                    LuxSpinnerComponent,
                    LuxLabelComponent,
                    LuxBadgeComponent,
                    LuxProgressComponent,
                    LuxTableComponent,
                    LuxTableColumnFooterComponent,
                    LuxTableColumnComponent,
                    LuxTableColumnHeaderComponent,
                    LuxTableColumnContentComponent,
                    LuxMessageBoxComponent,
                    LuxMessageComponent
                ],
                providers: [LuxMediaQueryObserverService],
                exports: [
                    LuxSpinnerComponent,
                    LuxLabelComponent,
                    LuxBadgeComponent,
                    LuxProgressComponent,
                    LuxTableComponent,
                    LuxTableColumnFooterComponent,
                    LuxTableColumnComponent,
                    LuxTableColumnHeaderComponent,
                    LuxTableColumnContentComponent,
                    LuxMessageBoxComponent,
                    LuxMessageComponent
                ]
            })
        ], LuxCommonModule);
        return LuxCommonModule;
    }());

    var LuxHttpErrorInterceptor = /** @class */ (function () {
        function LuxHttpErrorInterceptor() {
        }
        LuxHttpErrorInterceptor_1 = LuxHttpErrorInterceptor;
        LuxHttpErrorInterceptor.dataStream$ = function () {
            return LuxHttpErrorInterceptor_1.dataStream.asObservable();
        };
        LuxHttpErrorInterceptor.prototype.intercept = function (req, next) {
            return next.handle(req).pipe(operators.tap(function () {
                LuxHttpErrorInterceptor_1.dataStream.next([]);
            }, function (error) {
                if (error instanceof http.HttpErrorResponse && error.status === 400) {
                    LuxHttpErrorInterceptor_1.dataStream.next(error.error.errors);
                }
            }));
        };
        var LuxHttpErrorInterceptor_1;
        LuxHttpErrorInterceptor.dataStream = new rxjs.ReplaySubject(1);
        LuxHttpErrorInterceptor = LuxHttpErrorInterceptor_1 = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], LuxHttpErrorInterceptor);
        return LuxHttpErrorInterceptor;
    }());

    var LuxHttpErrorComponent = /** @class */ (function () {
        function LuxHttpErrorComponent(router$1) {
            this.subs = [];
            // Beim Ansteuern einer neuen Route, die aktuellen Fehler resetten.
            router$1.events.forEach(function (event) {
                if (event instanceof router.NavigationStart) {
                    LuxHttpErrorInterceptor.dataStream.next([]);
                }
            });
        }
        LuxHttpErrorComponent.prototype.ngOnInit = function () {
            this.errors = [];
        };
        LuxHttpErrorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Wenn neue Fehler-Objekte kommen, diese umformatieren und in der LuxMessageBoxComponent anzeigen.
            this.subs.push(LuxHttpErrorInterceptor.dataStream$().subscribe(function (errors) {
                _this.updateErrors(errors);
            }));
        };
        LuxHttpErrorComponent.prototype.ngOnDestroy = function () {
            // Alle bekannten Subscriptions auflösen.
            this.subs.forEach(function (sub) {
                sub.unsubscribe();
            });
        };
        /**
         * Updated das aktuelle Errors-Array mit dem übergebenen Wert.
         * Liest dabei die Message aus dem Fehler und erzeugt LuxMessage-Objekte für die LuxMessageBoxComponent.
         * @param errors
         */
        LuxHttpErrorComponent.prototype.updateErrors = function (errors) {
            var _this = this;
            var errorMessages = [];
            if (errors && errors.length > 0) {
                errors.forEach(function (error) {
                    errorMessages.push({
                        text: _this.readErrorMessage(error),
                        color: exports.LuxBackgroundColorsEnum.red,
                        iconName: 'fa-bug'
                    });
                });
            }
            setTimeout(function () {
                _this.errors = errorMessages;
            });
        };
        /**
         * Versucht eine Fehlermeldung aus dem Fehler zu lesen.
         * Zuerst wird geschaut, ob der Fehler selbst nur ein String ist ==> Wenn ja, diesen zurückgeben.
         * Dann wird geprüft, ob der Fehler eine "message"-Property besitzt ==> Wenn ja, diese zurückgeben
         * Als letzter Ausweg wird das "error"-Objekt selbst über die toString-Methode zurückgegeben.
         * @param error
         */
        LuxHttpErrorComponent.prototype.readErrorMessage = function (error) {
            if (typeof error === 'string') {
                return error;
            }
            else if (error.hasOwnProperty('message')) {
                return error['message'];
            }
            else {
                return error.toString();
            }
        };
        LuxHttpErrorComponent.ctorParameters = function () { return [
            { type: router.Router }
        ]; };
        LuxHttpErrorComponent = __decorate([
            core.Component({
                selector: 'lux-http-error',
                template: "<lux-message-box [luxMessages]=\"errors\"> </lux-message-box>\n",
                styles: [""]
            }),
            __metadata("design:paramtypes", [router.Router])
        ], LuxHttpErrorComponent);
        return LuxHttpErrorComponent;
    }());

    /**
     * Dieser Service dient dazu, die aktuellen Fehlermeldungen und die Error-Page Konfiguration zu speichern.
     *
     * Er wird von LuxErrorService und LuxErrorPageComponent benutzt, ohne ihn gäbe es Cycle-Dependency Fehler.
     */
    var LuxErrorStoreService = /** @class */ (function () {
        function LuxErrorStoreService() {
            /**
             * Enthaelt die normale Konfiguration der Fehlerseite, kann bei Bedarf mit setConfig ueberschrieben werden.
             */
            this._defaultConfig = {
                iconName: 'far fa-times-circle',
                iconSize: '5x',
                errorText: 'Uups... da ist etwas schief gelaufen. Wir kennen die Fehlerdetails bereits und kümmern uns darum.',
                homeRedirectText: 'Zurück zur Startseite',
                homeRedirectUrl: '',
                errorPageUrl: 'errorpage',
                skipLocationChange: true
            };
        }
        Object.defineProperty(LuxErrorStoreService.prototype, "config", {
            /**
             * Gibt die aktuelle Konfiguration zurueck.
             * @returns ILuxErrorPageConfig
             */
            get: function () {
                return this._config;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxErrorStoreService.prototype, "lastErrors", {
            /**
             * Gibt ein Array der letzten Fehler zurueck.
             * @returns Array<ILuxError[]>
             */
            get: function () {
                return Array.of(this._lastErrors);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxErrorStoreService.prototype, "error", {
            /**
             * Gibt den aktuellen Fehler zurueck.
             * @returns ILuxError
             */
            get: function () {
                return this._error;
            },
            /**
             * Sichert den Fehler in der Property und fügt ihn der "lastErrors"-Liste hinzu.
             * @param newError
             */
            set: function (newError) {
                this._error = newError;
                this._lastErrors.push(newError);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Initialisiert den Service.
         */
        LuxErrorStoreService.prototype.init = function () {
            this._lastErrors = [];
            this._error = null;
            this._config = {};
            this.safeNewConfig(this._defaultConfig);
        };
        /**
         *
         * @param luxErrorPageConfig
         */
        LuxErrorStoreService.prototype.safeNewConfig = function (luxErrorPageConfig) {
            var _this = this;
            // wenn keine Config übergeben wird, ein leeres Objekt erzeugen
            // das sorgt dafür, dass wenigstens die default-Werte genommen werden
            luxErrorPageConfig = luxErrorPageConfig ? luxErrorPageConfig : {};
            // alle Werte der übergebenen Config prüfen und ggf. default-Werte nutzen
            Object.keys(luxErrorPageConfig).forEach(function (e) {
                if (luxErrorPageConfig[e] !== undefined && luxErrorPageConfig[e] !== null) {
                    _this._config[e] = luxErrorPageConfig[e];
                }
                else {
                    _this._config[e] = _this._defaultConfig[e];
                }
            });
        };
        LuxErrorStoreService.ngInjectableDef = core["ɵɵdefineInjectable"]({ factory: function LuxErrorStoreService_Factory() { return new LuxErrorStoreService(); }, token: LuxErrorStoreService, providedIn: "root" });
        LuxErrorStoreService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [])
        ], LuxErrorStoreService);
        return LuxErrorStoreService;
    }());

    var LuxErrorPageComponent = /** @class */ (function () {
        function LuxErrorPageComponent(router, errorStore) {
            this.router = router;
            this.errorStore = errorStore;
        }
        Object.defineProperty(LuxErrorPageComponent.prototype, "error", {
            get: function () {
                return this.errorStore.error;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxErrorPageComponent.prototype, "errorConfig", {
            get: function () {
                return this.errorStore.config;
            },
            enumerable: true,
            configurable: true
        });
        LuxErrorPageComponent.prototype.ngOnInit = function () { };
        /**
         * Navigiert ueber den Router zum eingetragenen Home-Pfad
         */
        LuxErrorPageComponent.prototype.clickHomeRedirect = function () {
            this.router.navigate([this.errorConfig.homeRedirectUrl]);
        };
        LuxErrorPageComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: LuxErrorStoreService }
        ]; };
        LuxErrorPageComponent = __decorate([
            core.Component({
                selector: 'lux-error-page',
                template: "<lux-card ngClass.gt-sm=\"lux-error-page-desktop\" id=\"ErrorPage\" fxFlexFill>\n  <lux-card-content fxFlex=\"noshrink\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <lux-icon\n      [luxIconName]=\"errorConfig.iconName\"\n      [luxIconSize]=\"errorConfig.iconSize\"\n      class=\"lux-semi-transparent lux-black-semi-transparent\"\n      fxFlex=\"0 0 auto\"\n      ngClass.gt-sm=\"lux-error-icon\"\n      ngClass.sm=\"lux-error-icon-sm\"\n      ngClass.xs=\"lux-error-icon-xs\"\n    ></lux-icon>\n    <h2 class=\"lux-ml-3 lux-mr-3\">{{ errorConfig.errorText }}</h2>\n    <lux-button\n      luxColor=\"primary\"\n      [luxLabel]=\"errorConfig.homeRedirectText\"\n      (luxClicked)=\"clickHomeRedirect()\"\n      fxFlex=\"0 0 auto\"\n    >\n    </lux-button>\n    <ng-container *ngIf=\"error\">\n      <p class=\"lux-semi-transparent lux-black-semi-transparent\" fxFlex=\"0 0 auto\" *ngIf=\"error.errorId\">\n        Fehlernummer: {{ error.errorId }}\n      </p>\n      <lux-panel *ngIf=\"error.errorMessage\">\n        <lux-panel-header-title>Fehlermeldung</lux-panel-header-title>\n        <lux-panel-content>\n          {{ error.errorMessage }}\n        </lux-panel-content>\n      </lux-panel>\n    </ng-container>\n  </lux-card-content>\n</lux-card>\n",
                styles: [":host{display:-webkit-box;display:-ms-flexbox;display:flex;max-height:100%;height:100%}.lux-error-icon{font-size:5em}.lux-error-icon-sm{font-size:4em}.lux-error-icon-xs{font-size:3em}.lux-error-page-container{border:0 solid transparent}lux-card.lux-error-page-desktop ::ng-deep h2{margin-left:50px;margin-right:0}lux-card.lux-error-page-desktop ::ng-deep lux-card-content>*{max-width:600px}lux-card.lux-error-page-desktop ::ng-deep mat-card{height:100%;margin:0!important}lux-card.lux-error-page-desktop ::ng-deep mat-card>.lux-card-content{-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}lux-card:not(.lux-error-page-desktop) ::ng-deep mat-card{box-shadow:none}lux-card:not(.lux-error-page-desktop) ::ng-deep lux-card-content>*{max-width:100%}"]
            }),
            __metadata("design:paramtypes", [router.Router, LuxErrorStoreService])
        ], LuxErrorPageComponent);
        return LuxErrorPageComponent;
    }());

    var LuxErrorModule = /** @class */ (function () {
        function LuxErrorModule() {
        }
        LuxErrorModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    flexLayout.FlexLayoutModule,
                    router.RouterModule,
                    LuxIconModule,
                    LuxLayoutModule,
                    LuxCommonModule,
                    LuxActionModule,
                    LuxComponentsConfigModule
                ],
                entryComponents: [LuxErrorPageComponent],
                declarations: [LuxHttpErrorComponent, LuxErrorPageComponent],
                exports: [LuxHttpErrorComponent, LuxErrorPageComponent],
                providers: [
                    {
                        provide: http.HTTP_INTERCEPTORS,
                        useClass: LuxHttpErrorInterceptor,
                        multi: true
                    }
                ]
            })
        ], LuxErrorModule);
        return LuxErrorModule;
    }());

    var LuxErrorService = /** @class */ (function () {
        function LuxErrorService(router, errorStore) {
            this.router = router;
            this.errorStore = errorStore;
            this.errorStore.init();
            this.setConfig(null);
        }
        /**
         * Ueberschreibt die aktuelle Konfiguration fuer die Fehlerseite.
         * Uebernimmt so viele Werte wie moeglich aus der uebergebenen Konfiguration,
         * sonst werden die Default-Werte genutzt.
         * @param luxErrorPageConfig
         */
        LuxErrorService.prototype.setConfig = function (luxErrorPageConfig) {
            this.errorStore.safeNewConfig(luxErrorPageConfig);
            // potentielle alte Route zu LuxErrorPageComponent entfernen
            this.router.config = this.router.config.filter(function (entry) { return entry.component !== LuxErrorPageComponent; });
            // neue Route eintragen
            this.router.config.unshift({ path: this.errorStore.config.errorPageUrl, component: LuxErrorPageComponent });
        };
        /**
         * Navigiert zur Fehlerkomponente und versucht einen Fehler
         * (wenn mitgegeben) zu sichern.
         * @param error
         * @returns Observable<any>
         */
        LuxErrorService.prototype.navigateToErrorPage = function (error) {
            if (error) {
                this.errorStore.error = error;
            }
            var _a = this.errorStore.config, errorPageUrl = _a.errorPageUrl, skipLocationChange = _a.skipLocationChange;
            return rxjs.of(this.router.navigateByUrl(errorPageUrl, { skipLocationChange: skipLocationChange }));
        };
        LuxErrorService.ctorParameters = function () { return [
            { type: router.Router },
            { type: LuxErrorStoreService }
        ]; };
        LuxErrorService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [router.Router, LuxErrorStoreService])
        ], LuxErrorService);
        return LuxErrorService;
    }());

    var LUX_FILE_PREVIEW_DATA = new core.InjectionToken('LUX_FILE_PREVIEW_DATA');

    var LuxFilePreviewRef = /** @class */ (function () {
        function LuxFilePreviewRef(overlayRef) {
            this.overlayRef = overlayRef;
        }
        LuxFilePreviewRef.prototype.close = function () {
            this.overlayRef.dispose();
        };
        return LuxFilePreviewRef;
    }());

    var LuxFilePreviewBase = /** @class */ (function () {
        function LuxFilePreviewBase(previewRef, previewData, sanitizer) {
            this.previewRef = previewRef;
            this.previewData = previewData;
            this.sanitizer = sanitizer;
            this.urls = [];
            this.paddingWith = 100;
            this.paddingHeight = 150;
            this.startPhase = true;
            this.startDurationMs = 250;
            this.loading = true;
            this.downloadIconName = 'fas fa-download';
            this.downloadTagId = 'file-preview-download-btn';
            this.downloadAriaLabel = 'Datei herunterladen';
            this.closeIconName = 'fas fa-window-close';
            this.closeTagId = 'file-preview-close-btn';
            this.closeAriaLabel = 'Dateivorschau schließen';
        }
        LuxFilePreviewBase.prototype.handleKeydown = function (event) {
            if (event.keyCode === keycodes.ESCAPE) {
                this.onClose();
            }
        };
        LuxFilePreviewBase.prototype.windowResize = function () {
            this.updateWidthAndHeight();
        };
        LuxFilePreviewBase.prototype.ngOnInit = function () {
            var _this = this;
            this.loadingTimer = setTimeout(function () {
                _this.startPhase = false;
            }, this.startDurationMs);
            this.updateWidthAndHeight();
            setTimeout(function () {
                var myBlob;
                if ('string' === typeof _this.previewData.fileObject.content) {
                    myBlob = new Blob([LuxUtil.base64ToArrayBuffer(_this.previewData.fileObject.content.split(',')[1])], {
                        type: _this.previewData.fileObject.type
                    });
                }
                else {
                    myBlob = _this.previewData.fileObject.content;
                }
                _this.url = window.URL.createObjectURL(myBlob);
                _this.urls.push(_this.url);
            });
        };
        LuxFilePreviewBase.prototype.ngOnDestroy = function () {
            this.urls.forEach(function (url) {
                window.URL.revokeObjectURL(url);
            });
        };
        LuxFilePreviewBase.prototype.onDownload = function () {
            this.previewData.fileComponent.downloadFile(this.previewData.fileObject);
            this.previewRef.close();
        };
        LuxFilePreviewBase.prototype.onClose = function () {
            this.previewRef.close();
        };
        LuxFilePreviewBase.prototype.loadingFinished = function () {
            this.loading = false;
        };
        LuxFilePreviewBase.prototype.clearFocus = function () {
            if (document.activeElement instanceof HTMLElement) {
                document.activeElement.blur();
            }
        };
        LuxFilePreviewBase.prototype.updateWidthAndHeight = function () {
            this.width = window.innerWidth - this.paddingWith;
            this.height = window.innerHeight - this.paddingHeight;
        };
        __decorate([
            core.HostListener('document:keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [KeyboardEvent]),
            __metadata("design:returntype", void 0)
        ], LuxFilePreviewBase.prototype, "handleKeydown", null);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], LuxFilePreviewBase.prototype, "windowResize", null);
        LuxFilePreviewBase = __decorate([
            __param(1, core.Inject(LUX_FILE_PREVIEW_DATA)),
            __metadata("design:paramtypes", [LuxFilePreviewRef, Object, platformBrowser.DomSanitizer])
        ], LuxFilePreviewBase);
        return LuxFilePreviewBase;
    }());

    var LuxFilePreviewImgViewerComponent = /** @class */ (function (_super) {
        __extends(LuxFilePreviewImgViewerComponent, _super);
        function LuxFilePreviewImgViewerComponent(previewRef, previewData, sanitizer) {
            var _this = _super.call(this, previewRef, previewData, sanitizer) || this;
            _this.previewRef = previewRef;
            _this.previewData = previewData;
            _this.sanitizer = sanitizer;
            _this.zoomActive = false;
            _this.zoomWidth = 0;
            _this.zoomStep = 250;
            return _this;
        }
        LuxFilePreviewImgViewerComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.zoomActive =
                    _this.previewImg && _this.previewImg.nativeElement.naturalWidth - _this.paddingWith > window.innerWidth;
            });
        };
        LuxFilePreviewImgViewerComponent.prototype.onLoad = function (event) {
            this.zoomActive =
                this.previewImg && this.previewImg.nativeElement.naturalWidth - this.paddingWith > window.innerWidth;
            this.loadingFinished();
        };
        LuxFilePreviewImgViewerComponent.prototype.onZoomIn = function () {
            this.zoomWidth += this.zoomStep;
            this.clearFocus();
        };
        LuxFilePreviewImgViewerComponent.prototype.onZoomOut = function () {
            this.zoomWidth -= this.zoomStep;
            this.clearFocus();
        };
        LuxFilePreviewImgViewerComponent.ctorParameters = function () { return [
            { type: LuxFilePreviewRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [LUX_FILE_PREVIEW_DATA,] }] },
            { type: platformBrowser.DomSanitizer }
        ]; };
        __decorate([
            core.ViewChild('previewImg', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], LuxFilePreviewImgViewerComponent.prototype, "previewImg", void 0);
        LuxFilePreviewImgViewerComponent = __decorate([
            core.Component({
                selector: 'lux-file-preview-imgviewer',
                template: "<lux-file-preview-toolbar>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-search-plus\"\n    *ngIf=\"zoomActive\"\n    (luxClicked)=\"onZoomIn()\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-zoomin-btn\"\n    luxAriaLabel=\"Hinein zoomen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-search-minus\"\n    (luxClicked)=\"onZoomOut()\"\n    *ngIf=\"zoomActive\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-zoomout-btn\"\n    luxAriaLabel=\"Heraus zoomen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    [luxIconName]=\"downloadIconName\"\n    (luxClicked)=\"onDownload()\"\n    luxColor=\"accent\"\n    luxRaised=\"true\"\n    [luxTagId]=\"downloadTagId\"\n    [luxAriaLabel]=\"downloadAriaLabel\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    [luxIconName]=\"closeIconName\"\n    (luxClicked)=\"onClose()\"\n    luxRaised=\"true\"\n    [luxTagId]=\"closeTagId\"\n    [luxAriaLabel]=\"closeAriaLabel\"\n  ></lux-button>\n</lux-file-preview-toolbar>\n\n<div class=\"overlay-content\" [ngStyle]=\"{ 'max-width': width + 'px', 'max-height': height + 'px' }\">\n  <img\n    [src]=\"this.sanitizer.bypassSecurityTrustResourceUrl(this.url)\"\n    *ngIf=\"url\"\n    (load)=\"onLoad($event)\"\n    [ngStyle]=\"{\n      'max-width': width + zoomWidth + 'px',\n      'max-height': height + zoomWidth + 'px',\n      display: loading ? 'none' : 'block'\n    }\"\n    #previewImg\n  />\n  <div *ngIf=\"loading && !startPhase\" class=\"message-box\">\n    Lade...\n  </div>\n</div>\n",
                styles: [".overlay-content{overflow:auto}img{height:auto}"]
            }),
            __param(1, core.Inject(LUX_FILE_PREVIEW_DATA)),
            __metadata("design:paramtypes", [LuxFilePreviewRef, Object, platformBrowser.DomSanitizer])
        ], LuxFilePreviewImgViewerComponent);
        return LuxFilePreviewImgViewerComponent;
    }(LuxFilePreviewBase));

    var LuxFilePreviewNotSupportedViewerComponent = /** @class */ (function (_super) {
        __extends(LuxFilePreviewNotSupportedViewerComponent, _super);
        function LuxFilePreviewNotSupportedViewerComponent(previewRef, previewData, sanitizer) {
            var _this = _super.call(this, previewRef, previewData, sanitizer) || this;
            _this.previewRef = previewRef;
            _this.previewData = previewData;
            _this.sanitizer = sanitizer;
            _this.counter = 5;
            _this.downloadLabelDefault = 'Download... ';
            _this.downloadLabel = _this.downloadLabelDefault + _this.counter;
            return _this;
        }
        LuxFilePreviewNotSupportedViewerComponent.prototype.ngOnInit = function () {
            this.updateDownloadLabel();
        };
        LuxFilePreviewNotSupportedViewerComponent.prototype.onDownload = function () {
            clearTimeout(this.timer);
            _super.prototype.onDownload.call(this);
        };
        LuxFilePreviewNotSupportedViewerComponent.prototype.onClose = function () {
            clearTimeout(this.timer);
            _super.prototype.onClose.call(this);
        };
        LuxFilePreviewNotSupportedViewerComponent.prototype.updateDownloadLabel = function () {
            var _this = this;
            this.timer = setTimeout(function () {
                if (_this.counter > 0) {
                    _this.counter--;
                    _this.downloadLabel = _this.downloadLabelDefault + _this.counter;
                    _this.updateDownloadLabel();
                }
                else {
                    _this.onDownload();
                }
            }, 1000);
        };
        LuxFilePreviewNotSupportedViewerComponent.ctorParameters = function () { return [
            { type: LuxFilePreviewRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [LUX_FILE_PREVIEW_DATA,] }] },
            { type: platformBrowser.DomSanitizer }
        ]; };
        LuxFilePreviewNotSupportedViewerComponent = __decorate([
            core.Component({
                selector: 'lux-file-preview-notsupportedviewer',
                template: "<lux-file-preview-toolbar>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-download\"\n    (luxClicked)=\"onDownload()\"\n    luxColor=\"accent\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-download-btn\"\n    luxAriaLabel=\"Datei herunterladen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-window-close\"\n    (luxClicked)=\"onClose()\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-close-btn\"\n    luxAriaLabel=\"Dateivorschau schlie\u00DFen\"\n  ></lux-button>\n</lux-file-preview-toolbar>\n<div class=\"message-box\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\">\n  <div>Diese Datei kann nicht angezeigt werden.</div>\n  <lux-button [luxLabel]=\"downloadLabel\" (luxClicked)=\"onDownload()\" [luxRaised]=\"true\" luxColor=\"accent\"></lux-button>\n</div>\n",
                styles: [""]
            }),
            __param(1, core.Inject(LUX_FILE_PREVIEW_DATA)),
            __metadata("design:paramtypes", [LuxFilePreviewRef, Object, platformBrowser.DomSanitizer])
        ], LuxFilePreviewNotSupportedViewerComponent);
        return LuxFilePreviewNotSupportedViewerComponent;
    }(LuxFilePreviewBase));

    var LuxFilePreviewPdfViewerComponent = /** @class */ (function (_super) {
        __extends(LuxFilePreviewPdfViewerComponent, _super);
        function LuxFilePreviewPdfViewerComponent(previewRef, previewData, sanitizer) {
            var _this = _super.call(this, previewRef, previewData, sanitizer) || this;
            _this.previewRef = previewRef;
            _this.previewData = previewData;
            _this.sanitizer = sanitizer;
            _this.showAll = true;
            _this.page = 1;
            _this.numPages = 0;
            _this.loadingDivWidth = 100;
            _this.loadingDivHeight = 50;
            _this.options = [
                { label: ' 15%', value: 0.15 },
                { label: ' 25%', value: 0.25 },
                { label: ' 50%', value: 0.5 },
                { label: ' 75%', value: 0.75 },
                { label: '100%', value: 1.0 },
                { label: '150%', value: 1.5 },
                { label: '200%', value: 2.0 }
            ];
            _this.zoom = _this.options[4];
            return _this;
        }
        LuxFilePreviewPdfViewerComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.loadingDivLeft = window.innerWidth / 2 - this.loadingDivWidth / 2;
            this.loadingDivTop = window.innerHeight / 2 - this.loadingDivHeight / 2;
        };
        LuxFilePreviewPdfViewerComponent.prototype.onPrevPage = function () {
            this.page--;
            this.clearFocus();
        };
        LuxFilePreviewPdfViewerComponent.prototype.onNextPage = function () {
            this.page++;
            this.clearFocus();
        };
        LuxFilePreviewPdfViewerComponent.prototype.pageRendered = function (e) {
            if (e && e.pageNumber === 1) {
                this.loadingFinished();
            }
        };
        LuxFilePreviewPdfViewerComponent.prototype.callBackFn = function (pdf) {
            var _this = this;
            this.numPages = pdf.numPages;
            pdf.getPage(1).then(function (page) {
                var viewportWidth = 0;
                var currentIndex = 0;
                while (viewportWidth === 0 || viewportWidth > _this.width) {
                    viewportWidth =
                        page.getViewport({
                            scale: _this.zoom.value
                        }).width * ng2PdfViewer.PdfViewerComponent.CSS_UNITS;
                    currentIndex = _this.options.findIndex(function (currentZoom) { return currentZoom === _this.zoom; });
                    if (currentIndex === 0) {
                        break;
                    }
                    if (viewportWidth > _this.width) {
                        _this.zoom = _this.options[Math.max(currentIndex - 1, 0)];
                    }
                }
            });
        };
        LuxFilePreviewPdfViewerComponent.prototype.onError = function (event) {
            console.log(event);
        };
        LuxFilePreviewPdfViewerComponent.prototype.onProgress = function (progressData) { };
        LuxFilePreviewPdfViewerComponent.ctorParameters = function () { return [
            { type: LuxFilePreviewRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [LUX_FILE_PREVIEW_DATA,] }] },
            { type: platformBrowser.DomSanitizer }
        ]; };
        LuxFilePreviewPdfViewerComponent = __decorate([
            core.Component({
                selector: 'lux-file-preview-pdfviewer',
                template: "<lux-file-preview-toolbar>\n  <lux-select\n    fxFlex=\"80px\"\n    [luxOptions]=\"options\"\n    [(luxSelected)]=\"zoom\"\n    luxOptionLabelProp=\"label\"\n    luxAriaLabel=\"Zoom\"\n  ></lux-select>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-arrow-left\"\n    *ngIf=\"!showAll\"\n    (luxClicked)=\"onPrevPage()\"\n    [luxDisabled]=\"page === 1\"\n    [ngClass]=\"{ 'lux-button-disabled': page === 1 }\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-zoomin-btn\"\n    luxAriaLabel=\"Hinein zoomen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-arrow-right\"\n    (luxClicked)=\"onNextPage()\"\n    [luxDisabled]=\"page === numPages\"\n    [ngClass]=\"{ 'lux-button-disabled': page === numPages }\"\n    *ngIf=\"!showAll\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-zoomout-btn\"\n    luxAriaLabel=\"Heraus zoomen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    [luxIconName]=\"downloadIconName\"\n    (luxClicked)=\"onDownload()\"\n    luxColor=\"accent\"\n    luxRaised=\"true\"\n    [luxTagId]=\"downloadTagId\"\n    [luxAriaLabel]=\"downloadAriaLabel\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    [luxIconName]=\"closeIconName\"\n    (luxClicked)=\"onClose()\"\n    luxRaised=\"true\"\n    [luxTagId]=\"closeTagId\"\n    [luxAriaLabel]=\"closeAriaLabel\"\n  ></lux-button>\n</lux-file-preview-toolbar>\n\n<div class=\"overlay-content\" [ngStyle]=\"{ width: width + 'px', height: height + 'px' }\">\n  <div\n    fxLayout=\"column\"\n    fxLayoutAlign=\"center center\"\n    *ngIf=\"loading\"\n    class=\"message-box message-box-pdf\"\n    [ngStyle]=\"{\n      left: this.loadingDivLeft + 'px',\n      top: this.loadingDivTop + 'px',\n      width: loadingDivWidth + 'px',\n      height: loadingDivHeight + 'px'\n    }\"\n  >\n    <p>Lade...</p>\n  </div>\n  <pdf-viewer\n    *ngIf=\"url\"\n    [src]=\"url\"\n    [show-all]=\"showAll\"\n    [page]=\"page\"\n    [zoom]=\"zoom.value\"\n    [render-text]=\"false\"\n    [c-maps-url]=\"'assets/cmaps/'\"\n    (page-rendered)=\"pageRendered($event)\"\n    (after-load-complete)=\"callBackFn($event)\"\n    (error)=\"onError($event)\"\n    (on-progress)=\"onProgress($event)\"\n    style=\"display: block;\"\n  ></pdf-viewer>\n</div>\n",
                styles: [".overlay-content{overflow:auto;background-color:gray;padding:8px;border-radius:4px}pdf-viewer{height:100%}.message-box-pdf{position:absolute;overflow:hidden}"]
            }),
            __param(1, core.Inject(LUX_FILE_PREVIEW_DATA)),
            __metadata("design:paramtypes", [LuxFilePreviewRef, Object, platformBrowser.DomSanitizer])
        ], LuxFilePreviewPdfViewerComponent);
        return LuxFilePreviewPdfViewerComponent;
    }(LuxFilePreviewBase));

    var LuxFilePreviewToolbarComponent = /** @class */ (function () {
        function LuxFilePreviewToolbarComponent(mediaQueryService, data) {
            this.mediaQueryService = mediaQueryService;
            this.data = data;
        }
        LuxFilePreviewToolbarComponent.ctorParameters = function () { return [
            { type: LuxMediaQueryObserverService },
            { type: undefined, decorators: [{ type: core.Inject, args: [LUX_FILE_PREVIEW_DATA,] }] }
        ]; };
        LuxFilePreviewToolbarComponent = __decorate([
            core.Component({
                selector: 'lux-file-preview-toolbar',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  <div fxFlex=\"calc(100% - 350px)\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <div class=\"lux-crop\" *ngIf=\"!mediaQueryService.isXS()\">\n      <lux-icon luxIconName=\"fa-file\"></lux-icon>\n      {{ data.fileObject.name }}\n    </div>\n  </div>\n  <div fxFlex=\"none\" fxLayout=\"row\" fxLayoutGap=\"5px\" fxLayoutAlign=\"end center\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                styles: [":host{position:absolute;top:0;left:0;right:0;color:#fff;z-index:1;padding:8px}:host ::ng-deep lux-button button{padding:5px!important;min-width:45px!important}:host ::ng-deep lux-select lux-form-control div{background-color:#fff;outline-width:0!important;outline-style:none}:host ::ng-deep lux-select lux-form-control div div.lux-form-control-label{display:none}:host ::ng-deep .lux-button-disabled button{background-color:rgba(128,128,128,.5)!important}"]
            }),
            __param(1, core.Inject(LUX_FILE_PREVIEW_DATA)),
            __metadata("design:paramtypes", [LuxMediaQueryObserverService, Object])
        ], LuxFilePreviewToolbarComponent);
        return LuxFilePreviewToolbarComponent;
    }());

    var LuxFilePreviewComponent = /** @class */ (function () {
        function LuxFilePreviewComponent(data) {
            this.data = data;
            this.fileType = 'notsupported';
        }
        LuxFilePreviewComponent.prototype.ngOnInit = function () {
            if (this.data.fileObject.type.indexOf('image/') > -1) {
                this.fileType = 'img';
            }
            else if (this.data.fileObject.type.indexOf('application/pdf') > -1) {
                this.fileType = 'pdf';
            }
            else {
                this.fileType = 'notsupported';
            }
        };
        LuxFilePreviewComponent.prototype.onClose = function () {
            if (this.pdfViewer) {
                this.pdfViewer.onClose();
            }
            else if (this.imgViewer) {
                this.imgViewer.onClose();
            }
            else {
                this.notSupportedViewer.onClose();
            }
        };
        LuxFilePreviewComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [LUX_FILE_PREVIEW_DATA,] }] }
        ]; };
        __decorate([
            core.ViewChild(LuxFilePreviewPdfViewerComponent, { static: false }),
            __metadata("design:type", LuxFilePreviewPdfViewerComponent)
        ], LuxFilePreviewComponent.prototype, "pdfViewer", void 0);
        __decorate([
            core.ViewChild(LuxFilePreviewImgViewerComponent, { static: false }),
            __metadata("design:type", LuxFilePreviewImgViewerComponent)
        ], LuxFilePreviewComponent.prototype, "imgViewer", void 0);
        __decorate([
            core.ViewChild(LuxFilePreviewNotSupportedViewerComponent, { static: false }),
            __metadata("design:type", LuxFilePreviewNotSupportedViewerComponent)
        ], LuxFilePreviewComponent.prototype, "notSupportedViewer", void 0);
        LuxFilePreviewComponent = __decorate([
            core.Component({
                selector: 'lux-file-preview',
                template: "<lux-file-preview-pdfviewer *ngIf=\"fileType === 'pdf'\"></lux-file-preview-pdfviewer>\n<lux-file-preview-imgviewer *ngIf=\"fileType === 'img'\"></lux-file-preview-imgviewer>\n<lux-file-preview-notsupportedviewer *ngIf=\"fileType === 'notsupported'\"></lux-file-preview-notsupportedviewer>\n",
                styles: [":host ::ng-deep .message-box{border-radius:8px;background-color:#fff;padding:20px}"]
            }),
            __param(0, core.Inject(LUX_FILE_PREVIEW_DATA)),
            __metadata("design:paramtypes", [Object])
        ], LuxFilePreviewComponent);
        return LuxFilePreviewComponent;
    }());

    var LuxFilePreviewModule = /** @class */ (function () {
        function LuxFilePreviewModule() {
        }
        LuxFilePreviewModule = __decorate([
            core.NgModule({
                declarations: [
                    LuxFilePreviewComponent,
                    LuxFilePreviewToolbarComponent,
                    LuxFilePreviewPdfViewerComponent,
                    LuxFilePreviewImgViewerComponent,
                    LuxFilePreviewNotSupportedViewerComponent
                ],
                imports: [
                    common.CommonModule,
                    ng2PdfViewer.PdfViewerModule,
                    flexLayout.FlexLayoutModule,
                    LuxCommonModule,
                    LuxLayoutModule,
                    LuxActionModule,
                    LuxIconModule,
                    LuxFormModule,
                    LuxDirectivesModule
                ],
                exports: [
                    LuxFilePreviewComponent,
                    LuxFilePreviewToolbarComponent,
                    LuxFilePreviewPdfViewerComponent,
                    LuxFilePreviewImgViewerComponent,
                    LuxFilePreviewNotSupportedViewerComponent
                ]
            })
        ], LuxFilePreviewModule);
        return LuxFilePreviewModule;
    }());

    var DEFAULT_FILE_PREVIEW_CONFIG = {
        hasBackdrop: true,
        backdropClass: 'lux-file-preview-backdrop',
        panelClass: 'lux-file-preview-panel',
        previewData: {
            fileComponent: null,
            fileObject: null
        }
    };
    var LuxFilePreviewService = /** @class */ (function () {
        function LuxFilePreviewService(injector, overlay) {
            this.injector = injector;
            this.overlay = overlay;
        }
        LuxFilePreviewService.prototype.open = function (config) {
            var previewConfig = __assign({}, DEFAULT_FILE_PREVIEW_CONFIG, config);
            var overlayRef = this.createOverlay(previewConfig);
            var previewRef = new LuxFilePreviewRef(overlayRef);
            var previewComponent = this.attachDialogContainer(overlayRef, previewRef, previewConfig);
            overlayRef.backdropClick().subscribe(function () { return previewComponent.onClose(); });
            return previewRef;
        };
        LuxFilePreviewService.prototype.attachDialogContainer = function (overlayRef, dialogRef, config) {
            var injector = this.createInjector(config, dialogRef);
            var containerPortal = new portal.ComponentPortal(LuxFilePreviewComponent, null, injector);
            var containerRef = overlayRef.attach(containerPortal);
            return containerRef.instance;
        };
        LuxFilePreviewService.prototype.createOverlay = function (config) {
            return this.overlay.create(this.getOverlayConfig(config));
        };
        LuxFilePreviewService.prototype.createInjector = function (config, dialogRef) {
            var injectionTokens = new WeakMap();
            injectionTokens.set(LuxFilePreviewRef, dialogRef);
            injectionTokens.set(LUX_FILE_PREVIEW_DATA, config.previewData);
            return new portal.PortalInjector(this.injector, injectionTokens);
        };
        LuxFilePreviewService.prototype.getOverlayConfig = function (config) {
            var positionStrategy = this.overlay
                .position()
                .global()
                .centerHorizontally()
                .centerVertically();
            var overlayConfig = new overlay.OverlayConfig({
                hasBackdrop: config.hasBackdrop,
                backdropClass: config.backdropClass,
                panelClass: config.panelClass,
                scrollStrategy: this.overlay.scrollStrategies.block(),
                positionStrategy: positionStrategy
            });
            return overlayConfig;
        };
        LuxFilePreviewService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: overlay.Overlay }
        ]; };
        LuxFilePreviewService.ngInjectableDef = core["ɵɵdefineInjectable"]({ factory: function LuxFilePreviewService_Factory() { return new LuxFilePreviewService(core["ɵɵinject"](core.INJECTOR), core["ɵɵinject"](overlay.Overlay)); }, token: LuxFilePreviewService, providedIn: "root" });
        LuxFilePreviewService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [core.Injector, overlay.Overlay])
        ], LuxFilePreviewService);
        return LuxFilePreviewService;
    }());

    var LuxAppFooterButtonInfo = /** @class */ (function () {
        function LuxAppFooterButtonInfo(label, cmd, color, disabled, hidden, raised, iconName, alwaysVisible, onClick) {
            this.label = label;
            this.color = color;
            this.disabled = disabled;
            this.cmd = cmd;
            this.hidden = hidden === true ? true : false;
            this.raised = raised === undefined || raised === null || raised === true ? true : false;
            this.iconName = iconName;
            this.alwaysVisible =
                alwaysVisible === undefined || alwaysVisible === null || alwaysVisible === false ? false : true;
            this.onClick = onClick ? onClick : function (that) { };
        }
        /**
         * Statische Methode um ein Info-Objekt zu generieren.
         * Nimmt ein Objekt vom Typ ILuxAppFooterButtonInfo entgegen.
         * @param data
         * @returns eine Button Info
         */
        LuxAppFooterButtonInfo.generateInfo = function (data) {
            var info = new LuxAppFooterButtonInfo(data.label, data.cmd, data.color, data.disabled, data.hidden, data.raised, data.iconName, data.alwaysVisible, data.onClick);
            return info;
        };
        return LuxAppFooterButtonInfo;
    }());

    var LuxAppFooterLinkInfo = /** @class */ (function () {
        function LuxAppFooterLinkInfo(label, path, alwaysVisible, blank) {
            this.label = label;
            this.path = path;
            this.alwaysVisible = alwaysVisible;
            this.blank = blank;
        }
        /**
         * Statische Methode um ein Info-Objekt zu generieren.
         * Nimmt ein Objekt vom Typ ILuxAppFooterLinkInfo entgegen.
         * @param data
         * @returns eine Link Info
         */
        LuxAppFooterLinkInfo.generateInfo = function (data) {
            var info = new LuxAppFooterLinkInfo(data.label, data.path, data.alwaysVisible);
            return info;
        };
        return LuxAppFooterLinkInfo;
    }());

    var LuxLookupService = /** @class */ (function () {
        function LuxLookupService(http) {
            this.http = http;
        }
        /**
         * Liefert die Eintraege einer Schluesseltabelle.
         *
         * @param tableNo
         * @param parameters
         * @param url
         * @returns Observable<LuxLookupTableEntry[]>
         */
        LuxLookupService.prototype.getLookupTable = function (tableNo, parameters, url) {
            var httpParameters = this.generateParameters(parameters);
            return this.http.get(url + 'getLookupTable/' + tableNo, { params: httpParameters });
        };
        /**
         * Generiert die Standard-Parameter fuer einen Lookup-Request.
         *
         * @param parameters
         * @returns HttpParams
         */
        LuxLookupService.prototype.generateParameters = function (parameters) {
            var httpParameters = new http.HttpParams();
            httpParameters = httpParameters.append('knr', '' + parameters.knr);
            httpParameters = httpParameters.append('raw', '' + parameters.raw);
            if (parameters.keys && parameters.keys.length > 0) {
                parameters.keys.forEach(function (key) {
                    httpParameters = httpParameters.append('keys', key);
                });
            }
            if (parameters.fields && parameters.fields.length > 0) {
                parameters.fields.forEach(function (field) {
                    httpParameters = httpParameters.append('fields', field);
                });
            }
            return httpParameters;
        };
        LuxLookupService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        LuxLookupService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [http.HttpClient])
        ], LuxLookupService);
        return LuxLookupService;
    }());

    /**
     * Enums, welche die auswaehlbaren Felder fuer den Response einer Lookup-Service-Abfrage beinhaltet.
     */

    (function (LuxFieldValues) {
        LuxFieldValues["kurz"] = "kurz";
        LuxFieldValues["lang1"] = "lang1";
        LuxFieldValues["lang2"] = "lang2";
        LuxFieldValues["gueltig_von"] = "gueltig_von";
        LuxFieldValues["gueltig_bis"] = "gueltig_bis";
    })(exports.LuxFieldValues || (exports.LuxFieldValues = {}));

    (function (LuxBehandlungsOptionenUngueltige) {
        LuxBehandlungsOptionenUngueltige["anzeigen"] = "anzeigen";
        LuxBehandlungsOptionenUngueltige["ausgrauen"] = "ausgrauen";
        LuxBehandlungsOptionenUngueltige["ausblenden"] = "ausblenden";
    })(exports.LuxBehandlungsOptionenUngueltige || (exports.LuxBehandlungsOptionenUngueltige = {}));
    /**
     * Class, welche benutzt wird um die Abfrage an den Lookup-Service zu modifizeren.
     */
    var LuxLookupParameters = /** @class */ (function () {
        function LuxLookupParameters(data) {
            this.knr = data.knr;
            this.keys = !!data.keys ? data.keys : [];
            this.fields = !!data.fields
                ? data.fields
                : [
                    exports.LuxFieldValues.kurz,
                    exports.LuxFieldValues.lang1,
                    exports.LuxFieldValues.lang2,
                    exports.LuxFieldValues.gueltig_bis,
                    exports.LuxFieldValues.gueltig_von
                ];
            this.raw = !!data.raw ? data.raw : false;
        }
        return LuxLookupParameters;
    }());

    // tslint:disable:max-line-length
    var LuxLookupComponent = /** @class */ (function (_super) {
        __extends(LuxLookupComponent, _super);
        function LuxLookupComponent(lookupService, lookupHandler, controlContainer, cdr, logger, componentsConfigService) {
            var _this = _super.call(this, controlContainer, cdr, logger, componentsConfigService) || this;
            _this.LuxBehandlungsOptionenUngueltige = exports.LuxBehandlungsOptionenUngueltige;
            _this.luxBehandlungUngueltige = exports.LuxBehandlungsOptionenUngueltige.ausgrauen;
            _this.luxDataLoaded = new core.EventEmitter();
            _this.luxValueChange = new core.EventEmitter();
            _this.entries = [];
            _this.lookupService = lookupService;
            _this.lookupHandler = lookupHandler;
            _this.componentsConfigService = componentsConfigService;
            return _this;
        }
        Object.defineProperty(LuxLookupComponent.prototype, "luxValue", {
            get: function () {
                return this.getValue();
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        LuxLookupComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            if (!this.luxLookupId) {
                console.error("Die Lookup-Komponente mit der Tabellen-Nr. " + this.luxTableNo + " besitzt keine LookupId. Bitte tragen Sie diese nach.");
            }
            this.lookupHandler.addLookupElement(this.luxLookupId);
            this.lookupHandler.getLookupElementObsv(this.luxLookupId).subscribe(function () {
                _this.fetchLookupData();
            });
            this.configSubscription = this.componentsConfigService.config.subscribe(function (newConfig) {
                _this.apiPath = newConfig.lookupServiceUrl;
                _this.lookupHandler.reloadData(_this.luxLookupId);
            });
        };
        LuxLookupComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.configSubscription.unsubscribe();
        };
        /**
         * Gibt zurueck, ob die RenderProperty eine Funktion ist oder nicht.
         *
         * @returns boolean
         */
        LuxLookupComponent.prototype.isRenderPropAFunction = function () {
            return typeof this.luxRenderProp === 'function';
        };
        /**
         * Gibt zurück ob sich das entsprechende Element in der Liste ungültiger Elemente befindet.
         * @param LuxLookupTableEntry entry
         * @returns boolean
         */
        LuxLookupComponent.prototype.isUngueltig = function (entry) {
            var isUngueltig = false;
            if (entry) {
                if (!Array.isArray(entry)) {
                    if (entry.gueltigkeitBis) {
                        isUngueltig = Date.now() > +entry.gueltigkeitBis;
                    }
                }
                else {
                    entry.forEach(function (element) {
                        if (element.gueltigkeitBis && !isUngueltig) {
                            isUngueltig = Date.now() > +element.gueltigkeitBis;
                        }
                    });
                }
            }
            return isUngueltig;
        };
        /**
         * Gibt zurück ob ungültige Einträge angezeigt werden sollen.
         * @returns boolean
         */
        LuxLookupComponent.prototype.showUngueltige = function () {
            return (this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.ausgrauen ||
                this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.anzeigen);
        };
        /**
         * Gibt zurück ob ungültige Einträge deaktiviert werden sollen.
         * @returns boolean
         */
        LuxLookupComponent.prototype.disableUngueltige = function () {
            return this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.ausgrauen;
        };
        /**
         * Gibt die mitgegebenen Styles abhaengig ob das Element invalid ist zurueck.
         * @param boolean invalid
         * @returns LuxLookupOptionStyle
         */
        LuxLookupComponent.prototype.getStyles = function (invalid) {
            if (invalid) {
                return this.luxCustomInvalidStyles ? this.luxCustomInvalidStyles : {};
            }
            return this.luxCustomStyles ? this.luxCustomStyles : {};
        };
        /**
         * @override errorMessageModifier - Modifikation der Fehlermeldung
         * @param value
         * @param errors
         */
        LuxLookupComponent.prototype.errorMessageModifier = function (value, errors) {
            if (errors['ungueltig']) {
                return 'Der ausgewählte Wert ist ungültig.';
            }
            return undefined;
        };
        LuxLookupComponent.prototype.getLabel = function (entry) {
            if (this.isRenderPropAFunction()) {
                return this.luxRenderProp(entry);
            }
            if (entry[this.luxRenderProp]) {
                return entry[this.luxRenderProp];
            }
            return 'Fehler beim Auslesen (Property unbekannt)';
        };
        /**
         * Holt die Lookup-Table Daten vom Backend
         */
        LuxLookupComponent.prototype.fetchLookupData = function () {
            var _this = this;
            var backendRequest = this.lookupService.getLookupTable(this.luxTableNo, this.luxParameters, this.apiPath);
            backendRequest.subscribe(function (entries) {
                _this.setLookupData(entries);
                _this.luxDataLoaded.emit(true);
            }, function () {
                _this.luxDataLoaded.emit(false);
            });
        };
        /**
         * Setzt die aktuellen Werte auf die mitgegebenen Entries.
         * @param entries
         */
        LuxLookupComponent.prototype.setLookupData = function (entries) {
            var _this = this;
            this.entries = entries;
            if (this.entries) {
                // Merken welche Eintraege ungueltig sind, um bei vielen Informationen
                // nicht die ganzen Funktionsaufrufe zu haben
                this.entries.forEach(function (entry) {
                    entry.isUngueltig = _this.isUngueltig(entry);
                });
            }
        };
        // region Overridden methods
        LuxLookupComponent.prototype.notifyFormValueChanged = function (formValue) {
            this.luxValueChange.emit(formValue);
        };
        LuxLookupComponent.prototype.triggerOutputPatternCheck = function () {
            this.checkOutputPatternViolation(this.luxValueChange.observers);
        };
        LuxLookupComponent.prototype.triggerInputPatternCheck = function (simpleChanges) {
            this.checkInputPatternViolation(simpleChanges.luxValue);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupComponent.prototype, "luxPlaceholder", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxLookupComponent.prototype, "luxReadonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupComponent.prototype, "luxLookupId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupComponent.prototype, "luxTableNo", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxLookupComponent.prototype, "luxRenderProp", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupComponent.prototype, "luxBehandlungUngueltige", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", LuxLookupParameters)
        ], LuxLookupComponent.prototype, "luxParameters", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxLookupComponent.prototype, "luxCustomStyles", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LuxLookupComponent.prototype, "luxCustomInvalidStyles", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupComponent.prototype, "luxTagId", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxLookupComponent.prototype, "luxDataLoaded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxLookupComponent.prototype, "luxValueChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LuxLookupComponent.prototype, "luxValue", null);
        return LuxLookupComponent;
    }(LuxFormComponentBase));

    var LuxLookupHandlerService = /** @class */ (function () {
        function LuxLookupHandlerService() {
            this.lookupElements = new Map();
        }
        /**
         * Fügt ein LookupComponent zu der Map hinzu.
         * @param string name
         */
        LuxLookupHandlerService.prototype.addLookupElement = function (name) {
            this.lookupElements.set(name, new rxjs.Subject());
        };
        /**
         * Gibt das Subject einer LookupComponent als Observable zurück (oder null).
         * @param string name
         * @returns Observable<any> | null
         */
        LuxLookupHandlerService.prototype.getLookupElementObsv = function (name) {
            var lookupEl = this.getLookupElementSubject(name);
            if (lookupEl) {
                return lookupEl.asObservable();
            }
            return null;
        };
        /**
         * Gibt das Subject einer LookupComponent zurück (oder null).
         * @param string name
         * @returns Observable<any> | null
         */
        LuxLookupHandlerService.prototype.getLookupElementSubject = function (name) {
            var lookupEl = this.lookupElements.get(name);
            if (lookupEl) {
                return lookupEl;
            }
            return null;
        };
        /**
         * Stößt das Neuladen von Schlüsseltabellendaten einer LookupComponent an.
         * @param string name
         */
        LuxLookupHandlerService.prototype.reloadData = function (lookupId) {
            var lookupEl = this.getLookupElementSubject(lookupId);
            if (lookupEl) {
                lookupEl.next();
            }
            else {
                console.error('Die Lookup-Komponente ' + lookupId + ' konnte nicht gefunden werden.');
            }
        };
        LuxLookupHandlerService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], LuxLookupHandlerService);
        return LuxLookupHandlerService;
    }());

    var LuxLookupErrorStateMatcher = /** @class */ (function () {
        function LuxLookupErrorStateMatcher(lookupComponent) {
            this.lookupComponent = lookupComponent;
        }
        LuxLookupErrorStateMatcher.prototype.isErrorState = function (control, form) {
            var lookupValue = this.lookupComponent.luxValue;
            if (lookupValue) {
                // Wenn ein selektierter Wert ungültig ist, Fehler anzeigen
                if ((!Array.isArray(lookupValue) && lookupValue.isUngueltig) ||
                    (Array.isArray(lookupValue) && lookupValue.filter(function (value) { return value.isUngueltig; }).length > 0)) {
                    if (!control.errors || !control.errors.ungueltig) {
                        setTimeout(function () {
                            control.setErrors({ ungueltig: 'true' });
                        });
                    }
                    return true;
                }
            }
            return !!control.errors && control.touched;
        };
        return LuxLookupErrorStateMatcher;
    }());

    var LuxLookupComboboxComponent = /** @class */ (function (_super) {
        __extends(LuxLookupComboboxComponent, _super);
        function LuxLookupComboboxComponent(lookupService, lookupHandler, controlContainer, cdr, logger, componentsConfigService) {
            var _this = _super.call(this, lookupService, lookupHandler, controlContainer, cdr, logger, componentsConfigService) || this;
            _this.luxMultiple = false;
            _this.luxEntryBlockSize = 25;
            _this.stateMatcher = new LuxLookupErrorStateMatcher(_this);
            return _this;
        }
        LuxLookupComboboxComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.matSelect.openedChange.subscribe(function (open) {
                if (open) {
                    _this.registerPanelScrollEvent(_this.matSelect.panel.nativeElement);
                }
            });
        };
        /**
         * Vergleicht die Optionen anhand der Key-Werte
         * @param value1
         * @param value2
         * @returns boolean
         */
        LuxLookupComboboxComponent.prototype.compareByKey = function (value1, value2) {
            var key1 = value1 ? value1.key : -1;
            var key2 = value2 ? value2.key : -2;
            return key1 === key2;
        };
        LuxLookupComboboxComponent.prototype.setLookupData = function (entries) {
            _super.prototype.setLookupData.call(this, entries);
            if (this.entries.length > this.luxEntryBlockSize) {
                this.displayedEntries = this.entries.splice(0, this.luxEntryBlockSize);
            }
            else {
                this.displayedEntries = __spread(this.entries);
            }
        };
        /**
         * Setzt den aktuellen Value-Wert auf den ausgewählten Wert.
         * @param $event
         */
        LuxLookupComboboxComponent.prototype.selected = function ($event) {
            this.luxValue = $event.value;
        };
        /**
         * Fuegt beim Oeffnen des Selects einen Scrolllistener hinzu.
         */
        LuxLookupComboboxComponent.prototype.registerPanelScrollEvent = function (panelElement) {
            var _this = this;
            panelElement.addEventListener('scroll', function (event) { return _this.loadOnScroll(event); });
        };
        /**
         * Stoesst das Nachladen von Elementen an, wenn ein bestimmter Scrollwert erreicht wurde.
         * @param event - ScrollEvent
         */
        LuxLookupComboboxComponent.prototype.loadOnScroll = function (event) {
            var position = event.target;
            if ((position.scrollTop + position.clientHeight) / position.scrollHeight > 85 / 100) {
                this.reloadNextDataBlock();
            }
        };
        /**
         * Laed den naechsten Block Daten aus den Entries nach.
         */
        LuxLookupComboboxComponent.prototype.reloadNextDataBlock = function () {
            var _a;
            var start = this.displayedEntries.length - 1;
            var end = start + this.luxEntryBlockSize > this.entries.length
                ? this.entries.length - start
                : start + this.luxEntryBlockSize;
            (_a = this.displayedEntries).push.apply(_a, __spread(this.entries.splice(start, end)));
        };
        LuxLookupComboboxComponent.ctorParameters = function () { return [
            { type: LuxLookupService },
            { type: LuxLookupHandlerService },
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], LuxLookupComboboxComponent.prototype, "luxMultiple", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxLookupComboboxComponent.prototype, "luxEntryBlockSize", void 0);
        __decorate([
            core.ViewChild(material.MatSelect, { static: false }),
            __metadata("design:type", material.MatSelect)
        ], LuxLookupComboboxComponent.prototype, "matSelect", void 0);
        LuxLookupComboboxComponent = __decorate([
            core.Component({
                selector: 'lux-lookup-combobox',
                template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <mat-select\n    [placeholder]=\"luxPlaceholder\"\n    [multiple]=\"luxMultiple\"\n    [required]=\"luxRequired\"\n    [formControl]=\"formControl\"\n    luxTagIdHandler\n    [luxTagId]=\"luxTagId\"\n    [panelClass]=\"'lux-select-panel'\"\n    [errorStateMatcher]=\"stateMatcher\"\n    [compareWith]=\"compareByKey\"\n    (focusin)=\"luxFocusIn.emit($event)\"\n    [panelClass]=\"'lux-lookup-panel'\"\n    (focusout)=\"luxFocusOut.emit($event)\"\n    [id]=\"uid\"\n    [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n    [attr.aria-invalid]=\"formControl.invalid\"\n    [attr.aria-required]=\"luxRequired\"\n  >\n    <ng-container *ngFor=\"let entry of displayedEntries\">\n      <mat-option\n        [value]=\"entry\"\n        [ngClass]=\"{ invalid: entry.isUngueltig }\"\n        [ngStyle]=\"getStyles(entry.isUngueltig)\"\n        [disabled]=\"entry.isUngueltig && disableUngueltige()\"\n        *ngIf=\"!entry.isUngueltig || (entry.isUngueltig && showUngueltige())\"\n      >\n        <span>{{ getLabel(entry) }}</span>\n      </mat-option>\n    </ng-container>\n  </mat-select>\n</lux-form-control>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}mat-error,mat-hint{font-size:.75em;position:absolute;top:0}.mat-form-field-invalid+.hint-error-box .mat-hint{display:none}.hint-error-box{position:relative;margin-top:-2em}::ng-deep mat-option{border-left:2px solid #fff}::ng-deep mat-option.invalid{border-left:2px solid #b01211}.lux-readonly{pointer-events:none}::ng-deep .lux-lookup-panel.mat-select-panel{max-width:100%!important}::ng-deep .lux-select-panel mat-option:not(:last-of-type){margin-bottom:2px}"]
            }),
            __param(2, core.Optional()),
            __metadata("design:paramtypes", [LuxLookupService,
                LuxLookupHandlerService,
                forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxLookupComboboxComponent);
        return LuxLookupComboboxComponent;
    }(LuxLookupComponent));

    var LuxAutocompleteErrorStateMatcher = /** @class */ (function (_super) {
        __extends(LuxAutocompleteErrorStateMatcher, _super);
        function LuxAutocompleteErrorStateMatcher(lookupComponent, entries) {
            var _this = _super.call(this, lookupComponent) || this;
            _this.entries = [];
            _this.entries = entries;
            return _this;
        }
        LuxAutocompleteErrorStateMatcher.prototype.isErrorState = function (control, form) {
            if (control && typeof control.value === 'string' && control.value.length > 0) {
                if (!control.errors || !control.errors.noResult) {
                    setTimeout(function () {
                        control.setErrors({ noResult: true });
                    });
                }
                return true;
            }
            return _super.prototype.isErrorState.call(this, control, form);
        };
        return LuxAutocompleteErrorStateMatcher;
    }(LuxLookupErrorStateMatcher));

    var LuxLookupAutocompleteComponent = /** @class */ (function (_super) {
        __extends(LuxLookupAutocompleteComponent, _super);
        function LuxLookupAutocompleteComponent(lookupService, lookupHandler, controlContainer, cdr, logger, componentsConfigService) {
            var _this = _super.call(this, lookupService, lookupHandler, controlContainer, cdr, logger, componentsConfigService) || this;
            _this.luxDebounceTime = 250;
            _this.luxMaximumDisplayed = 50;
            _this.luxBlur = new core.EventEmitter();
            _this.luxFocus = new core.EventEmitter();
            _this.stateMatcher = new LuxAutocompleteErrorStateMatcher(_this, _this.entries);
            return _this;
        }
        LuxLookupAutocompleteComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.filteredEntries = this.formControl.valueChanges.pipe(operators.debounceTime(this.luxDebounceTime), operators.distinctUntilChanged(), operators.startWith(''), operators.map(function (value) {
                var searchValue = typeof value === 'string' ? value : _this.displayFn(value);
                _this.latestSearchValue = searchValue;
                var filteredValues = searchValue ? _this.filter(searchValue) : _this.entries ? _this.entries.slice() : [];
                _this.entriesCount = filteredValues.length;
                if (_this.entriesCount > _this.luxMaximumDisplayed) {
                    filteredValues = filteredValues.splice(0, _this.luxMaximumDisplayed);
                }
                return filteredValues;
            }));
        };
        /**
         * Vergleicht den eingegebenen Wert mit den Display-Werten der Einträge.
         * @param filterTerm
         * @returns LuxLookupTableEntry[]
         */
        LuxLookupAutocompleteComponent.prototype.filter = function (filterTerm) {
            var _this = this;
            return this.entries.filter(function (option) {
                var compareValue = _this.displayFn(option);
                return (compareValue
                    .trim()
                    .toLowerCase()
                    .indexOf(filterTerm.trim().toLowerCase()) > -1);
            });
        };
        /**
         * Bestimmt wie eingegebene Optionen dargestellt werden.
         * @param option
         * @returns string
         */
        LuxLookupAutocompleteComponent.prototype.displayFn = function (option) {
            if (typeof option === 'string') {
                return option;
            }
            else if (this.isRenderPropAFunction()) {
                return this.luxRenderProp(option);
            }
            else if (option) {
                return option[this.luxRenderProp]
                    ? option[this.luxRenderProp]
                    : 'Fehler beim Auslesen (Property unbekannt)';
            }
        };
        /**
         * Wird beim Klick auf das Input Feld aufgerufen.
         * @param clickEvent
         */
        LuxLookupAutocompleteComponent.prototype.onClick = function (clickEvent) {
            clickEvent.target.setSelectionRange(0, clickEvent.target.value.length);
            // Beim Klick wenn kein Wert gesetzt ist, das Panel oeffnen
            if (!this.luxValue) {
                this.matAutocompleteTrigger._onChange('');
                this.matAutocompleteTrigger.openPanel();
            }
        };
        /**
         * Setzt den aktuellen Value-Wert auf den ausgewählten Wert.
         * @param MatAutocompleteSelectedEvent $event
         */
        LuxLookupAutocompleteComponent.prototype.selected = function ($event) {
            this.luxValue = $event.option.value;
            if (this.isInForm()) {
                this.formControl.setValue(this.luxValue);
            }
        };
        /**
         * @override errorMessageModifier - Modifikation der Fehlermeldung
         * @param value
         * @param errors
         */
        LuxLookupAutocompleteComponent.prototype.errorMessageModifier = function (value, errors) {
            var msg = _super.prototype.errorMessageModifier.call(this, value, errors);
            if (msg) {
                return msg;
            }
            if (errors['noResult']) {
                return 'Der eingegebene Eintrag ist nicht Teil der Schlüsseltabelle.';
            }
            return undefined;
        };
        LuxLookupAutocompleteComponent.ctorParameters = function () { return [
            { type: LuxLookupService },
            { type: LuxLookupHandlerService },
            { type: forms.ControlContainer, decorators: [{ type: core.Optional }] },
            { type: core.ChangeDetectorRef },
            { type: LuxConsoleService },
            { type: LuxComponentsConfigService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxLookupAutocompleteComponent.prototype, "luxDebounceTime", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxLookupAutocompleteComponent.prototype, "luxMaximumDisplayed", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxLookupAutocompleteComponent.prototype, "luxBlur", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], LuxLookupAutocompleteComponent.prototype, "luxFocus", void 0);
        __decorate([
            core.ViewChild(material.MatAutocomplete, { static: false }),
            __metadata("design:type", material.MatAutocomplete)
        ], LuxLookupAutocompleteComponent.prototype, "matAutocomplete", void 0);
        __decorate([
            core.ViewChild(material.MatAutocompleteTrigger, { static: false }),
            __metadata("design:type", material.MatAutocompleteTrigger)
        ], LuxLookupAutocompleteComponent.prototype, "matAutocompleteTrigger", void 0);
        LuxLookupAutocompleteComponent = __decorate([
            core.Component({
                selector: 'lux-lookup-autocomplete',
                template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <div class=\"lux-input-row\">\n    <input\n      type=\"text\"\n      [placeholder]=\"luxPlaceholder\"\n      matInput\n      [matAutocomplete]=\"auto\"\n      (click)=\"onClick($event)\"\n      autocomplete=\"off\"\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [required]=\"luxRequired\"\n      [readonly]=\"luxReadonly\"\n      [formControl]=\"formControl\"\n      [errorStateMatcher]=\"stateMatcher\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"luxFocusIn.emit($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [id]=\"uid\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      #autoCompleteInput\n    />\n\n    <mat-autocomplete\n      #auto=\"matAutocomplete\"\n      [class]=\"'lux-autocomplete-panel'\"\n      [displayWith]=\"displayFn.bind(this)\"\n      (optionSelected)=\"selected($event)\"\n    >\n      <mat-option\n        *ngIf=\"entriesCount !== 1 && entriesCount > luxMaximumDisplayed && latestSearchValue\"\n        [disabled]=\"true\"\n        class=\"information-option\"\n      >\n        <div fxLayout=\"row\">\n          <div>\n            {{ entriesCount - luxMaximumDisplayed }} Treffer werden nicht angezeigt. <br />Bitte verfeinern Sie Ihre\n            Suche.\n          </div>\n        </div>\n      </mat-option>\n      <ng-container *ngFor=\"let entry of filteredEntries | async\">\n        <mat-option\n          [value]=\"entry\"\n          [ngClass]=\"{ invalid: entry.isUngueltig }\"\n          [ngStyle]=\"getStyles(entry.isUngueltig)\"\n          [disabled]=\"entry.isUngueltig && disableUngueltige()\"\n          *ngIf=\"!entry.isUngueltig || (entry.isUngueltig && showUngueltige())\"\n        >\n          <span>{{ getLabel(entry) }}</span>\n        </mat-option>\n      </ng-container>\n    </mat-autocomplete>\n  </div>\n</lux-form-control>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}mat-error,mat-hint{font-size:.75em;position:absolute;top:0}.mat-form-field-invalid+.hint-error-box .mat-hint{display:none}.hint-error-box{position:relative;margin-top:-2em}::ng-deep mat-option{border-left:2px solid #fff}::ng-deep mat-option.invalid{border-left:2px solid #b01211}.lux-readonly{pointer-events:none}::ng-deep .lux-autocomplete-panel mat-option{margin-bottom:2px}::ng-deep .lux-autocomplete-panel mat-option.information-option{position:fixed;background:#fff;z-index:1000;line-height:24px;pointer-events:none}::ng-deep .lux-autocomplete-panel mat-option.information-option+mat-option{margin-top:48px}"]
            }),
            __param(2, core.Optional()),
            __metadata("design:paramtypes", [LuxLookupService,
                LuxLookupHandlerService,
                forms.ControlContainer,
                core.ChangeDetectorRef,
                LuxConsoleService,
                LuxComponentsConfigService])
        ], LuxLookupAutocompleteComponent);
        return LuxLookupAutocompleteComponent;
    }(LuxLookupComponent));

    var LuxLookupLabelComponent = /** @class */ (function () {
        function LuxLookupLabelComponent(lookupService, lookupHandler, luxConsoleLogger) {
            this.luxLookupUrl = '/lookup/';
            this.luxBezeichnung = 'kurz';
            this.lookupService = lookupService;
            this.lookupHandler = lookupHandler;
            this.logger = luxConsoleLogger;
        }
        LuxLookupLabelComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.luxLookupId) {
                console.error('Das Lookup-Label mit der Tabellen-Nr. ${this.luxTableNo} besitzt keine LookupId.' +
                    'Bitte tragen Sie diese nach.');
            }
            if (!this.luxTableNo) {
                console.error('Das Lookup-Label mit der LookupId ${this.luxLookupId} besitzt keine Tabellen-Nummer. ' +
                    'Bitte tragen Sie diese nach.');
            }
            if (!this.luxTableKey) {
                console.error('Das Lookup-Label mit der Tabellen-Nr. ${this.luxTableNo} besitzt keinen Tabellen-Key.' +
                    'Bitte tragen Sie diese nach.');
            }
            this.fetchLookupData();
            this.lookupHandler.addLookupElement(this.luxLookupId);
            this.lookupHandler.getLookupElementObsv(this.luxLookupId).subscribe(function () {
                _this.fetchLookupData();
            });
        };
        LuxLookupLabelComponent.prototype.fetchLookupData = function () {
            var _this = this;
            var keys = [this.luxTableKey];
            this.lookupParameters = new LuxLookupParameters({ knr: this.luxLookupKnr, keys: keys });
            this.lookupService
                .getLookupTable(this.luxTableNo, this.lookupParameters, this.luxLookupUrl)
                .subscribe(function (entries) {
                if (typeof entries !== 'undefined' && entries.length === 1) {
                    _this.entry = entries[0];
                }
            });
        };
        /**
         * liefert die Bezeichnung (Kurz- oder Langbezeichnung) des Entries für den Key zur Tabelle.
         *
         * @returns string
         */
        LuxLookupLabelComponent.prototype.getBezeichnung = function () {
            var bezeichnung = '';
            if (this.entry) {
                if ('kurz' === this.luxBezeichnung) {
                    bezeichnung = this.entry.kurzText;
                }
                else if ('lang' === this.luxBezeichnung) {
                    bezeichnung = this.entry.langText1;
                    if (!bezeichnung) {
                        bezeichnung = this.entry.kurzText;
                    }
                }
            }
            return bezeichnung;
        };
        LuxLookupLabelComponent.ctorParameters = function () { return [
            { type: LuxLookupService },
            { type: LuxLookupHandlerService },
            { type: LuxConsoleService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LuxLookupLabelComponent.prototype, "luxLookupKnr", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupLabelComponent.prototype, "luxLookupId", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupLabelComponent.prototype, "luxLookupUrl", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupLabelComponent.prototype, "luxTableNo", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupLabelComponent.prototype, "luxTableKey", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LuxLookupLabelComponent.prototype, "luxBezeichnung", void 0);
        LuxLookupLabelComponent = __decorate([
            core.Component({
                selector: 'lux-lookup-label',
                template: "<span>{{ getBezeichnung() }}</span>\n"
            }),
            __metadata("design:paramtypes", [LuxLookupService,
                LuxLookupHandlerService,
                LuxConsoleService])
        ], LuxLookupLabelComponent);
        return LuxLookupLabelComponent;
    }());

    var LuxLookupModule = /** @class */ (function () {
        function LuxLookupModule() {
        }
        LuxLookupModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.ReactiveFormsModule,
                    forms.FormsModule,
                    http.HttpClientModule,
                    material.MatSelectModule,
                    material.MatFormFieldModule,
                    LuxDirectivesModule,
                    LuxFormModule,
                    material.MatAutocompleteModule,
                    material.MatInputModule,
                    flexLayout.FlexLayoutModule,
                    LuxComponentsConfigModule
                ],
                declarations: [LuxLookupComboboxComponent, LuxLookupAutocompleteComponent, LuxLookupLabelComponent],
                providers: [http.HttpClient, LuxLookupService],
                exports: [LuxLookupComboboxComponent, LuxLookupAutocompleteComponent, LuxLookupLabelComponent]
            })
        ], LuxLookupModule);
        return LuxLookupModule;
    }());

    /**
     * Kennzeichnet einen einzelnen Eintrag in einer Schluesseltabelle.
     */
    var LuxLookupTableEntry = /** @class */ (function () {
        function LuxLookupTableEntry(partial) {
            Object.assign(this, partial);
        }
        return LuxLookupTableEntry;
    }());

    var LuxSnackbarConfig = /** @class */ (function () {
        function LuxSnackbarConfig(partial) {
            this.iconName = '';
            this.iconSize = '3x';
            this.iconColor = '';
            this.text = '';
            this.textColor = '';
            this.action = '';
            this.actionColor = '';
            Object.assign(this, partial);
        }
        return LuxSnackbarConfig;
    }());

    var LuxSnackbarComponent = /** @class */ (function () {
        function LuxSnackbarComponent(config, snackbarRef) {
            this.config = config;
            this.snackbarRef = snackbarRef;
            this.action$ = new rxjs.Subject();
        }
        LuxSnackbarComponent.prototype.ngOnInit = function () {
            var _this = this;
            Object.keys(this.config).forEach(function (key) {
                if (_this.config[key]) {
                    _this.config[key] = _this.config[key].trim();
                }
            });
            // stupid-cast, um den string weiterzugeben, da die fn daraus den enum-wert herleiten kann
            this.textFontColor = LuxUtil.getColorsByBgColorsEnum(this.checkColorInEnum(this.config.textColor)).backgroundCSSClass;
            this.actionFontColor = LuxUtil.getColorsByBgColorsEnum(this.checkColorInEnum(this.config.actionColor)).backgroundCSSClass;
            this.iconFontColor = LuxUtil.getColorsByBgColorsEnum(this.checkColorInEnum(this.config.iconColor)).backgroundCSSClass;
        };
        LuxSnackbarComponent.prototype.onAction = function () {
            return this.action$.asObservable();
        };
        LuxSnackbarComponent.prototype.actionClick = function () {
            this.snackbarRef.dismiss();
            this.action$.next();
        };
        /**
         * Prüft ob die übergebene Farbe Teil des Enums ist.
         * Wenn nicht, wird standardmäßig "gray" zurückgegeben.
         * @param colorToCheck
         */
        LuxSnackbarComponent.prototype.checkColorInEnum = function (colorToCheck) {
            if (exports.LuxBackgroundColorsEnum[colorToCheck]) {
                return exports.LuxBackgroundColorsEnum[colorToCheck];
            }
            return exports.LuxBackgroundColorsEnum.gray;
        };
        LuxSnackbarComponent.ctorParameters = function () { return [
            { type: LuxSnackbarConfig, decorators: [{ type: core.Inject, args: [material.MAT_SNACK_BAR_DATA,] }] },
            { type: material.MatSnackBarRef }
        ]; };
        LuxSnackbarComponent = __decorate([
            core.Component({
                selector: 'lux-snackbar',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"lux-flex-layout-gap-20 lux-snackbar-content\">\n  <div fxFlex=\"0 0 auto\">\n    <lux-icon [ngClass]=\"iconFontColor\" [luxIconName]=\"config.iconName\" [luxIconSize]=\"config.iconSize\"> </lux-icon>\n  </div>\n  <div [ngClass]=\"textFontColor\" fxFlex=\"auto\">\n    {{ config.text }}\n  </div>\n\n  <div fxFlex=\"0 0 auto\" *ngIf=\"config.action\">\n    <button\n      class=\"snackbar-action\"\n      [ngClass]=\"actionFontColor\"\n      mat-button\n      [disableRipple]=\"true\"\n      (click)=\"actionClick()\"\n    >\n      {{ config.action }}\n    </button>\n  </div>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}.snackbar-action ::ng-deep .mat-button-focus-overlay{display:none}.lux-snackbar-content .lux-bg-color-red{color:#b01211;background-color:transparent}.lux-snackbar-content .lux-bg-color-green{color:#95bc4c;background-color:transparent}.lux-snackbar-content .lux-bg-color-yellow{color:#ebc000;background-color:transparent}.lux-snackbar-content .lux-bg-color-blue{color:#335c85;background-color:transparent}.lux-snackbar-content .lux-bg-color-gray{color:#c8c8c8;background-color:transparent}.lux-snackbar-content .lux-bg-color-orange{color:#ec9c1b;background-color:transparent}.lux-snackbar-content .lux-bg-color-brown{color:#783f04;background-color:transparent}"]
            }),
            __param(0, core.Inject(material.MAT_SNACK_BAR_DATA)),
            __metadata("design:paramtypes", [LuxSnackbarConfig,
                material.MatSnackBarRef])
        ], LuxSnackbarComponent);
        return LuxSnackbarComponent;
    }());

    var LuxDialogRef = /** @class */ (function () {
        function LuxDialogRef() {
            this._dialogConfirmed = new rxjs.ReplaySubject(1);
            this._dialogDeclined = new rxjs.ReplaySubject(1);
            this._dialogClosed = new rxjs.ReplaySubject(1);
        }
        Object.defineProperty(LuxDialogRef.prototype, "componentInstance", {
            /**
             * Gibt die Component, die in dem Dialog angezeigt wird wieder.
             */
            get: function () {
                return this._matDialogRef.componentInstance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxDialogRef.prototype, "dialogConfirmed", {
            /**
             * Damit hier ein Wert abgegeben wird, muss "closeDialog" ein Result mit dem Wert "true" übergeben bekommen.
             */
            get: function () {
                return this._dialogConfirmed.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxDialogRef.prototype, "dialogDeclined", {
            /**
             * Damit hier ein Wert abgegeben wird, muss "closeDialog" ein Result mit dem Wert "false" übergeben bekommen.
             */
            get: function () {
                return this._dialogDeclined.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxDialogRef.prototype, "dialogClosed", {
            /**
             * Wird bei Beenden des Dialogs ausgelöst.
             */
            get: function () {
                return this._dialogClosed.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LuxDialogRef.prototype, "data", {
            /**
             * Enthält die Daten für die Dialog-Component.
             */
            get: function () {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * (Re-)Initialisiert diese Dialog-Referenz neu.
         * @param matDialogRef
         * @param data
         */
        LuxDialogRef.prototype.init = function (matDialogRef, data) {
            this._matDialogRef = matDialogRef;
            this._dialogConfirmed = new rxjs.ReplaySubject(1);
            this._dialogDeclined = new rxjs.ReplaySubject(1);
            this._dialogClosed = new rxjs.ReplaySubject(1);
            this._data = data;
        };
        /**
         * Schließt den Dialog und gibt nach Beenden die entsprechenden Events aus.
         * @param result
         */
        LuxDialogRef.prototype.closeDialog = function (result) {
            var _this = this;
            this._matDialogRef.close(result);
            this._matDialogRef.afterClosed().subscribe(function (dialogResult) {
                if (dialogResult === true) {
                    _this._dialogConfirmed.next();
                }
                else if (dialogResult === false) {
                    _this._dialogDeclined.next();
                }
                _this._dialogClosed.next(result);
            });
        };
        LuxDialogRef.ngInjectableDef = core["ɵɵdefineInjectable"]({ factory: function LuxDialogRef_Factory() { return new LuxDialogRef(); }, token: LuxDialogRef, providedIn: "root" });
        LuxDialogRef = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [])
        ], LuxDialogRef);
        return LuxDialogRef;
    }());

    /**
     * Diese Component wird von dem LuxDialogService zur Darstellung via "open" genutzt und nimmt ein Konfig-Objekt
     * vom Typ LuxDialogConfig entgegen.
     */
    var LuxDialogPresetComponent = /** @class */ (function () {
        function LuxDialogPresetComponent(dialogRef) {
            this.dialogRef = dialogRef;
        }
        LuxDialogPresetComponent.prototype.ngOnInit = function () {
            this.data = this.dialogRef.data;
        };
        /**
         * Schließt den Dialog beim "positiven" Beenden des Dialogs mit dem Wert true.
         */
        LuxDialogPresetComponent.prototype.onConfirmClick = function () {
            this.dialogRef.closeDialog(true);
        };
        /**
         * Schließt den Dialog beim "negativen" Beenden des Dialogs mit dem Wert false.
         */
        LuxDialogPresetComponent.prototype.onDeclineClick = function () {
            this.dialogRef.closeDialog(false);
        };
        LuxDialogPresetComponent.ctorParameters = function () { return [
            { type: LuxDialogRef }
        ]; };
        LuxDialogPresetComponent = __decorate([
            core.Component({
                selector: 'lux-dialog-preset',
                template: "<lux-dialog-structure *ngIf=\"data\">\n  <lux-dialog-title>\n    {{ data.title }}\n  </lux-dialog-title>\n  <lux-dialog-content>\n    <ng-container *ngIf=\"data.contentTemplate\">\n      <ng-container *ngTemplateOutlet=\"data.contentTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"data.content && !data.contentTemplate\">\n      {{ data.content }}\n    </ng-container>\n  </lux-dialog-content>\n  <lux-dialog-actions fxLayout=\"row wrap\" fxLayoutAlign=\"end center\" fxLayoutGap=\"8px grid\">\n    <lux-button\n      class=\"lux-mr-3 lux-dialog-preset-decline\"\n      luxTabIndex=\"0\"\n      [luxPotentialChildren]=\"['button']\"\n      [luxLabel]=\"data.declineAction.label\"\n      [luxColor]=\"data.declineAction.color\"\n      [luxRaised]=\"data.declineAction.raised\"\n      [luxIconName]=\"data.declineAction.iconName\"\n      [luxTagId]=\"data.declineAction.tagId\"\n      [luxDisabled]=\"data.declineAction.disabled\"\n      [luxRounded]=\"data.declineAction.rounded\"\n      (luxClicked)=\"onDeclineClick()\"\n      *ngIf=\"data.declineAction\"\n    >\n    </lux-button>\n    <lux-button\n      class=\"lux-mr-3 lux-dialog-preset-confirm\"\n      luxTabIndex=\"0\"\n      [luxPotentialChildren]=\"['button']\"\n      [luxLabel]=\"data.confirmAction.label\"\n      [luxColor]=\"data.confirmAction.color\"\n      [luxRaised]=\"data.confirmAction.raised\"\n      [luxIconName]=\"data.confirmAction.iconName\"\n      [luxTagId]=\"data.confirmAction.tagId\"\n      [luxDisabled]=\"data.confirmAction.disabled\"\n      [luxRounded]=\"data.confirmAction.rounded\"\n      (luxClicked)=\"onConfirmClick()\"\n      *ngIf=\"data.confirmAction\"\n    >\n    </lux-button>\n  </lux-dialog-actions>\n</lux-dialog-structure>\n",
                styles: [""]
            }),
            __metadata("design:paramtypes", [LuxDialogRef])
        ], LuxDialogPresetComponent);
        return LuxDialogPresetComponent;
    }());

    /**
     * Diese Component stellt eine Grundstruktur für Dialoge dar und kann von Aufrufern als Alternative
     * zu LuxDialogPresetComponent genutzt werden (wenn andere Inhalte, etc. gewünscht sind).
     */
    var LuxDialogStructureComponent = /** @class */ (function () {
        function LuxDialogStructureComponent() {
        }
        LuxDialogStructureComponent.prototype.ngOnInit = function () { };
        LuxDialogStructureComponent.prototype.ngAfterViewInit = function () {
            // den Fokus auf den Dialog selbst setzen (damit eine Tastatur-Steuerung von oben nach unten stattfinden kann)
            this.dialogBase.nativeElement.focus();
        };
        __decorate([
            core.ViewChild('dialogBase', { read: core.ElementRef, static: true }),
            __metadata("design:type", core.ElementRef)
        ], LuxDialogStructureComponent.prototype, "dialogBase", void 0);
        LuxDialogStructureComponent = __decorate([
            core.Component({
                selector: 'lux-dialog-structure',
                template: "<div class=\"lux-dialog\" fxLayout=\"column\" cdkTrapFocus tabindex=\"0\" #dialogBase>\n  <div mat-dialog-title class=\"lux-dialog-title\" fxFlex=\"0 0 auto\">\n    <ng-content select=\"lux-dialog-title\"></ng-content>\n  </div>\n  <div mat-dialog-content class=\"lux-dialog-content\" fxFlex=\"0 0 auto\">\n    <ng-content select=\"lux-dialog-content\"></ng-content>\n  </div>\n  <div mat-dialog-actions class=\"lux-dialog-actions\" fxFlex=\"auto\" fxLayout=\"row wrap\" fxLayoutAlign=\"end center\">\n    <ng-content select=\"lux-dialog-actions\"></ng-content>\n  </div>\n</div>\n",
                styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}.lux-dialog{outline-width:0}.lux-dialog .lux-dialog-title{color:#335c85}.lux-dialog .lux-dialog-content{margin:0;padding:0}.lux-dialog .lux-dialog-actions{margin:32px 0 0}"]
            }),
            __metadata("design:paramtypes", [])
        ], LuxDialogStructureComponent);
        return LuxDialogStructureComponent;
    }());

    var LuxDialogTitleComponent = /** @class */ (function () {
        function LuxDialogTitleComponent() {
        }
        LuxDialogTitleComponent.prototype.ngOnInit = function () { };
        LuxDialogTitleComponent = __decorate([
            core.Component({
                selector: 'lux-dialog-title',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxDialogTitleComponent);
        return LuxDialogTitleComponent;
    }());

    var LuxDialogContentComponent = /** @class */ (function () {
        function LuxDialogContentComponent() {
        }
        LuxDialogContentComponent.prototype.ngOnInit = function () { };
        LuxDialogContentComponent = __decorate([
            core.Component({
                selector: 'lux-dialog-content',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxDialogContentComponent);
        return LuxDialogContentComponent;
    }());

    var LuxDialogActionsComponent = /** @class */ (function () {
        function LuxDialogActionsComponent() {
        }
        LuxDialogActionsComponent.prototype.ngOnInit = function () { };
        LuxDialogActionsComponent = __decorate([
            core.Component({
                selector: 'lux-dialog-actions',
                template: '<ng-content></ng-content>'
            }),
            __metadata("design:paramtypes", [])
        ], LuxDialogActionsComponent);
        return LuxDialogActionsComponent;
    }());

    var LuxPopupsModule = /** @class */ (function () {
        function LuxPopupsModule() {
        }
        LuxPopupsModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    flexLayout.FlexLayoutModule,
                    LuxIconModule,
                    LuxActionModule,
                    material.MatSnackBarModule,
                    material.MatButtonModule,
                    LuxComponentsConfigModule,
                    LuxLayoutModule,
                    material.MatDialogModule,
                    a11y.A11yModule,
                    LuxDirectivesModule
                ],
                declarations: [
                    LuxSnackbarComponent,
                    LuxDialogPresetComponent,
                    LuxDialogStructureComponent,
                    LuxDialogTitleComponent,
                    LuxDialogContentComponent,
                    LuxDialogActionsComponent
                ],
                exports: [
                    LuxSnackbarComponent,
                    LuxDialogPresetComponent,
                    LuxDialogStructureComponent,
                    LuxDialogTitleComponent,
                    LuxDialogContentComponent,
                    LuxDialogActionsComponent
                ],
                providers: [],
                entryComponents: [LuxDialogPresetComponent]
            })
        ], LuxPopupsModule);
        return LuxPopupsModule;
    }());

    /**
     * Über den LuxSnackbarService können einfach Snackbarinfos angezeigt werden.
     */
    var LuxSnackbarService = /** @class */ (function () {
        function LuxSnackbarService(snackBar) {
            this.snackBar = snackBar;
        }
        LuxSnackbarService_1 = LuxSnackbarService;
        /**
         * Diese Methode öffnet eine Snackbar mit einem Text.
         *
         * @param message Ein Text.
         * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
         * muss der Wert 0 angegeben werden.
         * @param actionName Eine Bezeichnung (z.B. Wiederherstellen) für die Action. Dieser Parameter ist optional und
         * muss nicht angegeben werden.
         */
        LuxSnackbarService.prototype.openText = function (message, duration, actionName) {
            this.snackBar.open(message, actionName, {
                duration: duration,
                verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
                horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
                panelClass: 'lux-snackbar'
            });
        };
        /**
         * Diese Methode öffnet eine Snackbar, in der die übergebene Komponente angezeigt wird.
         *
         * @param component Die Komponente, die angezeigt werden soll.
         * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
         * muss der Wert 0 angegeben werden.
         * @param data Ein Datenobjekt, das an die Komponente weitergereicht wird. Mit dem Code folgenden Code, können die
         * Daten verwendet werden. constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any).
         */
        LuxSnackbarService.prototype.openComponent = function (component, duration, data) {
            if (duration === void 0) { duration = 0; }
            this.snackBar.openFromComponent(component, {
                duration: duration,
                data: data,
                verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
                horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
                panelClass: 'lux-snackbar'
            });
        };
        /**
         * Oeffnet eine Snackbar anhand der uebergebenen Konfiguration.
         * Ermoeglicht eine genaue Konfiguration der Snackbar.
         * @param config
         */
        LuxSnackbarService.prototype.open = function (duration, config) {
            this.snackBar.openFromComponent(LuxSnackbarComponent, {
                duration: duration,
                data: config,
                verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
                horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
                panelClass: 'lux-snackbar'
            });
        };
        /**
         * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
         * geklickt wird.
         */
        LuxSnackbarService.prototype.onAction = function () {
            if (this.snackBar._openedSnackBarRef.instance instanceof LuxSnackbarComponent) {
                return this.snackBar._openedSnackBarRef.instance.onAction();
            }
            return this.snackBar._openedSnackBarRef.onAction();
        };
        /**
         * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
         * geklickt wird.
         */
        LuxSnackbarService.prototype.afterDismissed = function () {
            return this.snackBar._openedSnackBarRef.afterDismissed();
        };
        /**
         * Diese Methode blendet die Snackbar aus.
         */
        LuxSnackbarService.prototype.dismiss = function () {
            this.snackBar.dismiss();
        };
        var LuxSnackbarService_1;
        LuxSnackbarService.VERTICAL_POSITION = 'top';
        LuxSnackbarService.HORIZONTAL_POSITION = 'end';
        LuxSnackbarService.ctorParameters = function () { return [
            { type: material.MatSnackBar }
        ]; };
        LuxSnackbarService = LuxSnackbarService_1 = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [material.MatSnackBar])
        ], LuxSnackbarService);
        return LuxSnackbarService;
    }());

    var DEFAULT_DIALOG_CONF = {
        width: 'auto',
        height: 'auto',
        panelClass: [],
        disableClose: true
    };

    var DEFAULT_DIALOG_PRESET_CONF = {
        width: 'auto',
        height: 'auto',
        title: '',
        content: '',
        panelClass: [],
        disableClose: true,
        contentTemplate: undefined,
        confirmAction: {
            label: 'Bestätigen',
            raised: true
        },
        declineAction: {
            label: 'Ablehnen',
            raised: true
        }
    };

    var LuxDialogService = /** @class */ (function () {
        function LuxDialogService(matDialog, logger, luxDialogRef) {
            this.matDialog = matDialog;
            this.logger = logger;
            this.luxDialogRef = luxDialogRef;
            this.dialogOpened = false;
        }
        LuxDialogService_1 = LuxDialogService;
        /**
         * Öffnet einen Dialog basierend auf der übergebenen Component und den entsprechenden Daten.
         * @param component
         * @param config
         * @param data
         */
        LuxDialogService.prototype.openComponent = function (component, config, data) {
            this.handleOpen(component, config, data, DEFAULT_DIALOG_CONF);
            return this.luxDialogRef;
        };
        /**
         * Öffnet einen Dialog basierend auf der LuxDialogComponent und der LuxDialogConfig.
         * @param config
         */
        LuxDialogService.prototype.open = function (config) {
            // Eine Dialog-Instanz erzeugen, als Data übergeben wir hier noch einmal die Config
            this.handleOpen(LuxDialogPresetComponent, config, config, DEFAULT_DIALOG_PRESET_CONF);
            return this.luxDialogRef;
        };
        /**
         * Prüft ob bereits ein Dialog geöffnet ist und etwaige CSS-Klassen für den Dialog gegeben sind.
         * Anschließend wird der Dialog mit den übergebenen Config-Optionen und Data-Informationen geöffnet.
         * @param component
         * @param config
         * @param data
         * @param defaultConfig
         */
        LuxDialogService.prototype.handleOpen = function (component, config, data, defaultConfig) {
            if (this.dialogOpened) {
                this.logger.error(LuxDialogService_1.ALREADY_OPENED_ERROR);
                return null;
            }
            // Wenn keine Config übergeben ist, die defaultConfig nehmen
            config = config ? config : defaultConfig;
            // Die CSS-Klassen fürs Panel herausfinden
            var panelClass = ['lux-dialog'];
            if (config.panelClass) {
                if (Array.isArray(config.panelClass)) {
                    panelClass.push.apply(panelClass, __spread(config.panelClass));
                }
                else {
                    panelClass.push(config.panelClass);
                }
            }
            // Dialog öffnen und Konfiguration übergeben
            var matDialogRef = this.matDialog.open(component, {
                width: config.width,
                height: config.height,
                autoFocus: false,
                restoreFocus: true,
                disableClose: config.disableClose,
                panelClass: panelClass
            });
            this.luxDialogRef.init(matDialogRef, data);
        };
        var LuxDialogService_1;
        LuxDialogService.ALREADY_OPENED_ERROR = 'Aktuell ist bereits ein Dialog geöffnet';
        LuxDialogService.ctorParameters = function () { return [
            { type: material.MatDialog },
            { type: LuxConsoleService },
            { type: LuxDialogRef }
        ]; };
        LuxDialogService = LuxDialogService_1 = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [material.MatDialog, LuxConsoleService, LuxDialogRef])
        ], LuxDialogService);
        return LuxDialogService;
    }());

    /**
     * Der LuxStorageService speichert Daten im lokalen Browserstorage.
     * Wenn man beim Speichern (Methode -> setItem) angibt, dass es sich um sensible Daten handelt,
     * können diese einfach über die Methode 'clearSensitiveItems' gelöscht werden.
     */
    var LuxStorageService = /** @class */ (function () {
        function LuxStorageService() {
            var _this = this;
            this.postfixSensitive = '.sensitive';
            this.itemSources = new Map();
            addEventListener('storage', function (event) {
                if (event.key) {
                    if (_this.itemSources.has(event.key)) {
                        _this.itemSources.get(event.key).next(event.newValue);
                    }
                }
            });
        }
        /**
         * Diese Methode liefert den Wert für den übergebenen Schlüssel zurück.
         *
         * @param key - Der eindeutige Schlüssel.
         * @returns Liefert den Wert für den übergebenen Schlüssel zurück.
         */
        LuxStorageService.prototype.getItem = function (key) {
            if (!this.itemSources.has(key)) {
                this.itemSources.set(key, new rxjs.BehaviorSubject(localStorage.getItem(key)));
            }
            return this.itemSources.get(key).getValue();
        };
        /**
         * Diese Methode liefert ein Observable zurück, das über alle Änderungen an dem Schlüssel informiert wird.
         *
         * @param key - Der eindeutige Schlüssel.
         * @returns Liefert ein Observable zurück, das über alle Änderungen an dem Schlüssel informiert wird.
         */
        LuxStorageService.prototype.getItemAsObservable = function (key) {
            if (!this.itemSources.has(key)) {
                this.itemSources.set(key, new rxjs.BehaviorSubject(localStorage.getItem(key)));
            }
            return this.itemSources.get(key).asObservable();
        };
        /**
         * Diese Methode setzt den übergebenen Wert für den Schlüssel. Zusätzlich muss angegeben werden, ob es sich um
         * sensible oder personenbezogene Daten handelt.
         *
         * @param key - Der eindeutige Schlüssel.
         * @param value - Der neue Wert.
         * @param sensitive - Gibt an, ob es sich um sensible oder personenbezogene Daten handelt. Diese können leicht über
         *                    die Methode 'clearSensitiveItems' (z.B. beim Ausloggen) gelöscht werden.
         */
        LuxStorageService.prototype.setItem = function (key, value, sensitive) {
            try {
                localStorage.setItem(key, value);
                if (sensitive) {
                    localStorage.setItem(key + this.postfixSensitive, 'true');
                }
                if (this.itemSources.has(key)) {
                    this.itemSources.get(key).next(localStorage.getItem(key));
                }
            }
            catch (error) {
                this.itemSources.get(key).error(error);
            }
        };
        /**
         * Diese Methode entfernt den übergebenen Schlüssel.
         *
         * @param key - Der eindeutige Schlüssel.
         */
        LuxStorageService.prototype.removeItem = function (key) {
            localStorage.removeItem(key);
            localStorage.removeItem(key + this.postfixSensitive);
            if (this.itemSources.has(key)) {
                this.itemSources.get(key).next(localStorage.getItem(key));
            }
        };
        /**
         * Diese Methode löscht alle sensiblen und personenbezogenen Einträge (d.h. alle Items bei denen das Flag 'sensitive'
         * auf true gesetzt wurde).
         */
        LuxStorageService.prototype.clearSensitiveItems = function () {
            var _this = this;
            // Alle Schlüssel sammeln.
            var keys = [];
            for (var i = 0; i < localStorage.length; i++) {
                keys.push(localStorage.key(i));
            }
            // Alle sensiblen Einträge löschen.
            keys.forEach(function (key) {
                if (key && key.endsWith(_this.postfixSensitive)) {
                    _this.removeItem(key.replace(_this.postfixSensitive, ''));
                }
            });
        };
        /**
         * Diese Methode löscht alle Einträge aus dem Storage.
         */
        LuxStorageService.prototype.clearAll = function () {
            localStorage.clear();
            this.itemSources.forEach(function (itemSource) {
                itemSource.next(null);
                itemSource.complete();
            });
            this.itemSources.clear();
        };
        LuxStorageService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], LuxStorageService);
        return LuxStorageService;
    }());

    var LuxTestHelper = /** @class */ (function () {
        function LuxTestHelper() {
        }
        /**
         * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
         */
        LuxTestHelper.setInputValue = function (input, value, fixture) {
            if (input) {
                input.value = value;
                input.dispatchEvent(LuxTestHelper.createFakeEvent('input'));
                LuxTestHelper.wait(fixture);
            }
            else {
                console.error('UNIT-TEST FEHLER: input ist nicht definiert.');
            }
        };
        /**
         * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
         * Wartet asynchrone Aufrufe ab und ruft die ChangeDetection auf
         * @param fixture
         * @param tickDuration
         */
        LuxTestHelper.wait = function (fixture, tickDuration) {
            fixture.detectChanges();
            testing.tick(tickDuration);
            fixture.detectChanges();
        };
        /**
         * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
         * Sendet ein Klick-Event ab und wartet dann.
         * @param fixture
         * @param DebugElement
         */
        LuxTestHelper.click = function (fixture, debugElement) {
            debugElement.triggerEventHandler('click', null);
            LuxTestHelper.wait(fixture);
        };
        /**
         * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
         * Sendet ein Change-Event ab und wartet dann.
         * @param fixture
         * @param DebugElement
         */
        LuxTestHelper.radioButtonChange = function (fixture, radioButton) {
            radioButton.nativeElement.dispatchEvent(LuxTestHelper.createFakeEvent('change'));
            LuxTestHelper.wait(fixture);
        };
        /**
         * Erstellt eine ComponentFixture fuer die mitgegebene Komponente, optional ist es moeglich
         * weitere Provider und Declarations einzutragen. Diese werden dann im Testmodul eingetragen.
         * @param component
         * @param providers
         * @param declarations
         * @deprecated Stattdessen configureTestModule in Kombination mit configureTestSuite verwenden --> erheblich performanter
         */
        LuxTestHelper.createComponent = function (component, providers, declarations) {
            if (providers === void 0) { providers = []; }
            if (declarations === void 0) { declarations = []; }
            testing.TestBed.configureTestingModule({
                imports: __spread(LuxTestHelper.COMMON_ANGULAR_MODULES, LuxTestHelper.MATERIAL_MODULES, LuxTestHelper.LUX_MODULES),
                declarations: __spread(declarations, [component]),
                providers: __spread(providers)
            });
            testing.TestBed.compileComponents();
            return testing.TestBed.createComponent(component);
        };
        /** Utility to dispatch any event on a Node. */
        LuxTestHelper.dispatchEvent = function (node, event) {
            node.dispatchEvent(event);
            return event;
        };
        /** Shorthand to dispatch a fake event on a specified node. */
        LuxTestHelper.dispatchFakeEvent = function (node, type, canBubble) {
            return LuxTestHelper.dispatchEvent(node, LuxTestHelper.createFakeEvent(type, canBubble));
        };
        /** Shorthand to dispatch a keyboard event with a specified key code. */
        LuxTestHelper.dispatchKeyboardEvent = function (node, type, keyCode, target) {
            return LuxTestHelper.dispatchEvent(node, LuxTestHelper.createKeyboardEvent(type, keyCode, target));
        };
        /** Focuses an input and sets its value. Dispatches an fake input event afterwards. */
        LuxTestHelper.typeInElement = function (element, value, noInputEvent) {
            element.focus();
            element.value = value;
            if (!noInputEvent) {
                LuxTestHelper.dispatchFakeEvent(element, 'input');
            }
        };
        /** Steuerung und triggern von Overlays implementieren **/
        /**
         * Inserts data into an input field, that has to update asynchrounos before calling a callback-function
         * Allows to use RxJs Interval-Timers within the Target-Components.
         */
        LuxTestHelper.typeInElementAsynch = function (text, fixture, element, callback) {
            fixture.whenStable().then(function () {
                LuxTestHelper.typeInElement(element, text);
                fixture.detectChanges();
                fixture.whenStable().then(function () {
                    LuxTestHelper.dispatchKeyboardEvent(element, 'keydown', keycodes.SPACE);
                    fixture.detectChanges();
                    fixture.whenStable().then(function () {
                        callback();
                    });
                });
            });
        };
        /** Dispatches a keydown event from an element. */
        LuxTestHelper.createKeyboardEvent = function (type, keyCode, target, key) {
            var event = document.createEvent('KeyboardEvent');
            // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.
            var initEventFn = (event.initKeyEvent || event.initKeyboardEvent).bind(event);
            var originalPreventDefault = event.preventDefault;
            initEventFn(type, true, true, window, 0, 0, 0, 0, 0, keyCode);
            // Webkit Browsers don't set the keyCode when calling the init function.
            // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735
            Object.defineProperties(event, {
                keyCode: { get: function () { return keyCode; } },
                key: { get: function () { return key; } },
                target: { get: function () { return target; } }
            });
            // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.
            event.preventDefault = function () {
                Object.defineProperty(event, 'defaultPrevented', { get: function () { return true; } });
                return originalPreventDefault.apply(this, arguments);
            };
            return event;
        };
        /** Creates a fake event object with any desired event type. */
        LuxTestHelper.createFakeEvent = function (type, canBubble, cancelable) {
            if (canBubble === void 0) { canBubble = false; }
            if (cancelable === void 0) { cancelable = true; }
            var event;
            if (typeof Event === 'function') {
                event = new Event(type);
            }
            else {
                event = document.createEvent('Event');
                event.initEvent(type, canBubble, cancelable);
            }
            return event;
        };
        /**
         * Selektiert ein Element anhand der Query von dem Fixture
         */
        LuxTestHelper.selectOneFromFixture = function (fixture, query) {
            return fixture.debugElement.query(platformBrowser.By.css(query));
        };
        /**
         * Selektiert ein Array von Elementen anhand der Query von dem Fixture
         */
        LuxTestHelper.selectAllFromFixture = function (fixture, query) {
            return fixture.debugElement.queryAll(platformBrowser.By.css(query));
        };
        /**
         * Entfernt nicht-ASCII-Chars aus dem String (Beim IE wichtig, dieser fügt gerne versteckte Steuerzeichen
         * in Input-Feldern an die Strings).
         * @param dateString
         */
        LuxTestHelper.stringWithoutASCIIChars = function (dateString) {
            var exp = new RegExp('[^A-Za-z 0-9 \\.,\\?""!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*', 'g');
            return dateString.replace(exp, '');
        };
        /**
         *  Deaktiviert den Reset des Testmoduls am Ende eines Testdurchlaufs.
         *  Verbessert die Performance der Karma-Tests erheblich.
         *  Am Ende der Testsuite wird diese Funktion wieder aktiviert.
         *
         *  Funktion dafür einfach am Anfang einer Testsuite (erstes describe) aufrufen und in einem beforeAll das Testmodul
         *  erzeugen. Dieses wird nun nicht mehr nach jedem Test neu erzeugt.
         */
        LuxTestHelper.configureTestSuite = function () {
            var testBedApi = testing.getTestBed();
            var originReset = testing.TestBed.resetTestingModule;
            beforeAll(function () {
                testing.TestBed.resetTestingModule();
                testing.TestBed.resetTestingModule = function () { return testing.TestBed; };
            });
            afterEach(function () {
                testBedApi._activeFixtures.forEach(function (fixture) { return fixture.destroy(); });
                testBedApi._instantiated = false;
            });
            afterAll(function () {
                testing.TestBed.resetTestingModule = originReset;
                testing.TestBed.resetTestingModule();
            });
        };
        /**
         * Konfiguriert das TestModul für eine Testsuite, kann dabei Provider und Komponenten (Deklarationen) entgegennehmen.
         * @param providers
         * @param declarations
         * @param imports
         */
        LuxTestHelper.configureTestModule = function (providers, declarations, imports) {
            if (providers === void 0) { providers = []; }
            if (declarations === void 0) { declarations = []; }
            if (imports === void 0) { imports = []; }
            testing.TestBed.configureTestingModule({
                imports: __spread(LuxTestHelper.COMMON_ANGULAR_MODULES, LuxTestHelper.MATERIAL_MODULES, LuxTestHelper.LUX_MODULES, imports),
                declarations: __spread(declarations),
                providers: __spread(providers)
            });
            testing.TestBed.compileComponents();
        };
        /**
         * Erstellt ein leeres File-Objekt mit Namen und Typ via Blob-Constructor (um Edge/IE-Fehler zu vermeiden).
         * @param name
         * @param type
         */
        LuxTestHelper.createFileBrowserSafe = function (name, type) {
            var file = new Blob([''], { type: type });
            file['name'] = name;
            return file;
        };
        LuxTestHelper.COMMON_ANGULAR_MODULES = [
            animations.NoopAnimationsModule,
            common.CommonModule,
            router.RouterModule,
            forms.FormsModule,
            forms.ReactiveFormsModule,
            flexLayout.FlexLayoutModule,
            platformBrowser.BrowserModule,
            testing$1.RouterTestingModule
        ];
        LuxTestHelper.MATERIAL_MODULES = [
            material.MatButtonModule,
            material.MatCardModule,
            material.MatIconModule,
            material.MatFormFieldModule,
            material.MatTabsModule,
            material.MatTooltipModule,
            material.MatChipsModule,
            material.MatProgressSpinnerModule,
            material.MatProgressBarModule,
            material.MatExpansionModule,
            material.MatStepperModule,
            material.MatTableModule,
            material.MatPaginatorModule,
            material.MatSortModule,
            material.MatDividerModule,
            material.MatSelectModule,
            material.MatInputModule,
            material.MatCheckboxModule,
            material.MatRadioModule,
            material.MatDatepickerModule,
            material.MatNativeDateModule,
            material.MatAutocompleteModule,
            material.MatSliderModule,
            material.MatOptionModule,
            material.MatCommonModule,
            material.MatBadgeModule
        ];
        LuxTestHelper.LUX_MODULES = [
            LuxFormModule,
            LuxLayoutModule,
            LuxActionModule,
            LuxDirectivesModule,
            LuxPipesModule,
            LuxIconModule,
            LuxLookupModule,
            LuxErrorModule,
            LuxCommonModule,
            LuxPopupsModule,
            LuxComponentsConfigModule.forRoot({
                generateLuxTagIds: false,
                displayLuxConsoleLogs: true,
                labelConfiguration: {
                    allUppercase: true,
                    notAppliedTo: []
                },
                cardExpansionAnimationActive: true
            })
        ];
        return LuxTestHelper;
    }());

    var LuxOverlayHelper = /** @class */ (function () {
        function LuxOverlayHelper() {
            var _this = this;
            testing.inject([overlay.OverlayContainer], function (oc) {
                _this.overlayContainer = oc;
                _this.htmlElement = oc.getContainerElement();
            })();
        }
        LuxOverlayHelper.prototype.selectAllFromOverlay = function (query) {
            return this.htmlElement.querySelectorAll(query);
        };
        LuxOverlayHelper.prototype.selectOneFromOverlay = function (query) {
            return this.htmlElement.querySelector(query);
        };
        return LuxOverlayHelper;
    }());

    exports.APP_DATE_FORMATS = APP_DATE_FORMATS;
    exports.DEFAULT_DIALOG_CONF = DEFAULT_DIALOG_CONF;
    exports.DEFAULT_DIALOG_PRESET_CONF = DEFAULT_DIALOG_PRESET_CONF;
    exports.DEFAULT_FILE_PREVIEW_CONFIG = DEFAULT_FILE_PREVIEW_CONFIG;
    exports.LUX_FILE_PREVIEW_DATA = LUX_FILE_PREVIEW_DATA;
    exports.LuxAccordionComponent = LuxAccordionComponent;
    exports.LuxActionComponentBaseClass = LuxActionComponentBaseClass;
    exports.LuxActionModule = LuxActionModule;
    exports.LuxAlphabeticallySortedPipe = LuxAlphabeticallySortedPipe;
    exports.LuxAppContentComponent = LuxAppContentComponent;
    exports.LuxAppFooterButtonInfo = LuxAppFooterButtonInfo;
    exports.LuxAppFooterButtonService = LuxAppFooterButtonService;
    exports.LuxAppFooterComponent = LuxAppFooterComponent;
    exports.LuxAppFooterLinkInfo = LuxAppFooterLinkInfo;
    exports.LuxAppFooterLinkService = LuxAppFooterLinkService;
    exports.LuxAppHeaderActionNavComponent = LuxAppHeaderActionNavComponent;
    exports.LuxAppHeaderActionNavItemComponent = LuxAppHeaderActionNavItemComponent;
    exports.LuxAppHeaderComponent = LuxAppHeaderComponent;
    exports.LuxAppHeaderRightNavComponent = LuxAppHeaderRightNavComponent;
    exports.LuxAriaBase = LuxAriaBase;
    exports.LuxAriaDescribedbyDirective = LuxAriaDescribedbyDirective;
    exports.LuxAriaExpandedDirective = LuxAriaExpandedDirective;
    exports.LuxAriaHaspopupDirective = LuxAriaHaspopupDirective;
    exports.LuxAriaHiddenDirective = LuxAriaHiddenDirective;
    exports.LuxAriaInvalidDirective = LuxAriaInvalidDirective;
    exports.LuxAriaLabelDirective = LuxAriaLabelDirective;
    exports.LuxAriaLabelledbyDirective = LuxAriaLabelledbyDirective;
    exports.LuxAriaRequiredDirective = LuxAriaRequiredDirective;
    exports.LuxAriaRoleDirective = LuxAriaRoleDirective;
    exports.LuxAutocompleteComponent = LuxAutocompleteComponent;
    exports.LuxAutocompleteErrorStateMatcher = LuxAutocompleteErrorStateMatcher;
    exports.LuxBadgeComponent = LuxBadgeComponent;
    exports.LuxBadgeNotificationDirective = LuxBadgeNotificationDirective;
    exports.LuxButtonComponent = LuxButtonComponent;
    exports.LuxCardActionsComponent = LuxCardActionsComponent;
    exports.LuxCardComponent = LuxCardComponent;
    exports.LuxCardContentComponent = LuxCardContentComponent;
    exports.LuxCardContentExpandedComponent = LuxCardContentExpandedComponent;
    exports.LuxCardInfoComponent = LuxCardInfoComponent;
    exports.LuxCheckboxComponent = LuxCheckboxComponent;
    exports.LuxChipComponent = LuxChipComponent;
    exports.LuxChipGroupComponent = LuxChipGroupComponent;
    exports.LuxChipsComponent = LuxChipsComponent;
    exports.LuxCommonModule = LuxCommonModule;
    exports.LuxComponentsConfigModule = LuxComponentsConfigModule;
    exports.LuxComponentsConfigService = LuxComponentsConfigService;
    exports.LuxComponentsHammerConfig = LuxComponentsHammerConfig;
    exports.LuxConfigTokenService = LuxConfigTokenService;
    exports.LuxConsoleService = LuxConsoleService;
    exports.LuxDatepickerAdapter = LuxDatepickerAdapter;
    exports.LuxDatepickerComponent = LuxDatepickerComponent;
    exports.LuxDetailViewComponent = LuxDetailViewComponent;
    exports.LuxDetailWrapperComponent = LuxDetailWrapperComponent;
    exports.LuxDialogActionsComponent = LuxDialogActionsComponent;
    exports.LuxDialogContentComponent = LuxDialogContentComponent;
    exports.LuxDialogPresetComponent = LuxDialogPresetComponent;
    exports.LuxDialogRef = LuxDialogRef;
    exports.LuxDialogService = LuxDialogService;
    exports.LuxDialogStructureComponent = LuxDialogStructureComponent;
    exports.LuxDialogTitleComponent = LuxDialogTitleComponent;
    exports.LuxDirectivesModule = LuxDirectivesModule;
    exports.LuxDividerComponent = LuxDividerComponent;
    exports.LuxErrorModule = LuxErrorModule;
    exports.LuxErrorPageComponent = LuxErrorPageComponent;
    exports.LuxErrorService = LuxErrorService;
    exports.LuxErrorStoreService = LuxErrorStoreService;
    exports.LuxFileCaptureDirective = LuxFileCaptureDirective;
    exports.LuxFileInputComponent = LuxFileInputComponent;
    exports.LuxFileListComponent = LuxFileListComponent;
    exports.LuxFilePreviewBase = LuxFilePreviewBase;
    exports.LuxFilePreviewComponent = LuxFilePreviewComponent;
    exports.LuxFilePreviewImgViewerComponent = LuxFilePreviewImgViewerComponent;
    exports.LuxFilePreviewModule = LuxFilePreviewModule;
    exports.LuxFilePreviewNotSupportedViewerComponent = LuxFilePreviewNotSupportedViewerComponent;
    exports.LuxFilePreviewPdfViewerComponent = LuxFilePreviewPdfViewerComponent;
    exports.LuxFilePreviewRef = LuxFilePreviewRef;
    exports.LuxFilePreviewService = LuxFilePreviewService;
    exports.LuxFilePreviewToolbarComponent = LuxFilePreviewToolbarComponent;
    exports.LuxFileProgressComponent = LuxFileProgressComponent;
    exports.LuxFormCheckableBaseClass = LuxFormCheckableBaseClass;
    exports.LuxFormComponentBase = LuxFormComponentBase;
    exports.LuxFormControlComponent = LuxFormControlComponent;
    exports.LuxFormFileBase = LuxFormFileBase;
    exports.LuxFormHintComponent = LuxFormHintComponent;
    exports.LuxFormInputBaseClass = LuxFormInputBaseClass;
    exports.LuxFormLabelComponent = LuxFormLabelComponent;
    exports.LuxFormModule = LuxFormModule;
    exports.LuxFormSelectableBase = LuxFormSelectableBase;
    exports.LuxHttpErrorComponent = LuxHttpErrorComponent;
    exports.LuxHttpErrorInterceptor = LuxHttpErrorInterceptor;
    exports.LuxIconComponent = LuxIconComponent;
    exports.LuxIconModule = LuxIconModule;
    exports.LuxImageComponent = LuxImageComponent;
    exports.LuxInfiniteScrollDirective = LuxInfiniteScrollDirective;
    exports.LuxInputComponent = LuxInputComponent;
    exports.LuxInputPrefixComponent = LuxInputPrefixComponent;
    exports.LuxInputSuffixComponent = LuxInputSuffixComponent;
    exports.LuxLabelComponent = LuxLabelComponent;
    exports.LuxLayoutModule = LuxLayoutModule;
    exports.LuxLinkComponent = LuxLinkComponent;
    exports.LuxListComponent = LuxListComponent;
    exports.LuxListItemComponent = LuxListItemComponent;
    exports.LuxListItemContentComponent = LuxListItemContentComponent;
    exports.LuxListItemIconComponent = LuxListItemIconComponent;
    exports.LuxLookupAutocompleteComponent = LuxLookupAutocompleteComponent;
    exports.LuxLookupComboboxComponent = LuxLookupComboboxComponent;
    exports.LuxLookupComponent = LuxLookupComponent;
    exports.LuxLookupErrorStateMatcher = LuxLookupErrorStateMatcher;
    exports.LuxLookupHandlerService = LuxLookupHandlerService;
    exports.LuxLookupLabelComponent = LuxLookupLabelComponent;
    exports.LuxLookupModule = LuxLookupModule;
    exports.LuxLookupParameters = LuxLookupParameters;
    exports.LuxLookupService = LuxLookupService;
    exports.LuxLookupTableEntry = LuxLookupTableEntry;
    exports.LuxMasterDetailComponent = LuxMasterDetailComponent;
    exports.LuxMasterDetailMobileHelperService = LuxMasterDetailMobileHelperService;
    exports.LuxMasterFooterComponent = LuxMasterFooterComponent;
    exports.LuxMasterHeaderComponent = LuxMasterHeaderComponent;
    exports.LuxMasterHeaderContentComponent = LuxMasterHeaderContentComponent;
    exports.LuxMasterSimpleComponent = LuxMasterSimpleComponent;
    exports.LuxMasterViewComponent = LuxMasterViewComponent;
    exports.LuxMaxLengthDirective = LuxMaxLengthDirective;
    exports.LuxMediaQueryObserverService = LuxMediaQueryObserverService;
    exports.LuxMenuComponent = LuxMenuComponent;
    exports.LuxMenuItemComponent = LuxMenuItemComponent;
    exports.LuxMenuTriggerComponent = LuxMenuTriggerComponent;
    exports.LuxMessageBoxComponent = LuxMessageBoxComponent;
    exports.LuxMessageComponent = LuxMessageComponent;
    exports.LuxOverlayHelper = LuxOverlayHelper;
    exports.LuxPaginatorIntl = LuxPaginatorIntl;
    exports.LuxPanelActionComponent = LuxPanelActionComponent;
    exports.LuxPanelComponent = LuxPanelComponent;
    exports.LuxPanelContentComponent = LuxPanelContentComponent;
    exports.LuxPanelHeaderDescriptionComponent = LuxPanelHeaderDescriptionComponent;
    exports.LuxPanelHeaderTitleComponent = LuxPanelHeaderTitleComponent;
    exports.LuxPipesModule = LuxPipesModule;
    exports.LuxPopupsModule = LuxPopupsModule;
    exports.LuxProgressComponent = LuxProgressComponent;
    exports.LuxPropertyFromObjectPipe = LuxPropertyFromObjectPipe;
    exports.LuxRadioComponent = LuxRadioComponent;
    exports.LuxRelativeTimestampPipe = LuxRelativeTimestampPipe;
    exports.LuxRenderPropertyPipe = LuxRenderPropertyPipe;
    exports.LuxRippleDirective = LuxRippleDirective;
    exports.LuxSelectComponent = LuxSelectComponent;
    exports.LuxSideNavComponent = LuxSideNavComponent;
    exports.LuxSideNavFooterComponent = LuxSideNavFooterComponent;
    exports.LuxSideNavHeaderComponent = LuxSideNavHeaderComponent;
    exports.LuxSideNavItemComponent = LuxSideNavItemComponent;
    exports.LuxSliderComponent = LuxSliderComponent;
    exports.LuxSnackbarComponent = LuxSnackbarComponent;
    exports.LuxSnackbarConfig = LuxSnackbarConfig;
    exports.LuxSnackbarService = LuxSnackbarService;
    exports.LuxSpinnerComponent = LuxSpinnerComponent;
    exports.LuxStepComponent = LuxStepComponent;
    exports.LuxStepContentComponent = LuxStepContentComponent;
    exports.LuxStepHeaderComponent = LuxStepHeaderComponent;
    exports.LuxStepperComponent = LuxStepperComponent;
    exports.LuxStepperHelperService = LuxStepperHelperService;
    exports.LuxStepperHorizontalComponent = LuxStepperHorizontalComponent;
    exports.LuxStepperNavButtonsComponent = LuxStepperNavButtonsComponent;
    exports.LuxStepperParent = LuxStepperParent;
    exports.LuxStepperVerticalComponent = LuxStepperVerticalComponent;
    exports.LuxStorageService = LuxStorageService;
    exports.LuxTabComponent = LuxTabComponent;
    exports.LuxTabIndexDirective = LuxTabIndexDirective;
    exports.LuxTableColumnComponent = LuxTableColumnComponent;
    exports.LuxTableColumnContentComponent = LuxTableColumnContentComponent;
    exports.LuxTableColumnFooterComponent = LuxTableColumnFooterComponent;
    exports.LuxTableColumnHeaderComponent = LuxTableColumnHeaderComponent;
    exports.LuxTableComponent = LuxTableComponent;
    exports.LuxTableDataSource = LuxTableDataSource;
    exports.LuxTabsComponent = LuxTabsComponent;
    exports.LuxTagIdDirective = LuxTagIdDirective;
    exports.LuxTestHelper = LuxTestHelper;
    exports.LuxTextareaComponent = LuxTextareaComponent;
    exports.LuxTileComponent = LuxTileComponent;
    exports.LuxToggleComponent = LuxToggleComponent;
    exports.LuxTooltipDirective = LuxTooltipDirective;
    exports.LuxUtil = LuxUtil;
    exports.MS_PER_DAY = MS_PER_DAY;
    exports.day = day;
    exports.expansionAnim = expansionAnim;
    exports.luxFormControlSelektor = luxFormControlSelektor;
    exports.month = month;
    exports.noop = noop;
    exports.prefixFuture = prefixFuture;
    exports.prefixPast = prefixPast;
    exports.sideNavAnimation = sideNavAnimation;
    exports.sideNavOverlayAnimation = sideNavOverlayAnimation;
    exports.timeDeltas = timeDeltas;
    exports.timeDeltasRelative = timeDeltasRelative;
    exports.today = today;
    exports.tomorrow = tomorrow;
    exports.visibilityTrigger = visibilityTrigger;
    exports.week = week;
    exports.year = year;
    exports.yesterday = yesterday;
    exports.ɵa = environment;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ihk-gfi-lux-components.umd.js.map
