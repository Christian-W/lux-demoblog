import * as tslib_1 from "tslib";
import { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { Overlay } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { ScrollDispatcher } from '@angular/cdk/scrolling';
import { Directive, ElementRef, HostListener, Inject, Input, NgZone, OnChanges, Optional, SimpleChanges, ViewContainerRef } from '@angular/core';
import { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_SCROLL_STRATEGY, MatTooltip } from '@angular/material';
let LuxTooltipDirective = class LuxTooltipDirective extends MatTooltip {
    constructor(luxOverlay, luxElementRef, luxScrollDispatcher, luxViewContainerRef, luxNgZone, luxPlatform, luxAriaDescriber, luxFocusMonitor, luxScrollStrategy, luxDir, luxDefaultOptions) {
        super(luxOverlay, luxElementRef, luxScrollDispatcher, luxViewContainerRef, luxNgZone, luxPlatform, luxAriaDescriber, luxFocusMonitor, luxScrollStrategy, luxDir, luxDefaultOptions);
        this.luxOverlay = luxOverlay;
        this.luxElementRef = luxElementRef;
        this.luxScrollDispatcher = luxScrollDispatcher;
        this.luxViewContainerRef = luxViewContainerRef;
        this.luxNgZone = luxNgZone;
        this.luxPlatform = luxPlatform;
        this.luxAriaDescriber = luxAriaDescriber;
        this.luxFocusMonitor = luxFocusMonitor;
        this.luxScrollStrategy = luxScrollStrategy;
        this.luxDir = luxDir;
        this.luxDefaultOptions = luxDefaultOptions;
        this.luxTooltip = '???';
        this.luxTooltipHideDelay = 0;
        this.luxTooltipShowDelay = 0;
        this.luxTooltipPosition = 'above';
        this.luxTooltipDisabled = false;
    }
    _handleLongPress() {
        super.show(this.luxTooltipShowDelay);
    }
    _handleKeydown(event) {
        super._handleKeydown(event);
    }
    _handleTouchend() {
        super._handleTouchend();
    }
    ngOnChanges(simpleChanges) {
        this.message = this.luxTooltip;
        this.hideDelay = this.luxTooltipHideDelay;
        this.showDelay = this.luxTooltipShowDelay;
        this.position = this.luxTooltipPosition;
        this.disabled = this.luxTooltipDisabled;
    }
};
LuxTooltipDirective.ctorParameters = () => [
    { type: Overlay },
    { type: ElementRef },
    { type: ScrollDispatcher },
    { type: ViewContainerRef },
    { type: NgZone },
    { type: Platform },
    { type: AriaDescriber },
    { type: FocusMonitor },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },
    { type: Directionality, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxTooltipDirective.prototype, "luxTooltip", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LuxTooltipDirective.prototype, "luxTooltipHideDelay", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LuxTooltipDirective.prototype, "luxTooltipShowDelay", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxTooltipDirective.prototype, "luxTooltipPosition", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxTooltipDirective.prototype, "luxTooltipDisabled", void 0);
tslib_1.__decorate([
    HostListener('longpress'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LuxTooltipDirective.prototype, "_handleLongPress", null);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], LuxTooltipDirective.prototype, "_handleKeydown", null);
tslib_1.__decorate([
    HostListener('touchend'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LuxTooltipDirective.prototype, "_handleTouchend", null);
LuxTooltipDirective = tslib_1.__decorate([
    Directive({
        selector: '[luxTooltip]',
        exportAs: 'luxTooltip'
    }),
    tslib_1.__param(8, Inject(MAT_TOOLTIP_SCROLL_STRATEGY)),
    tslib_1.__param(9, Optional()),
    tslib_1.__param(10, Optional()),
    tslib_1.__param(10, Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)),
    tslib_1.__metadata("design:paramtypes", [Overlay,
        ElementRef,
        ScrollDispatcher,
        ViewContainerRef,
        NgZone,
        Platform,
        AriaDescriber,
        FocusMonitor, Object, Directionality, Object])
], LuxTooltipDirective);
export { LuxTooltipDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXRvb2x0aXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWRpcmVjdGl2ZXMvbHV4LXRvb2x0aXAvbHV4LXRvb2x0aXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsUUFBUSxFQUNSLGFBQWEsRUFDYixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLDJCQUEyQixFQUMzQiwyQkFBMkIsRUFDM0IsVUFBVSxFQUdYLE1BQU0sbUJBQW1CLENBQUM7QUFNM0IsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBb0IsU0FBUSxVQUFVO0lBT2pELFlBQ1UsVUFBbUIsRUFDbkIsYUFBeUIsRUFDekIsbUJBQXFDLEVBQ3JDLG1CQUFxQyxFQUNyQyxTQUFpQixFQUNqQixXQUFxQixFQUNyQixnQkFBK0IsRUFDL0IsZUFBNkIsRUFDUSxpQkFBaUIsRUFDMUMsTUFBc0IsRUFHbEMsaUJBQTJDO1FBRW5ELEtBQUssQ0FDSCxVQUFVLEVBQ1YsYUFBYSxFQUNiLG1CQUFtQixFQUNuQixtQkFBbUIsRUFDbkIsU0FBUyxFQUNULFdBQVcsRUFDWCxnQkFB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RC9CO1NBeERZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyaWFEZXNjcmliZXIsIEZvY3VzTW9uaXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IERpcmVjdGlvbmFsaXR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IFNjcm9sbERpc3BhdGNoZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uQ2hhbmdlcyxcbiAgT3B0aW9uYWwsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBNQVRfVE9PTFRJUF9ERUZBVUxUX09QVElPTlMsXG4gIE1BVF9UT09MVElQX1NDUk9MTF9TVFJBVEVHWSxcbiAgTWF0VG9vbHRpcCxcbiAgTWF0VG9vbHRpcERlZmF1bHRPcHRpb25zLFxuICBUb29sdGlwUG9zaXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbHV4VG9vbHRpcF0nLFxuICBleHBvcnRBczogJ2x1eFRvb2x0aXAnXG59KVxuZXhwb3J0IGNsYXNzIEx1eFRvb2x0aXBEaXJlY3RpdmUgZXh0ZW5kcyBNYXRUb29sdGlwIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbHV4VG9vbHRpcDogc3RyaW5nID0gJz8/Pyc7XG4gIEBJbnB1dCgpIGx1eFRvb2x0aXBIaWRlRGVsYXk6IG51bWJlciA9IDA7XG4gIEBJbnB1dCgpIGx1eFRvb2x0aXBTaG93RGVsYXk6IG51bWJlciA9IDA7XG4gIEBJbnB1dCgpIGx1eFRvb2x0aXBQb3NpdGlvbjogVG9vbHRpcFBvc2l0aW9uID0gJ2Fib3ZlJztcbiAgQElucHV0KCkgbHV4VG9vbHRpcERpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBsdXhPdmVybGF5OiBPdmVybGF5LFxuICAgIHByaXZhdGUgbHV4RWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGx1eFNjcm9sbERpc3BhdGNoZXI6IFNjcm9sbERpc3BhdGNoZXIsXG4gICAgcHJpdmF0ZSBsdXhWaWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgbHV4Tmdab25lOiBOZ1pvbmUsXG4gICAgcHJpdmF0ZSBsdXhQbGF0Zm9ybTogUGxhdGZvcm0sXG4gICAgcHJpdmF0ZSBsdXhBcmlhRGVzY3JpYmVyOiBBcmlhRGVzY3JpYmVyLFxuICAgIHByaXZhdGUgbHV4Rm9jdXNNb25pdG9yOiBGb2N1c01vbml0b3IsXG4gICAgQEluamVjdChNQVRfVE9PTFRJUF9TQ1JPTExfU1RSQVRFR1kpIHByaXZhdGUgbHV4U2Nyb2xsU3RyYXRlZ3ksXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsdXhEaXI6IERpcmVjdGlvbmFsaXR5LFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChNQVRfVE9PTFRJUF9ERUZBVUxUX09QVElPTlMpXG4gICAgcHJpdmF0ZSBsdXhEZWZhdWx0T3B0aW9uczogTWF0VG9vbHRpcERlZmF1bHRPcHRpb25zXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgbHV4T3ZlcmxheSxcbiAgICAgIGx1eEVsZW1lbnRSZWYsXG4gICAgICBsdXhTY3JvbGxEaXNwYXRjaGVyLFxuICAgICAgbHV4Vmlld0NvbnRhaW5lclJlZixcbiAgICAgIGx1eE5nWm9uZSxcbiAgICAgIGx1eFBsYXRmb3JtLFxuICAgICAgbHV4QXJpYURlc2NyaWJlcixcbiAgICAgIGx1eEZvY3VzTW9uaXRvcixcbiAgICAgIGx1eFNjcm9sbFN0cmF0ZWd5LFxuICAgICAgbHV4RGlyLFxuICAgICAgbHV4RGVmYXVsdE9wdGlvbnNcbiAgICApO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbG9uZ3ByZXNzJykgX2hhbmRsZUxvbmdQcmVzcygpIHtcbiAgICBzdXBlci5zaG93KHRoaXMubHV4VG9vbHRpcFNob3dEZWxheSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSkgX2hhbmRsZUtleWRvd24oZXZlbnQpIHtcbiAgICBzdXBlci5faGFuZGxlS2V5ZG93bihldmVudCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd0b3VjaGVuZCcpIF9oYW5kbGVUb3VjaGVuZCgpIHtcbiAgICBzdXBlci5faGFuZGxlVG91Y2hlbmQoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLmx1eFRvb2x0aXA7XG4gICAgdGhpcy5oaWRlRGVsYXkgPSB0aGlzLmx1eFRvb2x0aXBIaWRlRGVsYXk7XG4gICAgdGhpcy5zaG93RGVsYXkgPSB0aGlzLmx1eFRvb2x0aXBTaG93RGVsYXk7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMubHV4VG9vbHRpcFBvc2l0aW9uO1xuICAgIHRoaXMuZGlzYWJsZWQgPSB0aGlzLmx1eFRvb2x0aXBEaXNhYmxlZDtcbiAgfVxufVxuIl19