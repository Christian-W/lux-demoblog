import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { LuxAriaBase } from './lux-aria-base';
let LuxAriaHaspopupDirective = class LuxAriaHaspopupDirective extends LuxAriaBase {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, 'aria-haspopup');
        this.elementRef = elementRef;
        this.renderer = renderer;
        if (!this.luxAriaHasPopupSelector) {
            const tagName = elementRef.nativeElement.tagName.toLowerCase();
            if (tagName === 'lux-button') {
                this.luxAriaHasPopupSelector = 'button';
            }
            else if (tagName === 'lux-app-header-action-nav-item') {
                this.luxAriaHasPopupSelector = 'button';
            }
        }
    }
    get luxAriaHasPopup() {
        return this._luxAriaHasPopup;
    }
    set luxAriaHasPopup(hasPopup) {
        this._luxAriaHasPopup = hasPopup;
        this.renderAria();
    }
    getSelector() {
        return this.luxAriaHasPopupSelector;
    }
    getValue() {
        return this._luxAriaHasPopup;
    }
};
LuxAriaHaspopupDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAriaHaspopupDirective.prototype, "luxAriaHasPopupSelector", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxAriaHaspopupDirective.prototype, "luxAriaHasPopup", null);
LuxAriaHaspopupDirective = tslib_1.__decorate([
    Directive({
        selector: '[luxAriaHasPopup]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], LuxAriaHaspopupDirective);
export { LuxAriaHaspopupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWFyaWEtaGFzcG9wdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWRpcmVjdGl2ZXMvbHV4LWFyaWEvbHV4LWFyaWEtaGFzcG9wdXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUs5QyxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF5QixTQUFRLFdBQVc7SUFnQnZELFlBQXNCLFVBQXNCLEVBQVksUUFBbUI7UUFDekUsS0FBSyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFEekIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFZLGFBQVEsR0FBUixRQUFRLENBQVc7UUFHekUsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUNqQyxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvRCxJQUFJLE9BQU8sS0FBSyxZQUFZLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxRQUFRLENBQUM7YUFDekM7aUJBQU0sSUFBSSxPQUFPLEtBQUssZ0NBQWdDLEVBQUU7Z0JBQ3ZELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxRQUFRLENBQUM7YUFDekM7U0FDRjtJQUNILENBQUM7SUFyQkQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLGVBQWUsQ0FBQyxRQUFnQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO1FBRWpDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBZUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDO0lBQ3RDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQztDQUNGLENBQUE7O1lBcEJtQyxVQUFVO1lBQXNCLFNBQVM7O0FBYmxFO0lBQVIsS0FBSyxFQUFFOzt5RUFBaUM7QUFHekM7SUFEQyxLQUFLLEVBQUU7OzsrREFHUDtBQVJVLHdCQUF3QjtJQUhwQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO0tBQzlCLENBQUM7NkNBaUJrQyxVQUFVLEVBQXNCLFNBQVM7R0FoQmhFLHdCQUF3QixDQW9DcEM7U0FwQ1ksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMdXhBcmlhQmFzZSB9IGZyb20gJy4vbHV4LWFyaWEtYmFzZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsdXhBcmlhSGFzUG9wdXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBMdXhBcmlhSGFzcG9wdXBEaXJlY3RpdmUgZXh0ZW5kcyBMdXhBcmlhQmFzZSB7XG4gIF9sdXhBcmlhSGFzUG9wdXA6IHN0cmluZztcblxuICBASW5wdXQoKSBsdXhBcmlhSGFzUG9wdXBTZWxlY3Rvcjogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBsdXhBcmlhSGFzUG9wdXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2x1eEFyaWFIYXNQb3B1cDtcbiAgfVxuXG4gIHNldCBsdXhBcmlhSGFzUG9wdXAoaGFzUG9wdXA6IHN0cmluZykge1xuICAgIHRoaXMuX2x1eEFyaWFIYXNQb3B1cCA9IGhhc1BvcHVwO1xuXG4gICAgdGhpcy5yZW5kZXJBcmlhKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLCByZW5kZXJlciwgJ2FyaWEtaGFzcG9wdXAnKTtcblxuICAgIGlmICghdGhpcy5sdXhBcmlhSGFzUG9wdXBTZWxlY3Rvcikge1xuICAgICAgY29uc3QgdGFnTmFtZSA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ2x1eC1idXR0b24nKSB7XG4gICAgICAgIHRoaXMubHV4QXJpYUhhc1BvcHVwU2VsZWN0b3IgPSAnYnV0dG9uJztcbiAgICAgIH0gZWxzZSBpZiAodGFnTmFtZSA9PT0gJ2x1eC1hcHAtaGVhZGVyLWFjdGlvbi1uYXYtaXRlbScpIHtcbiAgICAgICAgdGhpcy5sdXhBcmlhSGFzUG9wdXBTZWxlY3RvciA9ICdidXR0b24nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFNlbGVjdG9yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubHV4QXJpYUhhc1BvcHVwU2VsZWN0b3I7XG4gIH1cblxuICBnZXRWYWx1ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9sdXhBcmlhSGFzUG9wdXA7XG4gIH1cbn1cbiJdfQ==