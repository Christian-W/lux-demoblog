import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { LuxAriaBase } from './lux-aria-base';
let LuxAriaExpandedDirective = class LuxAriaExpandedDirective extends LuxAriaBase {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, 'aria-expanded');
        this.elementRef = elementRef;
        this.renderer = renderer;
        if (!this.luxAriaExpandedSelector) {
            const tagName = elementRef.nativeElement.tagName.toLowerCase();
            if (tagName === 'lux-button') {
                this.luxAriaExpandedSelector = 'button';
            }
        }
    }
    get luxAriaExpanded() {
        return this._luxAriaExpanded;
    }
    set luxAriaExpanded(expanded) {
        this._luxAriaExpanded = expanded;
        this.renderAria();
    }
    getSelector() {
        return this.luxAriaExpandedSelector;
    }
    getValue() {
        return this._luxAriaExpanded;
    }
};
LuxAriaExpandedDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAriaExpandedDirective.prototype, "luxAriaExpandedSelector", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxAriaExpandedDirective.prototype, "luxAriaExpanded", null);
LuxAriaExpandedDirective = tslib_1.__decorate([
    Directive({
        selector: '[luxAriaExpanded]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], LuxAriaExpandedDirective);
export { LuxAriaExpandedDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWFyaWEtZXhwYW5kZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWRpcmVjdGl2ZXMvbHV4LWFyaWEvbHV4LWFyaWEtZXhwYW5kZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUs5QyxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF5QixTQUFRLFdBQVc7SUFnQnZELFlBQXNCLFVBQXNCLEVBQVksUUFBbUI7UUFDekUsS0FBSyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFEekIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFZLGFBQVEsR0FBUixRQUFRLENBQVc7UUFHekUsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUNqQyxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvRCxJQUFJLE9BQU8sS0FBSyxZQUFZLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxRQUFRLENBQUM7YUFDekM7U0FDRjtJQUNILENBQUM7SUFuQkQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLGVBQWUsQ0FBQyxRQUFnQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO1FBRWpDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBYUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDO0lBQ3RDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQztDQUNGLENBQUE7O1lBbEJtQyxVQUFVO1lBQXNCLFNBQVM7O0FBYmxFO0lBQVIsS0FBSyxFQUFFOzt5RUFBaUM7QUFHekM7SUFEQyxLQUFLLEVBQUU7OzsrREFHUDtBQVJVLHdCQUF3QjtJQUhwQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO0tBQzlCLENBQUM7NkNBaUJrQyxVQUFVLEVBQXNCLFNBQVM7R0FoQmhFLHdCQUF3QixDQWtDcEM7U0FsQ1ksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMdXhBcmlhQmFzZSB9IGZyb20gJy4vbHV4LWFyaWEtYmFzZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsdXhBcmlhRXhwYW5kZWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBMdXhBcmlhRXhwYW5kZWREaXJlY3RpdmUgZXh0ZW5kcyBMdXhBcmlhQmFzZSB7XG4gIF9sdXhBcmlhRXhwYW5kZWQ6IHN0cmluZztcblxuICBASW5wdXQoKSBsdXhBcmlhRXhwYW5kZWRTZWxlY3Rvcjogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBsdXhBcmlhRXhwYW5kZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2x1eEFyaWFFeHBhbmRlZDtcbiAgfVxuXG4gIHNldCBsdXhBcmlhRXhwYW5kZWQoZXhwYW5kZWQ6IHN0cmluZykge1xuICAgIHRoaXMuX2x1eEFyaWFFeHBhbmRlZCA9IGV4cGFuZGVkO1xuXG4gICAgdGhpcy5yZW5kZXJBcmlhKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLCByZW5kZXJlciwgJ2FyaWEtZXhwYW5kZWQnKTtcblxuICAgIGlmICghdGhpcy5sdXhBcmlhRXhwYW5kZWRTZWxlY3Rvcikge1xuICAgICAgY29uc3QgdGFnTmFtZSA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ2x1eC1idXR0b24nKSB7XG4gICAgICAgIHRoaXMubHV4QXJpYUV4cGFuZGVkU2VsZWN0b3IgPSAnYnV0dG9uJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRTZWxlY3RvcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmx1eEFyaWFFeHBhbmRlZFNlbGVjdG9yO1xuICB9XG5cbiAgZ2V0VmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbHV4QXJpYUV4cGFuZGVkO1xuICB9XG59XG4iXX0=