import * as tslib_1 from "tslib";
import { Platform } from '@angular/cdk/platform';
import { Directive, ElementRef, Inject, Input, NgZone, OnDestroy, OnInit, Optional } from '@angular/core';
import { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';
import { MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple } from '@angular/material';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
// @dynamic Erklärung steht in der Datei "lux-decorators.ts".
let LuxRippleDirective = class LuxRippleDirective extends MatRipple {
    constructor(configService, luxElementRef, luxNgZone, luxPlatform, luxGlobalOptions, luxAnimationMode) {
        super(luxElementRef, luxNgZone, luxPlatform, luxGlobalOptions, luxAnimationMode);
        this.configService = configService;
        this.luxElementRef = luxElementRef;
        this.luxNgZone = luxNgZone;
        this.luxPlatform = luxPlatform;
        this.luxGlobalOptions = luxGlobalOptions;
        this.luxAnimationMode = luxAnimationMode;
        this._luxRippleUnbounded = false;
        this._luxRippleCentered = false;
        this._luxRippleDisabled = false;
        this._luxRippleRadius = 0;
        this._luxRippleEnterDuration = 0;
        this._luxRippleExitDuration = 0;
    }
    get luxRippleColor() {
        return this._luxRippleColor;
    }
    set luxRippleColor(value) {
        this._luxRippleColor = value;
        this.color = value;
    }
    get luxRippleUnbounded() {
        return this._luxRippleUnbounded;
    }
    set luxRippleUnbounded(value) {
        this._luxRippleUnbounded = value;
        this.unbounded = value;
    }
    get luxRippleCentered() {
        return this._luxRippleCentered;
    }
    set luxRippleCentered(value) {
        this._luxRippleCentered = value;
        this.centered = value;
    }
    get luxRippleRadius() {
        return this._luxRippleRadius;
    }
    set luxRippleRadius(value) {
        this._luxRippleRadius = value;
        this.radius = value;
    }
    get luxRippleDisabled() {
        return this._luxRippleDisabled;
    }
    set luxRippleDisabled(value) {
        this._luxRippleDisabled = value;
        this.disabled = value;
    }
    get luxRippleEnterDuration() {
        return this._luxRippleEnterDuration;
    }
    set luxRippleEnterDuration(value) {
        this._luxRippleEnterDuration = value;
        if (!this.animation) {
            this.animation = {};
        }
        this.animation.exitDuration = value;
    }
    get luxRippleExitDuration() {
        return this._luxRippleExitDuration;
    }
    set luxRippleExitDuration(value) {
        this._luxRippleExitDuration = value;
        if (!this.animation) {
            this.animation = {};
        }
        this.animation.exitDuration = value;
    }
    ngOnInit() {
        super.ngOnInit();
        // Globale Konfiguration für die LUX-Ripples auslesen und die Component entsprechend aktualisieren
        this.configSubscription = this.configService.config.subscribe(({ rippleConfiguration }) => {
            if (rippleConfiguration) {
                this.luxRippleEnterDuration = rippleConfiguration.enterDuration;
                this.luxRippleExitDuration = rippleConfiguration.exitDuration;
                this.luxRippleColor = rippleConfiguration.color;
                this.luxRippleCentered = rippleConfiguration.centered;
                this.luxRippleDisabled = rippleConfiguration.disabled;
                this.luxRippleRadius = rippleConfiguration.radius;
                this.luxRippleUnbounded = rippleConfiguration.unbounded;
            }
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this.configSubscription) {
            this.configSubscription.unsubscribe();
        }
    }
};
LuxRippleDirective.ctorParameters = () => [
    { type: LuxComponentsConfigService },
    { type: ElementRef },
    { type: NgZone },
    { type: Platform },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxRippleDirective.prototype, "luxRippleColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxRippleDirective.prototype, "luxRippleUnbounded", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxRippleDirective.prototype, "luxRippleCentered", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], LuxRippleDirective.prototype, "luxRippleRadius", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxRippleDirective.prototype, "luxRippleDisabled", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], LuxRippleDirective.prototype, "luxRippleEnterDuration", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], LuxRippleDirective.prototype, "luxRippleExitDuration", null);
LuxRippleDirective = tslib_1.__decorate([
    Directive({
        selector: '[luxRipple], [lux-ripple]',
        host: {
            class: 'mat-ripple lux-ripple',
            '[class.mat-ripple-unbounded]': 'unbounded'
        }
    }),
    tslib_1.__param(4, Optional()), tslib_1.__param(4, Inject(MAT_RIPPLE_GLOBAL_OPTIONS)),
    tslib_1.__param(5, Optional()), tslib_1.__param(5, Inject(ANIMATION_MODULE_TYPE)),
    tslib_1.__metadata("design:paramtypes", [LuxComponentsConfigService,
        ElementRef,
        NgZone,
        Platform, Object, String])
], LuxRippleDirective);
export { LuxRippleDirective };
//# sourceMappingURL=data:application/json;base64,