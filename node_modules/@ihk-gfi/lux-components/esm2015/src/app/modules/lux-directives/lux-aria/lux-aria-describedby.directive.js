import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { LuxAriaBase } from './lux-aria-base';
let LuxAriaDescribedbyDirective = class LuxAriaDescribedbyDirective extends LuxAriaBase {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, 'aria-describedby');
        this.elementRef = elementRef;
        this.renderer = renderer;
        if (!this.luxAriaDescribedbySelector) {
            const tagName = elementRef.nativeElement.tagName.toLowerCase();
            if (tagName === 'lux-button') {
                this.luxAriaDescribedbySelector = 'button';
            }
            else if (tagName === 'lux-app-header-action-nav-item') {
                this.luxAriaDescribedbySelector = 'button';
            }
        }
    }
    get luxAriaDescribedby() {
        return this._luxAriaDescribedby;
    }
    set luxAriaDescribedby(describedby) {
        this._luxAriaDescribedby = describedby;
        this.renderAria();
    }
    getSelector() {
        return this.luxAriaDescribedbySelector;
    }
    getValue() {
        return this._luxAriaDescribedby;
    }
};
LuxAriaDescribedbyDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAriaDescribedbyDirective.prototype, "luxAriaDescribedbySelector", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxAriaDescribedbyDirective.prototype, "luxAriaDescribedby", null);
LuxAriaDescribedbyDirective = tslib_1.__decorate([
    Directive({
        selector: '[luxAriaDescribedby]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], LuxAriaDescribedbyDirective);
export { LuxAriaDescribedbyDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWFyaWEtZGVzY3JpYmVkYnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWRpcmVjdGl2ZXMvbHV4LWFyaWEvbHV4LWFyaWEtZGVzY3JpYmVkYnkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUs5QyxJQUFhLDJCQUEyQixHQUF4QyxNQUFhLDJCQUE0QixTQUFRLFdBQVc7SUFnQjFELFlBQXNCLFVBQXNCLEVBQVksUUFBbUI7UUFDekUsS0FBSyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUQ1QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVksYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUd6RSxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFO1lBQ3BDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQy9ELElBQUksT0FBTyxLQUFLLFlBQVksRUFBRTtnQkFDNUIsSUFBSSxDQUFDLDBCQUEwQixHQUFHLFFBQVEsQ0FBQzthQUM1QztpQkFBTSxJQUFJLE9BQU8sS0FBSyxnQ0FBZ0MsRUFBRTtnQkFDdkQsSUFBSSxDQUFDLDBCQUEwQixHQUFHLFFBQVEsQ0FBQzthQUM1QztTQUNGO0lBQ0gsQ0FBQztJQXJCRCxJQUFJLGtCQUFrQjtRQUNwQixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxrQkFBa0IsQ0FBQyxXQUFtQjtRQUN4QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO1FBRXZDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBZUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDO0lBQ3pDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7O1lBcEJtQyxVQUFVO1lBQXNCLFNBQVM7O0FBYmxFO0lBQVIsS0FBSyxFQUFFOzsrRUFBb0M7QUFHNUM7SUFEQyxLQUFLLEVBQUU7OztxRUFHUDtBQVJVLDJCQUEyQjtJQUh2QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsc0JBQXNCO0tBQ2pDLENBQUM7NkNBaUJrQyxVQUFVLEVBQXNCLFNBQVM7R0FoQmhFLDJCQUEyQixDQW9DdkM7U0FwQ1ksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMdXhBcmlhQmFzZSB9IGZyb20gJy4vbHV4LWFyaWEtYmFzZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsdXhBcmlhRGVzY3JpYmVkYnldJ1xufSlcbmV4cG9ydCBjbGFzcyBMdXhBcmlhRGVzY3JpYmVkYnlEaXJlY3RpdmUgZXh0ZW5kcyBMdXhBcmlhQmFzZSB7XG4gIF9sdXhBcmlhRGVzY3JpYmVkYnk6IHN0cmluZztcblxuICBASW5wdXQoKSBsdXhBcmlhRGVzY3JpYmVkYnlTZWxlY3Rvcjogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBsdXhBcmlhRGVzY3JpYmVkYnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2x1eEFyaWFEZXNjcmliZWRieTtcbiAgfVxuXG4gIHNldCBsdXhBcmlhRGVzY3JpYmVkYnkoZGVzY3JpYmVkYnk6IHN0cmluZykge1xuICAgIHRoaXMuX2x1eEFyaWFEZXNjcmliZWRieSA9IGRlc2NyaWJlZGJ5O1xuXG4gICAgdGhpcy5yZW5kZXJBcmlhKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLCByZW5kZXJlciwgJ2FyaWEtZGVzY3JpYmVkYnknKTtcblxuICAgIGlmICghdGhpcy5sdXhBcmlhRGVzY3JpYmVkYnlTZWxlY3Rvcikge1xuICAgICAgY29uc3QgdGFnTmFtZSA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ2x1eC1idXR0b24nKSB7XG4gICAgICAgIHRoaXMubHV4QXJpYURlc2NyaWJlZGJ5U2VsZWN0b3IgPSAnYnV0dG9uJztcbiAgICAgIH0gZWxzZSBpZiAodGFnTmFtZSA9PT0gJ2x1eC1hcHAtaGVhZGVyLWFjdGlvbi1uYXYtaXRlbScpIHtcbiAgICAgICAgdGhpcy5sdXhBcmlhRGVzY3JpYmVkYnlTZWxlY3RvciA9ICdidXR0b24nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFNlbGVjdG9yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubHV4QXJpYURlc2NyaWJlZGJ5U2VsZWN0b3I7XG4gIH1cblxuICBnZXRWYWx1ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9sdXhBcmlhRGVzY3JpYmVkYnk7XG4gIH1cbn1cbiJdfQ==