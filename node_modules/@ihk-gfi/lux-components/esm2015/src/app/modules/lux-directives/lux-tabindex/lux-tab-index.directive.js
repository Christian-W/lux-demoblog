import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, Input, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ReplaySubject } from 'rxjs';
let LuxTabIndexDirective = class LuxTabIndexDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changes$ = new ReplaySubject(1);
        this.luxTabIndex = '0';
        this.luxApplyToParent = false;
        this.luxApplyToChildren = true;
        this.luxPotentialChildren = ['input', 'textarea', 'a', 'button', 'mat-select'];
    }
    ngOnChanges(simpleChanges) {
        this.changes$.next(simpleChanges);
    }
    ngAfterViewInit() {
        this.updateElementsWithTabIndex();
        // Dadurch verhindern wir, dass Changes vor afterViewInit zu etwaigen Fehlern führen könnten und erst danach aufgelöst werden
        this.changesSubscription = this.changes$.subscribe(this.onChanges.bind(this));
    }
    ngOnDestroy() {
        if (this.changesSubscription) {
            this.changesSubscription.unsubscribe();
        }
    }
    /**
     * Eigener Listener für Änderungen, der erst nach dem AfterViewInit-Lifecycle greift.
     * Sicherheitshalber, um evtl. noch unaufgelösten Elementen zu entgehen.
     * @param simpleChanges
     */
    onChanges(simpleChanges) {
        if (simpleChanges.luxTabIndex) {
            this.updateElementsWithTabIndex();
        }
    }
    /**
     * Aktualisiert den Tabindex für
     *  - das Zielelement, wenn luxApplyToParent === true (default = false) ist
     *  - potentielle Kindelemente, wenn luxApplyToChildren === true (default) ist
     */
    updateElementsWithTabIndex() {
        if (this.luxApplyToParent) {
            this.setTabIndexForElement(this.elementRef.nativeElement);
        }
        if (this.luxApplyToChildren) {
            this.luxPotentialChildren.forEach((childQuery) => this.setTabIndexByQuery(childQuery));
        }
    }
    setTabIndexByQuery(elementQuery) {
        const elements = this.elementRef.nativeElement.querySelectorAll(elementQuery);
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            this.setTabIndexForElement(element);
        }
    }
    setTabIndexForElement(element) {
        this.renderer.setAttribute(element, 'tabIndex', this.luxTabIndex);
    }
};
LuxTabIndexDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxTabIndexDirective.prototype, "luxTabIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxTabIndexDirective.prototype, "luxApplyToParent", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxTabIndexDirective.prototype, "luxApplyToChildren", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], LuxTabIndexDirective.prototype, "luxPotentialChildren", void 0);
LuxTabIndexDirective = tslib_1.__decorate([
    Directive({
        selector: '[luxTabIndex]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], LuxTabIndexDirective);
export { LuxTabIndexDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXRhYi1pbmRleC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtZGlyZWN0aXZlcy9sdXgtdGFiaW5kZXgvbHV4LXRhYi1pbmRleC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxhQUFhLEVBQ2IsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsYUFBYSxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBS25ELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBUy9CLFlBQW9CLFVBQXNCLEVBQVUsUUFBbUI7UUFBbkQsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFQL0QsYUFBUSxHQUFpQyxJQUFJLGFBQWEsQ0FBZ0IsQ0FBQyxDQUFDLENBQUM7UUFFNUUsZ0JBQVcsR0FBVyxHQUFHLENBQUM7UUFDMUIscUJBQWdCLEdBQVksS0FBSyxDQUFDO1FBQ2xDLHVCQUFrQixHQUFZLElBQUksQ0FBQztRQUNuQyx5QkFBb0IsR0FBYSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVuQixDQUFDO0lBRTNFLFdBQVcsQ0FBQyxhQUE0QjtRQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO1FBQ2xDLDZIQUE2SDtRQUM3SCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzVCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssU0FBUyxDQUFDLGFBQTRCO1FBQzVDLElBQUksYUFBYSxDQUFDLFdBQVcsRUFBRTtZQUM3QixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztTQUNuQztJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssMEJBQTBCO1FBQ2hDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ2hHO0lBQ0gsQ0FBQztJQUVPLGtCQUFrQixDQUFDLFlBQW9CO1FBQzdDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDO0lBRU8scUJBQXFCLENBQUMsT0FBb0I7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNGLENBQUE7O1lBdkRpQyxVQUFVO1lBQW9CLFNBQVM7O0FBTDlEO0lBQVIsS0FBSyxFQUFFOzt5REFBMkI7QUFDMUI7SUFBUixLQUFLLEVBQUU7OzhEQUFtQztBQUNsQztJQUFSLEtBQUssRUFBRTs7Z0VBQW9DO0FBQ25DO0lBQVIsS0FBSyxFQUFFOztrRUFBcUY7QUFQbEYsb0JBQW9CO0lBSGhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxlQUFlO0tBQzFCLENBQUM7NkNBVWdDLFVBQVUsRUFBb0IsU0FBUztHQVQ1RCxvQkFBb0IsQ0FnRWhDO1NBaEVZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBSZW5kZXJlcjIsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2x1eFRhYkluZGV4XSdcbn0pXG5leHBvcnQgY2xhc3MgTHV4VGFiSW5kZXhEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgY2hhbmdlc1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIGNoYW5nZXMkOiBSZXBsYXlTdWJqZWN0PFNpbXBsZUNoYW5nZXM+ID0gbmV3IFJlcGxheVN1YmplY3Q8U2ltcGxlQ2hhbmdlcz4oMSk7XG5cbiAgQElucHV0KCkgbHV4VGFiSW5kZXg6IHN0cmluZyA9ICcwJztcbiAgQElucHV0KCkgbHV4QXBwbHlUb1BhcmVudDogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBsdXhBcHBseVRvQ2hpbGRyZW46IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBsdXhQb3RlbnRpYWxDaGlsZHJlbjogc3RyaW5nW10gPSBbJ2lucHV0JywgJ3RleHRhcmVhJywgJ2EnLCAnYnV0dG9uJywgJ21hdC1zZWxlY3QnXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uQ2hhbmdlcyhzaW1wbGVDaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5jaGFuZ2VzJC5uZXh0KHNpbXBsZUNoYW5nZXMpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHNXaXRoVGFiSW5kZXgoKTtcbiAgICAvLyBEYWR1cmNoIHZlcmhpbmRlcm4gd2lyLCBkYXNzIENoYW5nZXMgdm9yIGFmdGVyVmlld0luaXQgenUgZXR3YWlnZW4gRmVobGVybiBmw7xocmVuIGvDtm5udGVuIHVuZCBlcnN0IGRhbmFjaCBhdWZnZWzDtnN0IHdlcmRlblxuICAgIHRoaXMuY2hhbmdlc1N1YnNjcmlwdGlvbiA9IHRoaXMuY2hhbmdlcyQuc3Vic2NyaWJlKHRoaXMub25DaGFuZ2VzLmJpbmQodGhpcykpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY2hhbmdlc1N1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5jaGFuZ2VzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVpZ2VuZXIgTGlzdGVuZXIgZsO8ciDDhG5kZXJ1bmdlbiwgZGVyIGVyc3QgbmFjaCBkZW0gQWZ0ZXJWaWV3SW5pdC1MaWZlY3ljbGUgZ3JlaWZ0LlxuICAgKiBTaWNoZXJoZWl0c2hhbGJlciwgdW0gZXZ0bC4gbm9jaCB1bmF1ZmdlbMO2c3RlbiBFbGVtZW50ZW4genUgZW50Z2VoZW4uXG4gICAqIEBwYXJhbSBzaW1wbGVDaGFuZ2VzXG4gICAqL1xuICBwcml2YXRlIG9uQ2hhbmdlcyhzaW1wbGVDaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHNpbXBsZUNoYW5nZXMubHV4VGFiSW5kZXgpIHtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudHNXaXRoVGFiSW5kZXgoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWt0dWFsaXNpZXJ0IGRlbiBUYWJpbmRleCBmw7xyXG4gICAqICAtIGRhcyBaaWVsZWxlbWVudCwgd2VubiBsdXhBcHBseVRvUGFyZW50ID09PSB0cnVlIChkZWZhdWx0ID0gZmFsc2UpIGlzdFxuICAgKiAgLSBwb3RlbnRpZWxsZSBLaW5kZWxlbWVudGUsIHdlbm4gbHV4QXBwbHlUb0NoaWxkcmVuID09PSB0cnVlIChkZWZhdWx0KSBpc3RcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlRWxlbWVudHNXaXRoVGFiSW5kZXgoKSB7XG4gICAgaWYgKHRoaXMubHV4QXBwbHlUb1BhcmVudCkge1xuICAgICAgdGhpcy5zZXRUYWJJbmRleEZvckVsZW1lbnQodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmx1eEFwcGx5VG9DaGlsZHJlbikge1xuICAgICAgdGhpcy5sdXhQb3RlbnRpYWxDaGlsZHJlbi5mb3JFYWNoKChjaGlsZFF1ZXJ5OiBzdHJpbmcpID0+IHRoaXMuc2V0VGFiSW5kZXhCeVF1ZXJ5KGNoaWxkUXVlcnkpKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldFRhYkluZGV4QnlRdWVyeShlbGVtZW50UXVlcnk6IHN0cmluZykge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50UXVlcnkpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgIHRoaXMuc2V0VGFiSW5kZXhGb3JFbGVtZW50KGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0VGFiSW5kZXhGb3JFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ3RhYkluZGV4JywgdGhpcy5sdXhUYWJJbmRleCk7XG4gIH1cbn1cbiJdfQ==