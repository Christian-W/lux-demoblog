import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { LuxAriaBase } from './lux-aria-base';
let LuxAriaLabelledbyDirective = class LuxAriaLabelledbyDirective extends LuxAriaBase {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, 'aria-labelledby');
        this.elementRef = elementRef;
        this.renderer = renderer;
        if (!this.luxAriaLabelledbySelector) {
            const tagName = elementRef.nativeElement.tagName.toLowerCase();
            if (tagName === 'lux-button') {
                this.luxAriaLabelledbySelector = 'button';
            }
            else if (tagName === 'lux-app-header-action-nav-item') {
                this.luxAriaLabelledbySelector = 'button';
            }
        }
    }
    get luxAriaLabelledby() {
        return this._luxAriaLabelledby;
    }
    set luxAriaLabelledby(labelledby) {
        this._luxAriaLabelledby = labelledby;
        this.renderAria();
    }
    getSelector() {
        return this.luxAriaLabelledbySelector;
    }
    getValue() {
        return this._luxAriaLabelledby;
    }
};
LuxAriaLabelledbyDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAriaLabelledbyDirective.prototype, "luxAriaLabelledbySelector", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxAriaLabelledbyDirective.prototype, "luxAriaLabelledby", null);
LuxAriaLabelledbyDirective = tslib_1.__decorate([
    Directive({
        selector: '[luxAriaLabelledby]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], LuxAriaLabelledbyDirective);
export { LuxAriaLabelledbyDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWFyaWEtbGFiZWxsZWRieS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtZGlyZWN0aXZlcy9sdXgtYXJpYS9sdXgtYXJpYS1sYWJlbGxlZGJ5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLOUMsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMkIsU0FBUSxXQUFXO0lBZ0J6RCxZQUFzQixVQUFzQixFQUFZLFFBQW1CO1FBQ3pFLEtBQUssQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFEM0IsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFZLGFBQVEsR0FBUixRQUFRLENBQVc7UUFHekUsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNuQyxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvRCxJQUFJLE9BQU8sS0FBSyxZQUFZLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxRQUFRLENBQUM7YUFDM0M7aUJBQU0sSUFBSSxPQUFPLEtBQUssZ0NBQWdDLEVBQUU7Z0JBQ3ZELElBQUksQ0FBQyx5QkFBeUIsR0FBRyxRQUFRLENBQUM7YUFDM0M7U0FDRjtJQUNILENBQUM7SUFyQkQsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksaUJBQWlCLENBQUMsVUFBa0I7UUFDdEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFVBQVUsQ0FBQztRQUVyQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQWVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUN4QyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7Q0FDRixDQUFBOztZQXBCbUMsVUFBVTtZQUFzQixTQUFTOztBQWJsRTtJQUFSLEtBQUssRUFBRTs7NkVBQW1DO0FBRzNDO0lBREMsS0FBSyxFQUFFOzs7bUVBR1A7QUFSVSwwQkFBMEI7SUFIdEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHFCQUFxQjtLQUNoQyxDQUFDOzZDQWlCa0MsVUFBVSxFQUFzQixTQUFTO0dBaEJoRSwwQkFBMEIsQ0FvQ3RDO1NBcENZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHV4QXJpYUJhc2UgfSBmcm9tICcuL2x1eC1hcmlhLWJhc2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbHV4QXJpYUxhYmVsbGVkYnldJ1xufSlcbmV4cG9ydCBjbGFzcyBMdXhBcmlhTGFiZWxsZWRieURpcmVjdGl2ZSBleHRlbmRzIEx1eEFyaWFCYXNlIHtcbiAgX2x1eEFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG5cbiAgQElucHV0KCkgbHV4QXJpYUxhYmVsbGVkYnlTZWxlY3Rvcjogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGdldCBsdXhBcmlhTGFiZWxsZWRieSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbHV4QXJpYUxhYmVsbGVkYnk7XG4gIH1cblxuICBzZXQgbHV4QXJpYUxhYmVsbGVkYnkobGFiZWxsZWRieTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbHV4QXJpYUxhYmVsbGVkYnkgPSBsYWJlbGxlZGJ5O1xuXG4gICAgdGhpcy5yZW5kZXJBcmlhKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLCByZW5kZXJlciwgJ2FyaWEtbGFiZWxsZWRieScpO1xuXG4gICAgaWYgKCF0aGlzLmx1eEFyaWFMYWJlbGxlZGJ5U2VsZWN0b3IpIHtcbiAgICAgIGNvbnN0IHRhZ05hbWUgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHRhZ05hbWUgPT09ICdsdXgtYnV0dG9uJykge1xuICAgICAgICB0aGlzLmx1eEFyaWFMYWJlbGxlZGJ5U2VsZWN0b3IgPSAnYnV0dG9uJztcbiAgICAgIH0gZWxzZSBpZiAodGFnTmFtZSA9PT0gJ2x1eC1hcHAtaGVhZGVyLWFjdGlvbi1uYXYtaXRlbScpIHtcbiAgICAgICAgdGhpcy5sdXhBcmlhTGFiZWxsZWRieVNlbGVjdG9yID0gJ2J1dHRvbic7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U2VsZWN0b3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sdXhBcmlhTGFiZWxsZWRieVNlbGVjdG9yO1xuICB9XG5cbiAgZ2V0VmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbHV4QXJpYUxhYmVsbGVkYnk7XG4gIH1cbn1cbiJdfQ==