import * as tslib_1 from "tslib";
import { Component, ElementRef, Inject, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { LuxFilePreviewBase } from '../lux-file-preview-base/lux-file-preview-base';
import { LUX_FILE_PREVIEW_DATA } from '../lux-file-preview-config';
import { LuxFilePreviewRef } from '../lux-file-preview-ref';
let LuxFilePreviewImgViewerComponent = class LuxFilePreviewImgViewerComponent extends LuxFilePreviewBase {
    constructor(previewRef, previewData, sanitizer) {
        super(previewRef, previewData, sanitizer);
        this.previewRef = previewRef;
        this.previewData = previewData;
        this.sanitizer = sanitizer;
        this.zoomActive = false;
        this.zoomWidth = 0;
        this.zoomStep = 250;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.zoomActive =
                this.previewImg && this.previewImg.nativeElement.naturalWidth - this.paddingWith > window.innerWidth;
        });
    }
    onLoad(event) {
        this.zoomActive =
            this.previewImg && this.previewImg.nativeElement.naturalWidth - this.paddingWith > window.innerWidth;
        this.loadingFinished();
    }
    onZoomIn() {
        this.zoomWidth += this.zoomStep;
        this.clearFocus();
    }
    onZoomOut() {
        this.zoomWidth -= this.zoomStep;
        this.clearFocus();
    }
};
LuxFilePreviewImgViewerComponent.ctorParameters = () => [
    { type: LuxFilePreviewRef },
    { type: undefined, decorators: [{ type: Inject, args: [LUX_FILE_PREVIEW_DATA,] }] },
    { type: DomSanitizer }
];
tslib_1.__decorate([
    ViewChild('previewImg', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxFilePreviewImgViewerComponent.prototype, "previewImg", void 0);
LuxFilePreviewImgViewerComponent = tslib_1.__decorate([
    Component({
        selector: 'lux-file-preview-imgviewer',
        template: "<lux-file-preview-toolbar>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-search-plus\"\n    *ngIf=\"zoomActive\"\n    (luxClicked)=\"onZoomIn()\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-zoomin-btn\"\n    luxAriaLabel=\"Hinein zoomen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-search-minus\"\n    (luxClicked)=\"onZoomOut()\"\n    *ngIf=\"zoomActive\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-zoomout-btn\"\n    luxAriaLabel=\"Heraus zoomen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    [luxIconName]=\"downloadIconName\"\n    (luxClicked)=\"onDownload()\"\n    luxColor=\"accent\"\n    luxRaised=\"true\"\n    [luxTagId]=\"downloadTagId\"\n    [luxAriaLabel]=\"downloadAriaLabel\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    [luxIconName]=\"closeIconName\"\n    (luxClicked)=\"onClose()\"\n    luxRaised=\"true\"\n    [luxTagId]=\"closeTagId\"\n    [luxAriaLabel]=\"closeAriaLabel\"\n  ></lux-button>\n</lux-file-preview-toolbar>\n\n<div class=\"overlay-content\" [ngStyle]=\"{ 'max-width': width + 'px', 'max-height': height + 'px' }\">\n  <img\n    [src]=\"this.sanitizer.bypassSecurityTrustResourceUrl(this.url)\"\n    *ngIf=\"url\"\n    (load)=\"onLoad($event)\"\n    [ngStyle]=\"{\n      'max-width': width + zoomWidth + 'px',\n      'max-height': height + zoomWidth + 'px',\n      display: loading ? 'none' : 'block'\n    }\"\n    #previewImg\n  />\n  <div *ngIf=\"loading && !startPhase\" class=\"message-box\">\n    Lade...\n  </div>\n</div>\n",
        styles: [".overlay-content{overflow:auto}img{height:auto}"]
    }),
    tslib_1.__param(1, Inject(LUX_FILE_PREVIEW_DATA)),
    tslib_1.__metadata("design:paramtypes", [LuxFilePreviewRef, Object, DomSanitizer])
], LuxFilePreviewImgViewerComponent);
export { LuxFilePreviewImgViewerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWZpbGUtcHJldmlldy1pbWd2aWV3ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWZpbGUtcHJldmlldy9sdXgtZmlsZS1wcmV2aWV3LWltZ3ZpZXdlci9sdXgtZmlsZS1wcmV2aWV3LWltZ3ZpZXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU81RCxJQUFhLGdDQUFnQyxHQUE3QyxNQUFhLGdDQUFpQyxTQUFRLGtCQUFrQjtJQU90RSxZQUNZLFVBQTZCLEVBQ0UsV0FBK0IsRUFDakUsU0FBdUI7UUFFOUIsS0FBSyxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFKaEMsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7UUFDRSxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFDakUsY0FBUyxHQUFULFNBQVMsQ0FBYztRQVBoQyxlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ25CLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxhQUFRLEdBQUcsR0FBRyxDQUFDO0lBUWYsQ0FBQztJQUVELGVBQWU7UUFDYixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFVBQVU7Z0JBQ2IsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3pHLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFZO1FBQ2pCLElBQUksQ0FBQyxVQUFVO1lBQ2IsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Q0FDRixDQUFBOztZQTdCeUIsaUJBQWlCOzRDQUN0QyxNQUFNLFNBQUMscUJBQXFCO1lBQ1gsWUFBWTs7QUFUWTtJQUEzQyxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO3NDQUFhLFVBQVU7b0VBQUM7QUFEeEQsZ0NBQWdDO0lBTDVDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw0QkFBNEI7UUFDdEMscWlEQUEwRDs7S0FFM0QsQ0FBQztJQVVHLG1CQUFBLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBOzZDQURSLGlCQUFpQixVQUVyQixZQUFZO0dBVnJCLGdDQUFnQyxDQXFDNUM7U0FyQ1ksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbmplY3QsIE9uSW5pdCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IEx1eEZpbGVQcmV2aWV3QmFzZSB9IGZyb20gJy4uL2x1eC1maWxlLXByZXZpZXctYmFzZS9sdXgtZmlsZS1wcmV2aWV3LWJhc2UnO1xuaW1wb3J0IHsgTFVYX0ZJTEVfUFJFVklFV19EQVRBIH0gZnJvbSAnLi4vbHV4LWZpbGUtcHJldmlldy1jb25maWcnO1xuaW1wb3J0IHsgTHV4RmlsZVByZXZpZXdEYXRhIH0gZnJvbSAnLi4vbHV4LWZpbGUtcHJldmlldy1kYXRhJztcbmltcG9ydCB7IEx1eEZpbGVQcmV2aWV3UmVmIH0gZnJvbSAnLi4vbHV4LWZpbGUtcHJldmlldy1yZWYnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsdXgtZmlsZS1wcmV2aWV3LWltZ3ZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9sdXgtZmlsZS1wcmV2aWV3LWltZ3ZpZXdlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2x1eC1maWxlLXByZXZpZXctaW1ndmlld2VyLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTHV4RmlsZVByZXZpZXdJbWdWaWV3ZXJDb21wb25lbnQgZXh0ZW5kcyBMdXhGaWxlUHJldmlld0Jhc2UgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBAVmlld0NoaWxkKCdwcmV2aWV3SW1nJywgeyBzdGF0aWM6IGZhbHNlIH0pIHByZXZpZXdJbWc6IEVsZW1lbnRSZWY7XG5cbiAgem9vbUFjdGl2ZSA9IGZhbHNlO1xuICB6b29tV2lkdGggPSAwO1xuICB6b29tU3RlcCA9IDI1MDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcHJldmlld1JlZjogTHV4RmlsZVByZXZpZXdSZWYsXG4gICAgQEluamVjdChMVVhfRklMRV9QUkVWSUVXX0RBVEEpIHByb3RlY3RlZCBwcmV2aWV3RGF0YTogTHV4RmlsZVByZXZpZXdEYXRhLFxuICAgIHB1YmxpYyBzYW5pdGl6ZXI6IERvbVNhbml0aXplclxuICApIHtcbiAgICBzdXBlcihwcmV2aWV3UmVmLCBwcmV2aWV3RGF0YSwgc2FuaXRpemVyKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuem9vbUFjdGl2ZSA9XG4gICAgICAgIHRoaXMucHJldmlld0ltZyAmJiB0aGlzLnByZXZpZXdJbWcubmF0aXZlRWxlbWVudC5uYXR1cmFsV2lkdGggLSB0aGlzLnBhZGRpbmdXaXRoID4gd2luZG93LmlubmVyV2lkdGg7XG4gICAgfSk7XG4gIH1cblxuICBvbkxvYWQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgdGhpcy56b29tQWN0aXZlID1cbiAgICAgIHRoaXMucHJldmlld0ltZyAmJiB0aGlzLnByZXZpZXdJbWcubmF0aXZlRWxlbWVudC5uYXR1cmFsV2lkdGggLSB0aGlzLnBhZGRpbmdXaXRoID4gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy5sb2FkaW5nRmluaXNoZWQoKTtcbiAgfVxuXG4gIG9uWm9vbUluKCkge1xuICAgIHRoaXMuem9vbVdpZHRoICs9IHRoaXMuem9vbVN0ZXA7XG4gICAgdGhpcy5jbGVhckZvY3VzKCk7XG4gIH1cblxuICBvblpvb21PdXQoKSB7XG4gICAgdGhpcy56b29tV2lkdGggLT0gdGhpcy56b29tU3RlcDtcbiAgICB0aGlzLmNsZWFyRm9jdXMoKTtcbiAgfVxufVxuIl19