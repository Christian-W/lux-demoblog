import * as tslib_1 from "tslib";
import { ESCAPE } from '@angular/cdk/keycodes';
import { HostListener, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { LuxUtil } from '../../lux-util/lux-util';
import { LUX_FILE_PREVIEW_DATA } from '../lux-file-preview-config';
import { LuxFilePreviewRef } from '../lux-file-preview-ref';
let LuxFilePreviewBase = class LuxFilePreviewBase {
    constructor(previewRef, previewData, sanitizer) {
        this.previewRef = previewRef;
        this.previewData = previewData;
        this.sanitizer = sanitizer;
        this.urls = [];
        this.paddingWith = 100;
        this.paddingHeight = 150;
        this.startPhase = true;
        this.startDurationMs = 250;
        this.loading = true;
        this.downloadIconName = 'fas fa-download';
        this.downloadTagId = 'file-preview-download-btn';
        this.downloadAriaLabel = 'Datei herunterladen';
        this.closeIconName = 'fas fa-window-close';
        this.closeTagId = 'file-preview-close-btn';
        this.closeAriaLabel = 'Dateivorschau schlieÃŸen';
    }
    handleKeydown(event) {
        if (event.keyCode === ESCAPE) {
            this.onClose();
        }
    }
    windowResize() {
        this.updateWidthAndHeight();
    }
    ngOnInit() {
        this.loadingTimer = setTimeout(() => {
            this.startPhase = false;
        }, this.startDurationMs);
        this.updateWidthAndHeight();
        setTimeout(() => {
            let myBlob;
            if ('string' === typeof this.previewData.fileObject.content) {
                myBlob = new Blob([LuxUtil.base64ToArrayBuffer(this.previewData.fileObject.content.split(',')[1])], {
                    type: this.previewData.fileObject.type
                });
            }
            else {
                myBlob = this.previewData.fileObject.content;
            }
            this.url = window.URL.createObjectURL(myBlob);
            this.urls.push(this.url);
        });
    }
    ngOnDestroy() {
        this.urls.forEach(url => {
            window.URL.revokeObjectURL(url);
        });
    }
    onDownload() {
        this.previewData.fileComponent.downloadFile(this.previewData.fileObject);
        this.previewRef.close();
    }
    onClose() {
        this.previewRef.close();
    }
    loadingFinished() {
        this.loading = false;
    }
    clearFocus() {
        if (document.activeElement instanceof HTMLElement) {
            document.activeElement.blur();
        }
    }
    updateWidthAndHeight() {
        this.width = window.innerWidth - this.paddingWith;
        this.height = window.innerHeight - this.paddingHeight;
    }
};
tslib_1.__decorate([
    HostListener('document:keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], LuxFilePreviewBase.prototype, "handleKeydown", null);
tslib_1.__decorate([
    HostListener('window:resize'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LuxFilePreviewBase.prototype, "windowResize", null);
LuxFilePreviewBase = tslib_1.__decorate([
    tslib_1.__param(1, Inject(LUX_FILE_PREVIEW_DATA)),
    tslib_1.__metadata("design:paramtypes", [LuxFilePreviewRef, Object, DomSanitizer])
], LuxFilePreviewBase);
export { LuxFilePreviewBase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWZpbGUtcHJldmlldy1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWZpbGUtcHJldmlldy9sdXgtZmlsZS1wcmV2aWV3LWJhc2UvbHV4LWZpbGUtcHJldmlldy1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFbkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFNUQsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUFtQzdCLFlBQ1ksVUFBNkIsRUFDRSxXQUErQixFQUM5RCxTQUF1QjtRQUZ2QixlQUFVLEdBQVYsVUFBVSxDQUFtQjtRQUNFLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUM5RCxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBcENuQyxTQUFJLEdBQWEsRUFBRSxDQUFDO1FBRXBCLGdCQUFXLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLGtCQUFhLEdBQUcsR0FBRyxDQUFDO1FBS3BCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsb0JBQWUsR0FBRyxHQUFHLENBQUM7UUFDdEIsWUFBTyxHQUFHLElBQUksQ0FBQztRQUdmLHFCQUFnQixHQUFHLGlCQUFpQixDQUFDO1FBQ3JDLGtCQUFhLEdBQUcsMkJBQTJCLENBQUM7UUFDNUMsc0JBQWlCLEdBQUcscUJBQXFCLENBQUM7UUFFMUMsa0JBQWEsR0FBRyxxQkFBcUIsQ0FBQztRQUN0QyxlQUFVLEdBQUcsd0JBQXdCLENBQUM7UUFDdEMsbUJBQWMsR0FBRyx5QkFBeUIsQ0FBQztJQWtCeEMsQ0FBQztJQWZKLGFBQWEsQ0FBQyxLQUFvQjtRQUNoQyxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO1lBQzVCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtJQUNILENBQUM7SUFHRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQVFELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDMUIsQ0FBQyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUU1QixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxNQUFZLENBQUM7WUFDakIsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7Z0JBQzNELE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbEcsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUk7aUJBQ3ZDLENBQUMsQ0FBQzthQUNKO2lCQUFNO2dCQUNMLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7YUFDOUM7WUFFRCxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLFFBQVEsQ0FBQyxhQUFhLFlBQVksV0FBVyxFQUFFO1lBQ2pELFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQ3hELENBQUM7Q0FDRixDQUFBO0FBcEVDO0lBREMsWUFBWSxDQUFDLGtCQUFrQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7OzZDQUN4QixhQUFhOzt1REFJakM7QUFHRDtJQURDLFlBQVksQ0FBQyxlQUFlLENBQUM7Ozs7c0RBRzdCO0FBakNVLGtCQUFrQjtJQXFDMUIsbUJBQUEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7NkNBRFIsaUJBQWlCLFVBRWxCLFlBQVk7R0F0Q3hCLGtCQUFrQixDQTRGOUI7U0E1Rlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVNDQVBFIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBMdXhVdGlsIH0gZnJvbSAnLi4vLi4vbHV4LXV0aWwvbHV4LXV0aWwnO1xuaW1wb3J0IHsgTFVYX0ZJTEVfUFJFVklFV19EQVRBIH0gZnJvbSAnLi4vbHV4LWZpbGUtcHJldmlldy1jb25maWcnO1xuaW1wb3J0IHsgTHV4RmlsZVByZXZpZXdEYXRhIH0gZnJvbSAnLi4vbHV4LWZpbGUtcHJldmlldy1kYXRhJztcbmltcG9ydCB7IEx1eEZpbGVQcmV2aWV3UmVmIH0gZnJvbSAnLi4vbHV4LWZpbGUtcHJldmlldy1yZWYnO1xuXG5leHBvcnQgY2xhc3MgTHV4RmlsZVByZXZpZXdCYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICB1cmw6IHN0cmluZztcbiAgdXJsczogc3RyaW5nW10gPSBbXTtcblxuICBwYWRkaW5nV2l0aCA9IDEwMDtcbiAgcGFkZGluZ0hlaWdodCA9IDE1MDtcblxuICBoZWlnaHQ6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcblxuICBzdGFydFBoYXNlID0gdHJ1ZTtcbiAgc3RhcnREdXJhdGlvbk1zID0gMjUwO1xuICBsb2FkaW5nID0gdHJ1ZTtcbiAgbG9hZGluZ1RpbWVyOiBhbnk7XG5cbiAgZG93bmxvYWRJY29uTmFtZSA9ICdmYXMgZmEtZG93bmxvYWQnO1xuICBkb3dubG9hZFRhZ0lkID0gJ2ZpbGUtcHJldmlldy1kb3dubG9hZC1idG4nO1xuICBkb3dubG9hZEFyaWFMYWJlbCA9ICdEYXRlaSBoZXJ1bnRlcmxhZGVuJztcblxuICBjbG9zZUljb25OYW1lID0gJ2ZhcyBmYS13aW5kb3ctY2xvc2UnO1xuICBjbG9zZVRhZ0lkID0gJ2ZpbGUtcHJldmlldy1jbG9zZS1idG4nO1xuICBjbG9zZUFyaWFMYWJlbCA9ICdEYXRlaXZvcnNjaGF1IHNjaGxpZcOfZW4nO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmtleWRvd24nLCBbJyRldmVudCddKVxuICBoYW5kbGVLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEVTQ0FQRSkge1xuICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScpXG4gIHdpbmRvd1Jlc2l6ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZVdpZHRoQW5kSGVpZ2h0KCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcHJldmlld1JlZjogTHV4RmlsZVByZXZpZXdSZWYsXG4gICAgQEluamVjdChMVVhfRklMRV9QUkVWSUVXX0RBVEEpIHByb3RlY3RlZCBwcmV2aWV3RGF0YTogTHV4RmlsZVByZXZpZXdEYXRhLFxuICAgIHByb3RlY3RlZCBzYW5pdGl6ZXI6IERvbVNhbml0aXplclxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5sb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc3RhcnRQaGFzZSA9IGZhbHNlO1xuICAgIH0sIHRoaXMuc3RhcnREdXJhdGlvbk1zKTtcblxuICAgIHRoaXMudXBkYXRlV2lkdGhBbmRIZWlnaHQoKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbGV0IG15QmxvYjogQmxvYjtcbiAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucHJldmlld0RhdGEuZmlsZU9iamVjdC5jb250ZW50KSB7XG4gICAgICAgIG15QmxvYiA9IG5ldyBCbG9iKFtMdXhVdGlsLmJhc2U2NFRvQXJyYXlCdWZmZXIodGhpcy5wcmV2aWV3RGF0YS5maWxlT2JqZWN0LmNvbnRlbnQuc3BsaXQoJywnKVsxXSldLCB7XG4gICAgICAgICAgdHlwZTogdGhpcy5wcmV2aWV3RGF0YS5maWxlT2JqZWN0LnR5cGVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBteUJsb2IgPSB0aGlzLnByZXZpZXdEYXRhLmZpbGVPYmplY3QuY29udGVudDtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChteUJsb2IpO1xuICAgICAgdGhpcy51cmxzLnB1c2godGhpcy51cmwpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy51cmxzLmZvckVhY2godXJsID0+IHtcbiAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gICAgfSk7XG4gIH1cblxuICBvbkRvd25sb2FkKCkge1xuICAgIHRoaXMucHJldmlld0RhdGEuZmlsZUNvbXBvbmVudC5kb3dubG9hZEZpbGUodGhpcy5wcmV2aWV3RGF0YS5maWxlT2JqZWN0KTtcbiAgICB0aGlzLnByZXZpZXdSZWYuY2xvc2UoKTtcbiAgfVxuXG4gIG9uQ2xvc2UoKSB7XG4gICAgdGhpcy5wcmV2aWV3UmVmLmNsb3NlKCk7XG4gIH1cblxuICBsb2FkaW5nRmluaXNoZWQoKSB7XG4gICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gIH1cblxuICBjbGVhckZvY3VzKCkge1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVdpZHRoQW5kSGVpZ2h0KCkge1xuICAgIHRoaXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMucGFkZGluZ1dpdGg7XG4gICAgdGhpcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLnBhZGRpbmdIZWlnaHQ7XG4gIH1cbn1cbiJdfQ==