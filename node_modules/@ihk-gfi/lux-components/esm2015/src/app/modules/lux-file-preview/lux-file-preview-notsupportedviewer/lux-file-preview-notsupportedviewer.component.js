import * as tslib_1 from "tslib";
import { Component, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { LuxFilePreviewBase } from '../lux-file-preview-base/lux-file-preview-base';
import { LUX_FILE_PREVIEW_DATA } from '../lux-file-preview-config';
import { LuxFilePreviewRef } from '../lux-file-preview-ref';
let LuxFilePreviewNotSupportedViewerComponent = class LuxFilePreviewNotSupportedViewerComponent extends LuxFilePreviewBase {
    constructor(previewRef, previewData, sanitizer) {
        super(previewRef, previewData, sanitizer);
        this.previewRef = previewRef;
        this.previewData = previewData;
        this.sanitizer = sanitizer;
        this.counter = 5;
        this.downloadLabelDefault = 'Download... ';
        this.downloadLabel = this.downloadLabelDefault + this.counter;
    }
    ngOnInit() {
        this.updateDownloadLabel();
    }
    onDownload() {
        clearTimeout(this.timer);
        super.onDownload();
    }
    onClose() {
        clearTimeout(this.timer);
        super.onClose();
    }
    updateDownloadLabel() {
        this.timer = setTimeout(() => {
            if (this.counter > 0) {
                this.counter--;
                this.downloadLabel = this.downloadLabelDefault + this.counter;
                this.updateDownloadLabel();
            }
            else {
                this.onDownload();
            }
        }, 1000);
    }
};
LuxFilePreviewNotSupportedViewerComponent.ctorParameters = () => [
    { type: LuxFilePreviewRef },
    { type: undefined, decorators: [{ type: Inject, args: [LUX_FILE_PREVIEW_DATA,] }] },
    { type: DomSanitizer }
];
LuxFilePreviewNotSupportedViewerComponent = tslib_1.__decorate([
    Component({
        selector: 'lux-file-preview-notsupportedviewer',
        template: "<lux-file-preview-toolbar>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-download\"\n    (luxClicked)=\"onDownload()\"\n    luxColor=\"accent\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-download-btn\"\n    luxAriaLabel=\"Datei herunterladen\"\n  ></lux-button>\n  <lux-button\n    fxFlex=\"none\"\n    luxIconName=\"fas fa-window-close\"\n    (luxClicked)=\"onClose()\"\n    luxRaised=\"true\"\n    luxTagId=\"file-preview-close-btn\"\n    luxAriaLabel=\"Dateivorschau schlie\u00DFen\"\n  ></lux-button>\n</lux-file-preview-toolbar>\n<div class=\"message-box\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"20px\">\n  <div>Diese Datei kann nicht angezeigt werden.</div>\n  <lux-button [luxLabel]=\"downloadLabel\" (luxClicked)=\"onDownload()\" [luxRaised]=\"true\" luxColor=\"accent\"></lux-button>\n</div>\n",
        styles: [""]
    }),
    tslib_1.__param(1, Inject(LUX_FILE_PREVIEW_DATA)),
    tslib_1.__metadata("design:paramtypes", [LuxFilePreviewRef, Object, DomSanitizer])
], LuxFilePreviewNotSupportedViewerComponent);
export { LuxFilePreviewNotSupportedViewerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWZpbGUtcHJldmlldy1ub3RzdXBwb3J0ZWR2aWV3ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWZpbGUtcHJldmlldy9sdXgtZmlsZS1wcmV2aWV3LW5vdHN1cHBvcnRlZHZpZXdlci9sdXgtZmlsZS1wcmV2aWV3LW5vdHN1cHBvcnRlZHZpZXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQU81RCxJQUFhLHlDQUF5QyxHQUF0RCxNQUFhLHlDQUEwQyxTQUFRLGtCQUFrQjtJQU8vRSxZQUNZLFVBQTZCLEVBQ0UsV0FBK0IsRUFDOUQsU0FBdUI7UUFFakMsS0FBSyxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFKaEMsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7UUFDRSxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFDOUQsY0FBUyxHQUFULFNBQVMsQ0FBYztRQVRuQyxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBR1oseUJBQW9CLEdBQUcsY0FBYyxDQUFDO1FBQ3RDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFRekQsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsVUFBVTtRQUNSLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFekIsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxPQUFPO1FBQ0wsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV6QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNmLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQzlELElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNuQjtRQUNILENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7Q0FDRixDQUFBOztZQWxDeUIsaUJBQWlCOzRDQUN0QyxNQUFNLFNBQUMscUJBQXFCO1lBQ1IsWUFBWTs7QUFWeEIseUNBQXlDO0lBTHJELFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxxQ0FBcUM7UUFDL0MsbTJCQUFtRTs7S0FFcEUsQ0FBQztJQVVHLG1CQUFBLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBOzZDQURSLGlCQUFpQixVQUVsQixZQUFZO0dBVnhCLHlDQUF5QyxDQTBDckQ7U0ExQ1kseUNBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBMdXhGaWxlUHJldmlld0Jhc2UgfSBmcm9tICcuLi9sdXgtZmlsZS1wcmV2aWV3LWJhc2UvbHV4LWZpbGUtcHJldmlldy1iYXNlJztcbmltcG9ydCB7IExVWF9GSUxFX1BSRVZJRVdfREFUQSB9IGZyb20gJy4uL2x1eC1maWxlLXByZXZpZXctY29uZmlnJztcbmltcG9ydCB7IEx1eEZpbGVQcmV2aWV3RGF0YSB9IGZyb20gJy4uL2x1eC1maWxlLXByZXZpZXctZGF0YSc7XG5pbXBvcnQgeyBMdXhGaWxlUHJldmlld1JlZiB9IGZyb20gJy4uL2x1eC1maWxlLXByZXZpZXctcmVmJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbHV4LWZpbGUtcHJldmlldy1ub3RzdXBwb3J0ZWR2aWV3ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vbHV4LWZpbGUtcHJldmlldy1ub3RzdXBwb3J0ZWR2aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9sdXgtZmlsZS1wcmV2aWV3LW5vdHN1cHBvcnRlZHZpZXdlci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEx1eEZpbGVQcmV2aWV3Tm90U3VwcG9ydGVkVmlld2VyQ29tcG9uZW50IGV4dGVuZHMgTHV4RmlsZVByZXZpZXdCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgY291bnRlciA9IDU7XG4gIHRpbWVyOiBhbnk7XG5cbiAgZG93bmxvYWRMYWJlbERlZmF1bHQgPSAnRG93bmxvYWQuLi4gJztcbiAgZG93bmxvYWRMYWJlbCA9IHRoaXMuZG93bmxvYWRMYWJlbERlZmF1bHQgKyB0aGlzLmNvdW50ZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHByZXZpZXdSZWY6IEx1eEZpbGVQcmV2aWV3UmVmLFxuICAgIEBJbmplY3QoTFVYX0ZJTEVfUFJFVklFV19EQVRBKSBwcm90ZWN0ZWQgcHJldmlld0RhdGE6IEx1eEZpbGVQcmV2aWV3RGF0YSxcbiAgICBwcm90ZWN0ZWQgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXJcbiAgKSB7XG4gICAgc3VwZXIocHJldmlld1JlZiwgcHJldmlld0RhdGEsIHNhbml0aXplcik7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnVwZGF0ZURvd25sb2FkTGFiZWwoKTtcbiAgfVxuXG4gIG9uRG93bmxvYWQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuXG4gICAgc3VwZXIub25Eb3dubG9hZCgpO1xuICB9XG5cbiAgb25DbG9zZSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG5cbiAgICBzdXBlci5vbkNsb3NlKCk7XG4gIH1cblxuICB1cGRhdGVEb3dubG9hZExhYmVsKCkge1xuICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvdW50ZXIgPiAwKSB7XG4gICAgICAgIHRoaXMuY291bnRlci0tO1xuICAgICAgICB0aGlzLmRvd25sb2FkTGFiZWwgPSB0aGlzLmRvd25sb2FkTGFiZWxEZWZhdWx0ICsgdGhpcy5jb3VudGVyO1xuICAgICAgICB0aGlzLnVwZGF0ZURvd25sb2FkTGFiZWwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25Eb3dubG9hZCgpO1xuICAgICAgfVxuICAgIH0sIDEwMDApO1xuICB9XG59XG4iXX0=