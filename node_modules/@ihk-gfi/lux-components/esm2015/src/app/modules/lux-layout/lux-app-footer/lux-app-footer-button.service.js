import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
let LuxAppFooterButtonService = class LuxAppFooterButtonService {
    constructor() {
        this._buttonInfos = [];
    }
    get buttonInfos() {
        return this._buttonInfos;
    }
    set buttonInfos(buttonInfos) {
        this._buttonInfos = buttonInfos ? buttonInfos : [];
    }
    pushButtonInfos(...value) {
        if (!this.buttonInfos) {
            this._buttonInfos = [];
        }
        this._buttonInfos.push(...value);
    }
    getButtonInfoByCMD(cmd) {
        return this.buttonInfos.find((buttonInfo) => buttonInfo.cmd === cmd);
    }
    removeButtonInfoAtIndex(i) {
        this._buttonInfos = this._buttonInfos.filter((info, index) => index !== i);
    }
    removeButtonInfoByCmd(cmd) {
        this._buttonInfos = this._buttonInfos.filter(info => info.cmd !== cmd);
    }
    clearButtonInfos() {
        this._buttonInfos = [];
    }
    sendButtonCommand(buttonCommand) {
        // Den angeklickten Button erhalten und dessen onClick-Funktion aufrufen.
        // Als Parameter den Button selbst mitgeben (falls dieser bearbeitet werden muss, z.B.).
        const clickedButton = this.getButtonInfoByCMD(buttonCommand);
        if (clickedButton) {
            clickedButton.onClick(clickedButton);
        }
    }
};
LuxAppFooterButtonService = tslib_1.__decorate([
    Injectable()
], LuxAppFooterButtonService);
export { LuxAppFooterButtonService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWFwcC1mb290ZXItYnV0dG9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtbGF5b3V0L2x1eC1hcHAtZm9vdGVyL2x1eC1hcHAtZm9vdGVyLWJ1dHRvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzNDLElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBRHRDO1FBRVUsaUJBQVksR0FBNkIsRUFBRSxDQUFDO0lBeUN0RCxDQUFDO0lBdkNDLElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsV0FBcUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUFFRCxlQUFlLENBQUMsR0FBRyxLQUErQjtRQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGtCQUFrQixDQUFDLEdBQVc7UUFDNUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQWtDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVELHVCQUF1QixDQUFDLENBQVM7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQscUJBQXFCLENBQUMsR0FBVztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELGlCQUFpQixDQUFDLGFBQXFCO1FBQ3JDLHlFQUF5RTtRQUN6RSx3RkFBd0Y7UUFDeEYsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzdELElBQUksYUFBYSxFQUFFO1lBQ2pCLGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdEM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQTFDWSx5QkFBeUI7SUFEckMsVUFBVSxFQUFFO0dBQ0EseUJBQXlCLENBMENyQztTQTFDWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMdXhBcHBGb290ZXJCdXR0b25JbmZvIH0gZnJvbSAnLi9sdXgtYXBwLWZvb3Rlci1idXR0b24taW5mbyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhBcHBGb290ZXJCdXR0b25TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfYnV0dG9uSW5mb3M6IEx1eEFwcEZvb3RlckJ1dHRvbkluZm9bXSA9IFtdO1xuXG4gIGdldCBidXR0b25JbmZvcygpOiBMdXhBcHBGb290ZXJCdXR0b25JbmZvW10ge1xuICAgIHJldHVybiB0aGlzLl9idXR0b25JbmZvcztcbiAgfVxuXG4gIHNldCBidXR0b25JbmZvcyhidXR0b25JbmZvczogTHV4QXBwRm9vdGVyQnV0dG9uSW5mb1tdKSB7XG4gICAgdGhpcy5fYnV0dG9uSW5mb3MgPSBidXR0b25JbmZvcyA/IGJ1dHRvbkluZm9zIDogW107XG4gIH1cblxuICBwdXNoQnV0dG9uSW5mb3MoLi4udmFsdWU6IEx1eEFwcEZvb3RlckJ1dHRvbkluZm9bXSkge1xuICAgIGlmICghdGhpcy5idXR0b25JbmZvcykge1xuICAgICAgdGhpcy5fYnV0dG9uSW5mb3MgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5fYnV0dG9uSW5mb3MucHVzaCguLi52YWx1ZSk7XG4gIH1cblxuICBnZXRCdXR0b25JbmZvQnlDTUQoY21kOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5idXR0b25JbmZvcy5maW5kKChidXR0b25JbmZvOiBMdXhBcHBGb290ZXJCdXR0b25JbmZvKSA9PiBidXR0b25JbmZvLmNtZCA9PT0gY21kKTtcbiAgfVxuXG4gIHJlbW92ZUJ1dHRvbkluZm9BdEluZGV4KGk6IG51bWJlcikge1xuICAgIHRoaXMuX2J1dHRvbkluZm9zID0gdGhpcy5fYnV0dG9uSW5mb3MuZmlsdGVyKChpbmZvLCBpbmRleCkgPT4gaW5kZXggIT09IGkpO1xuICB9XG5cbiAgcmVtb3ZlQnV0dG9uSW5mb0J5Q21kKGNtZDogc3RyaW5nKSB7XG4gICAgdGhpcy5fYnV0dG9uSW5mb3MgPSB0aGlzLl9idXR0b25JbmZvcy5maWx0ZXIoaW5mbyA9PiBpbmZvLmNtZCAhPT0gY21kKTtcbiAgfVxuXG4gIGNsZWFyQnV0dG9uSW5mb3MoKSB7XG4gICAgdGhpcy5fYnV0dG9uSW5mb3MgPSBbXTtcbiAgfVxuXG4gIHNlbmRCdXR0b25Db21tYW5kKGJ1dHRvbkNvbW1hbmQ6IHN0cmluZykge1xuICAgIC8vIERlbiBhbmdla2xpY2t0ZW4gQnV0dG9uIGVyaGFsdGVuIHVuZCBkZXNzZW4gb25DbGljay1GdW5rdGlvbiBhdWZydWZlbi5cbiAgICAvLyBBbHMgUGFyYW1ldGVyIGRlbiBCdXR0b24gc2VsYnN0IG1pdGdlYmVuIChmYWxscyBkaWVzZXIgYmVhcmJlaXRldCB3ZXJkZW4gbXVzcywgei5CLikuXG4gICAgY29uc3QgY2xpY2tlZEJ1dHRvbiA9IHRoaXMuZ2V0QnV0dG9uSW5mb0J5Q01EKGJ1dHRvbkNvbW1hbmQpO1xuICAgIGlmIChjbGlja2VkQnV0dG9uKSB7XG4gICAgICBjbGlja2VkQnV0dG9uLm9uQ2xpY2soY2xpY2tlZEJ1dHRvbik7XG4gICAgfVxuICB9XG59XG4iXX0=