import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
let LuxStepperHelperService = class LuxStepperHelperService {
    constructor() {
        this.switchStep = new Map();
    }
    /**
     * Springt im Stepper zum naechsten Step.
     * Alternativ (ohne Stepper als Parameter) laesst die Funktion alle
     * bekannten Stepper einen Schritt nach vorne springen.
     *
     * Voraussetzung: luxLinear = false oder aktuell Form ist valide.
     */
    nextStep(stepper) {
        if (stepper) {
            const subject = this.switchStep.get(stepper);
            if (subject) {
                subject.next(true);
            }
        }
        else {
            this.switchStep.forEach((switchStep) => switchStep.next(true));
        }
    }
    /**
     * Springt im Stepper zum vorherigen Step.
     * Alternativ (ohne Stepper als Parameter) laesst die Funktion alle
     * Bekannten Stepper einen Schritt zurueckspringen.
     */
    previousStep(stepper) {
        if (stepper) {
            const subject = this.switchStep.get(stepper);
            if (subject) {
                subject.next(false);
            }
        }
        else {
            this.switchStep.forEach((switchStep) => switchStep.next(false));
        }
    }
    /**
     * Gibt das Observable der internen Map fuer den Stepper zurueck.
     * @param stepper
     * @returns Observable<boolean> | Observable<any>
     */
    getObservable(stepper) {
        const subject = this.switchStep.get(stepper);
        return subject ? subject.asObservable() : of(null);
    }
    /**
     * Traegt den Stepper in die Map der dem Service bekannten Stepper ein.
     * @param stepper
     */
    registerStepper(stepper) {
        if (!this.switchStep.get(stepper)) {
            this.switchStep.set(stepper, new BehaviorSubject(false));
        }
    }
};
LuxStepperHelperService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], LuxStepperHelperService);
export { LuxStepperHelperService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXN0ZXBwZXItaGVscGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtbGF5b3V0L2x1eC1zdGVwcGVyL2x1eC1zdGVwcGVyLWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSXZELElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBR2xDO1FBRlEsZUFBVSxHQUF1RCxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRXBFLENBQUM7SUFFaEI7Ozs7OztPQU1HO0lBQ0ksUUFBUSxDQUFDLE9BQTZCO1FBQzNDLElBQUksT0FBTyxFQUFFO1lBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQW9DLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUMxRjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksWUFBWSxDQUFDLE9BQTZCO1FBQy9DLElBQUksT0FBTyxFQUFFO1lBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQW9DLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUMzRjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksYUFBYSxDQUFDLE9BQTRCO1FBQy9DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZUFBZSxDQUFDLE9BQTRCO1FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7Q0FDRixDQUFBO0FBMURZLHVCQUF1QjtJQURuQyxVQUFVLEVBQUU7O0dBQ0EsdUJBQXVCLENBMERuQztTQTFEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMdXhTdGVwcGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sdXgtc3RlcHBlci5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHV4U3RlcHBlckhlbHBlclNlcnZpY2Uge1xuICBwcml2YXRlIHN3aXRjaFN0ZXA6IE1hcDxMdXhTdGVwcGVyQ29tcG9uZW50LCBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogU3ByaW5ndCBpbSBTdGVwcGVyIHp1bSBuYWVjaHN0ZW4gU3RlcC5cbiAgICogQWx0ZXJuYXRpdiAob2huZSBTdGVwcGVyIGFscyBQYXJhbWV0ZXIpIGxhZXNzdCBkaWUgRnVua3Rpb24gYWxsZVxuICAgKiBiZWthbm50ZW4gU3RlcHBlciBlaW5lbiBTY2hyaXR0IG5hY2ggdm9ybmUgc3ByaW5nZW4uXG4gICAqXG4gICAqIFZvcmF1c3NldHp1bmc6IGx1eExpbmVhciA9IGZhbHNlIG9kZXIgYWt0dWVsbCBGb3JtIGlzdCB2YWxpZGUuXG4gICAqL1xuICBwdWJsaWMgbmV4dFN0ZXAoc3RlcHBlcj86IEx1eFN0ZXBwZXJDb21wb25lbnQpIHtcbiAgICBpZiAoc3RlcHBlcikge1xuICAgICAgY29uc3Qgc3ViamVjdCA9IHRoaXMuc3dpdGNoU3RlcC5nZXQoc3RlcHBlcik7XG4gICAgICBpZiAoc3ViamVjdCkge1xuICAgICAgICBzdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3dpdGNoU3RlcC5mb3JFYWNoKChzd2l0Y2hTdGVwOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4pID0+IHN3aXRjaFN0ZXAubmV4dCh0cnVlKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNwcmluZ3QgaW0gU3RlcHBlciB6dW0gdm9yaGVyaWdlbiBTdGVwLlxuICAgKiBBbHRlcm5hdGl2IChvaG5lIFN0ZXBwZXIgYWxzIFBhcmFtZXRlcikgbGFlc3N0IGRpZSBGdW5rdGlvbiBhbGxlXG4gICAqIEJla2FubnRlbiBTdGVwcGVyIGVpbmVuIFNjaHJpdHQgenVydWVja3NwcmluZ2VuLlxuICAgKi9cbiAgcHVibGljIHByZXZpb3VzU3RlcChzdGVwcGVyPzogTHV4U3RlcHBlckNvbXBvbmVudCkge1xuICAgIGlmIChzdGVwcGVyKSB7XG4gICAgICBjb25zdCBzdWJqZWN0ID0gdGhpcy5zd2l0Y2hTdGVwLmdldChzdGVwcGVyKTtcbiAgICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICAgIHN1YmplY3QubmV4dChmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3dpdGNoU3RlcC5mb3JFYWNoKChzd2l0Y2hTdGVwOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4pID0+IHN3aXRjaFN0ZXAubmV4dChmYWxzZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHaWJ0IGRhcyBPYnNlcnZhYmxlIGRlciBpbnRlcm5lbiBNYXAgZnVlciBkZW4gU3RlcHBlciB6dXJ1ZWNrLlxuICAgKiBAcGFyYW0gc3RlcHBlclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgT2JzZXJ2YWJsZTxhbnk+XG4gICAqL1xuICBwdWJsaWMgZ2V0T2JzZXJ2YWJsZShzdGVwcGVyOiBMdXhTdGVwcGVyQ29tcG9uZW50KSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHRoaXMuc3dpdGNoU3RlcC5nZXQoc3RlcHBlcik7XG4gICAgcmV0dXJuIHN1YmplY3QgPyBzdWJqZWN0LmFzT2JzZXJ2YWJsZSgpIDogb2YobnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogVHJhZWd0IGRlbiBTdGVwcGVyIGluIGRpZSBNYXAgZGVyIGRlbSBTZXJ2aWNlIGJla2FubnRlbiBTdGVwcGVyIGVpbi5cbiAgICogQHBhcmFtIHN0ZXBwZXJcbiAgICovXG4gIHB1YmxpYyByZWdpc3RlclN0ZXBwZXIoc3RlcHBlcjogTHV4U3RlcHBlckNvbXBvbmVudCkge1xuICAgIGlmICghdGhpcy5zd2l0Y2hTdGVwLmdldChzdGVwcGVyKSkge1xuICAgICAgdGhpcy5zd2l0Y2hTdGVwLnNldChzdGVwcGVyLCBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKSk7XG4gICAgfVxuICB9XG59XG4iXX0=