import * as tslib_1 from "tslib";
var LuxIconComponent_1;
import { Component, HostBinding, Input } from '@angular/core';
import { LuxBackgroundColorsEnum } from '../../lux-util/lux-colors.enum';
import { LuxUtil } from '../../lux-util/lux-util';
let LuxIconComponent = LuxIconComponent_1 = class LuxIconComponent {
    constructor() {
        this._luxPadding = '4px';
        this._backgroundCSSClass = '';
        this._fontCSSClass = '';
        this.currentIconSize = 1;
        this.styleMargin = '0';
        this.luxRounded = false;
    }
    get luxMargin() {
        return this.styleMargin;
    }
    // 'standard margin Werte z.B. '5px 4px 3px 2px'
    set luxMargin(margin) {
        this.styleMargin = margin;
    }
    get luxPadding() {
        return this._luxPadding;
    }
    // standard padding Werte z.B. '5px 4px 3px 2px'
    set luxPadding(padding) {
        this._luxPadding = padding;
    }
    get luxIconSize() {
        return this._luxIconSize;
    }
    set luxIconSize(iconSizeValue) {
        this._luxIconSize = iconSizeValue;
        if (typeof this.luxIconSize === 'string' && this.luxIconSize.length === 2) {
            this.currentIconSize = +this.luxIconSize.slice(0, 1);
        }
        else {
            this.currentIconSize = 1;
        }
    }
    get luxIconName() {
        return this._luxIconName;
    }
    set luxIconName(iconNameValue) {
        if (iconNameValue) {
            this._luxIconName = this.modifiyIconName(iconNameValue);
        }
    }
    get backgroundCSSClass() {
        return this._backgroundCSSClass;
    }
    get fontCSSClass() {
        return this._fontCSSClass;
    }
    set luxColor(color) {
        if (LuxBackgroundColorsEnum[color]) {
            const result = LuxUtil.getColorsByBgColorsEnum(color);
            this._backgroundCSSClass = result.backgroundCSSClass;
            this._fontCSSClass = result.fontCSSClass;
        }
        else {
            this._backgroundCSSClass = '';
            this._fontCSSClass = '';
        }
    }
    /**
     * Generiert aus dem mitgegebenen Wert einen String-Wert
     * der entweder als Font-Awesome Icon oder als Material-Icon
     * interpretiert werden kann.
     *
     * @param iconName, z.B. fas fa-cogs
     * @returns string
     */
    modifiyIconName(iconName) {
        // Handelt es sich hier um ein Font-Awesome Icon?
        if (iconName.startsWith('fa')) {
            // feststellen, ob ein FA-Pr√§fix vorliegt
            if (iconName.indexOf(LuxIconComponent_1.FA_BRAND) === -1 &&
                iconName.indexOf(LuxIconComponent_1.FA_SOLID) === -1 &&
                iconName.indexOf(LuxIconComponent_1.FA_REGULAR) === -1 &&
                iconName.indexOf(LuxIconComponent_1.FA_LIGHT) === -1) {
                // Wenn nicht, dann
                iconName = 'fas ' + iconName;
            }
            this.isIconFA = true;
            return iconName;
        }
        this.isIconFA = false;
        // Ansonsten davon ausgehen das es ein Material Icon ist
        return iconName;
    }
};
LuxIconComponent.FA_BRAND = 'fab ';
LuxIconComponent.FA_SOLID = 'fas ';
LuxIconComponent.FA_REGULAR = 'far ';
LuxIconComponent.FA_LIGHT = 'fal ';
tslib_1.__decorate([
    HostBinding('style.margin'),
    tslib_1.__metadata("design:type", String)
], LuxIconComponent.prototype, "styleMargin", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxIconComponent.prototype, "luxRounded", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxIconComponent.prototype, "luxMargin", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxIconComponent.prototype, "luxPadding", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxIconComponent.prototype, "luxIconSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxIconComponent.prototype, "luxIconName", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxIconComponent.prototype, "luxColor", null);
LuxIconComponent = LuxIconComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'lux-icon',
        template: "<ng-container [ngSwitch]=\"isIconFA\">\n  <!-- Wenn Font-Awesome-Icon -->\n  <ng-container *ngSwitchCase=\"true\">\n    <i\n      aria-hidden=\"true\"\n      [ngStyle]=\"{ padding: luxPadding }\"\n      [ngClass]=\"[\n        'lux-fa-icon',\n        luxIconName,\n        'fa-' + currentIconSize + 'x',\n        backgroundCSSClass,\n        fontCSSClass,\n        luxRounded ? 'lux-icon-rounded' : ''\n      ]\"\n    >\n    </i>\n  </ng-container>\n  <!-- Wenn Material-Icon -->\n  <ng-container *ngSwitchCase=\"false\">\n    <mat-icon\n      [ngStyle]=\"{ 'font-size': currentIconSize + 'em', padding: luxPadding }\"\n      [ngClass]=\"['lux-material-icon', backgroundCSSClass, fontCSSClass, luxRounded ? 'lux-icon-rounded' : '']\"\n    >\n      {{ luxIconName }}\n    </mat-icon>\n  </ng-container>\n</ng-container>\n",
        styles: [":host{position:relative;display:inline-block}.lux-material-icon,i.lux-fa-icon{text-align:center}.lux-icon-rounded{border-radius:.9em;width:1.3em;line-height:1.3em}"]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], LuxIconComponent);
export { LuxIconComponent };
//# sourceMappingURL=data:application/json;base64,