import * as tslib_1 from "tslib";
var LuxMenuComponent_1;
import { AfterViewChecked, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output, QueryList, ViewChild } from '@angular/core';
import { LuxMenuItemComponent } from './lux-menu-subcomponents/lux-menu-item.component';
import { LuxMenuTriggerComponent } from './lux-menu-subcomponents/lux-menu-trigger.component';
// @dynamic Erklärung steht in der Datei "lux-decorators.ts".
let LuxMenuComponent = LuxMenuComponent_1 = class LuxMenuComponent {
    constructor(cdr) {
        this.cdr = cdr;
        // Alle verfgb. MenuItems als Array
        this._menuItems = [];
        this.menuItemSubstcriptions = [];
        this.hideToggle = false;
        this.luxMenuClosed = new EventEmitter();
        this.luxMenuIconName = 'menu';
        this.luxToggleDisabled = false;
        this._luxDisplayExtended = false;
        this.luxDisplayMenuLeft = true;
        this.luxMaximumExtended = 5;
        this.canvas = document.createElement('canvas');
    }
    get luxDisplayExtended() {
        return this._luxDisplayExtended;
    }
    set luxDisplayExtended(value) {
        this._luxDisplayExtended = value;
        if (this.menuTriggerElRef) {
            this.updateExtendedMenuItems();
        }
    }
    windowResize() {
        this.updateExtendedMenuItems();
    }
    get menuItems() {
        return this._menuItems;
    }
    set menuItems(menuItems) {
        this._menuItems = menuItems ? menuItems : [];
        this.menuItems.forEach(item => {
            this.menuItemSubstcriptions.push(item.luxHiddenChange.subscribe(() => {
                this.updateExtendedMenuItems();
            }));
            this.menuItemSubstcriptions.push(item.luxAlwaysVisibleChange.subscribe(() => {
                this.updateExtendedMenuItems();
            }));
            this.menuItemSubstcriptions.push(item.luxHideLabelIfExtendedChange.subscribe(() => {
                this.updateExtendedMenuItems();
            }));
        });
        this.cdr.detectChanges();
    }
    ngAfterViewChecked() {
        this.luxMenuItemComponents.changes.subscribe(() => {
            this.menuItems = this.luxMenuItemComponents.toArray();
            this.calculateMenuItemWidths();
        });
        this.menuItems = this.luxMenuItemComponents.toArray();
        this.calculateMenuItemWidths();
        this.updateExtendedMenuItems();
    }
    ngOnDestroy() {
        this.menuItemSubstcriptions.forEach(menuItemSubscription => {
            menuItemSubscription.unsubscribe();
        });
    }
    /**
     * Wird beim Klick auf ein MenuItem aufgerufen.
     *
     * @param menuItem
     * @param $event
     */
    menuItemClicked(menuItem, $event) {
        menuItem.clicked($event);
    }
    /**
     * Wird nach dem Schließen des Menus aufgerufen und emitted die Output-Property.
     * Setzt den Fokus auf den Default-Trigger (Custom-Trigger => eigene Verantwortung).
     */
    onMenuClosed() {
        this.luxMenuClosed.emit();
        if (this.defaultTriggerElRef) {
            this.defaultTriggerElRef.nativeElement.children.item(0).focus();
        }
    }
    /**
     * Berechnet anhand der verfügbaren Breite des Containers (CSS-Class: lux-menu-extended) und der maximalen Anzahl an
     * extended MenuItems die Anzahl an möglichen MenuItems, die außerhalb des eigentlichen Menus dargestellt werden können.
     */
    updateExtendedMenuItems() {
        if (!this.luxDisplayExtended) {
            this.hideToggle = false;
            this.menuItems.forEach((menuItem) => {
                menuItem.extended = false;
            });
            return;
        }
        const menuTriggerWidth = this.menuTriggerElRef.nativeElement.offsetWidth;
        let availableWidth = this.menuExtendedContainer.nativeElement.offsetWidth;
        let count = 0;
        availableWidth -= menuTriggerWidth;
        // mit condition sind hier die Zustände luxVisible = true || false gemeint
        for (const condition of [true, false]) {
            for (let i = this.menuItems.length - 1; i >= 0; i--) {
                const menuItem = this.menuItems[i];
                if (menuItem.luxHidden) {
                    continue;
                }
                if (menuItem.luxAlwaysVisible === condition) {
                    // Wenn es das letzte Menüitem ist, wird geprüft, ob es anstelle des
                    // Menüitemtriggers dargestellt werden kann.
                    if (i === 0 && availableWidth + menuTriggerWidth >= menuItem.width) {
                        availableWidth += menuTriggerWidth;
                    }
                    availableWidth -= menuItem.width;
                    if (availableWidth >= 0 && count < this.luxMaximumExtended) {
                        menuItem.extended = true;
                        count++;
                    }
                    else {
                        menuItem.extended = false;
                    }
                }
            }
        }
        // die Anzahl der extended dargestellten Items der Gesamtzahl entspricht blenden wir den Toggle aus
        const extendedMenuItemCount = this.menuItems.filter((item) => item.extended && !item.luxHidden).length;
        const visibleMenuItemCount = this.menuItems.filter((item) => !item.luxHidden).length;
        this.hideToggle = extendedMenuItemCount === visibleMenuItemCount;
        this.cdr.detectChanges();
    }
    /**
     * Berechnet die Breite für jedes Menuitem und speichert diese abhängig davon ob das Item immer sichtbar sein soll oder nicht
     * in 2 verschiedenen Maps.
     */
    calculateMenuItemWidths() {
        this.menuItems.forEach((menuItem) => {
            menuItem.extended = false;
            menuItem.width = this.getMenuItemWidth(menuItem);
        });
    }
    /**
     * Gibt die berechnete Breite des MenuItems zurück.
     * Diese setzt sich aus dem Padding (links und rechts, je 16px), dem Icon (wenn vorhanden, 15px) und der berechneten
     * Textbreite zusammen.
     * @param menuItem
     */
    getMenuItemWidth(menuItem) {
        if (!menuItem) {
            return 0;
        }
        return (LuxMenuComponent_1.PADDING_PX +
            (menuItem.luxIconName ? LuxMenuComponent_1.ICON_PX : 0) +
            (!menuItem.luxHideLabelIfExtended ? this.getTextWidth(menuItem.luxLabel) : 0) +
            LuxMenuComponent_1.MARGIN_PX);
    }
    /**
     * Berechnet mithilfe eines Canvas-Objekts die Breite eines einzelnen Textes
     * @param text
     */
    getTextWidth(text) {
        if (!text) {
            return 0;
        }
        const canvas = this.canvas;
        const context = canvas.getContext('2d');
        context.font = `${LuxMenuComponent_1.FONT_PX}px sans-serif`;
        const metrics = context.measureText(text);
        // zusätzlich nutzen wir hier einen Standard-Offset von 20px
        return metrics.width + 20;
    }
    hasVisibleMenuItems() {
        let hasVisibleMenuItems = false;
        for (let i = 0; i < this.menuItems.length; i++) {
            const element = this.menuItems[i];
            if (!element.luxHidden && !element.extended) {
                hasVisibleMenuItems = true;
                break;
            }
        }
        return hasVisibleMenuItems;
    }
};
// Diese Werte müssen angepasst werden, sollte das Styling dieser Component entsprechend geändert worden sein
LuxMenuComponent.PADDING_PX = 16;
LuxMenuComponent.MARGIN_PX = 8;
LuxMenuComponent.FONT_PX = 14;
LuxMenuComponent.ICON_PX = 22;
LuxMenuComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    ViewChild('defaultTrigger', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxMenuComponent.prototype, "defaultTriggerElRef", void 0);
tslib_1.__decorate([
    ViewChild('menuTrigger', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxMenuComponent.prototype, "menuTriggerElRef", void 0);
tslib_1.__decorate([
    ViewChild('menuExtendedContainer', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxMenuComponent.prototype, "menuExtendedContainer", void 0);
tslib_1.__decorate([
    ContentChildren(LuxMenuItemComponent),
    tslib_1.__metadata("design:type", QueryList)
], LuxMenuComponent.prototype, "luxMenuItemComponents", void 0);
tslib_1.__decorate([
    ContentChild(LuxMenuTriggerComponent, { static: false }),
    tslib_1.__metadata("design:type", LuxMenuTriggerComponent)
], LuxMenuComponent.prototype, "luxMenuTriggerComponent", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxMenuComponent.prototype, "luxMenuClosed", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxMenuComponent.prototype, "luxMenuIconName", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxMenuComponent.prototype, "luxClassName", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxMenuComponent.prototype, "luxTagId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxMenuComponent.prototype, "luxToggleDisabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxMenuComponent.prototype, "luxDisplayExtended", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxMenuComponent.prototype, "luxDisplayMenuLeft", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LuxMenuComponent.prototype, "luxMaximumExtended", void 0);
tslib_1.__decorate([
    HostListener('window:resize'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LuxMenuComponent.prototype, "windowResize", null);
LuxMenuComponent = LuxMenuComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'lux-menu',
        template: "<div fxLayout=\"row\" fxLayoutAlign=\"end\">\n  <div class=\"lux-menu-extended\" fxFlex=\"auto\" fxLayout=\"row\" fxLayoutAlign=\"end center\" #menuExtendedContainer>\n    <!-- Trigger, wenn luxDisplayMenuLeft === false -->\n    <ng-container *ngIf=\"!luxDisplayMenuLeft\">\n      <ng-container [ngTemplateOutlet]=\"menuTriggerTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngFor=\"let menuItem of menuItems\">\n      <lux-button\n        class=\"lux-menu-item\"\n        [luxLabel]=\"menuItem.luxHideLabelIfExtended ? '' : menuItem.luxLabel\"\n        [luxColor]=\"menuItem.luxColor\"\n        [luxRaised]=\"menuItem.luxRaised\"\n        [luxIconName]=\"menuItem.luxIconName\"\n        [luxDisabled]=\"menuItem.luxDisabled\"\n        [luxTagId]=\"menuItem.luxTagId\"\n        [luxRounded]=\"menuItem.luxRounded\"\n        [luxIconAlignWithLabel]=\"menuItem.luxIconAlignWithLabel\"\n        (luxClicked)=\"menuItemClicked(menuItem, $event)\"\n        luxAriaLabel=\"{{ menuItem.luxLabel }}\"\n        luxAriaLabelSelector=\"button\"\n        luxTabIndex=\"0\"\n        [luxApplyToChildren]=\"['button']\"\n        [ngClass]=\"{ 'lux-display-none': !menuItem.extended || menuItem.luxHidden }\"\n      >\n      </lux-button>\n    </ng-container>\n    <!-- Trigger, wenn luxDisplayMenuLeft === true -->\n    <ng-container *ngIf=\"luxDisplayMenuLeft\">\n      <ng-container [ngTemplateOutlet]=\"menuTriggerTemplate\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<!-- Das eigentliche Material-Menu -->\n<mat-menu [classList]=\"'lux-menu-panel ' + luxClassName\" (closed)=\"onMenuClosed()\" #menu=\"matMenu\">\n  <!-- Alle darin angezeigten MenuItems (Voraussgesetzt diese sind nicht als extended gekennzeichnet) -->\n  <ng-container *ngFor=\"let menuItem of menuItems\">\n    <button\n      mat-menu-item\n      class=\"lux-menu-item\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-between center\"\n      [disabled]=\"menuItem.luxDisabled\"\n      luxTagIdHandler\n      [luxTagId]=\"menuItem.luxTagId\"\n      (click)=\"menuItemClicked(menuItem, $event)\"\n      *ngIf=\"!menuItem.extended && !menuItem.luxHidden\"\n    >\n      <lux-icon\n        [luxIconName]=\"menuItem.luxIconName\"\n        luxPadding=\"0\"\n        luxIconSize=\"2x\"\n        fxFlex=\"0 0 30px\"\n        fxLayout=\"row\"\n        fxLayoutAlign=\"center center\"\n      ></lux-icon>\n      <span class=\"lux-button-label\" fxFlex=\"auto\">\n        {{ menuItem.luxLabel }}\n      </span>\n    </button>\n  </ng-container>\n</mat-menu>\n\n<!-- Der Trigger des Menus -->\n<ng-template #menuTriggerTemplate>\n  <div\n    [matMenuTriggerFor]=\"menu\"\n    class=\"lux-menu-trigger\"\n    fxFlex=\"0 0 auto\"\n    [ngClass]=\"{ 'lux-display-none': hideToggle }\"\n    fxFlexAlign=\"center\"\n    #menuTrigger\n  >\n    <!-- Custom-Trigger, der \u00FCber Content-Projection geladen werden kann -->\n    <ng-content select=\"lux-menu-trigger\"> </ng-content>\n    <!-- Default-Trigger -->\n    <lux-button\n      class=\"lux-menu-trigger-default\"\n      luxTagId=\"lux-menu-default-trigger\"\n      [luxIconName]=\"luxMenuIconName\"\n      luxAriaLabel=\"Menu\"\n      luxAriaLabelSelector=\"button\"\n      luxTabIndex=\"0\"\n      [luxApplyToChildren]=\"['button']\"\n      [luxDisabled]=\"luxToggleDisabled\"\n      #defaultTrigger\n      *ngIf=\"!luxMenuTriggerComponent && hasVisibleMenuItems()\"\n    >\n    </lux-button>\n  </div>\n</ng-template>\n\n<ng-content select=\"lux-menu-item\"></ng-content>\n",
        styles: ["@charset \"UTF-8\";:host{display:block;width:100%}::ng-deep .lux-menu-panel .lux-menu-item{padding:0 8px;font-size:16px}::ng-deep .lux-menu-panel .lux-menu-item lux-icon{min-width:25px;max-width:25px}.lux-display-none{display:none!important}.lux-menu-extended{overflow:hidden;min-width:0;padding:4px 0;position:relative}.lux-menu-extended>lux-button{margin-right:8px}.lux-menu-extended>lux-button ::ng-deep button{padding-left:8px!important;padding-right:8px!important}.lux-menu-extended>lux-button ::ng-deep lux-icon i,.lux-menu-extended>lux-button ::ng-deep lux-icon mat-icon{width:15px;font-size:18px!important}.lux-menu-trigger ::ng-deep button{height:45px;min-width:45px;padding-left:8px!important;padding-right:8px!important}.lux-menu-trigger ::ng-deep button .mat-button-wrapper{display:inherit;font-weight:400}.lux-menu-trigger ::ng-deep button .mat-button-wrapper i,.lux-menu-trigger ::ng-deep button .mat-button-wrapper mat-icon{padding:0;font-size:18px!important}::ng-deep .lux-menu-item lux-icon i,::ng-deep .lux-menu-item lux-icon mat-icon{font-size:15px}"]
    }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
], LuxMenuComponent);
export { LuxMenuComponent };
//# sourceMappingURL=data:application/json;base64,