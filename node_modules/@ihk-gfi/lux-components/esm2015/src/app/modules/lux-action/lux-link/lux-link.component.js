import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { LuxActionComponentBaseClass } from '../lux-action-model/lux-action-component-base.class';
let LuxLinkComponent = class LuxLinkComponent extends LuxActionComponentBaseClass {
    constructor(router, cdr) {
        super();
        this.router = router;
        this.cdr = cdr;
        this.iconSize = '2x';
        this.luxBlank = false;
    }
    ngOnInit() { }
    ngOnDestroy() { }
    redirectToHref($event) {
        this.luxClicked.emit($event);
        if (this.luxHref) {
            this.luxHref = this.luxHref.trim();
            if (!this.luxHref.startsWith('http')) {
                this.router.navigate([this.luxHref]).then(() => { });
            }
            else {
                window.open(this.luxHref, this.luxBlank ? '_blank' : '_self');
            }
        }
    }
};
LuxLinkComponent.ctorParameters = () => [
    { type: Router },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxLinkComponent.prototype, "luxHref", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxLinkComponent.prototype, "luxBlank", void 0);
LuxLinkComponent = tslib_1.__decorate([
    Component({
        selector: 'lux-link',
        template: "<lux-button\n  [luxRaised]=\"luxRaised\"\n  [luxColor]=\"luxColor\"\n  [luxLabel]=\"luxLabel\"\n  [luxIconName]=\"luxIconName\"\n  [luxIconAlignWithLabel]=\"luxIconAlignWithLabel\"\n  [luxDisabled]=\"luxDisabled\"\n  [luxRounded]=\"luxRounded\"\n  [luxTagId]=\"luxTagId\"\n  class=\"lux-link\"\n  luxAriaRole=\"link\"\n  luxAriaRoleSelector=\"button\"\n  (luxClicked)=\"redirectToHref($event)\"\n>\n</lux-button>\n",
        styles: [""]
    }),
    tslib_1.__metadata("design:paramtypes", [Router, ChangeDetectorRef])
], LuxLinkComponent);
export { LuxLinkComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWxpbmsuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWFjdGlvbi9sdXgtbGluay9sdXgtbGluay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBT2xHLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWlCLFNBQVEsMkJBQTJCO0lBTS9ELFlBQW9CLE1BQWMsRUFBUyxHQUFzQjtRQUMvRCxLQUFLLEVBQUUsQ0FBQztRQURVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUxqRCxhQUFRLEdBQVcsSUFBSSxDQUFDO1FBRy9CLGFBQVEsR0FBWSxLQUFLLENBQUM7SUFJbkMsQ0FBQztJQUVELFFBQVEsS0FBSSxDQUFDO0lBRWIsV0FBVyxLQUFJLENBQUM7SUFFaEIsY0FBYyxDQUFDLE1BQVc7UUFDeEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3JEO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQy9EO1NBQ0Y7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUFuQjZCLE1BQU07WUFBYyxpQkFBaUI7O0FBSHhEO0lBQVIsS0FBSyxFQUFFOztpREFBaUI7QUFDaEI7SUFBUixLQUFLLEVBQUU7O2tEQUEyQjtBQUp4QixnQkFBZ0I7SUFMNUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFVBQVU7UUFDcEIsMGFBQXdDOztLQUV6QyxDQUFDOzZDQU80QixNQUFNLEVBQWMsaUJBQWlCO0dBTnRELGdCQUFnQixDQXlCNUI7U0F6QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTHV4QWN0aW9uQ29tcG9uZW50QmFzZUNsYXNzIH0gZnJvbSAnLi4vbHV4LWFjdGlvbi1tb2RlbC9sdXgtYWN0aW9uLWNvbXBvbmVudC1iYXNlLmNsYXNzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbHV4LWxpbmsnLFxuICB0ZW1wbGF0ZVVybDogJy4vbHV4LWxpbmsuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9sdXgtbGluay5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEx1eExpbmtDb21wb25lbnQgZXh0ZW5kcyBMdXhBY3Rpb25Db21wb25lbnRCYXNlQ2xhc3MgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHB1YmxpYyByZWFkb25seSBpY29uU2l6ZTogc3RyaW5nID0gJzJ4JztcblxuICBASW5wdXQoKSBsdXhIcmVmOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGx1eEJsYW5rOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlciwgcHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7fVxuXG4gIG5nT25EZXN0cm95KCkge31cblxuICByZWRpcmVjdFRvSHJlZigkZXZlbnQ6IGFueSkge1xuICAgIHRoaXMubHV4Q2xpY2tlZC5lbWl0KCRldmVudCk7XG4gICAgaWYgKHRoaXMubHV4SHJlZikge1xuICAgICAgdGhpcy5sdXhIcmVmID0gdGhpcy5sdXhIcmVmLnRyaW0oKTtcbiAgICAgIGlmICghdGhpcy5sdXhIcmVmLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbdGhpcy5sdXhIcmVmXSkudGhlbigoKSA9PiB7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cub3Blbih0aGlzLmx1eEhyZWYsIHRoaXMubHV4QmxhbmsgPyAnX2JsYW5rJyA6ICdfc2VsZicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19