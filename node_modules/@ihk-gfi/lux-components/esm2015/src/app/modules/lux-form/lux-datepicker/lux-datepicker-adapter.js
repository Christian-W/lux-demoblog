import * as tslib_1 from "tslib";
import { NativeDateAdapter } from '@angular/material';
import { Injectable } from '@angular/core';
import { LuxUtil } from '../../lux-util/lux-util';
let LuxDatepickerAdapter = class LuxDatepickerAdapter extends NativeDateAdapter {
    constructor() {
        super(...arguments);
        // dd.MM.yyyy
        this.dotRegExp = new RegExp(/\d{1,2}\.\d{1,2}\.\d{4}/);
        // MM/dd/yyyy
        this.backslashRegExp = new RegExp(/\d{1,2}\/\d{1,2}\/\d{4}/);
        // dd-MM-yyyy
        this.hyphenRegExp = new RegExp(/\d{1,2}-\d{1,2}-\d{4}/);
        // yyyy-MM-dd
        this.hyphenRegExp_1 = new RegExp(/\d{4}-\d{1,2}-\d{1,2}/);
    }
    format(date, displayFormat) {
        if (date) {
            if (displayFormat) {
                if (typeof date === 'string') {
                    date = new Date(date);
                }
                return date.toLocaleDateString(this.locale, displayFormat);
            }
            else {
                return date.toLocaleDateString(this.locale);
            }
        }
        else {
            return '';
        }
    }
    parse(value) {
        if (value) {
            // Pr端fen, ob der Wert ein ISO-String ist
            if (LuxUtil.ISO_8601_FULL.test(value)) {
                return new Date(value);
            }
            // Hat der String das Format dd.MM.YYYY ?
            if (this.dotRegExp.test(value)) {
                return this.getUTCNulled_ddMMYYYY(value, '.');
            }
            else if (this.backslashRegExp.test(value)) {
                return this.getUTCNulled_MMddYYY(value, '/');
            }
            else if (this.hyphenRegExp.test(value)) {
                return this.getUTCNulled_ddMMYYYY(value, '-');
            }
            else if (this.hyphenRegExp_1.test(value)) {
                return this.getUTCNulled_YYYYMMdd(value, '-');
            }
            return value;
        }
        return null;
    }
    /**
     * UTC Date mit 0-Werten f端r Time aus einem ddMMYYYY-String erhalten.
     * @param dateString
     * @param separator
     */
    getUTCNulled_ddMMYYYY(dateString, separator) {
        const splitDate = dateString.split(separator);
        const tempDate = new Date(0);
        tempDate.setUTCFullYear(+splitDate[2], +splitDate[1] - 1, +splitDate[0]);
        return tempDate;
    }
    /**
     * UTC Date mit 0-Werten f端r Time aus einem YYYYMMdd-String erhalten.
     * @param dateString
     * @param separator
     */
    getUTCNulled_YYYYMMdd(dateString, separator) {
        const splitDate = dateString.split(separator);
        const tempDate = new Date(0);
        tempDate.setUTCFullYear(+splitDate[0], +splitDate[1] - 1, +splitDate[2]);
        return tempDate;
    }
    /**
     * UTC Date mit 0-Werten f端r Time aus einem MMddYYYY-String erhalten.
     * @param dateString
     * @param separator
     */
    getUTCNulled_MMddYYY(dateString, separator) {
        const splitDate = dateString.split(separator);
        const tempDate = new Date(0);
        tempDate.setUTCFullYear(+splitDate[2], +splitDate[0] - 1, +splitDate[1]);
        return tempDate;
    }
    isValid(date) {
        return LuxUtil.isDate(date);
    }
};
LuxDatepickerAdapter = tslib_1.__decorate([
    Injectable()
], LuxDatepickerAdapter);
export { LuxDatepickerAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWRhdGVwaWNrZXItYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpaGstZ2ZpL2x1eC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL2x1eC1mb3JtL2x1eC1kYXRlcGlja2VyL2x1eC1kYXRlcGlja2VyLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSWxELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQXFCLFNBQVEsaUJBQWlCO0lBRDNEOztRQUVFLGFBQWE7UUFDSSxjQUFTLEdBQUcsSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUVuRSxhQUFhO1FBQ0ksb0JBQWUsR0FBRyxJQUFJLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBRXpFLGFBQWE7UUFDSSxpQkFBWSxHQUFHLElBQUksTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFcEUsYUFBYTtRQUNJLG1CQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQTZFeEUsQ0FBQztJQTNFQyxNQUFNLENBQUMsSUFBbUIsRUFBRSxhQUFvQztRQUM5RCxJQUFJLElBQUksRUFBRTtZQUNSLElBQUksYUFBYSxFQUFFO2dCQUNqQixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDNUIsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN2QjtnQkFDRCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2FBQzVEO2lCQUFNO2dCQUNMLE9BQVEsSUFBYSxDQUFDLGtCQUFrQixD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Q0FBQztJQUM5QixDQUFDO0NBQ0YsQ0FBQTtBQXhGWSxvQkFBb0I7SUFEaEMsVUFBVSxFQUFFO0dBQ0Esb0JBQW9CLENBd0ZoQztTQXhGWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYXRpdmVEYXRlQWRhcHRlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx1eFV0aWwgfSBmcm9tICcuLi8uLi9sdXgtdXRpbC9sdXgtdXRpbCc7XG5pbXBvcnQgRGF0ZVRpbWVGb3JtYXRPcHRpb25zID0gSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnM7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhEYXRlcGlja2VyQWRhcHRlciBleHRlbmRzIE5hdGl2ZURhdGVBZGFwdGVyIHtcbiAgLy8gZGQuTU0ueXl5eVxuICBwcml2YXRlIHJlYWRvbmx5IGRvdFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1xcZHsxLDJ9XFwuXFxkezEsMn1cXC5cXGR7NH0vKTtcblxuICAvLyBNTS9kZC95eXl5XG4gIHByaXZhdGUgcmVhZG9ubHkgYmFja3NsYXNoUmVnRXhwID0gbmV3IFJlZ0V4cCgvXFxkezEsMn1cXC9cXGR7MSwyfVxcL1xcZHs0fS8pO1xuXG4gIC8vIGRkLU1NLXl5eXlcbiAgcHJpdmF0ZSByZWFkb25seSBoeXBoZW5SZWdFeHAgPSBuZXcgUmVnRXhwKC9cXGR7MSwyfS1cXGR7MSwyfS1cXGR7NH0vKTtcblxuICAvLyB5eXl5LU1NLWRkXG4gIHByaXZhdGUgcmVhZG9ubHkgaHlwaGVuUmVnRXhwXzEgPSBuZXcgUmVnRXhwKC9cXGR7NH0tXFxkezEsMn0tXFxkezEsMn0vKTtcblxuICBmb3JtYXQoZGF0ZTogRGF0ZSB8IHN0cmluZywgZGlzcGxheUZvcm1hdDogRGF0ZVRpbWVGb3JtYXRPcHRpb25zKTogc3RyaW5nIHtcbiAgICBpZiAoZGF0ZSkge1xuICAgICAgaWYgKGRpc3BsYXlGb3JtYXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcodGhpcy5sb2NhbGUsIGRpc3BsYXlGb3JtYXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChkYXRlIGFzIERhdGUpLnRvTG9jYWxlRGF0ZVN0cmluZyh0aGlzLmxvY2FsZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBwYXJzZSh2YWx1ZTogc3RyaW5nKTogRGF0ZSB8IG51bGwge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgLy8gUHLDvGZlbiwgb2IgZGVyIFdlcnQgZWluIElTTy1TdHJpbmcgaXN0XG4gICAgICBpZiAoTHV4VXRpbC5JU09fODYwMV9GVUxMLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICAvLyBIYXQgZGVyIFN0cmluZyBkYXMgRm9ybWF0IGRkLk1NLllZWVkgP1xuICAgICAgaWYgKHRoaXMuZG90UmVnRXhwLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFVUQ051bGxlZF9kZE1NWVlZWSh2YWx1ZSwgJy4nKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5iYWNrc2xhc2hSZWdFeHAudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VVRDTnVsbGVkX01NZGRZWVkodmFsdWUsICcvJyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaHlwaGVuUmVnRXhwLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFVUQ051bGxlZF9kZE1NWVlZWSh2YWx1ZSwgJy0nKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5oeXBoZW5SZWdFeHBfMS50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRVVENOdWxsZWRfWVlZWU1NZGQodmFsdWUsICctJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gPGFueT52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogVVRDIERhdGUgbWl0IDAtV2VydGVuIGbDvHIgVGltZSBhdXMgZWluZW0gZGRNTVlZWVktU3RyaW5nIGVyaGFsdGVuLlxuICAgKiBAcGFyYW0gZGF0ZVN0cmluZ1xuICAgKiBAcGFyYW0gc2VwYXJhdG9yXG4gICAqL1xuICBwcml2YXRlIGdldFVUQ051bGxlZF9kZE1NWVlZWShkYXRlU3RyaW5nOiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3BsaXREYXRlID0gZGF0ZVN0cmluZy5zcGxpdChzZXBhcmF0b3IpO1xuICAgIGNvbnN0IHRlbXBEYXRlID0gbmV3IERhdGUoMCk7XG4gICAgdGVtcERhdGUuc2V0VVRDRnVsbFllYXIoK3NwbGl0RGF0ZVsyXSwgK3NwbGl0RGF0ZVsxXSAtIDEsICtzcGxpdERhdGVbMF0pO1xuICAgIHJldHVybiB0ZW1wRGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVVEMgRGF0ZSBtaXQgMC1XZXJ0ZW4gZsO8ciBUaW1lIGF1cyBlaW5lbSBZWVlZTU1kZC1TdHJpbmcgZXJoYWx0ZW4uXG4gICAqIEBwYXJhbSBkYXRlU3RyaW5nXG4gICAqIEBwYXJhbSBzZXBhcmF0b3JcbiAgICovXG4gIHByaXZhdGUgZ2V0VVRDTnVsbGVkX1lZWVlNTWRkKGRhdGVTdHJpbmc6IHN0cmluZywgc2VwYXJhdG9yOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzcGxpdERhdGUgPSBkYXRlU3RyaW5nLnNwbGl0KHNlcGFyYXRvcik7XG4gICAgY29uc3QgdGVtcERhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgICB0ZW1wRGF0ZS5zZXRVVENGdWxsWWVhcigrc3BsaXREYXRlWzBdLCArc3BsaXREYXRlWzFdIC0gMSwgK3NwbGl0RGF0ZVsyXSk7XG4gICAgcmV0dXJuIHRlbXBEYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFVUQyBEYXRlIG1pdCAwLVdlcnRlbiBmw7xyIFRpbWUgYXVzIGVpbmVtIE1NZGRZWVlZLVN0cmluZyBlcmhhbHRlbi5cbiAgICogQHBhcmFtIGRhdGVTdHJpbmdcbiAgICogQHBhcmFtIHNlcGFyYXRvclxuICAgKi9cbiAgcHJpdmF0ZSBnZXRVVENOdWxsZWRfTU1kZFlZWShkYXRlU3RyaW5nOiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3BsaXREYXRlID0gZGF0ZVN0cmluZy5zcGxpdChzZXBhcmF0b3IpO1xuICAgIGNvbnN0IHRlbXBEYXRlID0gbmV3IERhdGUoMCk7XG4gICAgdGVtcERhdGUuc2V0VVRDRnVsbFllYXIoK3NwbGl0RGF0ZVsyXSwgK3NwbGl0RGF0ZVswXSAtIDEsICtzcGxpdERhdGVbMV0pO1xuICAgIHJldHVybiB0ZW1wRGF0ZTtcbiAgfVxuXG4gIGlzVmFsaWQoZGF0ZTogYW55KSB7XG4gICAgcmV0dXJuIEx1eFV0aWwuaXNEYXRlKGRhdGUpO1xuICB9XG59XG4iXX0=