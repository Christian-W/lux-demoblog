import * as tslib_1 from "tslib";
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, Component, DoCheck, ElementRef, Input, OnChanges, OnDestroy, OnInit, Optional, SimpleChanges, ViewChild } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { DateAdapter, MAT_DATE_FORMATS, MatDatepicker } from '@angular/material';
import { MAT_DATE_LOCALE } from '@angular/material/core';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxMediaQueryObserverService } from '../../lux-util/lux-media-query-observer.service';
import { LuxUtil } from '../../lux-util/lux-util';
import { LuxFormInputBaseClass } from '../lux-form-model/lux-form-input-base.class';
import { LuxDatepickerAdapter } from './lux-datepicker-adapter';
export const APP_DATE_FORMATS = {
    parse: {
        dateInput: { month: '2-digit', year: 'numeric', day: '2-digit' }
    },
    display: {
        dateInput: { month: '2-digit', year: 'numeric', day: '2-digit' },
        monthYearLabel: { year: 'numeric', month: 'long' },
        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
        monthYearA11yLabel: { year: 'numeric', month: 'long' }
    }
};
let LuxDatepickerComponent = class LuxDatepickerComponent extends LuxFormInputBaseClass {
    constructor(controlContainer, dateAdapter, mediaObserver, elementRef, cdr, logger, config) {
        super(controlContainer, cdr, logger, config);
        this.dateAdapter = dateAdapter;
        this.mediaObserver = mediaObserver;
        this.elementRef = elementRef;
        this.luxStartView = 'month';
        this.luxTouchUi = false;
        this.luxOpened = false;
        this.luxStartDate = null;
        this.luxShowToggle = true;
        this.luxLocale = 'de-DE';
        this.luxCustomFilter = undefined;
        this.luxMaxDate = undefined;
        this.luxMinDate = undefined;
        // den Standard-Wert für Autocomplete für Datepicker ausschalten
        this.luxAutocomplete = 'off';
        this.dateAdapter.setLocale(this.luxLocale);
    }
    get luxValue() {
        return this.getValue();
    }
    set luxValue(value) {
        this.setValue(value);
    }
    ngOnChanges(simpleChanges) {
        super.ngOnChanges(simpleChanges);
        if (simpleChanges.luxOpened) {
            // Evtl. gibt es ohne das Timeout sonst Fehler, weil der matDatepicker noch nicht gesetzt ist
            setTimeout(() => {
                this.triggerOpenClose();
            });
        }
        if (simpleChanges.luxLocale && simpleChanges.luxLocale.currentValue) {
            this.dateAdapter.setLocale(simpleChanges.luxLocale.currentValue);
        }
        if (simpleChanges.luxMaxDate && typeof simpleChanges.luxMaxDate.currentValue === 'string') {
            this.max = this.dateAdapter.parse(simpleChanges.luxMaxDate.currentValue, {});
        }
        if (simpleChanges.luxMinDate && typeof simpleChanges.luxMinDate.currentValue === 'string') {
            this.min = this.dateAdapter.parse(simpleChanges.luxMinDate.currentValue, {});
        }
        if (simpleChanges.luxStartDate && typeof simpleChanges.luxStartDate.currentValue === 'string') {
            this.start = this.dateAdapter.parse(simpleChanges.luxStartDate.currentValue, {});
        }
    }
    ngOnInit() {
        super.ngOnInit();
        this.originalTouchUi = this.luxTouchUi;
        this.mediaSubscription = this.mediaObserver.getMediaQueryChangedAsObservable().subscribe(() => {
            this.checkMediaObserver();
        });
    }
    ngOnDestroy() {
        this.mediaSubscription.unsubscribe();
    }
    /**
     * Erzeugt für die Unter- bzw. Überschreitung
     * @param value
     * @param errors
     */
    errorMessageModifier(value, errors) {
        if (errors.matDatepickerMin) {
            return 'Das Datum unterschreitet den Minimalwert';
        }
        else if (errors.matDatepickerMax) {
            return 'Das Datum überschreitet den Maximalwert';
        }
        else if (errors.required) {
            if (this.datepickerInput && this.datepickerInput.nativeElement.value) {
                return 'Das Datum ist ungültig';
            }
            else {
                return 'Das Datum darf nicht leer sein';
            }
        }
        return undefined;
    }
    /**
     * Checkt ob eine mobile Media-Query vorliegt.
     * Wenn ja, wird automagisch die TouchUI aktiviert.
     * Wenn nein, wird der vom Aufrufer/originale luxTouchUI-Wert genutzt.
     */
    checkMediaObserver() {
        if (this.mediaObserver.isXS() || this.mediaObserver.isSM()) {
            this.luxTouchUi = true;
        }
        else {
            this.luxTouchUi = this.originalTouchUi;
        }
    }
    /**
     * Führt .open() bzw. .close() vom MatDatepicker aus, abhängig vom Wert für luxOpened.
     */
    triggerOpenClose() {
        if (this.luxOpened) {
            this.matDatepicker.open();
        }
        else {
            this.matDatepicker.close();
        }
    }
    /**
     * Aktualisiert den FormControl-Value und den Wert im Parent über valueChange mithilfe des übergebenen ISO-Strings.
     * @param isoValue
     */
    setISOValue(isoValue) {
        setTimeout(() => {
            this.previousISO = isoValue;
            // valueChange-Emitter anstoßen
            this.notifyFormValueChanged(isoValue);
            // "silently" den FormControl auf den (potentiell) geänderten Wert aktualisieren
            this.formControl.setValue(isoValue, {
                emitEvent: false,
                emitModelToViewChange: false,
                emitViewToModelChange: false
            });
            // Per Hand dem Input-Element einen formatierten String übergeben
            if (!this.datepickerInput.nativeElement.value && isoValue) {
                this.datepickerInput.nativeElement.value = this.dateAdapter.format(isoValue, APP_DATE_FORMATS.display.dateInput);
            }
        });
    }
    // region overridden methods
    setValue(value) {
        if (value !== this.luxValue) {
            if (!this.formControl) {
                this._initialValue = value;
                return;
            }
            this.formControl.setValue(value);
        }
    }
    initFormValueSubscription() {
        // Aktualisierungen an dem FormControl-Value sollen auch via EventEmitter bekannt gemacht werden
        this._formValueChangeSubscr = this.formControl.valueChanges.subscribe((value) => {
            this.updateDateValue(value);
        });
        if (this.formControl.value) {
            // Es kann vorkommen, dass der initiale Wert nicht im ISO-Format angegeben ist.
            // Dann muss der Wert noch umgewandelt werden.
            this.updateDateValue(this.formControl.value);
        }
        else if (this._initialValue !== null && this._initialValue !== undefined) {
            // Vorhandenen Initialwert setzen
            this.formControl.setValue(this._initialValue);
        }
    }
    updateDateValue(value) {
        if (!value) {
            this.setISOValue(value);
            return;
        }
        // Nachfolgend erstellen
        if (typeof value === 'string') {
            value = this.dateAdapter.parse(value, {});
        }
        const eventDate = value;
        const tempDate = new Date(0);
        tempDate.setUTCFullYear(eventDate.getFullYear(), eventDate.getMonth(), eventDate.getDate());
        tempDate.setUTCHours(0, 0, 0, 0);
        // Sicherheitshalber noch einmal prüfen, kann vorkommen das ein unsinniger Wert eingetragen wird
        // z.B. 'asdf', das führt zu InvalidDate's
        if (LuxUtil.isDate(tempDate) && this.previousISO !== tempDate.toISOString()) {
            this.setISOValue(tempDate.toISOString());
        }
    }
};
LuxDatepickerComponent.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }] },
    { type: DateAdapter },
    { type: LuxMediaQueryObserverService },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: LuxConsoleService },
    { type: LuxComponentsConfigService }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxDatepickerComponent.prototype, "luxStartView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxDatepickerComponent.prototype, "luxTouchUi", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxDatepickerComponent.prototype, "luxOpened", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxDatepickerComponent.prototype, "luxStartDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxDatepickerComponent.prototype, "luxShowToggle", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxDatepickerComponent.prototype, "luxLocale", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LuxDatepickerComponent.prototype, "luxCustomFilter", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxDatepickerComponent.prototype, "luxMaxDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxDatepickerComponent.prototype, "luxMinDate", void 0);
tslib_1.__decorate([
    ViewChild(MatDatepicker, { static: false }),
    tslib_1.__metadata("design:type", MatDatepicker)
], LuxDatepickerComponent.prototype, "matDatepicker", void 0);
tslib_1.__decorate([
    ViewChild('datepickerInput', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxDatepickerComponent.prototype, "datepickerInput", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], LuxDatepickerComponent.prototype, "luxValue", null);
LuxDatepickerComponent = tslib_1.__decorate([
    Component({
        selector: 'lux-datepicker',
        template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" #datepickerFormControl *ngIf=\"formGroup\">\n  <div class=\"lux-input-row\" fxLayout=\"row\">\n    <input\n      fxFlex=\"auto\"\n      matInput\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [matDatepicker]=\"datepicker\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [matDatepickerFilter]=\"luxCustomFilter\"\n      [placeholder]=\"luxPlaceholder\"\n      [required]=\"luxRequired\"\n      [readonly]=\"luxReadonly\"\n      [formControl]=\"formControl\"\n      [autocomplete]=\"luxAutocomplete\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"luxFocusIn.emit($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [id]=\"uid\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      #datepickerInput\n    />\n    <mat-datepicker-toggle\n      [disabled]=\"luxDisabled || luxReadonly\"\n      [for]=\"datepicker\"\n      *ngIf=\"luxShowToggle\"\n      fxFlex=\"auto\"\n      matSuffix\n    ></mat-datepicker-toggle>\n    <mat-datepicker\n      [startView]=\"luxStartView\"\n      [startAt]=\"start\"\n      [touchUi]=\"luxTouchUi\"\n      [disabled]=\"luxDisabled || luxReadonly\"\n      [panelClass]=\"'lux-datepicker-panel'\"\n      #datepicker\n    >\n    </mat-datepicker>\n  </div>\n</lux-form-control>\n",
        providers: [
            { provide: DateAdapter, useClass: LuxDatepickerAdapter, deps: [MAT_DATE_LOCALE, Platform] },
            { provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS }
        ]
    }),
    tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [ControlContainer,
        DateAdapter,
        LuxMediaQueryObserverService,
        ElementRef,
        ChangeDetectorRef,
        LuxConsoleService,
        LuxComponentsConfigService])
], LuxDatepickerComponent);
export { LuxDatepickerComponent };
//# sourceMappingURL=data:application/json;base64,