import * as tslib_1 from "tslib";
import { Validators } from '@angular/forms';
import { EventEmitter, Input, Output } from '@angular/core';
import { LuxFormComponentBase } from './lux-form-component-base.class';
/**
 * Basis-Klasse f체r FormComponents, die einen 채hnlichen Grundaufbau f체r das Aktivieren eines Boolean-Wertes besitzen
 * (LuxToggle und LuxCheckbox z.B.).
 */
export class LuxFormCheckableBaseClass extends LuxFormComponentBase {
    constructor(controlContainer, cdr, logger, config) {
        super(controlContainer, cdr, logger, config);
        this.luxCheckedChange = new EventEmitter();
    }
    get luxChecked() {
        return this.getValue();
    }
    set luxChecked(checked) {
        this.setValue(checked);
    }
    // region Overridden methods
    notifyFormValueChanged(formValue) {
        // Aktualisierungen an dem FormControl-Value sollen auch via EventEmitter bekannt gemacht werden
        this.luxCheckedChange.emit(formValue);
        // Bei luxRequired = true && einem false-Wert entsprechend einen Fehler setzen
        if (formValue === false && this.luxRequired && this.formControl.errors === null) {
            this.formControl.setErrors({ required: true });
        }
    }
    errorMessageModifier(value, errors) {
        if (errors.required) {
            return 'Das ist ein Pflichtfeld';
        }
        return undefined;
    }
    checkValidatorsContainRequired(validators) {
        // Fall: required = true, aber neue Validatoren werden gesetzt
        if (this.luxRequired === true) {
            // Sind es mehrere Validatoren, aber kein .requiredTrue? Dann wird er erg채nzt
            if (Array.isArray(validators) && validators.indexOf(Validators.requiredTrue) === -1) {
                validators.push(Validators.requiredTrue);
            }
            else if (!Array.isArray(validators) && validators !== Validators.requiredTrue) {
                // Ist es nur ein einzelner Validator und nicht .requiredTrue? Dann Array erstellen und beide kombinieren
                validators = [validators, Validators.requiredTrue];
            }
        }
        else if (this.luxRequired === false) {
            if (Array.isArray(validators)) {
                validators = validators.filter((validator) => validator !== Validators.requiredTrue);
            }
            else if (validators === Validators.requiredTrue) {
                validators = undefined;
            }
        }
        return validators;
    }
    triggerOutputPatternCheck() {
        this.checkOutputPatternViolation(this.luxCheckedChange.observers);
    }
    triggerInputPatternCheck(simpleChanges) {
        this.checkInputPatternViolation(simpleChanges.luxChecked);
    }
}
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxFormCheckableBaseClass.prototype, "luxCheckedChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxFormCheckableBaseClass.prototype, "luxTagId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxFormCheckableBaseClass.prototype, "luxReadonly", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxFormCheckableBaseClass.prototype, "luxChecked", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWZvcm0tY2hlY2thYmxlLWJhc2UuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtZm9ybS9sdXgtZm9ybS1tb2RlbC9sdXgtZm9ybS1jaGVja2FibGUtYmFzZS5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQyxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRSxPQUFPLEVBQXFCLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU5RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUd2RTs7O0dBR0c7QUFDSCxNQUFNLE9BQWdCLHlCQUEwQixTQUFRLG9CQUFvQjtJQWMxRSxZQUNFLGdCQUFrQyxFQUNsQyxHQUFzQixFQUN0QixNQUF5QixFQUN6QixNQUFrQztRQUVsQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQW5CckMscUJBQWdCLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7SUFvQnZFLENBQUM7SUFmRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRVEsSUFBSSxVQUFVLENBQUMsT0FBZ0I7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBV0QsNEJBQTRCO0lBQzVCLHNCQUFzQixDQUFDLFNBQWtCO1FBQ3ZDLGdHQUFnRztRQUNoRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXRDLDhFQUE4RTtRQUM5RSxJQUFJLFNBQVMsS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDL0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsTUFBTTtRQUNoQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDbkIsT0FBTyx5QkFBeUIsQ0FBQztTQUNsQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFUyw4QkFBOEIsQ0FBQyxVQUF1QztRQUM5RSw4REFBOEQ7UUFDOUQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksRUFBRTtZQUM3Qiw2RUFBNkU7WUFDN0UsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNuRixVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMxQztpQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLEtBQUssVUFBVSxDQUFDLFlBQVksRUFBRTtnQkFDL0UseUdBQXlHO2dCQUN6RyxVQUFVLEdBQUcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3BEO1NBQ0Y7YUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQ3JDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDN0IsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFzQixFQUFFLEVBQUUsQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ25HO2lCQUFNLElBQUksVUFBVSxLQUFLLFVBQVUsQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pELFVBQVUsR0FBRyxTQUFTLENBQUM7YUFDeEI7U0FDRjtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFUyx5QkFBeUI7UUFDakMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRVMsd0JBQXdCLENBQUMsYUFBNEI7UUFDN0QsSUFBSSxDQUFDLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBR0Y7QUF0RVc7SUFBVCxNQUFNLEVBQUU7c0NBQW1CLFlBQVk7bUVBQStCO0FBRTlEO0lBQVIsS0FBSyxFQUFFOzsyREFBa0I7QUFDakI7SUFBUixLQUFLLEVBQUU7OzhEQUFzQjtBQU1yQjtJQUFSLEtBQUssRUFBRTs7OzJEQUVQIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbENvbnRhaW5lciwgVmFsaWRhdG9yRm4sIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMdXhDb25zb2xlU2VydmljZSB9IGZyb20gJy4uLy4uL2x1eC11dGlsL2x1eC1jb25zb2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTHV4Rm9ybUNvbXBvbmVudEJhc2UgfSBmcm9tICcuL2x1eC1mb3JtLWNvbXBvbmVudC1iYXNlLmNsYXNzJztcbmltcG9ydCB7IEx1eENvbXBvbmVudHNDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbHV4LWNvbXBvbmVudHMtY29uZmlnL2x1eC1jb21wb25lbnRzLWNvbmZpZy5zZXJ2aWNlJztcblxuLyoqXG4gKiBCYXNpcy1LbGFzc2UgZsO8ciBGb3JtQ29tcG9uZW50cywgZGllIGVpbmVuIMOkaG5saWNoZW4gR3J1bmRhdWZiYXUgZsO8ciBkYXMgQWt0aXZpZXJlbiBlaW5lcyBCb29sZWFuLVdlcnRlcyBiZXNpdHplblxuICogKEx1eFRvZ2dsZSB1bmQgTHV4Q2hlY2tib3ggei5CLikuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMdXhGb3JtQ2hlY2thYmxlQmFzZUNsYXNzIGV4dGVuZHMgTHV4Rm9ybUNvbXBvbmVudEJhc2Uge1xuICBAT3V0cHV0KCkgbHV4Q2hlY2tlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBJbnB1dCgpIGx1eFRhZ0lkOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGx1eFJlYWRvbmx5OiBib29sZWFuO1xuXG4gIGdldCBsdXhDaGVja2VkKCkge1xuICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgbHV4Q2hlY2tlZChjaGVja2VkOiBib29sZWFuKSB7XG4gICAgdGhpcy5zZXRWYWx1ZShjaGVja2VkKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICBjb250cm9sQ29udGFpbmVyOiBDb250cm9sQ29udGFpbmVyLFxuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgbG9nZ2VyOiBMdXhDb25zb2xlU2VydmljZSxcbiAgICBjb25maWc6IEx1eENvbXBvbmVudHNDb25maWdTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGNvbnRyb2xDb250YWluZXIsIGNkciwgbG9nZ2VyLCBjb25maWcpO1xuICB9XG5cbiAgLy8gcmVnaW9uIE92ZXJyaWRkZW4gbWV0aG9kc1xuICBub3RpZnlGb3JtVmFsdWVDaGFuZ2VkKGZvcm1WYWx1ZTogYm9vbGVhbikge1xuICAgIC8vIEFrdHVhbGlzaWVydW5nZW4gYW4gZGVtIEZvcm1Db250cm9sLVZhbHVlIHNvbGxlbiBhdWNoIHZpYSBFdmVudEVtaXR0ZXIgYmVrYW5udCBnZW1hY2h0IHdlcmRlblxuICAgIHRoaXMubHV4Q2hlY2tlZENoYW5nZS5lbWl0KGZvcm1WYWx1ZSk7XG5cbiAgICAvLyBCZWkgbHV4UmVxdWlyZWQgPSB0cnVlICYmIGVpbmVtIGZhbHNlLVdlcnQgZW50c3ByZWNoZW5kIGVpbmVuIEZlaGxlciBzZXR6ZW5cbiAgICBpZiAoZm9ybVZhbHVlID09PSBmYWxzZSAmJiB0aGlzLmx1eFJlcXVpcmVkICYmIHRoaXMuZm9ybUNvbnRyb2wuZXJyb3JzID09PSBudWxsKSB7XG4gICAgICB0aGlzLmZvcm1Db250cm9sLnNldEVycm9ycyh7IHJlcXVpcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIGVycm9yTWVzc2FnZU1vZGlmaWVyKHZhbHVlLCBlcnJvcnMpIHtcbiAgICBpZiAoZXJyb3JzLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gJ0RhcyBpc3QgZWluIFBmbGljaHRmZWxkJztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByb3RlY3RlZCBjaGVja1ZhbGlkYXRvcnNDb250YWluUmVxdWlyZWQodmFsaWRhdG9yczogVmFsaWRhdG9yRm4gfCBWYWxpZGF0b3JGbltdKSB7XG4gICAgLy8gRmFsbDogcmVxdWlyZWQgPSB0cnVlLCBhYmVyIG5ldWUgVmFsaWRhdG9yZW4gd2VyZGVuIGdlc2V0enRcbiAgICBpZiAodGhpcy5sdXhSZXF1aXJlZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gU2luZCBlcyBtZWhyZXJlIFZhbGlkYXRvcmVuLCBhYmVyIGtlaW4gLnJlcXVpcmVkVHJ1ZT8gRGFubiB3aXJkIGVyIGVyZ8Okbnp0XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWxpZGF0b3JzKSAmJiB2YWxpZGF0b3JzLmluZGV4T2YoVmFsaWRhdG9ycy5yZXF1aXJlZFRydWUpID09PSAtMSkge1xuICAgICAgICB2YWxpZGF0b3JzLnB1c2goVmFsaWRhdG9ycy5yZXF1aXJlZFRydWUpO1xuICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh2YWxpZGF0b3JzKSAmJiB2YWxpZGF0b3JzICE9PSBWYWxpZGF0b3JzLnJlcXVpcmVkVHJ1ZSkge1xuICAgICAgICAvLyBJc3QgZXMgbnVyIGVpbiBlaW56ZWxuZXIgVmFsaWRhdG9yIHVuZCBuaWNodCAucmVxdWlyZWRUcnVlPyBEYW5uIEFycmF5IGVyc3RlbGxlbiB1bmQgYmVpZGUga29tYmluaWVyZW5cbiAgICAgICAgdmFsaWRhdG9ycyA9IFt2YWxpZGF0b3JzLCBWYWxpZGF0b3JzLnJlcXVpcmVkVHJ1ZV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmx1eFJlcXVpcmVkID09PSBmYWxzZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsaWRhdG9ycykpIHtcbiAgICAgICAgdmFsaWRhdG9ycyA9IHZhbGlkYXRvcnMuZmlsdGVyKCh2YWxpZGF0b3I6IFZhbGlkYXRvckZuKSA9PiB2YWxpZGF0b3IgIT09IFZhbGlkYXRvcnMucmVxdWlyZWRUcnVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsaWRhdG9ycyA9PT0gVmFsaWRhdG9ycy5yZXF1aXJlZFRydWUpIHtcbiAgICAgICAgdmFsaWRhdG9ycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9ycztcbiAgfVxuXG4gIHByb3RlY3RlZCB0cmlnZ2VyT3V0cHV0UGF0dGVybkNoZWNrKCkge1xuICAgIHRoaXMuY2hlY2tPdXRwdXRQYXR0ZXJuVmlvbGF0aW9uKHRoaXMubHV4Q2hlY2tlZENoYW5nZS5vYnNlcnZlcnMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRyaWdnZXJJbnB1dFBhdHRlcm5DaGVjayhzaW1wbGVDaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5jaGVja0lucHV0UGF0dGVyblZpb2xhdGlvbihzaW1wbGVDaGFuZ2VzLmx1eENoZWNrZWQpO1xuICB9XG5cbiAgLy8gZW5kcmVnaW9uXG59XG4iXX0=