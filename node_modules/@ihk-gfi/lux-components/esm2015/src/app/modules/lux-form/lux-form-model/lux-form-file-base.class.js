import * as tslib_1 from "tslib";
import { ChangeDetectorRef, ElementRef, EventEmitter, HostBinding, HostListener, Input, Optional, Output, ViewChild } from '@angular/core';
import { ControlContainer, Validators } from '@angular/forms';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxUtil } from '../../lux-util/lux-util';
import { LuxFormComponentBase } from './lux-form-component-base.class';
import { LuxFileErrorCause } from '../lux-file/lux-file-model/lux-file-error.interface';
import { HttpClient, HttpEventType } from '@angular/common/http';
import { isObservable, throwError } from 'rxjs';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
let LuxFormFileBase = class LuxFormFileBase extends LuxFormComponentBase {
    constructor(controlContainer, cdr, logger, config, http, liveAnnouncer) {
        super(controlContainer, cdr, logger, config);
        this.http = http;
        this.liveAnnouncer = liveAnnouncer;
        this.defaultReadFileDelay = 1000;
        this._luxAccept = '';
        this._luxUploadActionConfig = {
            disabled: false,
            hidden: false,
            iconName: 'fas fa-cloud-upload-alt',
            label: 'Hochladen'
        };
        this._luxDeleteActionConfig = {
            disabled: false,
            hidden: false,
            iconName: 'fas fa-trash',
            label: 'Löschen'
        };
        this._luxViewActionConfig = {
            disabled: false,
            hidden: true,
            iconName: 'fas fa-eye',
            label: 'Ansehen'
        };
        this._luxDownloadActionConfig = {
            disabled: false,
            hidden: true,
            iconName: 'fas fa-download',
            label: 'Download'
        };
        this.progress = -1;
        this.forceProgressIndeterminate = false;
        this.luxSelectedFilesChange = new EventEmitter();
        this.luxUploadReportProgress = false;
        this.luxContentsAsBlob = false;
        this.luxMaxSizeMB = 10;
        this.luxCapture = '';
        this.luxUploadUrl = '';
        this.luxDnDActive = true;
        this.isDragActive = false;
    }
    onDragOver($event) {
        if (this.isDnDAllowed()) {
            this.handleDragOver($event);
        }
    }
    onDragLeave($event) {
        if (this.isDnDAllowed()) {
            this.handleDragLeave($event);
        }
    }
    onDrop($event) {
        if (this.isDnDAllowed()) {
            this.handleDrop($event);
        }
    }
    get luxUploadActionConfig() {
        return this._luxUploadActionConfig;
    }
    set luxUploadActionConfig(config) {
        if (config) {
            this._luxUploadActionConfig = config;
        }
    }
    get luxDeleteActionConfig() {
        return this._luxDeleteActionConfig;
    }
    set luxDeleteActionConfig(config) {
        if (config) {
            this._luxDeleteActionConfig = config;
        }
    }
    get luxViewActionConfig() {
        return this._luxViewActionConfig;
    }
    set luxViewActionConfig(config) {
        if (config) {
            this._luxViewActionConfig = config;
        }
    }
    get luxDownloadActionConfig() {
        return this._luxDownloadActionConfig;
    }
    set luxDownloadActionConfig(config) {
        if (config) {
            this._luxDownloadActionConfig = config;
        }
    }
    get luxSelectedFiles() {
        return this.getValue();
    }
    set luxSelectedFiles(selectedFiles) {
        this.setValue(selectedFiles);
    }
    get luxAccept() {
        return this._luxAccept;
    }
    set luxAccept(accepts) {
        if (!accepts) {
            accepts = '';
        }
        this._luxAccept = Array.isArray(accepts) ? accepts.join(',') : accepts;
    }
    get progressMode() {
        return (this.progress === 0 && !this.luxUploadReportProgress) || this.forceProgressIndeterminate
            ? 'indeterminate'
            : 'determinate';
    }
    get isProgressVisible() {
        return this.progress >= 0 || this.forceProgressIndeterminate;
    }
    /**
     * Wird beim Fokussieren des Elements aufgerufen und markiert das FormControl als "touched".
     * @param $event
     */
    onFocusIn($event) {
        this.formControl.markAsTouched();
        this.luxFocusIn.emit($event);
    }
    /**
     * Entfernt die aktuell selektierten Dateien und entfernt etwaige (spezifische) Fehler aus dem FormControl.
     * @param $event
     */
    clearFiles($event) {
        this.formControl.markAsTouched();
        this.formControl.markAsDirty();
        this.luxSelectedFiles = undefined;
        this.notifyFormValueChanged();
        this.clearFormControlErrors();
        if (this.luxDeleteActionConfig.onClick) {
            this.luxDeleteActionConfig.onClick();
        }
        this.announceAllFilesRemove();
    }
    /**
     * Löst den Download der übergebenen Datei aus.
     * @param file
     */
    downloadFile(file) {
        this.formControl.markAsTouched();
        file = Array.isArray(file) ? file[0] : file;
        const downloadLink = this.downloadLink.nativeElement;
        downloadLink.download = file.name;
        if (file.content instanceof Blob) {
            if (window.navigator.msSaveBlob) {
                // IE
                window.navigator.msSaveOrOpenBlob(file.content, file.name);
            }
            else {
                const url = window.URL.createObjectURL(file.content);
                downloadLink.href = url;
                downloadLink.click();
                window.URL.revokeObjectURL(url);
            }
        }
        else {
            if (window.navigator.msSaveBlob) {
                // IE
                try {
                    const arrBuffer = LuxUtil.base64ToArrayBuffer(file.content.split(',')[1]);
                    window.navigator.msSaveOrOpenBlob(new Blob([arrBuffer], { type: file.type }), file.name);
                }
                catch (e) {
                    console.log(e);
                }
            }
            else {
                downloadLink.href = file.content;
                downloadLink.click();
            }
        }
        if (this.luxDownloadActionConfig.onClick) {
            this.luxDownloadActionConfig.onClick(file);
        }
    }
    /**
     * Löst den base64Callback der übergebenen Datei aus.
     * Schreibt dann anschließend den Base64-String in die Datei.
     * @param file
     */
    viewFile(file) {
        this.formControl.markAsTouched();
        // Wenn die Datei bereits einen Base64-Wert besitzt, den onClick-Callback ausführen
        if (file.content) {
            this.triggerViewFileClick(file);
            return;
        }
        const callbackResult = file.contentCallback();
        // Wenn der Callback ein Observable ist, dieses auflösen und dem File-Base64 zuweisen
        if (isObservable(callbackResult)) {
            callbackResult.subscribe((content) => {
                file.content = content;
                this.triggerViewFileClick(file);
            });
        }
        else {
            // Wenn der Callback ein normaler String oder Promise ist, diesen auflösen und den File-Base64 aktualisieren
            Promise.resolve(callbackResult).then((content) => {
                file.content = content;
                this.triggerViewFileClick(file);
            });
        }
    }
    /**
     * Wandelt File-Objekt zu LuxFileObjects um und versucht diese Hochzuladen.
     * Gibt ein Promise mit den neuen FileObjects zurück bzw. einen Fehler aus den internen Promises.
     * @param files
     */
    updateSelectedFiles(files) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let newFiles = [];
                yield this.mapFilesToFileObjects(files).then((fileObjects) => (newFiles = fileObjects));
                yield this.uploadFiles(newFiles);
                if (this.luxUploadActionConfig.onClick) {
                    this.luxUploadActionConfig.onClick(newFiles && newFiles.length === 1 ? newFiles[0] : newFiles);
                }
                this.formControl.markAsTouched();
                this.formControl.markAsDirty();
                return Promise.resolve(newFiles);
            }
            catch (error) {
                return Promise.reject(error);
            }
        });
    }
    /**
     * Stößt das Hochladen der Dateien zu einer bestimmten URL an.
     */
    uploadFiles(files) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.luxUploadUrl) {
                this.forceProgressIndeterminate = false;
                return Promise.resolve();
            }
            if (this.luxUploadReportProgress) {
                this.forceProgressIndeterminate = false;
            }
            this.progress = 0;
            // Ansonsten die Dateien in einem FormData-Objekt sammeln und über den httpClient hochladen
            const formData = new FormData();
            let selectedFiles = [];
            if (!files) {
                selectedFiles = [];
            }
            else if (!Array.isArray(files)) {
                selectedFiles.push(files);
            }
            else {
                selectedFiles.push(...files);
            }
            selectedFiles.forEach((fileObject) => {
                formData.append(fileObject.name, fileObject.content);
            });
            yield new Promise((resolve, reject) => {
                const options = {};
                if (this.luxUploadReportProgress) {
                    options['reportProgress'] = true;
                    options['observe'] = 'events';
                }
                options['responseType'] = 'blob';
                this.http.post(this.luxUploadUrl, formData, options).subscribe((event) => {
                    // wenn wir eine determinierte Fortschrittsanzeige haben, dann muss der Fortschritt auch korrekt abgefangen werden
                    if (this.luxUploadReportProgress) {
                        if (event.type === HttpEventType.UploadProgress) {
                            this.progress = Math.round((event.loaded / event.total) * 100);
                        }
                        else if (event.type === HttpEventType.Response) {
                            resolve();
                        }
                    }
                    else {
                        resolve();
                    }
                }, error => {
                    // Hier geben wir den speziellen Fehler noch mal in die console
                    console.error(error);
                    // Für den Fall das der Upload fehlschlägt, melden wir einen Fehler am Component
                    reject(error);
                    return throwError(error);
                });
            }).then(() => {
                this.progress = -1;
                this.forceProgressIndeterminate = false;
                return Promise.resolve();
            }, error => {
                this.progress = -1;
                this.forceProgressIndeterminate = false;
                return Promise.reject({
                    cause: LuxFileErrorCause.UploadFileError,
                    exception: error,
                    file: files
                });
            });
        });
    }
    /**
     * Liest die übergebenen Dateien aus und erzeugt daraus ein Promise, welches abgefragt werden kann.
     * Fängt potentielle Fehler ab und gibt diese als abgelehnte Promises zurück.
     * @param files
     */
    mapFilesToFileObjects(files) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this._luxSelectedFiles = [];
            const filesArray = Array.from(files);
            const newFiles = [];
            for (const file of filesArray) {
                if (!file) {
                    continue;
                }
                // Prüfen ob Dateigröße überschritten worden ist
                if (this.getFileSizeInMB(file) > this.luxMaxSizeMB) {
                    return Promise.reject({
                        cause: LuxFileErrorCause.MaxSizeError,
                        exception: this.getMaxSizeErrorMessage(file),
                        file: file
                    });
                }
                // Prüfen ob der Dateityp "accepted" ist
                const splitAccepted = this.luxAccept ? this.luxAccept.split(',') : [];
                const splitFileEnding = file.name.split('.');
                const fileEnding = `.${splitFileEnding[splitFileEnding.length - 1]}`;
                let isAccepted = splitAccepted.length === 0 ? true : false;
                splitAccepted.forEach((accepted) => {
                    if (accepted) {
                        accepted = accepted.toLocaleLowerCase();
                        if (accepted === '.txt') {
                            accepted = 'text/plain';
                        }
                    }
                    if (!isAccepted) {
                        // Für spezielle Wildcards nutzen wir diese Umwandlung
                        switch (accepted) {
                            case 'image/*':
                                accepted = 'image';
                                break;
                            case 'video/*':
                                accepted = 'video';
                                break;
                            case 'audio/*':
                                accepted = 'audio';
                                break;
                        }
                        if (accepted === fileEnding.toLocaleLowerCase() || file.type.toLocaleLowerCase().indexOf(accepted) > -1) {
                            isAccepted = true;
                        }
                    }
                });
                if (!isAccepted) {
                    return Promise.reject({
                        cause: LuxFileErrorCause.FileNotAccepted,
                        exception: this.getFileNotAcceptedMessage(file),
                        file: file
                    });
                }
                if (this.luxContentsAsBlob) {
                    // Wenn direkt die Blobs genutzt werden sollen, einfach die Datei als content merken
                    newFiles.push({ name: file.name, content: file, type: file.type });
                }
                else {
                    // Das Auslesen der Datei anstoßen, wenn erfolgreich, wird die Datei zu selectedFiles hinzugefügt.
                    // Bei einem Fehler wird das Promise rejected und gibt einen Fehler zurück.
                    yield this.readFile(file)
                        .then((content) => {
                        newFiles.push({ name: file.name, content: content, type: file.type });
                    })
                        .catch(error => {
                        return Promise.reject({
                            cause: LuxFileErrorCause.ReadingFileError,
                            exception: error,
                            file: file
                        });
                    });
                }
            }
            // Das Array mit den neuen Dateien zurückgeben
            return Promise.resolve(newFiles);
        });
    }
    /**
     * Liest (asynchron) den Base64-String aus der übergebenen Datei heraus bzw. gibt den Fehler zurück, wenn einer
     * aufgetreten ist.
     * @param file
     */
    readFile(file) {
        return new Promise((resolve, reject) => {
            const reader = new window['FileReader']();
            reader.onload = fileData => resolve(fileData.target.result);
            reader.onerror = error => reject(error);
            reader.readAsDataURL(file);
        });
    }
    /**
     * Wird beim Drag-Over über dem LuxFormControl aufgerufen.
     * @param $event
     */
    handleDragOver($event) {
        this.isDragActive = true;
        $event.stopPropagation();
        $event.preventDefault();
        // Der Drop Effect wird nur gesetzt, wenn die Property auch
        // vorhanden ist. In den Tests gibt es keinen Drop Effect.
        if ($event.dataTransfer && $event.dataTransfer.dropEffect) {
            $event.dataTransfer.dropEffect = 'copy';
        }
    }
    /**
     * Wird beim Drag-Leave über dem LuxFormControl aufgerufen.
     * @param $event
     */
    handleDragLeave($event) {
        if ($event.target.nodeName.toLocaleLowerCase() === 'lux-file-input') {
            this.isDragActive = false;
        }
        $event.stopPropagation();
        $event.preventDefault();
    }
    /**
     * Wird beim Drop eines/mehrerer gezogener Elemente über dem LuxFormControl aufgerufen und löst
     * die Auswähl-Methoden für die entsprechenden Dateien aus.
     */
    handleDrop($event) {
        this.forceProgressIndeterminate = true;
        this.isDragActive = false;
        $event.stopPropagation();
        $event.preventDefault();
        if ($event.dataTransfer) {
            this.selectFiles($event.dataTransfer.files);
        }
    }
    /**
     * Prüft ob der Base64-String für die Datei gesetzt ist und ob ein onClick-Aufruf für die View-Action vorhanden ist.
     * Wenn ja, wird dieser ausgeführt.
     * @param file
     */
    triggerViewFileClick(file) {
        if (file.content && this.luxViewActionConfig.onClick) {
            this.luxViewActionConfig.onClick(file);
        }
    }
    /**
     * Entfernt die in dieser Component gesetzten Fehlermeldungen.
     */
    clearFormControlErrors() {
        // Das aktuelle Fehlerobjekt auslesen
        let errors = this.formControl.errors;
        if (errors) {
            // Die componentspezifischen Fehler aus dem Objekt entfernen
            for (const cause of Object.keys(LuxFileErrorCause)) {
                delete errors[LuxFileErrorCause[cause]];
            }
            // Falls errors ein leeres Objekt ist, nehmen wir stattdessen null
            errors = Object.keys(errors).length === 0 ? null : errors;
            // Das neue Fehlerobjekt in das FormControl schreiben
            this.formControl.setErrors(errors);
        }
    }
    /**
     * Aktualisiert das Fehlerobjekt am FormControl, damit eine entsprechende Fehlermeldung angezeigt werden kann.
     * Leert die Anzeige und gibt Events mit leerem Array aus.
     * @param error
     */
    setFormControlErrors(error) {
        this.forceProgressIndeterminate = false;
        // Vorherige definierte Fehler entfernen
        this.clearFormControlErrors();
        // Hier aktualisieren wir das Fehlerobjekt an dem zugrunde liegenden FormControl dieser Component
        const errors = this.formControl.errors ? this.formControl.errors : {};
        errors[error.cause] = { file: error.file };
        this.formControl.setErrors(errors);
    }
    /**
     * Berechnet die Größe der übergebenen Datei in MB.
     * @param file
     */
    getFileSizeInMB(file) {
        return file.size / 1000000;
    }
    /**
     * Gibt die Message für Überschreitung der maximalen Dateigröße zurück.
     * @param file
     */
    getMaxSizeErrorMessage(file) {
        return (`Die Datei "${file.name}" überschreitet mit ${+this.getFileSizeInMB(file).toFixed(2)}MB ` +
            `die erlaubte Dateigröße von ${+this.luxMaxSizeMB.toFixed(2)}MB`);
    }
    /**
     * Gibt die Message für Fehler beim Auslesen einer Datei zurück.
     * @param file
     */
    getReadingFileErrorMessage(file) {
        return `Beim Lesen der Datei "${file.name}" ist ein Fehler aufgetreten`;
    }
    /**
     * Gibt die Message für Fehler beim Upload einer Datei zurück.
     * @param files
     */
    getUploadFileErrorMessage(files) {
        if (!files) {
            return 'Das Hochladen ist fehlgeschlagen';
        }
        return `Das Hochladen der ${files.length > 1 ? 'ausgewählten Dateien' : 'ausgewählten Datei'} ist fehlgeschlagen`;
    }
    /**
     * Gibt die Message für falsche Dateitypen zurück.
     * @param file
     */
    getFileNotAcceptedMessage(file) {
        return `Die Datei "${file.name}" hat einen nicht akzeptierten Dateityp`;
    }
    /**
     * Gibt die Message für falsche Dateitypen zurück.
     * @param file
     */
    getMultipleForbiddenMessage() {
        return `Es darf nur eine Datei ausgewählt werden`;
    }
    /**
     * Meldet dem ScreenReader, dass gerade eine/mehrere Dateien bearbeitet werden (Ladeanzeige).
     * @param multiple
     */
    announceFileProcess(multiple) {
        this.liveAnnouncer.announce(`Bitte warten. Die ${multiple ? 'Dateien werden' : 'Datei wird'} verarbeitet.`, 'assertive');
    }
    /**
     * Meldet dem ScreenReader, dass alle Dateien entfernt werden sollen.
     */
    announceAllFilesRemove() {
        this.liveAnnouncer.announce(`Alle Dateien werden entfernt.`, 'assertive');
    }
    /**
     * Meldet dem ScreenReader, dass eine bestimmte Datei entfernt werden soll.
     * @param fileName
     */
    announceFileRemove(fileName) {
        this.liveAnnouncer.announce(`Die Datei ${fileName} wird entfernt.`, 'assertive');
    }
    /**
     * Gibt wieder, ob Drag-and-Drop gerade aktiv und möglich ist.
     */
    isDnDAllowed() {
        return this.luxDnDActive && !this.luxDisabled && !this.luxReadonly;
    }
    // region Overridden methods
    errorMessageModifier(value, errors) {
        if (errors[LuxFileErrorCause.MaxSizeError]) {
            return this.getMaxSizeErrorMessage(errors[LuxFileErrorCause.MaxSizeError].file);
        }
        else if (errors[LuxFileErrorCause.ReadingFileError]) {
            return this.getReadingFileErrorMessage(errors[LuxFileErrorCause.ReadingFileError].file);
        }
        else if (errors[LuxFileErrorCause.UploadFileError]) {
            return this.getUploadFileErrorMessage(errors[LuxFileErrorCause.UploadFileError].file);
        }
        else if (errors[LuxFileErrorCause.FileNotAccepted]) {
            return this.getFileNotAcceptedMessage(errors[LuxFileErrorCause.FileNotAccepted].file);
        }
        else if (errors[LuxFileErrorCause.MultipleForbidden]) {
            return this.getMultipleForbiddenMessage();
        }
        return undefined;
    }
    notifyFormValueChanged() {
        this.luxSelectedFilesChange.emit(this.luxSelectedFiles);
        // Wir leeren nach jedem Value-Change das Input, da wir das FormControl bereits als SSoT besitzen
        // und das Input durch den Browser gelegentlich sonst geblockt werden (wenn eine Datei ausgewählt worden ist)
        this.fileuploadInput.nativeElement.value = null;
    }
    updateValidators(validators) {
        if (!validators && this.luxRequired) {
            validators = Validators.required;
        }
        super.updateValidators(validators);
    }
    initFormValueSubscription() {
        this._formValueChangeSubscr = this.formControl.valueChanges.subscribe(() => {
            // Wenn die Dateien erfolgreich gelesen werden konnten, die (spezifischen) Fehler entfernen
            this.clearFormControlErrors();
        });
        if (this._initialValue !== null && this._initialValue !== undefined) {
            this.setValue(this._initialValue);
        }
    }
    triggerOutputPatternCheck() {
        this.checkOutputPatternViolation(this.luxSelectedFilesChange.observers);
    }
    triggerInputPatternCheck(simpleChanges) {
        this.checkInputPatternViolation(simpleChanges.luxSelectedFiles);
    }
};
tslib_1.__decorate([
    ViewChild('downloadLink', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxFormFileBase.prototype, "downloadLink", void 0);
tslib_1.__decorate([
    ViewChild('fileupload', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxFormFileBase.prototype, "fileuploadInput", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxFormFileBase.prototype, "luxSelectedFilesChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxFormFileBase.prototype, "luxUploadReportProgress", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxFormFileBase.prototype, "luxContentsAsBlob", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxFormFileBase.prototype, "luxTagId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LuxFormFileBase.prototype, "luxMaxSizeMB", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxFormFileBase.prototype, "luxCapture", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxFormFileBase.prototype, "luxUploadUrl", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxFormFileBase.prototype, "luxDnDActive", void 0);
tslib_1.__decorate([
    HostBinding('class.lux-file-highlight'),
    tslib_1.__metadata("design:type", Boolean)
], LuxFormFileBase.prototype, "isDragActive", void 0);
tslib_1.__decorate([
    HostListener('dragover', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], LuxFormFileBase.prototype, "onDragOver", null);
tslib_1.__decorate([
    HostListener('dragleave', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], LuxFormFileBase.prototype, "onDragLeave", null);
tslib_1.__decorate([
    HostListener('drop', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], LuxFormFileBase.prototype, "onDrop", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxFormFileBase.prototype, "luxUploadActionConfig", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxFormFileBase.prototype, "luxDeleteActionConfig", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxFormFileBase.prototype, "luxViewActionConfig", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxFormFileBase.prototype, "luxDownloadActionConfig", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxFormFileBase.prototype, "luxSelectedFiles", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxFormFileBase.prototype, "luxAccept", null);
LuxFormFileBase = tslib_1.__decorate([
    tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [ControlContainer,
        ChangeDetectorRef,
        LuxConsoleService,
        LuxComponentsConfigService,
        HttpClient,
        LiveAnnouncer])
], LuxFormFileBase);
export { LuxFormFileBase };
//# sourceMappingURL=data:application/json;base64,