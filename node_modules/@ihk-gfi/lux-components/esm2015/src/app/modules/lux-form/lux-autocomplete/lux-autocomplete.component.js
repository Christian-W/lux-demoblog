import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Optional, Output, SimpleChanges, ViewChild } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { MatAutocompleteTrigger } from '@angular/material';
import { LuxFormComponentBase } from '../lux-form-model/lux-form-component-base.class';
import { debounceTime, distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { ReplaySubject } from 'rxjs';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
let LuxAutocompleteComponent = class LuxAutocompleteComponent extends LuxFormComponentBase {
    constructor(controlContainer, cdr, logger, config) {
        super(controlContainer, cdr, logger, config);
        this.config = config;
        this.selected$ = new ReplaySubject(1);
        this.luxPlaceholder = '';
        this.luxOptions = [];
        this.luxOptionLabelProp = 'label';
        this.luxLookupDelay = 500;
        this.luxErrorMessageNotAnOption = 'Der eingegebene Wert ist nicht Teil der Auswahl.';
        this.luxSelectAllOnClick = true;
        this.luxStrict = true;
        this.luxValueChange = new EventEmitter();
        this.luxOptionSelected = new EventEmitter();
        this.luxBlur = new EventEmitter();
        this.luxFocus = new EventEmitter();
    }
    get luxValue() {
        return this.getValue();
    }
    set luxValue(value) {
        this.setValue(value);
    }
    ngOnInit() {
        super.ngOnInit();
        this.selected$.pipe(distinctUntilChanged()).subscribe(value => {
            if (this.luxStrict) {
                if (value === '') {
                    this.luxOptionSelected.emit(null);
                    this.luxValueChange.emit(null);
                }
                else {
                    const selectedOption = this.luxOptions.find(option => value === option);
                    if (selectedOption) {
                        this.luxOptionSelected.emit(selectedOption);
                        this.luxValueChange.emit(selectedOption);
                    }
                }
            }
            else {
                this.luxOptionSelected.emit(value);
                this.luxValueChange.emit(value);
            }
        });
    }
    ngAfterViewInit() {
        this.matAutoComplete.panelClosingActions
            .pipe(debounceTime(this.luxLookupDelay))
            .subscribe((value) => {
            if (this.luxStrict) {
                const filterResult = this.filter(this.getOptionLabel(this.luxValue));
                if (filterResult.length === 1) {
                    this.formControl.setValue(filterResult[0]);
                }
                this.handleErrors();
            }
        });
        this.filteredOptions = this.formControl.valueChanges.pipe(startWith(''), debounceTime(this.luxLookupDelay), map(value => this.getOptionLabel(value)), map(() => {
            const filterLabel = this.getOptionLabel(this.luxValue);
            return filterLabel ? this.filter(filterLabel) : this.luxOptions;
        }));
    }
    /**
     * @override errorMessageModifier - Modifikation der Fehlermeldung
     * @param value
     * @param errors
     */
    errorMessageModifier(value, errors) {
        if (errors['incorrect']) {
            return this.luxErrorMessageNotAnOption;
        }
        return undefined;
    }
    /**
     * Regelt die Darstellung der gewaehlten Option im Normalfall.
     * (Ausnahme: Focus-Verlust)
     * @param option
     * @returns string
     */
    displayFn(option) {
        return this.getOptionLabel(this.luxValue);
    }
    /**
     * Filtert das Options-Array nach dem filterTerm und
     * gibt das Ergebnis als Array zurueck.
     * @param filterTerm
     * @returns any[]
     */
    filter(filterTerm) {
        return this.luxOptions.filter(option => {
            const compareValue = this.getOptionLabel(option);
            return (compareValue
                .trim()
                .toLowerCase()
                .indexOf(filterTerm.trim().toLowerCase()) > -1);
        });
    }
    /**
     * Click-Event Handling
     * Selektiert den gesamten Text im Input, wenn selectAllOnClick = true ist.
     * @param clickEvent
     */
    onClick(clickEvent) {
        if (this.luxSelectAllOnClick) {
            clickEvent.target.setSelectionRange(0, clickEvent.target.value.length);
        }
    }
    /**
     * Gibt den darzustellenden Wert einer Option bzw.
     * die Option selbst (wenn string) wider.
     * @param option
     * @returns any
     */
    getOptionLabel(option) {
        if (typeof option === 'string') {
            return option;
        }
        else if (!option) {
            return '';
        }
        else {
            return option[this.luxOptionLabelProp];
        }
    }
    selected($event) {
        this.luxValue = $event.option.value;
    }
    handleErrors() {
        const errors = this.formControl ? this.formControl.errors : null;
        if (this.luxOptions.indexOf(this.luxValue) > -1 ||
            (!!errors && Object.keys(errors).length > 0 && errors['required'])) {
            this.handleOtherErrors(errors);
        }
        else {
            this.handleIncorrectError(errors);
        }
    }
    handleOtherErrors(errors) {
        if (errors && errors['incorrect']) {
            delete errors['incorrect'];
        }
        this.formControl.setErrors(errors && Object.keys(errors).length !== 0 ? errors : null);
    }
    handleIncorrectError(errors) {
        if (this.luxStrict && this.luxValue) {
            errors = errors ? errors : {};
            if (!errors['incorrect']) {
                errors['incorrect'] = true;
            }
            this.formControl.setErrors(errors);
        }
    }
    // region overridden methods
    notifyFormValueChanged(formValue) {
        this.selected$.next(formValue);
        this.luxValueChange.emit(formValue);
        if (formValue && formValue[this.luxOptionLabelProp]) {
            this.matInput.nativeElement.value = formValue[this.luxOptionLabelProp];
        }
    }
    triggerOutputPatternCheck() {
        this.checkOutputPatternViolation(this.luxValueChange.observers);
    }
    triggerInputPatternCheck(simpleChanges) {
        this.checkInputPatternViolation(simpleChanges.luxValue);
    }
};
LuxAutocompleteComponent.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: LuxConsoleService },
    { type: LuxComponentsConfigService }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAutocompleteComponent.prototype, "luxPlaceholder", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxAutocompleteComponent.prototype, "luxReadonly", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], LuxAutocompleteComponent.prototype, "luxOptions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAutocompleteComponent.prototype, "luxOptionLabelProp", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LuxAutocompleteComponent.prototype, "luxLookupDelay", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAutocompleteComponent.prototype, "luxErrorMessageNotAnOption", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxAutocompleteComponent.prototype, "luxTagId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxAutocompleteComponent.prototype, "luxSelectAllOnClick", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxAutocompleteComponent.prototype, "luxStrict", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxAutocompleteComponent.prototype, "luxValueChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxAutocompleteComponent.prototype, "luxOptionSelected", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxAutocompleteComponent.prototype, "luxBlur", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxAutocompleteComponent.prototype, "luxFocus", void 0);
tslib_1.__decorate([
    ViewChild('autoCompleteInput', { read: MatAutocompleteTrigger, static: false }),
    tslib_1.__metadata("design:type", MatAutocompleteTrigger)
], LuxAutocompleteComponent.prototype, "matAutoComplete", void 0);
tslib_1.__decorate([
    ViewChild('autoCompleteInput', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxAutocompleteComponent.prototype, "matInput", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxAutocompleteComponent.prototype, "luxValue", null);
LuxAutocompleteComponent = tslib_1.__decorate([
    Component({
        selector: 'lux-autocomplete',
        template: "<lux-form-control [luxFormComponent]=\"this\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <div class=\"lux-input-row\">\n    <input\n      type=\"text\"\n      matInput\n      autocomplete=\"off\"\n      luxTagIdHandler\n      [luxTagId]=\"luxTagId\"\n      [formControl]=\"formControl\"\n      [placeholder]=\"luxPlaceholder\"\n      [matAutocomplete]=\"auto\"\n      [required]=\"luxRequired\"\n      (click)=\"onClick($event)\"\n      (blur)=\"luxBlur.emit($event)\"\n      (focus)=\"luxFocus.emit($event)\"\n      (focusin)=\"luxFocusIn.emit($event)\"\n      (focusout)=\"luxFocusOut.emit($event)\"\n      [id]=\"uid\"\n      [luxAriaDescribedby]=\"uid + '-error ' + uid + '-hint'\"\n      #autoCompleteInput\n    />\n    <mat-autocomplete\n      #auto=\"matAutocomplete\"\n      [class]=\"'lux-autocomplete-panel'\"\n      [displayWith]=\"displayFn.bind(this)\"\n      (optionSelected)=\"selected($event)\"\n    >\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n        <ng-container *ngTemplateOutlet=\"optionTemplate; context: { $implicit: option }\"></ng-container>\n      </mat-option>\n    </mat-autocomplete>\n  </div>\n</lux-form-control>\n\n<ng-template #optionTemplate let-option>\n  <ng-container *ngIf=\"option[luxOptionLabelProp]; else showObjectTemplate\">\n    {{ option | luxRenderProperty: luxOptionLabelProp }}\n  </ng-container>\n  <ng-template #showObjectTemplate>\n    {{ option }}\n  </ng-template>\n</ng-template>\n",
        styles: ["::ng-deep .lux-autocomplete-panel mat-option:not(:last-of-type){margin-bottom:2px}"]
    }),
    tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [ControlContainer,
        ChangeDetectorRef,
        LuxConsoleService,
        LuxComponentsConfigService])
], LuxAutocompleteComponent);
export { LuxAutocompleteComponent };
//# sourceMappingURL=data:application/json;base64,