import * as tslib_1 from "tslib";
var LuxConsoleService_1;
import { Injectable } from '@angular/core';
import { environment } from '../../../environments/environment';
import { LuxComponentsConfigService } from '../lux-components-config/lux-components-config.service';
import * as i0 from "@angular/core";
import * as i1 from "../lux-components-config/lux-components-config.service";
export const noop = () => undefined;
let LuxConsoleService = LuxConsoleService_1 = class LuxConsoleService {
    constructor(componentsConfigService) {
        // Aus der Konfiguration die Info erhalten, ob Logs angezeigt werden sollen
        componentsConfigService.config.subscribe((newConfig) => {
            LuxConsoleService_1.config = newConfig;
        });
    }
    /* Nicht-statische Log-Methoden, sie zeigen auch die Quelle des Logs an! */
    get log() {
        if (LuxConsoleService_1.isDebugMode()) {
            return console.log.bind.call(console.log, console, LuxConsoleService_1.logDate() + ' -');
        }
        else {
            return noop;
        }
    }
    get warn() {
        if (LuxConsoleService_1.isDebugMode()) {
            return console.warn.bind.call(console.warn, console, LuxConsoleService_1.logDate() + ' -');
        }
        else {
            return noop;
        }
    }
    get error() {
        if (LuxConsoleService_1.isDebugMode()) {
            return console.error.bind.call(console.error, console, LuxConsoleService_1.logDate() + ' -');
        }
        else {
            return noop;
        }
    }
    get group() {
        if (LuxConsoleService_1.isDebugMode()) {
            return console.group.bind.call(console.group, console);
        }
        else {
            return noop;
        }
    }
    get info() {
        if (LuxConsoleService_1.isDebugMode()) {
            return console.info.bind.call(console.info, console);
        }
        else {
            return noop;
        }
    }
    get groupEnd() {
        if (LuxConsoleService_1.isDebugMode()) {
            return console.groupEnd.bind.call(console.groupEnd, console);
        }
        else {
            return noop;
        }
    }
    /* Statische Log-Methoden, sie zeigen nicht die Quelle des Logs an! */
    static LOG(...args) {
        if (!LuxConsoleService_1.isDebugMode()) {
            return;
        }
        if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
            console.log(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else if (args.length === 1) {
            console.log(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else {
            console.log(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
        }
    }
    static WARN(...args) {
        if (!LuxConsoleService_1.isDebugMode()) {
            return;
        }
        if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
            console.warn(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else if (args.length === 1) {
            console.warn(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else {
            console.warn(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
        }
    }
    static ERROR(...args) {
        if (!LuxConsoleService_1.isDebugMode()) {
            return;
        }
        if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
            console.error(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else if (args.length === 1) {
            console.error(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else {
            console.error(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
        }
    }
    static logDate() {
        const now = new Date();
        const day = LuxConsoleService_1.checkTime(now.getDate());
        const month = LuxConsoleService_1.checkTime(now.getMonth() + 1);
        const year = LuxConsoleService_1.checkTime(now.getFullYear());
        const hours = LuxConsoleService_1.checkTime(now.getHours());
        const minutes = LuxConsoleService_1.checkTime(now.getMinutes());
        const seconds = LuxConsoleService_1.checkTime(now.getSeconds());
        return day + '.' + month + '.' + year + ' ' + hours + ':' + minutes + ':' + seconds;
    }
    static getLogValue(...args) {
        const logValue = [];
        args.forEach(arg => {
            if (arg !== null && typeof arg === 'object') {
                arg = JSON.stringify(arg);
            }
            logValue.push(arg);
        });
        return logValue;
    }
    static isDebugMode() {
        return LuxConsoleService_1.config ? LuxConsoleService_1.config.displayLuxConsoleLogs : environment.production;
    }
    static checkTime(timeUnit) {
        return timeUnit < 10 ? '0' + timeUnit : timeUnit;
    }
};
LuxConsoleService.config = {};
LuxConsoleService.ctorParameters = () => [
    { type: LuxComponentsConfigService }
];
LuxConsoleService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxConsoleService_Factory() { return new LuxConsoleService(i0.ɵɵinject(i1.LuxComponentsConfigService)); }, token: LuxConsoleService, providedIn: "root" });
LuxConsoleService = LuxConsoleService_1 = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [LuxComponentsConfigService])
], LuxConsoleService);
export { LuxConsoleService };
//# sourceMappingURL=data:application/json;base64,