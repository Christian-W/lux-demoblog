import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { LuxConsoleService } from './lux-console.service';
import { BehaviorSubject } from 'rxjs';
import { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';
let LuxMediaQueryObserverService = class LuxMediaQueryObserverService {
    constructor(breakpointObserver, logger) {
        this.breakpointObserver = breakpointObserver;
        this.logger = logger;
        this._mediaQueryChanged = new BehaviorSubject('');
        this._subscriptions = [];
        this.addQuerySubscription(Breakpoints.XSmall, 'xs');
        this.addQuerySubscription(Breakpoints.Small, 'sm');
        this.addQuerySubscription(Breakpoints.Medium, 'md');
        this.addQuerySubscription(Breakpoints.Large, 'lg');
        this.addQuerySubscription(Breakpoints.XLarge, 'xl');
    }
    get activeMediaQuery() {
        return this._mediaQueryChanged.getValue();
    }
    ngOnDestroy() {
        this._subscriptions.forEach((subscription) => subscription.unsubscribe());
        this._mediaQueryChanged.complete();
    }
    getMediaQueryChangedAsObservable() {
        return this._mediaQueryChanged.asObservable();
    }
    isXS() {
        return this.activeMediaQuery === 'xs';
    }
    isSM() {
        return this.activeMediaQuery === 'sm';
    }
    isMD() {
        return this.activeMediaQuery === 'md';
    }
    isLG() {
        return this.activeMediaQuery === 'lg';
    }
    isXL() {
        return this.activeMediaQuery === 'xl';
    }
    addQuerySubscription(breakpoint, breakpointString) {
        this._subscriptions.push(this.breakpointObserver.observe([breakpoint]).subscribe((state) => {
            if (state.matches) {
                this._mediaQueryChanged.next(breakpointString);
                this.logger.log(`MediaQuery [${this.activeMediaQuery}] activated.`);
            }
        }));
    }
};
LuxMediaQueryObserverService.ctorParameters = () => [
    { type: BreakpointObserver },
    { type: LuxConsoleService }
];
LuxMediaQueryObserverService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [BreakpointObserver, LuxConsoleService])
], LuxMediaQueryObserverService);
export { LuxMediaQueryObserverService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LW1lZGlhLXF1ZXJ5LW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtdXRpbC9sdXgtbWVkaWEtcXVlcnktb2JzZXJ2ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZUFBZSxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3ZGLElBQWEsNEJBQTRCLEdBQXpDLE1BQWEsNEJBQTRCO0lBSXZDLFlBQW9CLGtCQUFzQyxFQUFVLE1BQXlCO1FBQXpFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUhyRix1QkFBa0IsR0FBNEIsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7UUFDOUUsbUJBQWMsR0FBbUIsRUFBRSxDQUFDO1FBRzFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxJQUFXLGdCQUFnQjtRQUN6QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBMEIsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDeEYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxnQ0FBZ0M7UUFDckMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVNLElBQUk7UUFDVCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVNLElBQUk7UUFDVCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVNLElBQUk7UUFDVCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVNLElBQUk7UUFDVCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVNLElBQUk7UUFDVCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUM7SUFDeEMsQ0FBQztJQUVPLG9CQUFvQixDQUFDLFVBQWUsRUFBRSxnQkFBd0I7UUFDcEUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ3RCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQXNCLEVBQUUsRUFBRTtZQUNqRixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLENBQUMsZ0JBQWdCLGNBQWMsQ0FBQyxDQUFDO2FBQ3JFO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBOztZQW5EeUMsa0JBQWtCO1lBQWtCLGlCQUFpQjs7QUFKbEYsNEJBQTRCO0lBRHhDLFVBQVUsRUFBRTs2Q0FLNkIsa0JBQWtCLEVBQWtCLGlCQUFpQjtHQUpsRiw0QkFBNEIsQ0F1RHhDO1NBdkRZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTHV4Q29uc29sZVNlcnZpY2UgfSBmcm9tICcuL2x1eC1jb25zb2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJyZWFrcG9pbnRPYnNlcnZlciwgQnJlYWtwb2ludHMsIEJyZWFrcG9pbnRTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9sYXlvdXQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHV4TWVkaWFRdWVyeU9ic2VydmVyU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX21lZGlhUXVlcnlDaGFuZ2VkOiBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPignJyk7XG4gIHByaXZhdGUgX3N1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBicmVha3BvaW50T2JzZXJ2ZXI6IEJyZWFrcG9pbnRPYnNlcnZlciwgcHJpdmF0ZSBsb2dnZXI6IEx1eENvbnNvbGVTZXJ2aWNlKSB7XG4gICAgdGhpcy5hZGRRdWVyeVN1YnNjcmlwdGlvbihCcmVha3BvaW50cy5YU21hbGwsICd4cycpO1xuICAgIHRoaXMuYWRkUXVlcnlTdWJzY3JpcHRpb24oQnJlYWtwb2ludHMuU21hbGwsICdzbScpO1xuICAgIHRoaXMuYWRkUXVlcnlTdWJzY3JpcHRpb24oQnJlYWtwb2ludHMuTWVkaXVtLCAnbWQnKTtcbiAgICB0aGlzLmFkZFF1ZXJ5U3Vic2NyaXB0aW9uKEJyZWFrcG9pbnRzLkxhcmdlLCAnbGcnKTtcbiAgICB0aGlzLmFkZFF1ZXJ5U3Vic2NyaXB0aW9uKEJyZWFrcG9pbnRzLlhMYXJnZSwgJ3hsJyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFjdGl2ZU1lZGlhUXVlcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lZGlhUXVlcnlDaGFuZ2VkLmdldFZhbHVlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmZvckVhY2goKHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XG4gICAgdGhpcy5fbWVkaWFRdWVyeUNoYW5nZWQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNZWRpYVF1ZXJ5Q2hhbmdlZEFzT2JzZXJ2YWJsZSgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9tZWRpYVF1ZXJ5Q2hhbmdlZC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBpc1hTKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU1lZGlhUXVlcnkgPT09ICd4cyc7XG4gIH1cblxuICBwdWJsaWMgaXNTTSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVNZWRpYVF1ZXJ5ID09PSAnc20nO1xuICB9XG5cbiAgcHVibGljIGlzTUQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlTWVkaWFRdWVyeSA9PT0gJ21kJztcbiAgfVxuXG4gIHB1YmxpYyBpc0xHKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU1lZGlhUXVlcnkgPT09ICdsZyc7XG4gIH1cblxuICBwdWJsaWMgaXNYTCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVNZWRpYVF1ZXJ5ID09PSAneGwnO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRRdWVyeVN1YnNjcmlwdGlvbihicmVha3BvaW50OiBhbnksIGJyZWFrcG9pbnRTdHJpbmc6IHN0cmluZykge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMuYnJlYWtwb2ludE9ic2VydmVyLm9ic2VydmUoW2JyZWFrcG9pbnRdKS5zdWJzY3JpYmUoKHN0YXRlOiBCcmVha3BvaW50U3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHN0YXRlLm1hdGNoZXMpIHtcbiAgICAgICAgICB0aGlzLl9tZWRpYVF1ZXJ5Q2hhbmdlZC5uZXh0KGJyZWFrcG9pbnRTdHJpbmcpO1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhgTWVkaWFRdWVyeSBbJHt0aGlzLmFjdGl2ZU1lZGlhUXVlcnl9XSBhY3RpdmF0ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19