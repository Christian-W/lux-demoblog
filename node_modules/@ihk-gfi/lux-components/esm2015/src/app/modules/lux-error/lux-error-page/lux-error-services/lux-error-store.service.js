import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Dieser Service dient dazu, die aktuellen Fehlermeldungen und die Error-Page Konfiguration zu speichern.
 *
 * Er wird von LuxErrorService und LuxErrorPageComponent benutzt, ohne ihn gäbe es Cycle-Dependency Fehler.
 */
let LuxErrorStoreService = class LuxErrorStoreService {
    constructor() {
        /**
         * Enthaelt die normale Konfiguration der Fehlerseite, kann bei Bedarf mit setConfig ueberschrieben werden.
         */
        this._defaultConfig = {
            iconName: 'far fa-times-circle',
            iconSize: '5x',
            errorText: 'Uups... da ist etwas schief gelaufen. Wir kennen die Fehlerdetails bereits und kümmern uns darum.',
            homeRedirectText: 'Zurück zur Startseite',
            homeRedirectUrl: '',
            errorPageUrl: 'errorpage',
            skipLocationChange: true
        };
    }
    /**
     * Gibt die aktuelle Konfiguration zurueck.
     * @returns ILuxErrorPageConfig
     */
    get config() {
        return this._config;
    }
    /**
     * Gibt ein Array der letzten Fehler zurueck.
     * @returns Array<ILuxError[]>
     */
    get lastErrors() {
        return Array.of(this._lastErrors);
    }
    /**
     * Gibt den aktuellen Fehler zurueck.
     * @returns ILuxError
     */
    get error() {
        return this._error;
    }
    /**
     * Sichert den Fehler in der Property und fügt ihn der "lastErrors"-Liste hinzu.
     * @param newError
     */
    set error(newError) {
        this._error = newError;
        this._lastErrors.push(newError);
    }
    /**
     * Initialisiert den Service.
     */
    init() {
        this._lastErrors = [];
        this._error = null;
        this._config = {};
        this.safeNewConfig(this._defaultConfig);
    }
    /**
     *
     * @param luxErrorPageConfig
     */
    safeNewConfig(luxErrorPageConfig) {
        // wenn keine Config übergeben wird, ein leeres Objekt erzeugen
        // das sorgt dafür, dass wenigstens die default-Werte genommen werden
        luxErrorPageConfig = luxErrorPageConfig ? luxErrorPageConfig : {};
        // alle Werte der übergebenen Config prüfen und ggf. default-Werte nutzen
        Object.keys(luxErrorPageConfig).forEach(e => {
            if (luxErrorPageConfig[e] !== undefined && luxErrorPageConfig[e] !== null) {
                this._config[e] = luxErrorPageConfig[e];
            }
            else {
                this._config[e] = this._defaultConfig[e];
            }
        });
    }
};
LuxErrorStoreService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxErrorStoreService_Factory() { return new LuxErrorStoreService(); }, token: LuxErrorStoreService, providedIn: "root" });
LuxErrorStoreService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [])
], LuxErrorStoreService);
export { LuxErrorStoreService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWVycm9yLXN0b3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtZXJyb3IvbHV4LWVycm9yLXBhZ2UvbHV4LWVycm9yLXNlcnZpY2VzL2x1eC1lcnJvci1zdG9yZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQzs7OztHQUlHO0FBSUgsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7SUFtRC9CO1FBOUNBOztXQUVHO1FBQ2MsbUJBQWMsR0FBd0I7WUFDckQsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixRQUFRLEVBQUUsSUFBSTtZQUNkLFNBQVMsRUFBRSxtR0FBbUc7WUFDOUcsZ0JBQWdCLEVBQUUsdUJBQXVCO1lBQ3pDLGVBQWUsRUFBRSxFQUFFO1lBQ25CLFlBQVksRUFBRSxXQUFXO1lBQ3pCLGtCQUFrQixFQUFFLElBQUk7U0FDekIsQ0FBQztJQW1DYSxDQUFDO0lBakNoQjs7O09BR0c7SUFDSCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksVUFBVTtRQUNaLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxLQUFLLENBQUMsUUFBbUI7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUlEOztPQUVHO0lBQ0gsSUFBSTtRQUNGLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxhQUFhLENBQUMsa0JBQXVDO1FBQ25ELCtEQUErRDtRQUMvRCxxRUFBcUU7UUFDckUsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEUseUVBQXlFO1FBQ3pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDMUMsSUFBSSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLElBQUksa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO2dCQUN6RSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMxQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7O0FBaEZZLG9CQUFvQjtJQUhoQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDOztHQUNXLG9CQUFvQixDQWdGaEM7U0FoRlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUx1eEVycm9yUGFnZUNvbmZpZyB9IGZyb20gJy4uL2x1eC1lcnJvci1pbnRlcmZhY2VzL2x1eC1lcnJvci1wYWdlLWNvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUx1eEVycm9yIH0gZnJvbSAnLi4vbHV4LWVycm9yLWludGVyZmFjZXMvbHV4LWVycm9yLmludGVyZmFjZSc7XG5cbi8qKlxuICogRGllc2VyIFNlcnZpY2UgZGllbnQgZGF6dSwgZGllIGFrdHVlbGxlbiBGZWhsZXJtZWxkdW5nZW4gdW5kIGRpZSBFcnJvci1QYWdlIEtvbmZpZ3VyYXRpb24genUgc3BlaWNoZXJuLlxuICpcbiAqIEVyIHdpcmQgdm9uIEx1eEVycm9yU2VydmljZSB1bmQgTHV4RXJyb3JQYWdlQ29tcG9uZW50IGJlbnV0enQsIG9obmUgaWhuIGfDpGJlIGVzIEN5Y2xlLURlcGVuZGVuY3kgRmVobGVyLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMdXhFcnJvclN0b3JlU2VydmljZSB7XG4gIHByaXZhdGUgX2NvbmZpZzogSUx1eEVycm9yUGFnZUNvbmZpZztcbiAgcHJpdmF0ZSBfZXJyb3I6IElMdXhFcnJvcjtcbiAgcHJpdmF0ZSBfbGFzdEVycm9yczogSUx1eEVycm9yW107XG5cbiAgLyoqXG4gICAqIEVudGhhZWx0IGRpZSBub3JtYWxlIEtvbmZpZ3VyYXRpb24gZGVyIEZlaGxlcnNlaXRlLCBrYW5uIGJlaSBCZWRhcmYgbWl0IHNldENvbmZpZyB1ZWJlcnNjaHJpZWJlbiB3ZXJkZW4uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9kZWZhdWx0Q29uZmlnOiBJTHV4RXJyb3JQYWdlQ29uZmlnID0ge1xuICAgIGljb25OYW1lOiAnZmFyIGZhLXRpbWVzLWNpcmNsZScsXG4gICAgaWNvblNpemU6ICc1eCcsXG4gICAgZXJyb3JUZXh0OiAnVXVwcy4uLiBkYSBpc3QgZXR3YXMgc2NoaWVmIGdlbGF1ZmVuLiBXaXIga2VubmVuIGRpZSBGZWhsZXJkZXRhaWxzIGJlcmVpdHMgdW5kIGvDvG1tZXJuIHVucyBkYXJ1bS4nLFxuICAgIGhvbWVSZWRpcmVjdFRleHQ6ICdadXLDvGNrIHp1ciBTdGFydHNlaXRlJyxcbiAgICBob21lUmVkaXJlY3RVcmw6ICcnLFxuICAgIGVycm9yUGFnZVVybDogJ2Vycm9ycGFnZScsXG4gICAgc2tpcExvY2F0aW9uQ2hhbmdlOiB0cnVlXG4gIH07XG5cbiAgLyoqXG4gICAqIEdpYnQgZGllIGFrdHVlbGxlIEtvbmZpZ3VyYXRpb24genVydWVjay5cbiAgICogQHJldHVybnMgSUx1eEVycm9yUGFnZUNvbmZpZ1xuICAgKi9cbiAgZ2V0IGNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpYnQgZWluIEFycmF5IGRlciBsZXR6dGVuIEZlaGxlciB6dXJ1ZWNrLlxuICAgKiBAcmV0dXJucyBBcnJheTxJTHV4RXJyb3JbXT5cbiAgICovXG4gIGdldCBsYXN0RXJyb3JzKCkge1xuICAgIHJldHVybiBBcnJheS5vZih0aGlzLl9sYXN0RXJyb3JzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaWJ0IGRlbiBha3R1ZWxsZW4gRmVobGVyIHp1cnVlY2suXG4gICAqIEByZXR1cm5zIElMdXhFcnJvclxuICAgKi9cbiAgZ2V0IGVycm9yKCk6IElMdXhFcnJvciB7XG4gICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpY2hlcnQgZGVuIEZlaGxlciBpbiBkZXIgUHJvcGVydHkgdW5kIGbDvGd0IGlobiBkZXIgXCJsYXN0RXJyb3JzXCItTGlzdGUgaGluenUuXG4gICAqIEBwYXJhbSBuZXdFcnJvclxuICAgKi9cbiAgc2V0IGVycm9yKG5ld0Vycm9yOiBJTHV4RXJyb3IpIHtcbiAgICB0aGlzLl9lcnJvciA9IG5ld0Vycm9yO1xuICAgIHRoaXMuX2xhc3RFcnJvcnMucHVzaChuZXdFcnJvcik7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpc2llcnQgZGVuIFNlcnZpY2UuXG4gICAqL1xuICBpbml0KCkge1xuICAgIHRoaXMuX2xhc3RFcnJvcnMgPSBbXTtcbiAgICB0aGlzLl9lcnJvciA9IG51bGw7XG4gICAgdGhpcy5fY29uZmlnID0ge307XG4gICAgdGhpcy5zYWZlTmV3Q29uZmlnKHRoaXMuX2RlZmF1bHRDb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBsdXhFcnJvclBhZ2VDb25maWdcbiAgICovXG4gIHNhZmVOZXdDb25maWcobHV4RXJyb3JQYWdlQ29uZmlnOiBJTHV4RXJyb3JQYWdlQ29uZmlnKSB7XG4gICAgLy8gd2VubiBrZWluZSBDb25maWcgw7xiZXJnZWJlbiB3aXJkLCBlaW4gbGVlcmVzIE9iamVrdCBlcnpldWdlblxuICAgIC8vIGRhcyBzb3JndCBkYWbDvHIsIGRhc3Mgd2VuaWdzdGVucyBkaWUgZGVmYXVsdC1XZXJ0ZSBnZW5vbW1lbiB3ZXJkZW5cbiAgICBsdXhFcnJvclBhZ2VDb25maWcgPSBsdXhFcnJvclBhZ2VDb25maWcgPyBsdXhFcnJvclBhZ2VDb25maWcgOiB7fTtcbiAgICAvLyBhbGxlIFdlcnRlIGRlciDDvGJlcmdlYmVuZW4gQ29uZmlnIHByw7xmZW4gdW5kIGdnZi4gZGVmYXVsdC1XZXJ0ZSBudXR6ZW5cbiAgICBPYmplY3Qua2V5cyhsdXhFcnJvclBhZ2VDb25maWcpLmZvckVhY2goZSA9PiB7XG4gICAgICBpZiAobHV4RXJyb3JQYWdlQ29uZmlnW2VdICE9PSB1bmRlZmluZWQgJiYgbHV4RXJyb3JQYWdlQ29uZmlnW2VdICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZ1tlXSA9IGx1eEVycm9yUGFnZUNvbmZpZ1tlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZ1tlXSA9IHRoaXMuX2RlZmF1bHRDb25maWdbZV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==