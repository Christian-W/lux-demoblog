import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';
import { LuxHttpErrorInterceptor } from './lux-http-error-interceptor';
import { LuxBackgroundColorsEnum } from '../../lux-util/lux-colors.enum';
let LuxHttpErrorComponent = class LuxHttpErrorComponent {
    constructor(router) {
        this.subs = [];
        // Beim Ansteuern einer neuen Route, die aktuellen Fehler resetten.
        router.events.forEach(event => {
            if (event instanceof NavigationStart) {
                LuxHttpErrorInterceptor.dataStream.next([]);
            }
        });
    }
    ngOnInit() {
        this.errors = [];
    }
    ngAfterViewInit() {
        // Wenn neue Fehler-Objekte kommen, diese umformatieren und in der LuxMessageBoxComponent anzeigen.
        this.subs.push(LuxHttpErrorInterceptor.dataStream$().subscribe((errors) => {
            this.updateErrors(errors);
        }));
    }
    ngOnDestroy() {
        // Alle bekannten Subscriptions auflösen.
        this.subs.forEach(sub => {
            sub.unsubscribe();
        });
    }
    /**
     * Updated das aktuelle Errors-Array mit dem übergebenen Wert.
     * Liest dabei die Message aus dem Fehler und erzeugt LuxMessage-Objekte für die LuxMessageBoxComponent.
     * @param errors
     */
    updateErrors(errors) {
        const errorMessages = [];
        if (errors && errors.length > 0) {
            errors.forEach((error) => {
                errorMessages.push({
                    text: this.readErrorMessage(error),
                    color: LuxBackgroundColorsEnum.red,
                    iconName: 'fa-bug'
                });
            });
        }
        setTimeout(() => {
            this.errors = errorMessages;
        });
    }
    /**
     * Versucht eine Fehlermeldung aus dem Fehler zu lesen.
     * Zuerst wird geschaut, ob der Fehler selbst nur ein String ist ==> Wenn ja, diesen zurückgeben.
     * Dann wird geprüft, ob der Fehler eine "message"-Property besitzt ==> Wenn ja, diese zurückgeben
     * Als letzter Ausweg wird das "error"-Objekt selbst über die toString-Methode zurückgegeben.
     * @param error
     */
    readErrorMessage(error) {
        if (typeof error === 'string') {
            return error;
        }
        else if (error.hasOwnProperty('message')) {
            return error['message'];
        }
        else {
            return error.toString();
        }
    }
};
LuxHttpErrorComponent.ctorParameters = () => [
    { type: Router }
];
LuxHttpErrorComponent = tslib_1.__decorate([
    Component({
        selector: 'lux-http-error',
        template: "<lux-message-box [luxMessages]=\"errors\"> </lux-message-box>\n",
        styles: [""]
    }),
    tslib_1.__metadata("design:paramtypes", [Router])
], LuxHttpErrorComponent);
export { LuxHttpErrorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWh0dHAtZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWVycm9yL2x1eC1odHRwLWVycm9yL2x1eC1odHRwLWVycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFPekUsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFLaEMsWUFBWSxNQUFjO1FBSmxCLFNBQUksR0FBbUIsRUFBRSxDQUFDO1FBS2hDLG1FQUFtRTtRQUNuRSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QixJQUFJLEtBQUssWUFBWSxlQUFlLEVBQUU7Z0JBQ3BDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDN0M7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELGVBQWU7UUFDYixtR0FBbUc7UUFDbkcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osdUJBQXVCLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBYSxFQUFFLEVBQUU7WUFDaEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVc7UUFDVCx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxZQUFZLENBQUMsTUFBYTtRQUNoQyxNQUFNLGFBQWEsR0FBa0IsRUFBRSxDQUFDO1FBQ3hDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDNUIsYUFBYSxDQUFDLElBQUksQ0FBQztvQkFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7b0JBQ2xDLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxHQUFHO29CQUNsQyxRQUFRLEVBQUUsUUFBUTtpQkFDbkIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ2pDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7YUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDekI7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBbEVxQixNQUFNOztBQUxmLHFCQUFxQjtJQUxqQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1FBQzFCLDJFQUE0Qzs7S0FFN0MsQ0FBQzs2Q0FNb0IsTUFBTTtHQUxmLHFCQUFxQixDQXVFakM7U0F2RVkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGlvblN0YXJ0LCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTHV4SHR0cEVycm9ySW50ZXJjZXB0b3IgfSBmcm9tICcuL2x1eC1odHRwLWVycm9yLWludGVyY2VwdG9yJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSUx1eE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9sdXgtY29tbW9uL2x1eC1tZXNzYWdlLWJveC9sdXgtbWVzc2FnZS1ib3gtbW9kZWwvbHV4LW1lc3NhZ2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IEx1eEJhY2tncm91bmRDb2xvcnNFbnVtIH0gZnJvbSAnLi4vLi4vbHV4LXV0aWwvbHV4LWNvbG9ycy5lbnVtJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbHV4LWh0dHAtZXJyb3InLFxuICB0ZW1wbGF0ZVVybDogJ2x1eC1odHRwLWVycm9yLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ2x1eC1odHRwLWVycm9yLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTHV4SHR0cEVycm9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIHN1YnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgZXJyb3JzOiBhbnlbXTtcblxuICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlcikge1xuICAgIC8vIEJlaW0gQW5zdGV1ZXJuIGVpbmVyIG5ldWVuIFJvdXRlLCBkaWUgYWt0dWVsbGVuIEZlaGxlciByZXNldHRlbi5cbiAgICByb3V0ZXIuZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvblN0YXJ0KSB7XG4gICAgICAgIEx1eEh0dHBFcnJvckludGVyY2VwdG9yLmRhdGFTdHJlYW0ubmV4dChbXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmVycm9ycyA9IFtdO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIC8vIFdlbm4gbmV1ZSBGZWhsZXItT2JqZWt0ZSBrb21tZW4sIGRpZXNlIHVtZm9ybWF0aWVyZW4gdW5kIGluIGRlciBMdXhNZXNzYWdlQm94Q29tcG9uZW50IGFuemVpZ2VuLlxuICAgIHRoaXMuc3Vicy5wdXNoKFxuICAgICAgTHV4SHR0cEVycm9ySW50ZXJjZXB0b3IuZGF0YVN0cmVhbSQoKS5zdWJzY3JpYmUoKGVycm9yczogYW55W10pID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVFcnJvcnMoZXJyb3JzKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIC8vIEFsbGUgYmVrYW5udGVuIFN1YnNjcmlwdGlvbnMgYXVmbMO2c2VuLlxuICAgIHRoaXMuc3Vicy5mb3JFYWNoKHN1YiA9PiB7XG4gICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVkIGRhcyBha3R1ZWxsZSBFcnJvcnMtQXJyYXkgbWl0IGRlbSDDvGJlcmdlYmVuZW4gV2VydC5cbiAgICogTGllc3QgZGFiZWkgZGllIE1lc3NhZ2UgYXVzIGRlbSBGZWhsZXIgdW5kIGVyemV1Z3QgTHV4TWVzc2FnZS1PYmpla3RlIGbDvHIgZGllIEx1eE1lc3NhZ2VCb3hDb21wb25lbnQuXG4gICAqIEBwYXJhbSBlcnJvcnNcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlRXJyb3JzKGVycm9yczogYW55W10pIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VzOiBJTHV4TWVzc2FnZVtdID0gW107XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgZXJyb3JzLmZvckVhY2goKGVycm9yOiBhbnkpID0+IHtcbiAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiB0aGlzLnJlYWRFcnJvck1lc3NhZ2UoZXJyb3IpLFxuICAgICAgICAgIGNvbG9yOiBMdXhCYWNrZ3JvdW5kQ29sb3JzRW51bS5yZWQsXG4gICAgICAgICAgaWNvbk5hbWU6ICdmYS1idWcnXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvck1lc3NhZ2VzO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcnN1Y2h0IGVpbmUgRmVobGVybWVsZHVuZyBhdXMgZGVtIEZlaGxlciB6dSBsZXNlbi5cbiAgICogWnVlcnN0IHdpcmQgZ2VzY2hhdXQsIG9iIGRlciBGZWhsZXIgc2VsYnN0IG51ciBlaW4gU3RyaW5nIGlzdCA9PT4gV2VubiBqYSwgZGllc2VuIHp1csO8Y2tnZWJlbi5cbiAgICogRGFubiB3aXJkIGdlcHLDvGZ0LCBvYiBkZXIgRmVobGVyIGVpbmUgXCJtZXNzYWdlXCItUHJvcGVydHkgYmVzaXR6dCA9PT4gV2VubiBqYSwgZGllc2UgenVyw7xja2dlYmVuXG4gICAqIEFscyBsZXR6dGVyIEF1c3dlZyB3aXJkIGRhcyBcImVycm9yXCItT2JqZWt0IHNlbGJzdCDDvGJlciBkaWUgdG9TdHJpbmctTWV0aG9kZSB6dXLDvGNrZ2VnZWJlbi5cbiAgICogQHBhcmFtIGVycm9yXG4gICAqL1xuICBwcml2YXRlIHJlYWRFcnJvck1lc3NhZ2UoZXJyb3I6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9IGVsc2UgaWYgKGVycm9yLmhhc093blByb3BlcnR5KCdtZXNzYWdlJykpIHtcbiAgICAgIHJldHVybiBlcnJvclsnbWVzc2FnZSddO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3IudG9TdHJpbmcoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==