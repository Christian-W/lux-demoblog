import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { LuxErrorPageComponent } from '../lux-error-page.component';
import { LuxErrorStoreService } from './lux-error-store.service';
let LuxErrorService = class LuxErrorService {
    constructor(router, errorStore) {
        this.router = router;
        this.errorStore = errorStore;
        this.errorStore.init();
        this.setConfig(null);
    }
    /**
     * Ueberschreibt die aktuelle Konfiguration fuer die Fehlerseite.
     * Uebernimmt so viele Werte wie moeglich aus der uebergebenen Konfiguration,
     * sonst werden die Default-Werte genutzt.
     * @param luxErrorPageConfig
     */
    setConfig(luxErrorPageConfig) {
        this.errorStore.safeNewConfig(luxErrorPageConfig);
        // potentielle alte Route zu LuxErrorPageComponent entfernen
        this.router.config = this.router.config.filter(entry => entry.component !== LuxErrorPageComponent);
        // neue Route eintragen
        this.router.config.unshift({ path: this.errorStore.config.errorPageUrl, component: LuxErrorPageComponent });
    }
    /**
     * Navigiert zur Fehlerkomponente und versucht einen Fehler
     * (wenn mitgegeben) zu sichern.
     * @param error
     * @returns Observable<any>
     */
    navigateToErrorPage(error) {
        if (error) {
            this.errorStore.error = error;
        }
        const { errorPageUrl, skipLocationChange } = this.errorStore.config;
        return of(this.router.navigateByUrl(errorPageUrl, { skipLocationChange }));
    }
};
LuxErrorService.ctorParameters = () => [
    { type: Router },
    { type: LuxErrorStoreService }
];
LuxErrorService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [Router, LuxErrorStoreService])
], LuxErrorService);
export { LuxErrorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWVycm9yLXNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtZXJyb3IvbHV4LWVycm9yLXBhZ2UvbHV4LWVycm9yLXNlcnZpY2VzL2x1eC1lcnJvci1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3RDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR2pFLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFDMUIsWUFBb0IsTUFBYyxFQUFVLFVBQWdDO1FBQXhELFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFzQjtRQUMxRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsU0FBUyxDQUFDLGtCQUF1QztRQUMvQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xELDREQUE0RDtRQUM1RCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLHFCQUFxQixDQUFDLENBQUM7UUFDbkcsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxtQkFBbUIsQ0FBQyxLQUFpQjtRQUNuQyxJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUMvQjtRQUNELE1BQU0sRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUNwRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0NBQ0YsQ0FBQTs7WUFoQzZCLE1BQU07WUFBc0Isb0JBQW9COztBQURqRSxlQUFlO0lBRDNCLFVBQVUsRUFBRTs2Q0FFaUIsTUFBTSxFQUFzQixvQkFBb0I7R0FEakUsZUFBZSxDQWlDM0I7U0FqQ1ksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSUx1eEVycm9yUGFnZUNvbmZpZyB9IGZyb20gJy4uL2x1eC1lcnJvci1pbnRlcmZhY2VzL2x1eC1lcnJvci1wYWdlLWNvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUx1eEVycm9yIH0gZnJvbSAnLi4vbHV4LWVycm9yLWludGVyZmFjZXMvbHV4LWVycm9yLmludGVyZmFjZSc7XG5pbXBvcnQgeyBMdXhFcnJvclBhZ2VDb21wb25lbnQgfSBmcm9tICcuLi9sdXgtZXJyb3ItcGFnZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTHV4RXJyb3JTdG9yZVNlcnZpY2UgfSBmcm9tICcuL2x1eC1lcnJvci1zdG9yZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1eEVycm9yU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgZXJyb3JTdG9yZTogTHV4RXJyb3JTdG9yZVNlcnZpY2UpIHtcbiAgICB0aGlzLmVycm9yU3RvcmUuaW5pdCgpO1xuICAgIHRoaXMuc2V0Q29uZmlnKG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVlYmVyc2NocmVpYnQgZGllIGFrdHVlbGxlIEtvbmZpZ3VyYXRpb24gZnVlciBkaWUgRmVobGVyc2VpdGUuXG4gICAqIFVlYmVybmltbXQgc28gdmllbGUgV2VydGUgd2llIG1vZWdsaWNoIGF1cyBkZXIgdWViZXJnZWJlbmVuIEtvbmZpZ3VyYXRpb24sXG4gICAqIHNvbnN0IHdlcmRlbiBkaWUgRGVmYXVsdC1XZXJ0ZSBnZW51dHp0LlxuICAgKiBAcGFyYW0gbHV4RXJyb3JQYWdlQ29uZmlnXG4gICAqL1xuICBzZXRDb25maWcobHV4RXJyb3JQYWdlQ29uZmlnOiBJTHV4RXJyb3JQYWdlQ29uZmlnKSB7XG4gICAgdGhpcy5lcnJvclN0b3JlLnNhZmVOZXdDb25maWcobHV4RXJyb3JQYWdlQ29uZmlnKTtcbiAgICAvLyBwb3RlbnRpZWxsZSBhbHRlIFJvdXRlIHp1IEx1eEVycm9yUGFnZUNvbXBvbmVudCBlbnRmZXJuZW5cbiAgICB0aGlzLnJvdXRlci5jb25maWcgPSB0aGlzLnJvdXRlci5jb25maWcuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmNvbXBvbmVudCAhPT0gTHV4RXJyb3JQYWdlQ29tcG9uZW50KTtcbiAgICAvLyBuZXVlIFJvdXRlIGVpbnRyYWdlblxuICAgIHRoaXMucm91dGVyLmNvbmZpZy51bnNoaWZ0KHsgcGF0aDogdGhpcy5lcnJvclN0b3JlLmNvbmZpZy5lcnJvclBhZ2VVcmwsIGNvbXBvbmVudDogTHV4RXJyb3JQYWdlQ29tcG9uZW50IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE5hdmlnaWVydCB6dXIgRmVobGVya29tcG9uZW50ZSB1bmQgdmVyc3VjaHQgZWluZW4gRmVobGVyXG4gICAqICh3ZW5uIG1pdGdlZ2ViZW4pIHp1IHNpY2hlcm4uXG4gICAqIEBwYXJhbSBlcnJvclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPGFueT5cbiAgICovXG4gIG5hdmlnYXRlVG9FcnJvclBhZ2UoZXJyb3I/OiBJTHV4RXJyb3IpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdGhpcy5lcnJvclN0b3JlLmVycm9yID0gZXJyb3I7XG4gICAgfVxuICAgIGNvbnN0IHsgZXJyb3JQYWdlVXJsLCBza2lwTG9jYXRpb25DaGFuZ2UgfSA9IHRoaXMuZXJyb3JTdG9yZS5jb25maWc7XG4gICAgcmV0dXJuIG9mKHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoZXJyb3JQYWdlVXJsLCB7IHNraXBMb2NhdGlvbkNoYW5nZSB9KSk7XG4gIH1cbn1cbiJdfQ==