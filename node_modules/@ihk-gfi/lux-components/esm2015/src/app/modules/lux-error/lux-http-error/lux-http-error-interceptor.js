import * as tslib_1 from "tslib";
var LuxHttpErrorInterceptor_1;
import { HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ReplaySubject } from 'rxjs';
let LuxHttpErrorInterceptor = LuxHttpErrorInterceptor_1 = class LuxHttpErrorInterceptor {
    constructor() { }
    static dataStream$() {
        return LuxHttpErrorInterceptor_1.dataStream.asObservable();
    }
    intercept(req, next) {
        return next.handle(req).pipe(tap(() => {
            LuxHttpErrorInterceptor_1.dataStream.next([]);
        }, error => {
            if (error instanceof HttpErrorResponse && error.status === 400) {
                LuxHttpErrorInterceptor_1.dataStream.next(error.error.errors);
            }
        }));
    }
};
LuxHttpErrorInterceptor.dataStream = new ReplaySubject(1);
LuxHttpErrorInterceptor = LuxHttpErrorInterceptor_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], LuxHttpErrorInterceptor);
export { LuxHttpErrorInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWh0dHAtZXJyb3ItaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtZXJyb3IvbHV4LWh0dHAtZXJyb3IvbHV4LWh0dHAtZXJyb3ItaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQXdELE1BQU0sc0JBQXNCLENBQUM7QUFDL0csT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdqRCxJQUFhLHVCQUF1QiwrQkFBcEMsTUFBYSx1QkFBdUI7SUFHbEMsZ0JBQWUsQ0FBQztJQUVoQixNQUFNLENBQUMsV0FBVztRQUNoQixPQUFPLHlCQUF1QixDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7UUFDaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsR0FBRyxDQUNELEdBQUcsRUFBRTtZQUNILHlCQUF1QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxFQUNELEtBQUssQ0FBQyxFQUFFO1lBQ04sSUFBSSxLQUFLLFlBQVksaUJBQWlCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQzlELHlCQUF1QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3RDtRQUNILENBQUMsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQXRCUSxrQ0FBVSxHQUF1QixJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQURsRCx1QkFBdUI7SUFEbkMsVUFBVSxFQUFFOztHQUNBLHVCQUF1QixDQXVCbkM7U0F2QlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhIdHRwRXJyb3JJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHN0YXRpYyBkYXRhU3RyZWFtOiBSZXBsYXlTdWJqZWN0PGFueT4gPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgc3RhdGljIGRhdGFTdHJlYW0kKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIEx1eEh0dHBFcnJvckludGVyY2VwdG9yLmRhdGFTdHJlYW0uYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgdGFwKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgTHV4SHR0cEVycm9ySW50ZXJjZXB0b3IuZGF0YVN0cmVhbS5uZXh0KFtdKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlICYmIGVycm9yLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgICBMdXhIdHRwRXJyb3JJbnRlcmNlcHRvci5kYXRhU3RyZWFtLm5leHQoZXJyb3IuZXJyb3IuZXJyb3JzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXX0=