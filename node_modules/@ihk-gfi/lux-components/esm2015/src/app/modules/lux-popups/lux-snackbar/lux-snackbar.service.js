import * as tslib_1 from "tslib";
var LuxSnackbarService_1;
import { Injectable } from '@angular/core';
import { MatSnackBar, MatSnackBarDismiss } from '@angular/material';
import { LuxSnackbarComponent } from './lux-snackbar-component/lux-snackbar.component';
/**
 * Über den LuxSnackbarService können einfach Snackbarinfos angezeigt werden.
 */
let LuxSnackbarService = LuxSnackbarService_1 = class LuxSnackbarService {
    constructor(snackBar) {
        this.snackBar = snackBar;
    }
    /**
     * Diese Methode öffnet eine Snackbar mit einem Text.
     *
     * @param message Ein Text.
     * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
     * muss der Wert 0 angegeben werden.
     * @param actionName Eine Bezeichnung (z.B. Wiederherstellen) für die Action. Dieser Parameter ist optional und
     * muss nicht angegeben werden.
     */
    openText(message, duration, actionName) {
        this.snackBar.open(message, actionName, {
            duration: duration,
            verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
            horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
            panelClass: 'lux-snackbar'
        });
    }
    /**
     * Diese Methode öffnet eine Snackbar, in der die übergebene Komponente angezeigt wird.
     *
     * @param component Die Komponente, die angezeigt werden soll.
     * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
     * muss der Wert 0 angegeben werden.
     * @param data Ein Datenobjekt, das an die Komponente weitergereicht wird. Mit dem Code folgenden Code, können die
     * Daten verwendet werden. constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any).
     */
    openComponent(component, duration = 0, data) {
        this.snackBar.openFromComponent(component, {
            duration: duration,
            data: data,
            verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
            horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
            panelClass: 'lux-snackbar'
        });
    }
    /**
     * Oeffnet eine Snackbar anhand der uebergebenen Konfiguration.
     * Ermoeglicht eine genaue Konfiguration der Snackbar.
     * @param config
     */
    open(duration, config) {
        this.snackBar.openFromComponent(LuxSnackbarComponent, {
            duration: duration,
            data: config,
            verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
            horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
            panelClass: 'lux-snackbar'
        });
    }
    /**
     * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
     * geklickt wird.
     */
    onAction() {
        if (this.snackBar._openedSnackBarRef.instance instanceof LuxSnackbarComponent) {
            return this.snackBar._openedSnackBarRef.instance.onAction();
        }
        return this.snackBar._openedSnackBarRef.onAction();
    }
    /**
     * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
     * geklickt wird.
     */
    afterDismissed() {
        return this.snackBar._openedSnackBarRef.afterDismissed();
    }
    /**
     * Diese Methode blendet die Snackbar aus.
     */
    dismiss() {
        this.snackBar.dismiss();
    }
};
LuxSnackbarService.VERTICAL_POSITION = 'top';
LuxSnackbarService.HORIZONTAL_POSITION = 'end';
LuxSnackbarService.ctorParameters = () => [
    { type: MatSnackBar }
];
LuxSnackbarService = LuxSnackbarService_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [MatSnackBar])
], LuxSnackbarService);
export { LuxSnackbarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXNuYWNrYmFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtcG9wdXBzL2x1eC1zbmFja2Jhci9sdXgtc25hY2tiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBR3ZGOztHQUVHO0FBRUgsSUFBYSxrQkFBa0IsMEJBQS9CLE1BQWEsa0JBQWtCO0lBSTdCLFlBQW9CLFFBQXFCO1FBQXJCLGFBQVEsR0FBUixRQUFRLENBQWE7SUFBRyxDQUFDO0lBRTdDOzs7Ozs7OztPQVFHO0lBQ0ksUUFBUSxDQUFDLE9BQWUsRUFBRSxRQUFnQixFQUFFLFVBQW1CO1FBQ3BFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUU7WUFDdEMsUUFBUSxFQUFFLFFBQVE7WUFDbEIsZ0JBQWdCLEVBQUUsb0JBQWtCLENBQUMsaUJBQWlCO1lBQ3RELGtCQUFrQixFQUFFLG9CQUFrQixDQUFDLG1CQUFtQjtZQUMxRCxVQUFVLEVBQUUsY0FBYztTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxhQUFhLENBQUMsU0FBNkIsRUFBRSxXQUFtQixDQUFDLEVBQUUsSUFBVTtRQUNsRixJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRTtZQUN6QyxRQUFRLEVBQUUsUUFBUTtZQUNsQixJQUFJLEVBQUUsSUFBSTtZQUNWLGdCQUFnQixFQUFFLG9CQUFrQixDQUFDLGlCQUFpQjtZQUN0RCxrQkFBa0IsRUFBRSxvQkFBa0IsQ0FBQyxtQkFBbUI7WUFDMUQsVUFBVSxFQUFFLGNBQWM7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxJQUFJLENBQUMsUUFBZ0IsRUFBRSxNQUEwQjtRQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixFQUFFO1lBQ3BELFFBQVEsRUFBRSxRQUFRO1lBQ2xCLElBQUksRUFBRSxNQUFNO1lBQ1osZ0JBQWdCLEVBQUUsb0JBQWtCLENBQUMsaUJBQWlCO1lBQ3RELGtCQUFrQixFQUFFLG9CQUFrQixDQUFDLG1CQUFtQjtZQUMxRCxVQUFVLEVBQUUsY0FBYztTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksUUFBUTtRQUNiLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLFlBQVksb0JBQW9CLEVBQUU7WUFDN0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUM3RDtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksY0FBYztRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0QsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDMUIsQ0FBQztDQUNGLENBQUE7QUFuRnlCLG9DQUFpQixHQUFHLEtBQUssQ0FBQztBQUMxQixzQ0FBbUIsR0FBRyxLQUFLLENBQUM7O1lBRXRCLFdBQVc7O0FBSjlCLGtCQUFrQjtJQUQ5QixVQUFVLEVBQUU7NkNBS21CLFdBQVc7R0FKOUIsa0JBQWtCLENBb0Y5QjtTQXBGWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTbmFja0JhciwgTWF0U25hY2tCYXJEaXNtaXNzIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTHV4U25hY2tiYXJDb21wb25lbnQgfSBmcm9tICcuL2x1eC1zbmFja2Jhci1jb21wb25lbnQvbHV4LXNuYWNrYmFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMdXhTbmFja2JhckNvbmZpZyB9IGZyb20gJy4vbHV4LXNuYWNrYmFyLWNvbmZpZyc7XG5cbi8qKlxuICogw5xiZXIgZGVuIEx1eFNuYWNrYmFyU2VydmljZSBrw7ZubmVuIGVpbmZhY2ggU25hY2tiYXJpbmZvcyBhbmdlemVpZ3Qgd2VyZGVuLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHV4U25hY2tiYXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVkVSVElDQUxfUE9TSVRJT04gPSAndG9wJztcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSE9SSVpPTlRBTF9QT1NJVElPTiA9ICdlbmQnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc25hY2tCYXI6IE1hdFNuYWNrQmFyKSB7fVxuXG4gIC8qKlxuICAgKiBEaWVzZSBNZXRob2RlIMO2ZmZuZXQgZWluZSBTbmFja2JhciBtaXQgZWluZW0gVGV4dC5cbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2UgRWluIFRleHQuXG4gICAqIEBwYXJhbSBkdXJhdGlvbiBFaW5lIERhdWVyIGluIE1zZWMgKHouQi4gMjAwMCA9IDIgU2VrdW5kZW4pLiBXZW5uIGRpZSBTbmFja2JhciBwZXJtYW5lbnQgYW5nZXplaWd0IHdlcmRlbiBzb2xsLFxuICAgKiBtdXNzIGRlciBXZXJ0IDAgYW5nZWdlYmVuIHdlcmRlbi5cbiAgICogQHBhcmFtIGFjdGlvbk5hbWUgRWluZSBCZXplaWNobnVuZyAoei5CLiBXaWVkZXJoZXJzdGVsbGVuKSBmw7xyIGRpZSBBY3Rpb24uIERpZXNlciBQYXJhbWV0ZXIgaXN0IG9wdGlvbmFsIHVuZFxuICAgKiBtdXNzIG5pY2h0IGFuZ2VnZWJlbiB3ZXJkZW4uXG4gICAqL1xuICBwdWJsaWMgb3BlblRleHQobWVzc2FnZTogc3RyaW5nLCBkdXJhdGlvbjogbnVtYmVyLCBhY3Rpb25OYW1lPzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zbmFja0Jhci5vcGVuKG1lc3NhZ2UsIGFjdGlvbk5hbWUsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIHZlcnRpY2FsUG9zaXRpb246IEx1eFNuYWNrYmFyU2VydmljZS5WRVJUSUNBTF9QT1NJVElPTixcbiAgICAgIGhvcml6b250YWxQb3NpdGlvbjogTHV4U25hY2tiYXJTZXJ2aWNlLkhPUklaT05UQUxfUE9TSVRJT04sXG4gICAgICBwYW5lbENsYXNzOiAnbHV4LXNuYWNrYmFyJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpZXNlIE1ldGhvZGUgw7ZmZm5ldCBlaW5lIFNuYWNrYmFyLCBpbiBkZXIgZGllIMO8YmVyZ2ViZW5lIEtvbXBvbmVudGUgYW5nZXplaWd0IHdpcmQuXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnQgRGllIEtvbXBvbmVudGUsIGRpZSBhbmdlemVpZ3Qgd2VyZGVuIHNvbGwuXG4gICAqIEBwYXJhbSBkdXJhdGlvbiBFaW5lIERhdWVyIGluIE1zZWMgKHouQi4gMjAwMCA9IDIgU2VrdW5kZW4pLiBXZW5uIGRpZSBTbmFja2JhciBwZXJtYW5lbnQgYW5nZXplaWd0IHdlcmRlbiBzb2xsLFxuICAgKiBtdXNzIGRlciBXZXJ0IDAgYW5nZWdlYmVuIHdlcmRlbi5cbiAgICogQHBhcmFtIGRhdGEgRWluIERhdGVub2JqZWt0LCBkYXMgYW4gZGllIEtvbXBvbmVudGUgd2VpdGVyZ2VyZWljaHQgd2lyZC4gTWl0IGRlbSBDb2RlIGZvbGdlbmRlbiBDb2RlLCBrw7ZubmVuIGRpZVxuICAgKiBEYXRlbiB2ZXJ3ZW5kZXQgd2VyZGVuLiBjb25zdHJ1Y3RvcihASW5qZWN0KE1BVF9TTkFDS19CQVJfREFUQSkgcHVibGljIGRhdGE6IGFueSkuXG4gICAqL1xuICBwdWJsaWMgb3BlbkNvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudFR5cGU8YW55PiwgZHVyYXRpb246IG51bWJlciA9IDAsIGRhdGE/OiBhbnkpIHtcbiAgICB0aGlzLnNuYWNrQmFyLm9wZW5Gcm9tQ29tcG9uZW50KGNvbXBvbmVudCwge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHZlcnRpY2FsUG9zaXRpb246IEx1eFNuYWNrYmFyU2VydmljZS5WRVJUSUNBTF9QT1NJVElPTixcbiAgICAgIGhvcml6b250YWxQb3NpdGlvbjogTHV4U25hY2tiYXJTZXJ2aWNlLkhPUklaT05UQUxfUE9TSVRJT04sXG4gICAgICBwYW5lbENsYXNzOiAnbHV4LXNuYWNrYmFyJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9lZmZuZXQgZWluZSBTbmFja2JhciBhbmhhbmQgZGVyIHVlYmVyZ2ViZW5lbiBLb25maWd1cmF0aW9uLlxuICAgKiBFcm1vZWdsaWNodCBlaW5lIGdlbmF1ZSBLb25maWd1cmF0aW9uIGRlciBTbmFja2Jhci5cbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKi9cbiAgcHVibGljIG9wZW4oZHVyYXRpb246IG51bWJlciwgY29uZmlnPzogTHV4U25hY2tiYXJDb25maWcpIHtcbiAgICB0aGlzLnNuYWNrQmFyLm9wZW5Gcm9tQ29tcG9uZW50KEx1eFNuYWNrYmFyQ29tcG9uZW50LCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkYXRhOiBjb25maWcsXG4gICAgICB2ZXJ0aWNhbFBvc2l0aW9uOiBMdXhTbmFja2JhclNlcnZpY2UuVkVSVElDQUxfUE9TSVRJT04sXG4gICAgICBob3Jpem9udGFsUG9zaXRpb246IEx1eFNuYWNrYmFyU2VydmljZS5IT1JJWk9OVEFMX1BPU0lUSU9OLFxuICAgICAgcGFuZWxDbGFzczogJ2x1eC1zbmFja2JhcidcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaWVzZSBNZXRob2RlIGxpZWZlcnQgZWluIE9ic2VydmFibGUgenVyw7xjaywgZGFzIGRlbiBBdWZydWZlciBiZW5hY2hyaWNodGlndCwgd2VubiBkaWUgQWN0aW9uIGluIGRlciBTbmFja2JhclxuICAgKiBnZWtsaWNrdCB3aXJkLlxuICAgKi9cbiAgcHVibGljIG9uQWN0aW9uKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIGlmICh0aGlzLnNuYWNrQmFyLl9vcGVuZWRTbmFja0JhclJlZi5pbnN0YW5jZSBpbnN0YW5jZW9mIEx1eFNuYWNrYmFyQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5zbmFja0Jhci5fb3BlbmVkU25hY2tCYXJSZWYuaW5zdGFuY2Uub25BY3Rpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zbmFja0Jhci5fb3BlbmVkU25hY2tCYXJSZWYub25BY3Rpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaWVzZSBNZXRob2RlIGxpZWZlcnQgZWluIE9ic2VydmFibGUgenVyw7xjaywgZGFzIGRlbiBBdWZydWZlciBiZW5hY2hyaWNodGlndCwgd2VubiBkaWUgQWN0aW9uIGluIGRlciBTbmFja2JhclxuICAgKiBnZWtsaWNrdCB3aXJkLlxuICAgKi9cbiAgcHVibGljIGFmdGVyRGlzbWlzc2VkKCk6IE9ic2VydmFibGU8TWF0U25hY2tCYXJEaXNtaXNzPiB7XG4gICAgcmV0dXJuIHRoaXMuc25hY2tCYXIuX29wZW5lZFNuYWNrQmFyUmVmLmFmdGVyRGlzbWlzc2VkKCk7XG4gIH1cblxuICAvKipcbiAgICogRGllc2UgTWV0aG9kZSBibGVuZGV0IGRpZSBTbmFja2JhciBhdXMuXG4gICAqL1xuICBwdWJsaWMgZGlzbWlzcygpIHtcbiAgICB0aGlzLnNuYWNrQmFyLmRpc21pc3MoKTtcbiAgfVxufVxuIl19