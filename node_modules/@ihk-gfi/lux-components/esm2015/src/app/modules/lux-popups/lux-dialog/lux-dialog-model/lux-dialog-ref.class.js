import * as tslib_1 from "tslib";
import { ReplaySubject } from 'rxjs';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
let LuxDialogRef = class LuxDialogRef {
    constructor() {
        this._dialogConfirmed = new ReplaySubject(1);
        this._dialogDeclined = new ReplaySubject(1);
        this._dialogClosed = new ReplaySubject(1);
    }
    /**
     * Gibt die Component, die in dem Dialog angezeigt wird wieder.
     */
    get componentInstance() {
        return this._matDialogRef.componentInstance;
    }
    /**
     * Damit hier ein Wert abgegeben wird, muss "closeDialog" ein Result mit dem Wert "true" übergeben bekommen.
     */
    get dialogConfirmed() {
        return this._dialogConfirmed.asObservable();
    }
    /**
     * Damit hier ein Wert abgegeben wird, muss "closeDialog" ein Result mit dem Wert "false" übergeben bekommen.
     */
    get dialogDeclined() {
        return this._dialogDeclined.asObservable();
    }
    /**
     * Wird bei Beenden des Dialogs ausgelöst.
     */
    get dialogClosed() {
        return this._dialogClosed.asObservable();
    }
    /**
     * Enthält die Daten für die Dialog-Component.
     */
    get data() {
        return this._data;
    }
    /**
     * (Re-)Initialisiert diese Dialog-Referenz neu.
     * @param matDialogRef
     * @param data
     */
    init(matDialogRef, data) {
        this._matDialogRef = matDialogRef;
        this._dialogConfirmed = new ReplaySubject(1);
        this._dialogDeclined = new ReplaySubject(1);
        this._dialogClosed = new ReplaySubject(1);
        this._data = data;
    }
    /**
     * Schließt den Dialog und gibt nach Beenden die entsprechenden Events aus.
     * @param result
     */
    closeDialog(result) {
        this._matDialogRef.close(result);
        this._matDialogRef.afterClosed().subscribe((dialogResult) => {
            if (dialogResult === true) {
                this._dialogConfirmed.next();
            }
            else if (dialogResult === false) {
                this._dialogDeclined.next();
            }
            this._dialogClosed.next(result);
        });
    }
};
LuxDialogRef.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxDialogRef_Factory() { return new LuxDialogRef(); }, token: LuxDialogRef, providedIn: "root" });
LuxDialogRef = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [])
], LuxDialogRef);
export { LuxDialogRef };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWRpYWxvZy1yZWYuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtcG9wdXBzL2x1eC1kaWFsb2cvbHV4LWRpYWxvZy1tb2RlbC9sdXgtZGlhbG9nLXJlZi5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQyxJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0lBMEN2QjtRQXhDUSxxQkFBZ0IsR0FBd0IsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0Qsb0JBQWUsR0FBd0IsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsa0JBQWEsR0FBdUIsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFzQ2xELENBQUM7SUFuQ2hCOztPQUVHO0lBQ0gsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO0lBQzlDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUlEOzs7O09BSUc7SUFDSCxJQUFJLENBQUMsWUFBK0IsRUFBRSxJQUFTO1FBQzdDLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFdBQVcsQ0FBQyxNQUFZO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBaUIsRUFBRSxFQUFFO1lBQy9ELElBQUksWUFBWSxLQUFLLElBQUksRUFBRTtnQkFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO2FBQzlCO2lCQUFNLElBQUksWUFBWSxLQUFLLEtBQUssRUFBRTtnQkFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUM3QjtZQUNELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7O0FBeEVZLFlBQVk7SUFIeEIsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQzs7R0FDVyxZQUFZLENBd0V4QjtTQXhFWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMdXhEaWFsb2dSZWYge1xuICBwcml2YXRlIF9tYXREaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxhbnk+O1xuICBwcml2YXRlIF9kaWFsb2dDb25maXJtZWQ6IFJlcGxheVN1YmplY3Q8dm9pZD4gPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgcHJpdmF0ZSBfZGlhbG9nRGVjbGluZWQ6IFJlcGxheVN1YmplY3Q8dm9pZD4gPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgcHJpdmF0ZSBfZGlhbG9nQ2xvc2VkOiBSZXBsYXlTdWJqZWN0PGFueT4gPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgcHJpdmF0ZSBfZGF0YTogYW55O1xuXG4gIC8qKlxuICAgKiBHaWJ0IGRpZSBDb21wb25lbnQsIGRpZSBpbiBkZW0gRGlhbG9nIGFuZ2V6ZWlndCB3aXJkIHdpZWRlci5cbiAgICovXG4gIGdldCBjb21wb25lbnRJbnN0YW5jZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9tYXREaWFsb2dSZWYuY29tcG9uZW50SW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogRGFtaXQgaGllciBlaW4gV2VydCBhYmdlZ2ViZW4gd2lyZCwgbXVzcyBcImNsb3NlRGlhbG9nXCIgZWluIFJlc3VsdCBtaXQgZGVtIFdlcnQgXCJ0cnVlXCIgw7xiZXJnZWJlbiBiZWtvbW1lbi5cbiAgICovXG4gIGdldCBkaWFsb2dDb25maXJtZWQoKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2RpYWxvZ0NvbmZpcm1lZC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEYW1pdCBoaWVyIGVpbiBXZXJ0IGFiZ2VnZWJlbiB3aXJkLCBtdXNzIFwiY2xvc2VEaWFsb2dcIiBlaW4gUmVzdWx0IG1pdCBkZW0gV2VydCBcImZhbHNlXCIgw7xiZXJnZWJlbiBiZWtvbW1lbi5cbiAgICovXG4gIGdldCBkaWFsb2dEZWNsaW5lZCgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fZGlhbG9nRGVjbGluZWQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogV2lyZCBiZWkgQmVlbmRlbiBkZXMgRGlhbG9ncyBhdXNnZWzDtnN0LlxuICAgKi9cbiAgZ2V0IGRpYWxvZ0Nsb3NlZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9kaWFsb2dDbG9zZWQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogRW50aMOkbHQgZGllIERhdGVuIGbDvHIgZGllIERpYWxvZy1Db21wb25lbnQuXG4gICAqL1xuICBnZXQgZGF0YSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiAoUmUtKUluaXRpYWxpc2llcnQgZGllc2UgRGlhbG9nLVJlZmVyZW56IG5ldS5cbiAgICogQHBhcmFtIG1hdERpYWxvZ1JlZlxuICAgKiBAcGFyYW0gZGF0YVxuICAgKi9cbiAgaW5pdChtYXREaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxhbnk+LCBkYXRhOiBhbnkpIHtcbiAgICB0aGlzLl9tYXREaWFsb2dSZWYgPSBtYXREaWFsb2dSZWY7XG4gICAgdGhpcy5fZGlhbG9nQ29uZmlybWVkID0gbmV3IFJlcGxheVN1YmplY3QoMSk7XG4gICAgdGhpcy5fZGlhbG9nRGVjbGluZWQgPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgICB0aGlzLl9kaWFsb2dDbG9zZWQgPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2hsaWXDn3QgZGVuIERpYWxvZyB1bmQgZ2lidCBuYWNoIEJlZW5kZW4gZGllIGVudHNwcmVjaGVuZGVuIEV2ZW50cyBhdXMuXG4gICAqIEBwYXJhbSByZXN1bHRcbiAgICovXG4gIGNsb3NlRGlhbG9nKHJlc3VsdD86IGFueSkge1xuICAgIHRoaXMuX21hdERpYWxvZ1JlZi5jbG9zZShyZXN1bHQpO1xuICAgIHRoaXMuX21hdERpYWxvZ1JlZi5hZnRlckNsb3NlZCgpLnN1YnNjcmliZSgoZGlhbG9nUmVzdWx0OiBhbnkpID0+IHtcbiAgICAgIGlmIChkaWFsb2dSZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5fZGlhbG9nQ29uZmlybWVkLm5leHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoZGlhbG9nUmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLl9kaWFsb2dEZWNsaW5lZC5uZXh0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kaWFsb2dDbG9zZWQubmV4dChyZXN1bHQpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=