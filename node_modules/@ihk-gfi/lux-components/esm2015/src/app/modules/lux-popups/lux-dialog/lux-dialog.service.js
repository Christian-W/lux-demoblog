import * as tslib_1 from "tslib";
var LuxDialogService_1;
import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxDialogRef } from './lux-dialog-model/lux-dialog-ref.class';
import { DEFAULT_DIALOG_CONF } from './lux-dialog-model/lux-dialog-config.interface';
import { DEFAULT_DIALOG_PRESET_CONF } from './lux-dialog-model/lux-dialog-preset-config.interface';
import { LuxDialogPresetComponent } from './lux-dialog-preset/lux-dialog-preset.component';
let LuxDialogService = LuxDialogService_1 = class LuxDialogService {
    constructor(matDialog, logger, luxDialogRef) {
        this.matDialog = matDialog;
        this.logger = logger;
        this.luxDialogRef = luxDialogRef;
        this.dialogOpened = false;
    }
    /**
     * Öffnet einen Dialog basierend auf der übergebenen Component und den entsprechenden Daten.
     * @param component
     * @param config
     * @param data
     */
    openComponent(component, config, data) {
        this.handleOpen(component, config, data, DEFAULT_DIALOG_CONF);
        return this.luxDialogRef;
    }
    /**
     * Öffnet einen Dialog basierend auf der LuxDialogComponent und der LuxDialogConfig.
     * @param config
     */
    open(config) {
        // Eine Dialog-Instanz erzeugen, als Data übergeben wir hier noch einmal die Config
        this.handleOpen(LuxDialogPresetComponent, config, config, DEFAULT_DIALOG_PRESET_CONF);
        return this.luxDialogRef;
    }
    /**
     * Prüft ob bereits ein Dialog geöffnet ist und etwaige CSS-Klassen für den Dialog gegeben sind.
     * Anschließend wird der Dialog mit den übergebenen Config-Optionen und Data-Informationen geöffnet.
     * @param component
     * @param config
     * @param data
     * @param defaultConfig
     */
    handleOpen(component, config, data, defaultConfig) {
        if (this.dialogOpened) {
            this.logger.error(LuxDialogService_1.ALREADY_OPENED_ERROR);
            return null;
        }
        // Wenn keine Config übergeben ist, die defaultConfig nehmen
        config = config ? config : defaultConfig;
        // Die CSS-Klassen fürs Panel herausfinden
        const panelClass = ['lux-dialog'];
        if (config.panelClass) {
            if (Array.isArray(config.panelClass)) {
                panelClass.push(...config.panelClass);
            }
            else {
                panelClass.push(config.panelClass);
            }
        }
        // Dialog öffnen und Konfiguration übergeben
        const matDialogRef = this.matDialog.open(component, {
            width: config.width,
            height: config.height,
            autoFocus: false,
            restoreFocus: true,
            disableClose: config.disableClose,
            panelClass: panelClass
        });
        this.luxDialogRef.init(matDialogRef, data);
    }
};
LuxDialogService.ALREADY_OPENED_ERROR = 'Aktuell ist bereits ein Dialog geöffnet';
LuxDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: LuxConsoleService },
    { type: LuxDialogRef }
];
LuxDialogService = LuxDialogService_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [MatDialog, LuxConsoleService, LuxDialogRef])
], LuxDialogService);
export { LuxDialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LXBvcHVwcy9sdXgtZGlhbG9nL2x1eC1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsbUJBQW1CLEVBQW9CLE1BQU0sZ0RBQWdELENBQUM7QUFDdkcsT0FBTyxFQUNMLDBCQUEwQixFQUUzQixNQUFNLHVEQUF1RCxDQUFDO0FBQy9ELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBRzNGLElBQWEsZ0JBQWdCLHdCQUE3QixNQUFhLGdCQUFnQjtJQUszQixZQUFvQixTQUFvQixFQUFVLE1BQXlCLEVBQVUsWUFBMEI7UUFBM0YsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFGdkcsaUJBQVksR0FBWSxLQUFLLENBQUM7SUFFNEUsQ0FBQztJQUVuSDs7Ozs7T0FLRztJQUNILGFBQWEsQ0FBQyxTQUE2QixFQUFFLE1BQXlCLEVBQUUsSUFBVTtRQUNoRixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDOUQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsTUFBK0I7UUFDbEMsbUZBQW1GO1FBQ25GLElBQUksQ0FBQyxVQUFVLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBQ3RGLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNLLFVBQVUsQ0FDaEIsU0FBNkIsRUFDN0IsTUFBd0IsRUFDeEIsSUFBUyxFQUNULGFBQXdEO1FBRXhELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3pELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCw0REFBNEQ7UUFDNUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFekMsMENBQTBDO1FBQzFDLE1BQU0sVUFBVSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3JCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3BDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDdkM7aUJBQU07Z0JBQ0wsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDcEM7U0FDRjtRQUVELDRDQUE0QztRQUM1QyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEQsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1lBQ25CLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtZQUNyQixTQUFTLEVBQUUsS0FBSztZQUNoQixZQUFZLEVBQUUsSUFBSTtZQUNsQixZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVk7WUFDakMsVUFBVSxFQUFFLFVBQVU7U0FDdkIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDRixDQUFBO0FBdkV5QixxQ0FBb0IsR0FBVyx5Q0FBeUMsQ0FBQzs7WUFJbEUsU0FBUztZQUFrQixpQkFBaUI7WUFBd0IsWUFBWTs7QUFMcEcsZ0JBQWdCO0lBRDVCLFVBQVUsRUFBRTs2Q0FNb0IsU0FBUyxFQUFrQixpQkFBaUIsRUFBd0IsWUFBWTtHQUxwRyxnQkFBZ0IsQ0F3RTVCO1NBeEVZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IENvbXBvbmVudFR5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IEx1eENvbnNvbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbHV4LXV0aWwvbHV4LWNvbnNvbGUuc2VydmljZSc7XG5pbXBvcnQgeyBMdXhEaWFsb2dSZWYgfSBmcm9tICcuL2x1eC1kaWFsb2ctbW9kZWwvbHV4LWRpYWxvZy1yZWYuY2xhc3MnO1xuaW1wb3J0IHsgREVGQVVMVF9ESUFMT0dfQ09ORiwgSUx1eERpYWxvZ0NvbmZpZyB9IGZyb20gJy4vbHV4LWRpYWxvZy1tb2RlbC9sdXgtZGlhbG9nLWNvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9ESUFMT0dfUFJFU0VUX0NPTkYsXG4gIElMdXhEaWFsb2dQcmVzZXRDb25maWdcbn0gZnJvbSAnLi9sdXgtZGlhbG9nLW1vZGVsL2x1eC1kaWFsb2ctcHJlc2V0LWNvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTHV4RGlhbG9nUHJlc2V0Q29tcG9uZW50IH0gZnJvbSAnLi9sdXgtZGlhbG9nLXByZXNldC9sdXgtZGlhbG9nLXByZXNldC5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHV4RGlhbG9nU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEFMUkVBRFlfT1BFTkVEX0VSUk9SOiBzdHJpbmcgPSAnQWt0dWVsbCBpc3QgYmVyZWl0cyBlaW4gRGlhbG9nIGdlw7ZmZm5ldCc7XG5cbiAgcHJpdmF0ZSBkaWFsb2dPcGVuZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1hdERpYWxvZzogTWF0RGlhbG9nLCBwcml2YXRlIGxvZ2dlcjogTHV4Q29uc29sZVNlcnZpY2UsIHByaXZhdGUgbHV4RGlhbG9nUmVmOiBMdXhEaWFsb2dSZWYpIHt9XG5cbiAgLyoqXG4gICAqIMOWZmZuZXQgZWluZW4gRGlhbG9nIGJhc2llcmVuZCBhdWYgZGVyIMO8YmVyZ2ViZW5lbiBDb21wb25lbnQgdW5kIGRlbiBlbnRzcHJlY2hlbmRlbiBEYXRlbi5cbiAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqL1xuICBvcGVuQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50VHlwZTxhbnk+LCBjb25maWc/OiBJTHV4RGlhbG9nQ29uZmlnLCBkYXRhPzogYW55KTogTHV4RGlhbG9nUmVmIHtcbiAgICB0aGlzLmhhbmRsZU9wZW4oY29tcG9uZW50LCBjb25maWcsIGRhdGEsIERFRkFVTFRfRElBTE9HX0NPTkYpO1xuICAgIHJldHVybiB0aGlzLmx1eERpYWxvZ1JlZjtcbiAgfVxuXG4gIC8qKlxuICAgKiDDlmZmbmV0IGVpbmVuIERpYWxvZyBiYXNpZXJlbmQgYXVmIGRlciBMdXhEaWFsb2dDb21wb25lbnQgdW5kIGRlciBMdXhEaWFsb2dDb25maWcuXG4gICAqIEBwYXJhbSBjb25maWdcbiAgICovXG4gIG9wZW4oY29uZmlnPzogSUx1eERpYWxvZ1ByZXNldENvbmZpZyk6IEx1eERpYWxvZ1JlZiB7XG4gICAgLy8gRWluZSBEaWFsb2ctSW5zdGFueiBlcnpldWdlbiwgYWxzIERhdGEgw7xiZXJnZWJlbiB3aXIgaGllciBub2NoIGVpbm1hbCBkaWUgQ29uZmlnXG4gICAgdGhpcy5oYW5kbGVPcGVuKEx1eERpYWxvZ1ByZXNldENvbXBvbmVudCwgY29uZmlnLCBjb25maWcsIERFRkFVTFRfRElBTE9HX1BSRVNFVF9DT05GKTtcbiAgICByZXR1cm4gdGhpcy5sdXhEaWFsb2dSZWY7XG4gIH1cblxuICAvKipcbiAgICogUHLDvGZ0IG9iIGJlcmVpdHMgZWluIERpYWxvZyBnZcO2ZmZuZXQgaXN0IHVuZCBldHdhaWdlIENTUy1LbGFzc2VuIGbDvHIgZGVuIERpYWxvZyBnZWdlYmVuIHNpbmQuXG4gICAqIEFuc2NobGllw59lbmQgd2lyZCBkZXIgRGlhbG9nIG1pdCBkZW4gw7xiZXJnZWJlbmVuIENvbmZpZy1PcHRpb25lbiB1bmQgRGF0YS1JbmZvcm1hdGlvbmVuIGdlw7ZmZm5ldC5cbiAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwYXJhbSBkZWZhdWx0Q29uZmlnXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZU9wZW4oXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRUeXBlPGFueT4sXG4gICAgY29uZmlnOiBJTHV4RGlhbG9nQ29uZmlnLFxuICAgIGRhdGE6IGFueSxcbiAgICBkZWZhdWx0Q29uZmlnOiBJTHV4RGlhbG9nQ29uZmlnIHwgSUx1eERpYWxvZ1ByZXNldENvbmZpZ1xuICApIHtcbiAgICBpZiAodGhpcy5kaWFsb2dPcGVuZWQpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKEx1eERpYWxvZ1NlcnZpY2UuQUxSRUFEWV9PUEVORURfRVJST1IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gV2VubiBrZWluZSBDb25maWcgw7xiZXJnZWJlbiBpc3QsIGRpZSBkZWZhdWx0Q29uZmlnIG5laG1lblxuICAgIGNvbmZpZyA9IGNvbmZpZyA/IGNvbmZpZyA6IGRlZmF1bHRDb25maWc7XG5cbiAgICAvLyBEaWUgQ1NTLUtsYXNzZW4gZsO8cnMgUGFuZWwgaGVyYXVzZmluZGVuXG4gICAgY29uc3QgcGFuZWxDbGFzcyA9IFsnbHV4LWRpYWxvZyddO1xuICAgIGlmIChjb25maWcucGFuZWxDbGFzcykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLnBhbmVsQ2xhc3MpKSB7XG4gICAgICAgIHBhbmVsQ2xhc3MucHVzaCguLi5jb25maWcucGFuZWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYW5lbENsYXNzLnB1c2goY29uZmlnLnBhbmVsQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERpYWxvZyDDtmZmbmVuIHVuZCBLb25maWd1cmF0aW9uIMO8YmVyZ2ViZW5cbiAgICBjb25zdCBtYXREaWFsb2dSZWYgPSB0aGlzLm1hdERpYWxvZy5vcGVuKGNvbXBvbmVudCwge1xuICAgICAgd2lkdGg6IGNvbmZpZy53aWR0aCxcbiAgICAgIGhlaWdodDogY29uZmlnLmhlaWdodCxcbiAgICAgIGF1dG9Gb2N1czogZmFsc2UsXG4gICAgICByZXN0b3JlRm9jdXM6IHRydWUsXG4gICAgICBkaXNhYmxlQ2xvc2U6IGNvbmZpZy5kaXNhYmxlQ2xvc2UsXG4gICAgICBwYW5lbENsYXNzOiBwYW5lbENsYXNzXG4gICAgfSk7XG5cbiAgICB0aGlzLmx1eERpYWxvZ1JlZi5pbml0KG1hdERpYWxvZ1JlZiwgZGF0YSk7XG4gIH1cbn1cbiJdfQ==