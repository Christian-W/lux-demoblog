// tslint:disable:max-line-length
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { LuxBehandlungsOptionenUngueltige, LuxLookupParameters } from './lux-lookup-parameters';
import { LuxFormComponentBase } from '../../lux-form/lux-form-model/lux-form-component-base.class';
export class LuxLookupComponent extends LuxFormComponentBase {
    constructor(lookupService, lookupHandler, controlContainer, cdr, logger, componentsConfigService) {
        super(controlContainer, cdr, logger, componentsConfigService);
        this.LuxBehandlungsOptionenUngueltige = LuxBehandlungsOptionenUngueltige;
        this.luxBehandlungUngueltige = LuxBehandlungsOptionenUngueltige.ausgrauen;
        this.luxDataLoaded = new EventEmitter();
        this.luxValueChange = new EventEmitter();
        this.entries = [];
        this.lookupService = lookupService;
        this.lookupHandler = lookupHandler;
        this.componentsConfigService = componentsConfigService;
    }
    get luxValue() {
        return this.getValue();
    }
    set luxValue(value) {
        this.setValue(value);
    }
    ngOnInit() {
        super.ngOnInit();
        if (!this.luxLookupId) {
            console.error(`Die Lookup-Komponente mit der Tabellen-Nr. ${this.luxTableNo} besitzt keine LookupId. Bitte tragen Sie diese nach.`);
        }
        this.lookupHandler.addLookupElement(this.luxLookupId);
        this.lookupHandler.getLookupElementObsv(this.luxLookupId).subscribe(() => {
            this.fetchLookupData();
        });
        this.configSubscription = this.componentsConfigService.config.subscribe((newConfig) => {
            this.apiPath = newConfig.lookupServiceUrl;
            this.lookupHandler.reloadData(this.luxLookupId);
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.configSubscription.unsubscribe();
    }
    /**
     * Gibt zurueck, ob die RenderProperty eine Funktion ist oder nicht.
     *
     * @returns boolean
     */
    isRenderPropAFunction() {
        return typeof this.luxRenderProp === 'function';
    }
    /**
     * Gibt zurück ob sich das entsprechende Element in der Liste ungültiger Elemente befindet.
     * @param LuxLookupTableEntry entry
     * @returns boolean
     */
    isUngueltig(entry) {
        let isUngueltig = false;
        if (entry) {
            if (!Array.isArray(entry)) {
                if (entry.gueltigkeitBis) {
                    isUngueltig = Date.now() > +entry.gueltigkeitBis;
                }
            }
            else {
                entry.forEach(element => {
                    if (element.gueltigkeitBis && !isUngueltig) {
                        isUngueltig = Date.now() > +element.gueltigkeitBis;
                    }
                });
            }
        }
        return isUngueltig;
    }
    /**
     * Gibt zurück ob ungültige Einträge angezeigt werden sollen.
     * @returns boolean
     */
    showUngueltige() {
        return (this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.ausgrauen ||
            this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.anzeigen);
    }
    /**
     * Gibt zurück ob ungültige Einträge deaktiviert werden sollen.
     * @returns boolean
     */
    disableUngueltige() {
        return this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.ausgrauen;
    }
    /**
     * Gibt die mitgegebenen Styles abhaengig ob das Element invalid ist zurueck.
     * @param boolean invalid
     * @returns LuxLookupOptionStyle
     */
    getStyles(invalid) {
        if (invalid) {
            return this.luxCustomInvalidStyles ? this.luxCustomInvalidStyles : {};
        }
        return this.luxCustomStyles ? this.luxCustomStyles : {};
    }
    /**
     * @override errorMessageModifier - Modifikation der Fehlermeldung
     * @param value
     * @param errors
     */
    errorMessageModifier(value, errors) {
        if (errors['ungueltig']) {
            return 'Der ausgewählte Wert ist ungültig.';
        }
        return undefined;
    }
    getLabel(entry) {
        if (this.isRenderPropAFunction()) {
            return this.luxRenderProp(entry);
        }
        if (entry[this.luxRenderProp]) {
            return entry[this.luxRenderProp];
        }
        return 'Fehler beim Auslesen (Property unbekannt)';
    }
    /**
     * Holt die Lookup-Table Daten vom Backend
     */
    fetchLookupData() {
        const backendRequest = this.lookupService.getLookupTable(this.luxTableNo, this.luxParameters, this.apiPath);
        backendRequest.subscribe((entries) => {
            this.setLookupData(entries);
            this.luxDataLoaded.emit(true);
        }, () => {
            this.luxDataLoaded.emit(false);
        });
    }
    /**
     * Setzt die aktuellen Werte auf die mitgegebenen Entries.
     * @param entries
     */
    setLookupData(entries) {
        this.entries = entries;
        if (this.entries) {
            // Merken welche Eintraege ungueltig sind, um bei vielen Informationen
            // nicht die ganzen Funktionsaufrufe zu haben
            this.entries.forEach((entry) => {
                entry.isUngueltig = this.isUngueltig(entry);
            });
        }
    }
    // region Overridden methods
    notifyFormValueChanged(formValue) {
        this.luxValueChange.emit(formValue);
    }
    triggerOutputPatternCheck() {
        this.checkOutputPatternViolation(this.luxValueChange.observers);
    }
    triggerInputPatternCheck(simpleChanges) {
        this.checkInputPatternViolation(simpleChanges.luxValue);
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxLookupComponent.prototype, "luxPlaceholder", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxLookupComponent.prototype, "luxReadonly", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxLookupComponent.prototype, "luxLookupId", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxLookupComponent.prototype, "luxTableNo", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LuxLookupComponent.prototype, "luxRenderProp", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxLookupComponent.prototype, "luxBehandlungUngueltige", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", LuxLookupParameters)
], LuxLookupComponent.prototype, "luxParameters", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LuxLookupComponent.prototype, "luxCustomStyles", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LuxLookupComponent.prototype, "luxCustomInvalidStyles", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxLookupComponent.prototype, "luxTagId", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxLookupComponent.prototype, "luxDataLoaded", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxLookupComponent.prototype, "luxValueChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxLookupComponent.prototype, "luxValue", null);
//# sourceMappingURL=data:application/json;base64,