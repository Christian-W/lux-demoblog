import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
let LuxLookupHandlerService = class LuxLookupHandlerService {
    constructor() {
        this.lookupElements = new Map();
    }
    /**
     * Fügt ein LookupComponent zu der Map hinzu.
     * @param string name
     */
    addLookupElement(name) {
        this.lookupElements.set(name, new Subject());
    }
    /**
     * Gibt das Subject einer LookupComponent als Observable zurück (oder null).
     * @param string name
     * @returns Observable<any> | null
     */
    getLookupElementObsv(name) {
        const lookupEl = this.getLookupElementSubject(name);
        if (lookupEl) {
            return lookupEl.asObservable();
        }
        return null;
    }
    /**
     * Gibt das Subject einer LookupComponent zurück (oder null).
     * @param string name
     * @returns Observable<any> | null
     */
    getLookupElementSubject(name) {
        const lookupEl = this.lookupElements.get(name);
        if (lookupEl) {
            return lookupEl;
        }
        return null;
    }
    /**
     * Stößt das Neuladen von Schlüsseltabellendaten einer LookupComponent an.
     * @param string name
     */
    reloadData(lookupId) {
        const lookupEl = this.getLookupElementSubject(lookupId);
        if (lookupEl) {
            lookupEl.next();
        }
        else {
            console.error('Die Lookup-Komponente ' + lookupId + ' konnte nicht gefunden werden.');
        }
    }
};
LuxLookupHandlerService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], LuxLookupHandlerService);
export { LuxLookupHandlerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWxvb2t1cC1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtbG9va3VwL2x1eC1sb29rdXAtc2VydmljZS9sdXgtbG9va3VwLWhhbmRsZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzNDLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBR2xDO1FBRlEsbUJBQWMsR0FBOEIsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUUvQyxDQUFDO0lBRWhCOzs7T0FHRztJQUNILGdCQUFnQixDQUFDLElBQVk7UUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksT0FBTyxFQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILG9CQUFvQixDQUFDLElBQVk7UUFDL0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDaEM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsdUJBQXVCLENBQUMsSUFBWTtRQUNsQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsVUFBVSxDQUFDLFFBQWdCO1FBQ3pCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RCxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNqQjthQUFNO1lBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxRQUFRLEdBQUcsZ0NBQWdDLENBQUMsQ0FBQztTQUN2RjtJQUNILENBQUM7Q0FDRixDQUFBO0FBbkRZLHVCQUF1QjtJQURuQyxVQUFVLEVBQUU7O0dBQ0EsdUJBQXVCLENBbURuQztTQW5EWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhMb29rdXBIYW5kbGVyU2VydmljZSB7XG4gIHByaXZhdGUgbG9va3VwRWxlbWVudHM6IE1hcDxzdHJpbmcsIFN1YmplY3Q8YW55Pj4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBGw7xndCBlaW4gTG9va3VwQ29tcG9uZW50IHp1IGRlciBNYXAgaGluenUuXG4gICAqIEBwYXJhbSBzdHJpbmcgbmFtZVxuICAgKi9cbiAgYWRkTG9va3VwRWxlbWVudChuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmxvb2t1cEVsZW1lbnRzLnNldChuYW1lLCBuZXcgU3ViamVjdDxib29sZWFuPigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaWJ0IGRhcyBTdWJqZWN0IGVpbmVyIExvb2t1cENvbXBvbmVudCBhbHMgT2JzZXJ2YWJsZSB6dXLDvGNrIChvZGVyIG51bGwpLlxuICAgKiBAcGFyYW0gc3RyaW5nIG5hbWVcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxhbnk+IHwgbnVsbFxuICAgKi9cbiAgZ2V0TG9va3VwRWxlbWVudE9ic3YobmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHwgbnVsbCB7XG4gICAgY29uc3QgbG9va3VwRWwgPSB0aGlzLmdldExvb2t1cEVsZW1lbnRTdWJqZWN0KG5hbWUpO1xuICAgIGlmIChsb29rdXBFbCkge1xuICAgICAgcmV0dXJuIGxvb2t1cEVsLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaWJ0IGRhcyBTdWJqZWN0IGVpbmVyIExvb2t1cENvbXBvbmVudCB6dXLDvGNrIChvZGVyIG51bGwpLlxuICAgKiBAcGFyYW0gc3RyaW5nIG5hbWVcbiAgICogQHJldHVybnMgT2JzZXJ2YWJsZTxhbnk+IHwgbnVsbFxuICAgKi9cbiAgZ2V0TG9va3VwRWxlbWVudFN1YmplY3QobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbG9va3VwRWwgPSB0aGlzLmxvb2t1cEVsZW1lbnRzLmdldChuYW1lKTtcbiAgICBpZiAobG9va3VwRWwpIHtcbiAgICAgIHJldHVybiBsb29rdXBFbDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogU3TDtsOfdCBkYXMgTmV1bGFkZW4gdm9uIFNjaGzDvHNzZWx0YWJlbGxlbmRhdGVuIGVpbmVyIExvb2t1cENvbXBvbmVudCBhbi5cbiAgICogQHBhcmFtIHN0cmluZyBuYW1lXG4gICAqL1xuICByZWxvYWREYXRhKGxvb2t1cElkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsb29rdXBFbCA9IHRoaXMuZ2V0TG9va3VwRWxlbWVudFN1YmplY3QobG9va3VwSWQpO1xuICAgIGlmIChsb29rdXBFbCkge1xuICAgICAgbG9va3VwRWwubmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEaWUgTG9va3VwLUtvbXBvbmVudGUgJyArIGxvb2t1cElkICsgJyBrb25udGUgbmljaHQgZ2VmdW5kZW4gd2VyZGVuLicpO1xuICAgIH1cbiAgfVxufVxuIl19