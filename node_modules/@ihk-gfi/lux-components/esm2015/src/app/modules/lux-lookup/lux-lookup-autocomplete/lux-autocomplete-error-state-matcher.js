import { LuxLookupErrorStateMatcher } from '../lux-lookup-model/lux-lookup-error-state-matcher';
export class LuxAutocompleteErrorStateMatcher extends LuxLookupErrorStateMatcher {
    constructor(lookupComponent, entries) {
        super(lookupComponent);
        this.entries = [];
        this.entries = entries;
    }
    isErrorState(control, form) {
        if (control && typeof control.value === 'string' && control.value.length > 0) {
            if (!control.errors || !control.errors.noResult) {
                setTimeout(() => {
                    control.setErrors({ noResult: true });
                });
            }
            return true;
        }
        return super.isErrorState(control, form);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWF1dG9jb21wbGV0ZS1lcnJvci1zdGF0ZS1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWxvb2t1cC9sdXgtbG9va3VwLWF1dG9jb21wbGV0ZS9sdXgtYXV0b2NvbXBsZXRlLWVycm9yLXN0YXRlLW1hdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFFaEcsTUFBTSxPQUFPLGdDQUFpQyxTQUFRLDBCQUEwQjtJQUc5RSxZQUFZLGVBQW1DLEVBQUUsT0FBOEI7UUFDN0UsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSHpCLFlBQU8sR0FBMEIsRUFBRSxDQUFDO1FBS2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxZQUFZLENBQUMsT0FBMkIsRUFBRSxJQUF3QztRQUNoRixJQUFJLE9BQU8sSUFBSSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1RSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUMvQyxVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDeEMsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXBEaXJlY3RpdmUsIE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEx1eExvb2t1cENvbXBvbmVudCB9IGZyb20gJy4uL2x1eC1sb29rdXAtbW9kZWwvbHV4LWxvb2t1cC1jb21wb25lbnQnO1xuaW1wb3J0IHsgTHV4TG9va3VwVGFibGVFbnRyeSB9IGZyb20gJy4uL2x1eC1sb29rdXAtbW9kZWwvbHV4LWxvb2t1cC10YWJsZS1lbnRyeSc7XG5pbXBvcnQgeyBMdXhMb29rdXBFcnJvclN0YXRlTWF0Y2hlciB9IGZyb20gJy4uL2x1eC1sb29rdXAtbW9kZWwvbHV4LWxvb2t1cC1lcnJvci1zdGF0ZS1tYXRjaGVyJztcblxuZXhwb3J0IGNsYXNzIEx1eEF1dG9jb21wbGV0ZUVycm9yU3RhdGVNYXRjaGVyIGV4dGVuZHMgTHV4TG9va3VwRXJyb3JTdGF0ZU1hdGNoZXIge1xuICBlbnRyaWVzOiBMdXhMb29rdXBUYWJsZUVudHJ5W10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihsb29rdXBDb21wb25lbnQ6IEx1eExvb2t1cENvbXBvbmVudCwgZW50cmllczogTHV4TG9va3VwVGFibGVFbnRyeVtdKSB7XG4gICAgc3VwZXIobG9va3VwQ29tcG9uZW50KTtcblxuICAgIHRoaXMuZW50cmllcyA9IGVudHJpZXM7XG4gIH1cblxuICBpc0Vycm9yU3RhdGUoY29udHJvbDogRm9ybUNvbnRyb2wgfCBudWxsLCBmb3JtOiBGb3JtR3JvdXBEaXJlY3RpdmUgfCBOZ0Zvcm0gfCBudWxsKTogYm9vbGVhbiB7XG4gICAgaWYgKGNvbnRyb2wgJiYgdHlwZW9mIGNvbnRyb2wudmFsdWUgPT09ICdzdHJpbmcnICYmIGNvbnRyb2wudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCFjb250cm9sLmVycm9ycyB8fCAhY29udHJvbC5lcnJvcnMubm9SZXN1bHQpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY29udHJvbC5zZXRFcnJvcnMoeyBub1Jlc3VsdDogdHJ1ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuaXNFcnJvclN0YXRlKGNvbnRyb2wsIGZvcm0pO1xuICB9XG59XG4iXX0=