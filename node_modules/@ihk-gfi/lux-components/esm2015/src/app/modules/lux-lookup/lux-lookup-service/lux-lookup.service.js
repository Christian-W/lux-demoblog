import * as tslib_1 from "tslib";
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
let LuxLookupService = class LuxLookupService {
    constructor(http) {
        this.http = http;
    }
    /**
     * Liefert die Eintraege einer Schluesseltabelle.
     *
     * @param tableNo
     * @param parameters
     * @param url
     * @returns Observable<LuxLookupTableEntry[]>
     */
    getLookupTable(tableNo, parameters, url) {
        const httpParameters = this.generateParameters(parameters);
        return this.http.get(url + 'getLookupTable/' + tableNo, { params: httpParameters });
    }
    /**
     * Generiert die Standard-Parameter fuer einen Lookup-Request.
     *
     * @param parameters
     * @returns HttpParams
     */
    generateParameters(parameters) {
        let httpParameters = new HttpParams();
        httpParameters = httpParameters.append('knr', '' + parameters.knr);
        httpParameters = httpParameters.append('raw', '' + parameters.raw);
        if (parameters.keys && parameters.keys.length > 0) {
            parameters.keys.forEach((key) => {
                httpParameters = httpParameters.append('keys', key);
            });
        }
        if (parameters.fields && parameters.fields.length > 0) {
            parameters.fields.forEach((field) => {
                httpParameters = httpParameters.append('fields', field);
            });
        }
        return httpParameters;
    }
};
LuxLookupService.ctorParameters = () => [
    { type: HttpClient }
];
LuxLookupService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], LuxLookupService);
export { LuxLookupService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWxvb2t1cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWxvb2t1cC9sdXgtbG9va3VwLXNlcnZpY2UvbHV4LWxvb2t1cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNM0MsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFDM0IsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFHLENBQUM7SUFFeEM7Ozs7Ozs7T0FPRztJQUNILGNBQWMsQ0FBQyxPQUFlLEVBQUUsVUFBK0IsRUFBRSxHQUFXO1FBQzFFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF3QixHQUFHLEdBQUcsaUJBQWlCLEdBQUcsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssa0JBQWtCLENBQUMsVUFBK0I7UUFDeEQsSUFBSSxjQUFjLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUN0QyxjQUFjLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRSxjQUFjLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVuRSxJQUFJLFVBQVUsQ0FBQyxJQUFJLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pELFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ3RDLGNBQWMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRCxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFO2dCQUMxQyxjQUFjLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDMUQsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7Q0FDRixDQUFBOztZQXhDMkIsVUFBVTs7QUFEekIsZ0JBQWdCO0lBRDVCLFVBQVUsRUFBRTs2Q0FFZSxVQUFVO0dBRHpCLGdCQUFnQixDQXlDNUI7U0F6Q1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEx1eExvb2t1cFBhcmFtZXRlcnMgfSBmcm9tICcuLi9sdXgtbG9va3VwLW1vZGVsL2x1eC1sb29rdXAtcGFyYW1ldGVycyc7XG5pbXBvcnQgeyBMdXhMb29rdXBUYWJsZUVudHJ5IH0gZnJvbSAnLi4vbHV4LWxvb2t1cC1tb2RlbC9sdXgtbG9va3VwLXRhYmxlLWVudHJ5JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1eExvb2t1cFNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHt9XG5cbiAgLyoqXG4gICAqIExpZWZlcnQgZGllIEVpbnRyYWVnZSBlaW5lciBTY2hsdWVzc2VsdGFiZWxsZS5cbiAgICpcbiAgICogQHBhcmFtIHRhYmxlTm9cbiAgICogQHBhcmFtIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHVybFxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPEx1eExvb2t1cFRhYmxlRW50cnlbXT5cbiAgICovXG4gIGdldExvb2t1cFRhYmxlKHRhYmxlTm86IHN0cmluZywgcGFyYW1ldGVyczogTHV4TG9va3VwUGFyYW1ldGVycywgdXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEx1eExvb2t1cFRhYmxlRW50cnlbXT4ge1xuICAgIGNvbnN0IGh0dHBQYXJhbWV0ZXJzID0gdGhpcy5nZW5lcmF0ZVBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8THV4TG9va3VwVGFibGVFbnRyeVtdPih1cmwgKyAnZ2V0TG9va3VwVGFibGUvJyArIHRhYmxlTm8sIHsgcGFyYW1zOiBodHRwUGFyYW1ldGVycyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmllcnQgZGllIFN0YW5kYXJkLVBhcmFtZXRlciBmdWVyIGVpbmVuIExvb2t1cC1SZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xuICAgKiBAcmV0dXJucyBIdHRwUGFyYW1zXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlUGFyYW1ldGVycyhwYXJhbWV0ZXJzOiBMdXhMb29rdXBQYXJhbWV0ZXJzKTogSHR0cFBhcmFtcyB7XG4gICAgbGV0IGh0dHBQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICBodHRwUGFyYW1ldGVycyA9IGh0dHBQYXJhbWV0ZXJzLmFwcGVuZCgna25yJywgJycgKyBwYXJhbWV0ZXJzLmtucik7XG4gICAgaHR0cFBhcmFtZXRlcnMgPSBodHRwUGFyYW1ldGVycy5hcHBlbmQoJ3JhdycsICcnICsgcGFyYW1ldGVycy5yYXcpO1xuXG4gICAgaWYgKHBhcmFtZXRlcnMua2V5cyAmJiBwYXJhbWV0ZXJzLmtleXMubGVuZ3RoID4gMCkge1xuICAgICAgcGFyYW1ldGVycy5rZXlzLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGh0dHBQYXJhbWV0ZXJzID0gaHR0cFBhcmFtZXRlcnMuYXBwZW5kKCdrZXlzJywga2V5KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwYXJhbWV0ZXJzLmZpZWxkcyAmJiBwYXJhbWV0ZXJzLmZpZWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJhbWV0ZXJzLmZpZWxkcy5mb3JFYWNoKChmaWVsZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGh0dHBQYXJhbWV0ZXJzID0gaHR0cFBhcmFtZXRlcnMuYXBwZW5kKCdmaWVsZHMnLCBmaWVsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHR0cFBhcmFtZXRlcnM7XG4gIH1cbn1cbiJdfQ==