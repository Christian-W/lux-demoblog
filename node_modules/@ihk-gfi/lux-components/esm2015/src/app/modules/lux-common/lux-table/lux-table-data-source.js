import { MatTableDataSource } from '@angular/material';
/**
 * Diese Ableitung berücksichtigt bei der Sortierung Sonderzeichen (z.B. öäüßé,...)
 * und ignoriert die Groß- und Kleinschreibung.
 */
export class LuxTableDataSource extends MatTableDataSource {
    constructor() {
        super(...arguments);
        this.selectedEntries = new Set();
    }
    /**
     * Diese Methode liefert eine sortierte Kopie des Datenarrays zurück.
     * Die Sortierung berücksichtig ist nicht Case-Sensitive und berücksichtig
     * Sonderzeichen (z.B. öäüßé,...)
     */
    _orderData(data) {
        const _this = this;
        if (!this.sort || !this.sort.active || this.sort.direction === '') {
            return data;
        }
        const active = this.sort.active;
        const direction = this.sort.direction;
        if (active === 'multiSelect') {
            // muss checken welche in dem sorted array sind und alle anderen darunter
            const selected = data.filter(value => this.selectedEntries.has(value));
            const notSelected = data.filter(value => !selected.some(selectedValue => selectedValue === value));
            if (direction === 'asc') {
                return [...selected, ...notSelected];
            }
            else if (direction === 'desc') {
                return [...notSelected, ...selected];
            }
            else {
                return data.slice();
            }
        }
        return data.slice().sort((a, b) => {
            let valueA = _this.sortingDataAccessor(a, active);
            let valueB = _this.sortingDataAccessor(b, active);
            if (!valueA) {
                valueA = '';
            }
            if (!valueB) {
                valueB = '';
            }
            if (typeof valueA === 'number' && typeof valueB === 'string') {
                valueA = '' + valueA;
            }
            if (typeof valueA === 'string' && typeof valueB === 'number') {
                valueB = '' + valueB;
            }
            if (typeof valueA === 'string' && typeof valueB === 'string') {
                const stringA = valueA.toLocaleLowerCase();
                const stringB = valueB.toLocaleLowerCase();
                return stringA.localeCompare(stringB) * (direction === 'asc' ? 1 : -1);
            }
            return (valueA < valueB ? -1 : 1) * (direction === 'asc' ? 1 : -1);
        });
    }
    /**
     * Override update paginator method
     * to ensure total unfiltered element count is consistent with the http result
     */
    _updatePaginator(filteredDataLength) {
        if (this.filter === '') {
            super._updatePaginator(this.totalElements);
        }
        else {
            super._updatePaginator(filteredDataLength);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXRhYmxlLWRhdGEtc291cmNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWNvbW1vbi9sdXgtdGFibGUvbHV4LXRhYmxlLWRhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXZEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxrQkFBc0IsU0FBUSxrQkFBcUI7SUFBaEU7O1FBRUUsb0JBQWUsR0FBYSxJQUFJLEdBQUcsRUFBTyxDQUFDO0lBdUU3QyxDQUFDO0lBckVDOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsSUFBUztRQUNsQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxFQUFFLEVBQUU7WUFDakUsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBRXRDLElBQUksTUFBTSxLQUFLLGFBQWEsRUFBRTtZQUM1Qix5RUFBeUU7WUFDekUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDdkUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGFBQWEsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRW5HLElBQUksU0FBUyxLQUFLLEtBQUssRUFBRTtnQkFDdkIsT0FBTyxDQUFDLEdBQUcsUUFBUSxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUM7YUFDdEM7aUJBQU0sSUFBSSxTQUFTLEtBQUssTUFBTSxFQUFFO2dCQUMvQixPQUFPLENBQUMsR0FBRyxXQUFXLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQzthQUN0QztpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNyQjtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hDLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDbEQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUVsRCxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNYLE1BQU0sR0FBRyxFQUFFLENBQUM7YUFDYjtZQUVELElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsTUFBTSxHQUFHLEVBQUUsQ0FBQzthQUNiO1lBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUM1RCxNQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQzthQUN0QjtZQUVELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtnQkFDNUQsTUFBTSxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7YUFDdEI7WUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQzVELE1BQU0sT0FBTyxHQUFJLE1BQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDdkQsTUFBTSxPQUFPLEdBQUksTUFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUN2RCxPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEU7WUFFRCxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGdCQUFnQixDQUFDLGtCQUEwQjtRQUNoRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ3RCLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDNUM7YUFBTTtZQUNMLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF0VGFibGVEYXRhU291cmNlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG4vKipcbiAqIERpZXNlIEFibGVpdHVuZyBiZXLDvGNrc2ljaHRpZ3QgYmVpIGRlciBTb3J0aWVydW5nIFNvbmRlcnplaWNoZW4gKHouQi4gw7bDpMO8w5/DqSwuLi4pXG4gKiB1bmQgaWdub3JpZXJ0IGRpZSBHcm/Dny0gdW5kIEtsZWluc2NocmVpYnVuZy5cbiAqL1xuZXhwb3J0IGNsYXNzIEx1eFRhYmxlRGF0YVNvdXJjZTxUPiBleHRlbmRzIE1hdFRhYmxlRGF0YVNvdXJjZTxUPiB7XG4gIHRvdGFsRWxlbWVudHM6IG51bWJlcjtcbiAgc2VsZWN0ZWRFbnRyaWVzOiBTZXQ8YW55PiA9IG5ldyBTZXQ8YW55PigpO1xuXG4gIC8qKlxuICAgKiBEaWVzZSBNZXRob2RlIGxpZWZlcnQgZWluZSBzb3J0aWVydGUgS29waWUgZGVzIERhdGVuYXJyYXlzIHp1csO8Y2suXG4gICAqIERpZSBTb3J0aWVydW5nIGJlcsO8Y2tzaWNodGlnIGlzdCBuaWNodCBDYXNlLVNlbnNpdGl2ZSB1bmQgYmVyw7xja3NpY2h0aWdcbiAgICogU29uZGVyemVpY2hlbiAoei5CLiDDtsOkw7zDn8OpLC4uLilcbiAgICovXG4gIF9vcmRlckRhdGEoZGF0YTogVFtdKTogVFtdIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKCF0aGlzLnNvcnQgfHwgIXRoaXMuc29ydC5hY3RpdmUgfHwgdGhpcy5zb3J0LmRpcmVjdGlvbiA9PT0gJycpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuc29ydC5hY3RpdmU7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5zb3J0LmRpcmVjdGlvbjtcblxuICAgIGlmIChhY3RpdmUgPT09ICdtdWx0aVNlbGVjdCcpIHtcbiAgICAgIC8vIG11c3MgY2hlY2tlbiB3ZWxjaGUgaW4gZGVtIHNvcnRlZCBhcnJheSBzaW5kIHVuZCBhbGxlIGFuZGVyZW4gZGFydW50ZXJcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gZGF0YS5maWx0ZXIodmFsdWUgPT4gdGhpcy5zZWxlY3RlZEVudHJpZXMuaGFzKHZhbHVlKSk7XG4gICAgICBjb25zdCBub3RTZWxlY3RlZCA9IGRhdGEuZmlsdGVyKHZhbHVlID0+ICFzZWxlY3RlZC5zb21lKHNlbGVjdGVkVmFsdWUgPT4gc2VsZWN0ZWRWYWx1ZSA9PT0gdmFsdWUpKTtcblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2FzYycpIHtcbiAgICAgICAgcmV0dXJuIFsuLi5zZWxlY3RlZCwgLi4ubm90U2VsZWN0ZWRdO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkZXNjJykge1xuICAgICAgICByZXR1cm4gWy4uLm5vdFNlbGVjdGVkLCAuLi5zZWxlY3RlZF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGF0YS5zbGljZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhLnNsaWNlKCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgbGV0IHZhbHVlQSA9IF90aGlzLnNvcnRpbmdEYXRhQWNjZXNzb3IoYSwgYWN0aXZlKTtcbiAgICAgIGxldCB2YWx1ZUIgPSBfdGhpcy5zb3J0aW5nRGF0YUFjY2Vzc29yKGIsIGFjdGl2ZSk7XG5cbiAgICAgIGlmICghdmFsdWVBKSB7XG4gICAgICAgIHZhbHVlQSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXZhbHVlQikge1xuICAgICAgICB2YWx1ZUIgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZUEgPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZUIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhbHVlQSA9ICcnICsgdmFsdWVBO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlQSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlQiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFsdWVCID0gJycgKyB2YWx1ZUI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWVBID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWVCID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBzdHJpbmdBID0gKHZhbHVlQSBhcyBzdHJpbmcpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IHN0cmluZ0IgPSAodmFsdWVCIGFzIHN0cmluZykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ0EubG9jYWxlQ29tcGFyZShzdHJpbmdCKSAqIChkaXJlY3Rpb24gPT09ICdhc2MnID8gMSA6IC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICh2YWx1ZUEgPCB2YWx1ZUIgPyAtMSA6IDEpICogKGRpcmVjdGlvbiA9PT0gJ2FzYycgPyAxIDogLTEpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHVwZGF0ZSBwYWdpbmF0b3IgbWV0aG9kXG4gICAqIHRvIGVuc3VyZSB0b3RhbCB1bmZpbHRlcmVkIGVsZW1lbnQgY291bnQgaXMgY29uc2lzdGVudCB3aXRoIHRoZSBodHRwIHJlc3VsdFxuICAgKi9cbiAgcHVibGljIF91cGRhdGVQYWdpbmF0b3IoZmlsdGVyZWREYXRhTGVuZ3RoOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5maWx0ZXIgPT09ICcnKSB7XG4gICAgICBzdXBlci5fdXBkYXRlUGFnaW5hdG9yKHRoaXMudG90YWxFbGVtZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLl91cGRhdGVQYWdpbmF0b3IoZmlsdGVyZWREYXRhTGVuZ3RoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==