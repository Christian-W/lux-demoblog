import * as tslib_1 from "tslib";
var LuxTableComponent_1;
// tslint:disable:member-ordering
import { Component, ContentChildren, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild } from '@angular/core';
import { MatPaginator, MatPaginatorIntl, MatSort } from '@angular/material';
import { LuxTableDataSource } from './lux-table-data-source';
import { of, Subject } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';
import { LuxUtil } from '../../lux-util/lux-util';
import { LuxPaginatorIntl } from '../../lux-util/lux-paginator-intl';
import { LuxMediaQueryObserverService } from '../../lux-util/lux-media-query-observer.service';
import { LuxTableColumnComponent } from './lux-table-subcomponents/lux-table-column.component';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
let LuxTableComponent = LuxTableComponent_1 = class LuxTableComponent {
    // endregion
    constructor(queryObserver, luxConsole, liveAnnouncer) {
        this.queryObserver = queryObserver;
        this.luxConsole = luxConsole;
        this.liveAnnouncer = liveAnnouncer;
        this._luxClasses = [];
        this._luxShowPagination = false;
        this._dataColumnDefs = [];
        this._luxShowFilter = false;
        this._dataSource = new LuxTableDataSource([]);
        this._luxPickValue = o => o;
        this._luxCompareWith = (o1, o2) => o1 === o2;
        this.httpRequestConf = {};
        this.columnSubscriptions = [];
        this.filtered$ = new Subject();
        this.currentCustomClasses = [];
        this.isIE = false;
        this.movedTableColumns = [];
        this.luxColWidthsPercent = [];
        this.luxFilterText = 'Filter';
        this.luxNoDataText = 'Keine Daten gefunden.';
        this.luxPageSize = 10;
        this.luxPageSizeOptions = [5, 10, 25, 50];
        this.luxMinWidthPx = -1;
        this.luxAutoPaginate = true;
        this.luxHideBorders = false;
        this.luxSelectedChange = new EventEmitter();
        this._luxSelected = new Set();
        /**
         * Eigene Implementierung der Filterung für diese Tabelle.
         * Iteriert über die Values des einzelnen Objektes und prüft dann ob der Filter-Wert irgendwo vorkommt.
         * @param data
         * @param filter
         */
        this.customFilterPredicate = (data, filter = '') => {
            for (const property in data) {
                if (data.hasOwnProperty(property)) {
                    const dataEntry = data[property];
                    if (LuxUtil.isDate(dataEntry)) {
                        if (dataEntry
                            .toLocaleString()
                            .toLowerCase()
                            .indexOf(filter) > -1) {
                            return true;
                        }
                    }
                    else {
                        if ((dataEntry + '').toLowerCase().indexOf(filter) > -1) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        // Datasource um eigene Filter-Funktionalitaet ergaenzen
        this.dataSource.filterPredicate = this.customFilterPredicate;
        this.isIE = LuxUtil.isIEorEdge();
        this.mediaQuerySubscription = this.queryObserver.getMediaQueryChangedAsObservable().subscribe((query) => {
            this.mediaQuery = query;
            this.updateColumnsByMediaQuery();
        });
    }
    // region Setter/Getters
    get luxClasses() {
        return this._luxClasses;
    }
    set luxClasses(classes) {
        if (classes && !Array.isArray(classes)) {
            classes = [classes];
        }
        this._luxClasses = classes;
        this.insertCustomCSSClasses();
    }
    get luxShowPagination() {
        return this._luxShowPagination;
    }
    set luxShowPagination(show) {
        this._luxShowPagination = show;
        setTimeout(() => {
            this.handlePagination();
        });
    }
    get luxShowFilter() {
        return this._luxShowFilter;
    }
    set luxShowFilter(show) {
        this._luxShowFilter = show;
        this.handleFilter();
    }
    get dataColumnDefs() {
        return this._dataColumnDefs;
    }
    get dataSource() {
        return this._dataSource;
    }
    get luxData() {
        return this.dataSource.data;
    }
    set luxData(data) {
        data = data ? data : [];
        this.dataSource.data = data;
        if (this.dataSource) {
            setTimeout(() => {
                this.updateDataSourceAttributes(data);
                this.handleSort();
                this.insertCustomCSSClasses();
                this.updateColumnsByMediaQuery();
                this.calculateProportions();
                this.updateSelection();
            });
        }
    }
    get luxMultiSelect() {
        return this._luxMultiSelect;
    }
    set luxMultiSelect(multiSelect) {
        this._luxMultiSelect = multiSelect;
        if (this.luxMultiSelect) {
            this.luxSelected.clear();
            this._dataColumnDefs.unshift('multiSelect');
        }
        else {
            this._dataColumnDefs = this._dataColumnDefs.filter((col) => col !== 'multiSelect');
        }
        setTimeout(() => {
            this.calculateProportions();
        });
    }
    get luxSelected() {
        return this._luxSelected;
    }
    /**
     * Die Auswahl der Selektierten Elemente ist eigentlich ein Set,
     * nimmt aber Arrays von Außen entgegen (zur Vereinfachung).
     * @param selected
     */
    set luxSelected(selected) {
        this.luxSelected.clear();
        if (selected) {
            selected.forEach(entry => {
                this.luxSelected.add(entry);
            });
        }
        if (this.luxData && this.luxData.length > 0) {
            this.updateSelection();
        }
    }
    get luxPickValue() {
        return this._luxPickValue;
    }
    // Funktion, um den zu vergleichenden Wert aus den einzelnen Objekten zu ziehen.
    // Standardmäßig einfach das Objekt zurückgeben.
    set luxPickValue(pickFn) {
        this._luxPickValue = pickFn ? pickFn : o => o;
    }
    get luxCompareWith() {
        return this._luxCompareWith;
    }
    // Vergleichsfunktion; vergleicht standardmäßig einfach die Referenzen der beiden Objekte.
    set luxCompareWith(compareFn) {
        this._luxCompareWith = compareFn ? compareFn : (o1, o2) => o1 === o2;
    }
    ngOnInit() {
        setTimeout(() => {
            if (this.luxHttpDAO) {
                this.loadHttpDAOData();
            }
            else {
                this.updateDataSourceAttributes(this.luxData);
                this.handleSort();
                this.insertCustomCSSClasses();
            }
        });
    }
    ngAfterViewInit() {
        if (this.tableColumns) {
            // Für den Fall das Spalten wegfallen/dazu kommen
            this.tableColumnsChangedSubscription = this.tableColumns.changes.subscribe(() => {
                this.updateColumnsByMediaQuery();
                this.updateColumnSubscriptions();
            });
            // Für den Fall das sich Änderungen innerhalb der Spalten ergeben
            this.updateColumnSubscriptions();
            // Nach dem Init sollten einmal die Spalten aktualisiert werden
            setTimeout(() => {
                this.updateColumnsByMediaQuery();
            });
        }
        if (this.luxShowPagination) {
            this.handlePagination();
        }
    }
    ngDoCheck() {
        if (this.tableContainerElement.nativeElement.offsetWidth !== this.previousWidth ||
            this.tableContainerElement.nativeElement.offsetHeight !== this.previousHeight) {
            this.previousWidth = this.tableContainerElement.nativeElement.offsetWidth;
            this.previousHeight = this.tableContainerElement.nativeElement.offsetHeight;
            this.calculateProportions();
        }
    }
    ngOnDestroy() {
        // Subscriptions auflösen
        this.columnSubscriptions.forEach((subscription) => {
            subscription.unsubscribe();
        });
        if (this.httpDaoSubscription) {
            this.httpDaoSubscription.unsubscribe();
        }
        if (this.filterChangedSubscription) {
            this.filterChangedSubscription.unsubscribe();
        }
        if (this.tableColumnsChangedSubscription) {
            this.tableColumnsChangedSubscription.unsubscribe();
        }
        if (this.sortChangedSubscription) {
            this.sortChangedSubscription.unsubscribe();
        }
        if (this.paginatorPageSubscription) {
            this.paginatorPageSubscription.unsubscribe();
        }
        if (this.selectedSubscription) {
            this.selectedSubscription.unsubscribe();
        }
    }
    /**
     * Zieht sich die aktuellen CSS-Klassen aus den zugewiesenen
     * CSS-Klassen.
     * @param row
     * @returns string
     */
    getCustomClassesForIndex(row) {
        const customClasses = this.currentCustomClasses.find(value => value.entry === row);
        return customClasses ? customClasses.classes : '';
    }
    /**
     * TrackBy-Funktion um die Tabelle etwas schneller zu machen.
     * @param index
     * @param item
     */
    trackFn(index, item) {
        return index;
    }
    /**
     * Wird beim Klick auf eine Row aufgerufen und handelt das Sichern und Entfernen von
     * selektierten Einträgen.
     * @param entry
     */
    changeSelectedEntry(entry) {
        if (this.luxMultiSelect) {
            if (this.luxSelected.has(entry)) {
                this.luxSelected.delete(entry);
            }
            else {
                this.luxSelected.add(entry);
            }
        }
        else {
            if (this.luxSelected.has(entry)) {
                // Wenn der selektierte Eintrag erneut angeklickt wird,
                // wird die Selektion entfernt.
                this.luxSelected.clear();
            }
            else {
                this.luxSelected.clear();
                this.luxSelected.add(entry);
            }
        }
        this.luxSelectedChange.next(Array.from(this.luxSelected));
        this.dataSource.selectedEntries = this.luxSelected;
        this.allSelected = this.checkFilteredAllSelected();
    }
    /**
     * Selektiert/Deselektiert alle Einträge in dieser Tabelle.
     *
     * Voraussetzung dafür ist, das Multiselect aktiv ist und keine Http-Table vorliegt.
     */
    changeSelectedEntries() {
        if (this.luxMultiSelect && !this.luxHttpDAO) {
            if (this.checkFilteredAllSelected()) {
                this.dataSource.filteredData.forEach((dataEntry) => this.luxSelected.delete(dataEntry));
            }
            else {
                this.dataSource.filteredData.forEach((dataEntry) => this.luxSelected.add(dataEntry));
            }
            this.luxSelectedChange.next(Array.from(this.luxSelected));
            this.dataSource.selectedEntries = this.luxSelected;
            this.allSelected = this.checkFilteredAllSelected();
        }
    }
    /**
     * Prüft ob die aktuell angezeigten Einträge alle selektiert sind oder nicht.
     */
    checkFilteredAllSelected() {
        let result = true;
        if (this.luxSelected.size === 0) {
            result = false;
        }
        else {
            // Prüfen ob die gefilterten Daten selected sind
            this.dataSource.filteredData.forEach((dataEntry) => {
                if (!this.luxSelected.has(dataEntry)) {
                    result = false;
                }
            });
        }
        return result;
    }
    /**
     * Gibt zurück, ob irgendein Footer-Element für diese Tabelle aktuell sichtbar ist.
     */
    anyFootersAvailable() {
        return this.luxMultiSelect || !!this.tableColumns.find((column) => !!column.footer);
    }
    /**
     * Aktualisiert die DataSource und evtl. Subscriptions sowie die CustomCSS-Classes
     * nach einer Änderung.
     */
    updateDataSourceAttributes(data) {
        if (!this.luxHttpDAO && this.luxAutoPaginate && data && data.length > LuxTableComponent_1.AUTO_PAGINATION_START) {
            this.luxShowPagination = true;
        }
        if (!this.luxHttpDAO) {
            if (this.luxShowPagination) {
                this.handlePagination();
            }
        }
        if (!this.luxHttpDAO) {
            this.dataSource.sort = this.sort;
        }
        if (!this.luxHttpDAO) {
            this.dataSource.totalElements = this.dataSource.data ? this.dataSource.data.length : 0;
        }
    }
    /**
     * Prueft anhand der mitgegebenen Callbacks die CSS-Klassen
     * fuer die einzelnen Rows.
     */
    insertCustomCSSClasses() {
        if (this.luxClasses && this.dataSource.data) {
            this.currentCustomClasses = [];
            this.dataSource.data.forEach((entry, i) => {
                let classes = '';
                this.luxClasses.forEach((cssClass) => {
                    if (cssClass.check(entry)) {
                        classes += cssClass.class + ' ';
                    }
                });
                this.currentCustomClasses.push({ entry: entry, classes: classes });
            });
        }
    }
    /**
     * Gibt das Aria-Label für die Sortierung der Spalten-Überschrift zurück.
     * @param tableColumnDef
     */
    getAriaSortingLabel(tableColumnDef) {
        if (this.sort.active === tableColumnDef) {
            if (this.sort.direction === 'asc') {
                return 'aufsteigend sortiert';
            }
            if (this.sort.direction === 'desc') {
                return 'absteigend sortiert';
            }
        }
        return 'nicht sortiert';
    }
    /**
     * Gibt über den liveAnnouncer eine Nachricht aus, dass sich die Sortierung einer Spalte geändert hat.
     * @param $event
     */
    announceSortChange($event) {
        const index = this.tableColumns
            .toArray()
            .findIndex((tableColumn) => $event.active === tableColumn.luxColumnDef);
        let columnDef = index > -1 ? this.tableColumns.toArray()[index].luxColumnDef : null;
        if (columnDef === null) {
            columnDef = $event.active === 'multiSelect' ? 'multiSelect' : null;
        }
        if (columnDef !== null) {
            let directionDescription;
            switch ($event.direction) {
                case 'desc':
                    directionDescription = 'absteigend';
                    break;
                case 'asc':
                    directionDescription = 'aufsteigend';
                    break;
                case '':
                    directionDescription = 'nicht mehr';
                    break;
            }
            this.liveAnnouncer.announce(`Spalte ${columnDef} sortiert nun ${directionDescription}`, 'assertive');
        }
    }
    /**
     * Aktualisiert die momentan angezeigten Spalten anhand der für sie definierten
     * Responsive-Queries und Verhaltensweisen.
     */
    updateColumnsByMediaQuery() {
        if (!this.tableColumns) {
            return;
        }
        this._dataColumnDefs = [];
        // wenn Multiselect, dann benötigen wir hier noch eine Spalte mehr
        if (this.luxMultiSelect) {
            this._dataColumnDefs.push('multiSelect');
        }
        this.tableColumns.forEach((column) => this._dataColumnDefs.push(column.luxColumnDef));
        this.movedTableColumns = [];
        // Zuerst die auszublendenden Spalten durchgehen
        this.tableColumns.forEach((tableColumn) => {
            if ((tableColumn.luxResponsiveAt && !tableColumn.luxResponsiveBehaviour) ||
                (!tableColumn.luxResponsiveAt && tableColumn.luxResponsiveBehaviour)) {
                this.luxConsole.error(`Achtung! Die Column '${tableColumn.luxColumnDef}' hat entweder keine Media-Queries ` +
                    `oder kein Responsive-Verhalten zugewiesen bekommen.`);
            }
            else if (this.doesResponsiveAtApply(tableColumn.luxResponsiveAt)) {
                // Schauen, ob eine Spalte angegeben wurde, in welche sich diese hier verschieben kann
                if (this._dataColumnDefs.find((column) => column === tableColumn.luxResponsiveBehaviour)) {
                    // Wenn ja, die Spalte merken und vorerst ausblenden
                    this.movedTableColumns.push(tableColumn);
                }
                this._dataColumnDefs = this.dataColumnDefs.filter((dataColumn) => dataColumn !== tableColumn.luxColumnDef);
            }
        });
    }
    /**
     * Prüft ob die aktuelle MediaQuery mit der übergebenen MediaQuery/den übergebenen MediaQueries übereinstimmt.
     * @param responsiveAt
     */
    doesResponsiveAtApply(responsiveAt) {
        const mediaQueries = [];
        if (!Array.isArray(responsiveAt)) {
            mediaQueries.push(responsiveAt);
        }
        else {
            mediaQueries.push(...responsiveAt);
        }
        for (const mediaQuery of mediaQueries) {
            if (mediaQuery === this.mediaQuery) {
                return true;
            }
        }
        return false;
    }
    /**
     * Durchläuft die aktuellen TableColumns und hört auf Changes in den Properties
     * der Columns und merkt sich die Subscriptions.
     */
    updateColumnSubscriptions() {
        this.columnSubscriptions.forEach((subscription) => {
            subscription.unsubscribe();
        });
        this.columnSubscriptions = [];
        this.tableColumns.forEach((column) => {
            this.columnSubscriptions.push(column.change$.subscribe(() => {
                this.updateColumnsByMediaQuery();
            }));
        });
    }
    /**
     * Triggert über das DAO die Abfrage nach neuen Daten.
     * Sendet dabei das Request-Conf Objekt, welches Informationen bzgl.
     * page, pageSize, filter, sort, order mitgibt.
     * @param filteredBy?
     */
    loadHttpDAOData(filteredBy) {
        this.isLoadingResults = true;
        this.luxHttpDAO
            .loadData(this.httpRequestConf)
            .pipe(tap((data) => {
            this.isLoadingResults = false;
            // Wenn ein Filter-Text gegeben ist, sich dieser aber vom Aktuellen unterscheiden, brechen wir die Datenaktualisierung ab
            if (filteredBy && this.httpRequestConf.filter !== filteredBy) {
                return;
            }
            if (data) {
                this.dataSource.totalElements = data.totalCount;
                this.luxData = data.items;
                if (this.luxAutoPaginate && data.totalCount > LuxTableComponent_1.AUTO_PAGINATION_START) {
                    this.luxShowPagination = true;
                }
            }
            else {
                this.dataSource.totalElements = 0;
                this.luxData = [];
            }
        }), catchError(error => {
            this.isLoadingResults = false;
            return of(error);
        }))
            .subscribe();
    }
    /**
     * Wird aufgerufen wenn der Sort neu zur DataSource hinzugefügt werden soll (Data wurde neu gesetzt).
     * Resettet die Pagination und aktualisiert wenn es sich um eine asynchrone Tabelle handelt die
     * requestConf.
     */
    handleSort() {
        if (this.sort) {
            if (this.sortChangedSubscription) {
                this.sortChangedSubscription.unsubscribe();
            }
            this.sortChangedSubscription = this.sort.sortChange.subscribe((sort) => {
                this.paginator.pageIndex = 0;
                if (this.luxHttpDAO) {
                    this.httpRequestConf.page = this.paginator.pageIndex;
                    this.httpRequestConf.sort = sort.active;
                    this.httpRequestConf.order = sort.direction;
                    this.loadHttpDAOData();
                }
            });
        }
        this.calculateProportions();
    }
    /**
     * Wird nach dem set von luxShowFilter aufgerufen und fängt neue Filter-Operationen ab und
     * aktualisiert dementsprechend die Daten.
     */
    handleFilter() {
        if (this.filterChangedSubscription) {
            this.filterChangedSubscription.unsubscribe();
        }
        if (this.luxShowFilter) {
            this.filterChangedSubscription = this.filtered$
                .asObservable()
                .pipe(tap(() => (this.isLoadingResults = true)), debounceTime(500), distinctUntilChanged((x, y) => {
                if (x === y) {
                    this.isLoadingResults = false;
                }
                return x === y;
            }))
                .subscribe((filterValue) => {
                filterValue = filterValue.trim();
                filterValue = filterValue.toLocaleLowerCase();
                this.paginator.pageIndex = 0;
                this.isLoadingResults = false;
                if (!this.luxHttpDAO) {
                    this.dataSource.filter = filterValue;
                }
                if (this.luxHttpDAO) {
                    this.httpRequestConf.filter = filterValue;
                    this.loadHttpDAOData(filterValue);
                }
            });
        }
        this.calculateProportions();
    }
    /**
     * Wird nach dem set von luxShowPagination aufgerufen und setzt wenn es sich hier um
     * eine asynchrone Tabelle handelt eine Subscription um Pagination-Änderungen zu erhalten.
     */
    handlePagination() {
        if (this.luxShowPagination) {
            if (this.luxHttpDAO) {
                if (this.paginatorPageSubscription) {
                    this.paginatorPageSubscription.unsubscribe();
                }
                this.paginatorPageSubscription = this.paginator.page.subscribe(() => {
                    this.httpRequestConf.page = this.paginator.pageIndex;
                    this.httpRequestConf.pageSize = this.paginator.pageSize;
                    this.loadHttpDAOData();
                });
                this.httpRequestConf.page = this.paginator.pageIndex;
                this.httpRequestConf.pageSize = this.paginator.pageSize;
            }
            if (!this.luxHttpDAO) {
                this.dataSource.paginator = this.paginator;
            }
        }
        else {
            this.dataSource.paginator = null;
        }
        this.calculateProportions();
    }
    /**
     * Erzeugt einen neuen String für die Höhenberechnung der Tabelle und setzt die Minimalbreite für die Tabelle
     * (wenn möglich).
     */
    calculateProportions() {
        setTimeout(() => {
            const filter = this.filterElement ? this.filterElement.nativeElement.offsetHeight : 0;
            const pagination = this.paginatorElement ? this.paginatorElement.nativeElement.scrollHeight : 0;
            const temp = 'calc(100% - ' + pagination + 'px' + ' - ' + filter + 'px)';
            if (temp !== this.tableHeightCSSCalc) {
                this.tableHeightCSSCalc = temp;
            }
            this.tableMinWidth = this.luxMinWidthPx > -1 ? this.luxMinWidthPx + 'px' : 'unset';
        });
    }
    /**
     * Aktualisiert die selectedEntries dieser Component anhand der aktuell gesetzten luxSelected-Elemente.
     *
     * Dabei werden die einzelnen Elemente zuerst mithilfe der luxCompareWith- und luxPickValue-Functions miteinander
     * verglichen.
     */
    updateSelection() {
        // Prüfen ob selected gesetzt ist
        if (this.luxSelected.size > 0) {
            // Die selected-Einträge durchgehen und schauen ob diese im data-Block enthalten sind
            const foundEntries = [];
            this.luxSelected.forEach((entry) => {
                const newEntry = this.dataSource.data.find((dataEntry) => {
                    return this.luxCompareWith(this.luxPickValue(entry), this.luxPickValue(dataEntry));
                });
                // Merkt sich die Entry wenn sie noch nicht in der Selected-Liste ist (wenn es sich um eine HTTP-Tabelle handelt)
                if (newEntry && (!this.luxHttpDAO || (this.luxHttpDAO && !this.luxSelected.has(newEntry)))) {
                    foundEntries.push(newEntry);
                    this.luxSelected.delete(entry);
                }
            });
            // Nur bei nicht-HTTP-Tabellen die Selektion einmal leeren
            if (!this.luxHttpDAO) {
                this.luxSelected.clear();
            }
            foundEntries.forEach((entry) => this.luxSelected.add(entry));
        }
        this.dataSource.selectedEntries = this.luxSelected;
        this.luxSelectedChange.next(Array.from(this.luxSelected));
        this.allSelected = this.checkFilteredAllSelected();
    }
};
LuxTableComponent.AUTO_PAGINATION_START = 100; // 100 Elemente bis automatisch die Pagination aktiviert wird
LuxTableComponent.ctorParameters = () => [
    { type: LuxMediaQueryObserverService },
    { type: LuxConsoleService },
    { type: LiveAnnouncer }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], LuxTableComponent.prototype, "luxColWidthsPercent", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxTableComponent.prototype, "luxFilterText", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], LuxTableComponent.prototype, "luxNoDataText", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LuxTableComponent.prototype, "luxPageSize", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LuxTableComponent.prototype, "luxPageSizeOptions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LuxTableComponent.prototype, "luxHttpDAO", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LuxTableComponent.prototype, "luxMinWidthPx", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxTableComponent.prototype, "luxAutoPaginate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LuxTableComponent.prototype, "luxHideBorders", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxTableComponent.prototype, "luxSelectedChange", void 0);
tslib_1.__decorate([
    ViewChild(MatPaginator, { static: true }),
    tslib_1.__metadata("design:type", MatPaginator)
], LuxTableComponent.prototype, "paginator", void 0);
tslib_1.__decorate([
    ViewChild(MatSort, { static: true }),
    tslib_1.__metadata("design:type", MatSort)
], LuxTableComponent.prototype, "sort", void 0);
tslib_1.__decorate([
    ViewChild('paginator', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxTableComponent.prototype, "paginatorElement", void 0);
tslib_1.__decorate([
    ViewChild('filter', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxTableComponent.prototype, "filterElement", void 0);
tslib_1.__decorate([
    ViewChild('tableContainer', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], LuxTableComponent.prototype, "tableContainerElement", void 0);
tslib_1.__decorate([
    ContentChildren(LuxTableColumnComponent),
    tslib_1.__metadata("design:type", QueryList)
], LuxTableComponent.prototype, "tableColumns", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxTableComponent.prototype, "luxClasses", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxTableComponent.prototype, "luxShowPagination", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxTableComponent.prototype, "luxShowFilter", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], LuxTableComponent.prototype, "luxData", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], LuxTableComponent.prototype, "luxMultiSelect", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Set),
    tslib_1.__metadata("design:paramtypes", [Set])
], LuxTableComponent.prototype, "luxSelected", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxTableComponent.prototype, "luxPickValue", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxTableComponent.prototype, "luxCompareWith", null);
LuxTableComponent = LuxTableComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'lux-table',
        template: "<div fxLayout=\"column\" fxFlex=\"0 0 100%\" class=\"lux-table\">\n  <!-- Progress f\u00FCr das Laden/Filtern von Daten -->\n  <div fxFlex=\"0 0 15px\">\n    <lux-progress\n      luxTagId=\"tableProgress\"\n      luxType=\"Progressbar\"\n      class=\"lux-mb-3\"\n      *ngIf=\"isLoadingResults\"\n    ></lux-progress>\n  </div>\n  <!-- Input-Feld f\u00FCr das Filtern der Datens\u00E4tze dieser Tabelle -->\n  <lux-input\n    class=\"lux-table-filter\"\n    [luxTagId]=\"luxFilterText\"\n    [luxLabel]=\"luxFilterText\"\n    (luxValueChange)=\"filtered$.next($event)\"\n    [ngClass]=\"{ 'lux-hide': !luxShowFilter }\"\n    #filter\n  >\n  </lux-input>\n  <!-- Die eigentliche Struktur der Tabelle -->\n  <div\n    [ngStyle]=\"{ height: tableHeightCSSCalc }\"\n    class=\"lux-table\"\n    [ngClass]=\"{ 'lux-block-pointer-events': isLoadingResults, 'lux-hide-borders': luxHideBorders }\"\n    #tableContainer\n  >\n    <!-- Overlay, welches bei der Anzeige des Ladebalkens die Interaktion mit der Tabelle unterbindet -->\n    <div class=\"lux-table-overlay\" [ngClass]=\"{ 'lux-table-overlay-active': isLoadingResults }\"></div>\n\n    <div class=\"lux-table-content\">\n      <table\n        mat-table\n        [dataSource]=\"dataSource\"\n        [ngClass]=\"{ 'lux-table-ie': isIE, 'lux-multiselect-table': luxMultiSelect }\"\n        [ngStyle]=\"{ 'min-width': tableMinWidth }\"\n        [trackBy]=\"trackFn\"\n        matSort\n        (matSortChange)=\"announceSortChange($event)\"\n        #table\n      >\n        <ng-container *ngIf=\"tableColumns\">\n          <!-- Zellen, welche nur bei Multiselect-Tabellen dargestellt werden und die Checkboxen + Counter beinhalten -->\n          <ng-container matColumnDef=\"multiSelect\" *ngIf=\"luxMultiSelect\">\n            <th\n              class=\"lux-multiselect-th\"\n              [luxAriaLabel]=\"'Spalte multiSelect ' + getAriaSortingLabel('multiSelect')\"\n              luxAriaLabelSelector=\"button\"\n              mat-header-cell\n              *matHeaderCellDef\n              mat-sort-header\n            >\n              <div fxLayout=\"column\">\n                <span class=\"lux-selected-count\"\n                  >{{ luxSelected.size }} {{ !luxHttpDAO ? '/ ' + dataSource.totalElements : '' }}</span\n                >\n              </div>\n            </th>\n            <td class=\"lux-multiselect-td\" mat-cell *matCellDef=\"let element; let i = index\">\n              <lux-checkbox\n                luxTagId=\"lux-table-multiselect-content-{{ i }}\"\n                class=\"lux-multiselect-toggle\"\n                luxTabIndex=\"-1\"\n                [luxApplyToChildren]=\"['input']\"\n                [luxAriaLabel]=\"'Reihe ' + i\"\n                luxAriaLabelSelector=\"input\"\n                [luxChecked]=\"luxSelected.has(element)\"\n              >\n              </lux-checkbox>\n            </td>\n            <td\n              class=\"lux-multiselect-tf\"\n              [ngClass]=\"{ 'lux-ignore-multiselect-tf': !!luxHttpDAO }\"\n              mat-footer-cell\n              *matFooterCellDef\n            >\n              <div\n                fxLayout=\"column\"\n                fxLayoutAlign=\"center\"\n                fxFill\n                class=\"lux-multiselect-toggle-all-wrapper\"\n                *ngIf=\"!luxHttpDAO\"\n              >\n                <lux-checkbox\n                  luxTagId=\"lux-table-multiselect-header\"\n                  class=\"lux-multiselect-toggle-all\"\n                  luxAriaLabel=\"Alle Eintr\u00E4ge\"\n                  luxAriaLabelSelector=\"input\"\n                  luxTabIndex=\"-1\"\n                  [luxApplyToChildren]=\"['input']\"\n                  [luxChecked]=\"allSelected\"\n                >\n                </lux-checkbox>\n              </div>\n            </td>\n          </ng-container>\n          <!-- Diese Zelle wird nur dargestellt wenn keine Daten/die dataSource.totalElements === 0 sind -->\n          <ng-container matColumnDef=\"noData\">\n            <th mat-header-cell *matHeaderCellDef [colSpan]=\"tableColumns.length\">\n              <span class=\"lux-no-data-text\">{{ luxNoDataText }}</span>\n            </th>\n          </ng-container>\n          <!-- Hier sind die eigentlichen Inhalts-Zellen -->\n          <ng-container *ngFor=\"let tableColumn of tableColumns.toArray(); let i = index\">\n            <ng-container\n              [matColumnDef]=\"tableColumn.luxColumnDef\"\n              [sticky]=\"i === 0 && tableColumn.luxSticky\"\n              [stickyEnd]=\"i === tableColumns.length - 1 && tableColumn.luxSticky\"\n            >\n              <th\n                [luxAriaLabel]=\"\n                  'Spalte ' + tableColumn.luxColumnDef + ' ' + getAriaSortingLabel(tableColumn.luxColumnDef)\n                \"\n                luxAriaLabelSelector=\"button\"\n                mat-header-cell\n                *matHeaderCellDef\n                mat-sort-header\n                [ngClass]=\"\n                  'lux-table-column-header-' +\n                  i +\n                  (!tableColumn.luxSortable ? ' lux-table-header-blocked' : '') +\n                  (!tableColumn.header ? ' lux-table-column-header-empty' : '')\n                \"\n                [ngStyle]=\"{\n                  width: luxColWidthsPercent && luxColWidthsPercent[i] ? luxColWidthsPercent[i] + '%' : 'unset'\n                }\"\n              >\n                <ng-container *ngTemplateOutlet=\"tableColumn.header?.tempRef\"></ng-container>\n              </th>\n\n              <!-- Hier enstehen die Zellen mit den Inhalten -->\n              <td\n                mat-cell\n                *matCellDef=\"let element\"\n                [ngStyle]=\"{\n                  width: luxColWidthsPercent && luxColWidthsPercent[i] ? luxColWidthsPercent[i] + '%' : 'unset'\n                }\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"tableColumn.content?.tempRef; context: { $implicit: element }\"\n                ></ng-container>\n\n                <!-- Hier werden die aufgrund von Responsive-Verhalten verschobenen Spalten innerhalb dieser Spalte dargestellt -->\n                <ng-container *ngFor=\"let movedTableColumn of movedTableColumns\">\n                  <ng-container *ngIf=\"movedTableColumn.luxResponsiveBehaviour === tableColumn.luxColumnDef\">\n                    <div class=\"lux-moved-header-title lux-label\">\n                      <ng-container *ngTemplateOutlet=\"movedTableColumn.header?.tempRef\"></ng-container>\n                    </div>\n                    <div>\n                      <ng-container\n                        *ngTemplateOutlet=\"movedTableColumn.content.tempRef; context: { $implicit: element }\"\n                      ></ng-container>\n                    </div>\n                  </ng-container>\n                </ng-container>\n              </td>\n              <td mat-footer-cell *matFooterCellDef>\n                <ng-container *ngTemplateOutlet=\"tableColumn.footer?.tempRef\"></ng-container>\n              </td>\n            </ng-container>\n          </ng-container>\n\n          <!-- Die Table-Row f\u00FCr die Header (standardm\u00E4\u00DFig sticky) -->\n          <tr mat-header-row *matHeaderRowDef=\"dataColumnDefs; sticky: true\"></tr>\n          <!-- Die Table-Row f\u00FCr die \"no-data\"-Anzeige -->\n          <tr\n            mat-header-row\n            *matHeaderRowDef=\"['noData']; sticky: true\"\n            class=\"lux-table-header-no-data\"\n            [ngClass]=\"{ 'lux-display-none': dataSource.totalElements > 0 && dataSource.filteredData.length > 0 }\"\n          ></tr>\n          <!-- Die Table-Rows f\u00FCr alle Inhalts-Spalten -->\n          <tr\n            mat-row\n            *matRowDef=\"let rowData; columns: dataColumnDefs; let i = index\"\n            class=\"lux-row {{ getCustomClassesForIndex(rowData) }}\"\n            tabindex=\"0\"\n            [ngClass]=\"{ 'lux-multiselect-field': luxMultiSelect, 'lux-row-selected': luxSelected.has(rowData) }\"\n            (click)=\"changeSelectedEntry(rowData)\"\n            (keydown.space)=\"changeSelectedEntry(rowData)\"\n            (keydown.enter)=\"changeSelectedEntry(rowData)\"\n          ></tr>\n          <!-- Die Table-Row f\u00FCr den Footer dieser Tabelle -->\n          <tr\n            mat-footer-row\n            *matFooterRowDef=\"dataColumnDefs; sticky: true\"\n            ngClass=\"lux-footer-row\"\n            [ngClass]=\"{\n              'lux-display-none': !anyFootersAvailable(),\n              'lux-multiselect-field': luxMultiSelect && !luxHttpDAO\n            }\"\n            tabindex=\"0\"\n            (click)=\"changeSelectedEntries()\"\n            (keydown.space)=\"changeSelectedEntries()\"\n            (keydown.enter)=\"changeSelectedEntries()\"\n          ></tr>\n        </ng-container>\n      </table>\n    </div>\n  </div>\n  <mat-paginator\n    #paginator\n    [length]=\"dataSource.totalElements\"\n    [pageSize]=\"luxPageSize\"\n    [pageSizeOptions]=\"luxPageSizeOptions\"\n    [showFirstLastButtons]=\"true\"\n    [ngClass]=\"{ 'lux-hide': !luxShowPagination }\"\n    [ngClass.xs]=\"{ 'lux-paginator-xs': true, 'lux-hide': !luxShowPagination }\"\n    fxFlex=\"auto\"\n  >\n  </mat-paginator>\n</div>\n",
        providers: [{ provide: MatPaginatorIntl, useClass: LuxPaginatorIntl }],
        styles: ["@charset \"UTF-8\";lux-side-nav .lux-side-nav-item,lux-side-nav lux-link{box-sizing:border-box}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected,lux-side-nav lux-link.lux-side-nav-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-side-nav .lux-side-nav-item.lux-side-nav-item-selected:after,lux-side-nav lux-link.lux-side-nav-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-side-nav .lux-side-nav-item button .mat-button-focus-overlay,lux-side-nav lux-link button .mat-button-focus-overlay{display:none}lux-side-nav .lux-side-nav-item button:focus,lux-side-nav lux-link button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-side-nav .lux-side-nav-item button:hover,lux-side-nav lux-link button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-list{border:4px solid transparent}lux-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-list lux-list-item:focus{outline-width:0}lux-list lux-list-item:focus mat-card{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}lux-list lux-list-item lux-card.lux-list-item-selected mat-card:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}lux-list lux-list-item lux-card mat-card{box-sizing:border-box}lux-list lux-list-item lux-card mat-card:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-label>*{color:#335c85}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb{position:relative}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .cdk-focused .mat-radio-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-checkbox-inner-container:after,lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .mat-slide-toggle-thumb:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}lux-form-control .lux-form-control:not(.lux-form-control-disabled).lux-focused .lux-form-control-container:after{content:'';display:block;box-sizing:border-box;left:0;right:0;position:absolute;height:2px;border-bottom:2px solid #0073b3}lux-datepicker mat-datepicker-toggle button:focus:after{content:\"\";border:1px solid rgba(112,141,170,.2);background-color:rgba(112,141,170,.2);display:block;top:-4px;left:-4px;right:-4px;bottom:-4px;border-radius:15px;z-index:1;position:absolute}.lux-datepicker-panel .mat-calendar-header button .mat-button-focus-overlay,lux-datepicker mat-datepicker-toggle .mat-button-focus-overlay{display:none}.lux-datepicker-panel .mat-calendar-header button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-header button:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell:hover>div{background-color:rgba(0,0,0,.2)!important;border-radius:999px}.lux-datepicker-panel .mat-calendar-content td.mat-calendar-body-cell.mat-calendar-body-active>div{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:999px}lux-table tr:hover>td,lux-table tr:hover>th{border-radius:0;background-color:#cfcfcf!important}lux-table th button.mat-sort-header-button:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option{border-left:0;box-sizing:border-box}.lux-select-panel mat-option.mat-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}.lux-select-panel mat-option.mat-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}.lux-select-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-select-panel mat-option.mat-active,.lux-select-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]) .mat-button-focus-overlay{display:none}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]):not(.mat-fab):not(.mat-raised-button):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-button button:not([disabled]).mat-fab:focus,lux-button button:not([disabled]).mat-raised-button:focus{background-color:rgba(112,141,170,.2)!important}lux-button button:not([disabled]).mat-fab:focus.mat-accent,lux-button button:not([disabled]).mat-raised-button:focus.mat-accent{background-color:#b6d184!important}lux-button button:not([disabled]).mat-fab:focus.mat-warn,lux-button button:not([disabled]).mat-raised-button:focus.mat-warn{background-color:#ea2524!important}lux-button button:not([disabled]).mat-fab:focus.mat-primary,lux-button button:not([disabled]).mat-raised-button:focus.mat-primary{background-color:#4b82ba!important}.lux-autocomplete-panel mat-option{border-left:0;box-sizing:border-box}.lux-autocomplete-panel mat-option:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-autocomplete-panel mat-option.mat-active,.lux-autocomplete-panel mat-option:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-tabs mat-ink-bar{background-color:#0073b3!important}lux-tabs .mat-tab-label:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:hover,lux-stepper mat-step-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-panel mat-expansion-panel-header:focus,lux-stepper mat-step-header:focus,lux-stepper mat-step-header[aria-selected=true],lux-tile mat-card:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}lux-master-detail lux-master-header .lux-master-header-collapse button.lux-button:not(.mat-fab):not(.mat-raised-button):focus{background-color:rgba(0,0,0,.2)!important}lux-file-list .lux-file-list{border:4px solid transparent}lux-file-list .lux-file-list:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list .lux-file-list-entry{border:4px solid transparent}lux-file-list .lux-file-list .lux-file-list-entry:focus{outline-width:0;border:4px solid rgba(112,141,170,.2)!important}lux-file-list .lux-file-list mat-card{margin:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}.lux-menu-panel .lux-menu-item:not([disabled=true]):hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}lux-dialog-structure lux-dialog-content:focus,lux-dialog-structure lux-dialog-title:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item,example-root .example-base-components-list mat-expansion-panel-header{box-sizing:border-box}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected{background-color:rgba(112,141,170,.2)!important;position:relative;border-radius:4px}example-root .example-base-components-list .example-component-list-item.example-component-list-item-selected:after,example-root .example-base-components-list mat-expansion-panel-header.example-component-list-item-selected:after{content:'';left:0;width:6px;top:0;bottom:0;position:absolute;border-left:6px solid #0073b3;border-radius:4px 0 0 4px}example-root .example-base-components-list .example-component-list-item:focus,example-root .example-base-components-list mat-expansion-panel-header:focus{outline-width:0!important;outline-style:unset;background-color:rgba(112,141,170,.2)!important;border-radius:4px}example-root .example-base-components-list .example-component-list-item:hover,example-root .example-base-components-list mat-expansion-panel-header:hover{background-color:rgba(0,0,0,.2)!important;border-radius:4px}.lux-app-container,body,html{height:100%}.lux-app-container{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex}body{-webkit-overflow-scrolling:touch}div{font-family:Roboto,Helvetica Neue,sans-serif}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.lux-file-preview-backdrop{background:#000;opacity:.8!important}lux-card.lux-card-grow{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:400px;min-width:0}lux-card.lux-card-grow mat-card,lux-card.lux-card-grow mat-card-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;min-width:0}.lux-crop{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.lux-label{color:rgba(0,0,0,.54);font-size:75%}.lux-hint{color:rgba(0,0,0,.6);font-size:12px}.lux-display-none{display:none}.lux-hidden{visibility:hidden}.lux-nowrap{white-space:nowrap}.lux-cursor{cursor:pointer}.lux-block-pointer-events{pointer-events:none}.lux-vertical-align-baseline{vertical-align:baseline!important}.lux-black-semi-transparent{color:rgba(0,0,0,.87)}.lux-semi-transparent{opacity:.6}.lux-overflow-y-hidden{overflow-y:hidden}.lux-overflow-y-auto{overflow-y:auto}.lux-overflow-wrap-break-word{overflow-wrap:break-word}.lux-bold{font-weight:700!important}.lux-uppercase{text-transform:uppercase!important}.lux-lowercase{text-transform:lowercase!important}.lux-hyphenate{overflow-wrap:break-word;word-wrap:break-word;word-break:normal;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto;overflow-x:auto}.lux-p-footer,.lux-p-header{padding:8px}.lux-snackbar{top:68px;right:8px;position:absolute;margin:0!important;min-width:unset!important;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-snack-bar-handset .lux-snackbar{left:8px;width:auto!important}.lux-mt-0{margin-top:0}.lux-pt-0{padding-top:0}.lux-mt-1{margin-top:2px}.lux-pt-1{padding-top:2px}.lux-mt-2{margin-top:4px}.lux-pt-2{padding-top:4px}.lux-mt-3{margin-top:8px}.lux-pt-3{padding-top:8px}.lux-mt-4{margin-top:16px}.lux-pt-4{padding-top:16px}.lux-mb-0{margin-bottom:0}.lux-pb-0{padding-bottom:0}.lux-mb-1{margin-bottom:2px}.lux-pb-1{padding-bottom:2px}.lux-mb-2{margin-bottom:4px}.lux-pb-2{padding-bottom:4px}.lux-mb-3{margin-bottom:8px}.lux-pb-3{padding-bottom:8px}.lux-mb-4{margin-bottom:16px}.lux-pb-4{padding-bottom:16px}.lux-ml-0{margin-left:0}.lux-pl-0{padding-left:0}.lux-ml-1{margin-left:2px}.lux-pl-1{padding-left:2px}.lux-ml-2{margin-left:4px}.lux-pl-2{padding-left:4px}.lux-ml-3{margin-left:8px}.lux-pl-3{padding-left:8px}.lux-ml-4{margin-left:16px}.lux-pl-4{padding-left:16px}.lux-m-0{margin:0}.lux-mr-0{margin-right:0}.lux-p-0{padding:0}.lux-pr-0{padding-right:0}.lux-m-1{margin:2px}.lux-mr-1{margin-right:2px}.lux-p-1{padding:2px}.lux-pr-1{padding-right:2px}.lux-m-2{margin:4px}.lux-mr-2{margin-right:4px}.lux-p-2{padding:4px}.lux-pr-2{padding-right:4px}.lux-m-3{margin:8px}.lux-mr-3{margin-right:8px}.lux-p-3{padding:8px}.lux-pr-3{padding-right:8px}.lux-m-4{margin:16px}.lux-mr-4{margin-right:16px}.lux-p-4{padding:16px}.lux-pr-4{padding-right:16px}.lux-flex-layout-gap-10[style*=row]>:not(:last-child){margin-right:10px}.lux-flex-layout-gap-10[style*=column]>:not(:last-child){margin-bottom:10px}.lux-flex-layout-gap-20[style*=row]>:not(:last-child){margin-right:20px}.lux-flex-layout-gap-20[style*=column]>:not(:last-child){margin-bottom:20px}.lux-flex-layout-gap-30[style*=row]>:not(:last-child){margin-right:30px}.lux-flex-layout-gap-30[style*=column]>:not(:last-child){margin-bottom:30px}.lux-z-index-100{z-index:100}.lux-z-index-500{z-index:500}.lux-z-index-1000{z-index:1000}.lux-uppercase>lux-button .lux-button-label,lux-button.lux-uppercase .lux-button-label{text-transform:uppercase}.lux-bg-color-red{background:#b01211}.lux-bg-color-green{background:#95bc4c}.lux-bg-color-yellow{background:#ebc000}.lux-bg-color-blue{background:#335c85}.lux-bg-color-gray{background:#c8c8c8}.lux-bg-color-orange{background:#ec9c1b}.lux-bg-color-brown{background:#783f04}.lux-font-color-black{color:#000}.lux-font-color-white{color:#fff}.lux-badge-notification.mat-badge-large .mat-badge-content{font-size:15px}.lux-badge-notification.lux-badge-color-default .mat-badge-content{color:#000;background:#fff;border:1px solid rgba(0,0,0,.87)}lux-progress ::ng-deep mat-progress-bar{margin-bottom:8px}.lux-row-selected{background-color:rgba(112,141,170,.2)!important}:host{display:block;height:100%}:host>div{padding-bottom:8px}.lux-table{height:100%}.lux-table .lux-table-content{position:relative;overflow:auto;height:100%;width:100%}.lux-table .lux-table-content table{width:100%}.lux-table .lux-table-content table td.mat-table-sticky{z-index:103!important}.lux-table .lux-table-content table td:not(.mat-table-sticky){z-index:97!important}.lux-table .lux-table-content table td.mat-header-cell{z-index:103!important}.lux-table .lux-table-content table ::ng-deep tfoot td.mat-table-sticky:first-of-type{z-index:105!important}.lux-table .lux-table-content table th{vertical-align:top;height:30px}.lux-table .lux-table-content table .lux-table-header-no-data th{height:30px;vertical-align:middle}.lux-table .lux-table-content table td,.lux-table .lux-table-content table th{padding:8px}.lux-table .lux-table-content table td.lux-multiselect-td+td,.lux-table .lux-table-content table td.lux-multiselect-tf+td,.lux-table .lux-table-content table th.lux-multiselect-th+th{padding-left:16px}.lux-table .lux-table-content table ::ng-deep tr.mat-header-row{height:auto}.lux-table .lux-table-content table .lux-moved-header-title{font-size:12px;margin-top:4px}.lux-table .lux-table-content table .lux-moved-header-title:first-of-type{margin-top:8px}.lux-table .lux-table-content table td.mat-cell:last-of-type,.lux-table .lux-table-content table td.mat-footer-cell:last-of-type,.lux-table .lux-table-content table th.mat-header-cell:last-of-type{padding-right:0}.lux-table .lux-table-content table ::ng-deep tbody tr:last-of-type td{border-bottom:none}.lux-table .lux-table-content table .mat-footer-row>td{border-top:1px solid rgba(0,0,0,.12)}.lux-table .lux-table-content .lux-table-header-blocked{pointer-events:none}.lux-table.lux-hide-borders .lux-multiselect-td,.lux-table.lux-hide-borders .lux-multiselect-tf,.lux-table.lux-hide-borders td,.lux-table.lux-hide-borders th{border:unset!important}.lux-table th.lux-table-column-header-empty{display:none}.lux-table-overlay{-webkit-transition:opacity 1s;transition:opacity 1s;position:absolute}.lux-table-overlay-active{pointer-events:none;z-index:1003;left:0;right:0;top:0;bottom:0;opacity:0}.lux-table-ie mat-cell,.lux-table-ie mat-header-cell{height:1em}.lux-hide{display:none!important}.lux-multiselect-td,.lux-multiselect-tf,.lux-multiselect-th{max-width:70px;min-width:70px;width:70px;padding-right:6px;margin-right:6px}.lux-multiselect-td lux-checkbox,.lux-multiselect-tf lux-checkbox,.lux-multiselect-th lux-checkbox{pointer-events:none}.lux-multiselect-td lux-checkbox ::ng-deep .lux-form-control-label,.lux-multiselect-tf lux-checkbox ::ng-deep .lux-form-control-label,.lux-multiselect-th lux-checkbox ::ng-deep .lux-form-control-label{display:none}.lux-multiselect-td ::ng-deep .lux-form-field,.lux-multiselect-tf ::ng-deep .lux-form-field,.lux-multiselect-th ::ng-deep .lux-form-field{margin-bottom:0}.lux-multiselect-td+td,.lux-multiselect-td+th,.lux-multiselect-tf+td,.lux-multiselect-tf+th,.lux-multiselect-th+td,.lux-multiselect-th+th{padding-left:6px}.lux-multiselect-th{padding-left:6px!important;width:1%!important}.lux-multiselect-th span{text-align:start}.lux-multiselect-td,.lux-multiselect-tf:not(.lux-ignore-multiselect-tf){border-right:1px solid rgba(0,0,0,.12)}.lux-multiselect-field{cursor:pointer}.lux-table-header-no-data th{border:unset!important}.lux-multiselect-toggle-all-wrapper{position:relative}::ng-deep .lux-multiselect-toggle ::ng-deep .lux-form-control-label,::ng-deep .lux-multiselect-toggle-all ::ng-deep .lux-form-control-label{display:none}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-container{-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-range-actions{display:block;margin-top:10px}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-range-actions button:first-of-type{margin-left:-10px}.lux-paginator-xs:not(.lux-hide) ::ng-deep .mat-paginator-range-label{margin:0}.lux-table-filter{display:block}.lux-aria-visible{position:absolute;font-size:0;color:transparent;width:0;height:0}"]
    }),
    tslib_1.__metadata("design:paramtypes", [LuxMediaQueryObserverService,
        LuxConsoleService,
        LiveAnnouncer])
], LuxTableComponent);
export { LuxTableComponent };
//# sourceMappingURL=data:application/json;base64,