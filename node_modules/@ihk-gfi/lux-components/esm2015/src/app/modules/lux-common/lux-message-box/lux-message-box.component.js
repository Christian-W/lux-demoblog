import * as tslib_1 from "tslib";
import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { visibilityTrigger } from './lux-message-box-model/lux-message-box.animations';
import { MatPaginatorIntl } from '@angular/material';
import { LuxPaginatorIntl } from '../../lux-util/lux-paginator-intl';
let LuxMessageBoxComponent = class LuxMessageBoxComponent {
    constructor() {
        this._luxMessages = [];
        this._luxMaximumDisplayed = 1;
        this._luxIndex = 0;
        this.displayedMessages = [];
        this.boxShadow = true;
        this.luxMessageChanged = new EventEmitter();
        this.luxMessageClosed = new EventEmitter();
        this.luxMessageBoxClosed = new EventEmitter();
    }
    set luxIndex(index) {
        if (index < 0) {
            index = 0;
        }
        if (index > this.luxMessages.length) {
            index = this.luxMessages.length;
        }
        this._luxIndex = index;
        this.updateDisplayedMessages(index);
    }
    get luxIndex() {
        return this._luxIndex;
    }
    set luxMaximumDisplayed(max) {
        if (max < 0) {
            max = 0;
        }
        this._luxMaximumDisplayed = max;
        this.updateDisplayedMessages(this.luxIndex);
    }
    get luxMaximumDisplayed() {
        return this._luxMaximumDisplayed;
    }
    set luxMessages(messages) {
        if (messages && messages.length > 0) {
            this._luxMessages = messages;
            this.updateDisplayedMessages(this.luxIndex);
        }
        else {
            // Wenn es vorher Werte gab, ein Closed-Event ausgeben
            if (this.luxMessages.length > 0) {
                this.luxMessageBoxClosed.emit();
            }
            this._luxMessages = [];
        }
    }
    get luxMessages() {
        return this._luxMessages;
    }
    ngOnInit() { }
    /**
     * Wird aufgerufen, wenn der Close-Button für eine MessageBox aufgerufen wurde.
     *
     * Gibt eine Event-Payload mit der betroffenen Nachricht mit Index weiter.
     * @param $event
     */
    messageClosed($event) {
        const eventPayload = {
            index: this.luxMessages.findIndex((compareMessage) => compareMessage === $event),
            message: $event
        };
        this.luxMessageClosed.emit(eventPayload);
        this.luxMessages = this.luxMessages.filter((message) => message !== $event);
    }
    /**
     * Aktualisiert die angezeigten Nachrichten und den Paginator,
     * gibt außerdem das Change-Event mit den angezeigten/vorherigen Nachrichten.
     * @param $event
     */
    pageChanged($event) {
        const previousDisplayedMessages = [...this.displayedMessages];
        const previousIndex = this.luxIndex;
        this.updateDisplayedMessages($event.pageIndex);
        const messageChangePayload = {
            currentPage: {
                index: this.luxIndex,
                messages: [...this.displayedMessages]
            },
            previousPage: {
                index: previousIndex,
                messages: previousDisplayedMessages
            }
        };
        this.luxMessageChanged.emit(messageChangePayload);
    }
    /**
     * Aktualisiert die aktuell angezeigten Nachrichten anhand des Index.
     * @param pageIndex
     * @param pageSize
     */
    updateDisplayedMessages(pageIndex) {
        const start = pageIndex * this.luxMaximumDisplayed;
        const end = start + this.luxMaximumDisplayed;
        // Wenn der luxIndex und der PageIndex ungleich sind, den luxIndex aktualisieren
        if (this.luxIndex !== pageIndex) {
            this._luxIndex = pageIndex;
        }
        // Checken, ob der Index nicht die Array-Größe sprengt
        if (this.luxIndex > this.luxMessages.length) {
            this._luxIndex = this.luxMessages.length;
        }
        if (this.luxIndex < 0) {
            this._luxIndex = 0;
        }
        // Nachrichten aktualisieren
        this.displayedMessages = this.luxMessages.slice(start, end);
        // Wenn die angezeigten Nachrichten leer sind, aber noch weitere vorhanden sind, die vorherige Seite anzeigen
        if (this.displayedMessages.length === 0 && this.luxMessages.length > 0 && this.luxIndex > 0) {
            this.updateDisplayedMessages(this.luxIndex - 1);
        }
    }
};
tslib_1.__decorate([
    HostBinding('class.mat-elevation-z4'),
    tslib_1.__metadata("design:type", Boolean)
], LuxMessageBoxComponent.prototype, "boxShadow", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxMessageBoxComponent.prototype, "luxMessageChanged", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxMessageBoxComponent.prototype, "luxMessageClosed", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], LuxMessageBoxComponent.prototype, "luxMessageBoxClosed", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], LuxMessageBoxComponent.prototype, "luxIndex", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], LuxMessageBoxComponent.prototype, "luxMaximumDisplayed", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], LuxMessageBoxComponent.prototype, "luxMessages", null);
LuxMessageBoxComponent = tslib_1.__decorate([
    Component({
        selector: 'lux-message-box',
        template: "<div fxLayout=\"column\" [@messageBoxVisibility] luxAriaRole=\"list\" *ngIf=\"luxMessages && luxMessages.length > 0\">\n  <ng-container *ngFor=\"let displayedMessage of displayedMessages\">\n    <lux-message\n      class=\"lux-message-box mat-elevation-z1\"\n      [luxMessage]=\"displayedMessage\"\n      (luxMessageClosed)=\"messageClosed($event)\"\n    >\n    </lux-message>\n  </ng-container>\n  <div\n    class=\"lux-message-box-footer\"\n    [ngClass]=\"{ 'lux-display-none': luxMessages.length === 1 || luxMaximumDisplayed >= luxMessages.length }\"\n  >\n    <mat-paginator\n      [length]=\"luxMessages.length\"\n      [pageSize]=\"luxMaximumDisplayed\"\n      [hidePageSize]=\"true\"\n      [pageIndex]=\"luxIndex\"\n      (page)=\"pageChanged($event)\"\n    >\n    </mat-paginator>\n  </div>\n</div>\n",
        animations: [visibilityTrigger],
        providers: [{ provide: MatPaginatorIntl, useClass: LuxPaginatorIntl }],
        styles: [":host{display:block;overflow:hidden}:host .lux-message-box{margin-bottom:2px}:host .lux-display-none{display:none}:host ::ng-deep lux-button ::ng-deep button,:host ::ng-deep lux-button ::ng-deep lux-icon{width:32px;max-width:32px;min-width:32px;font-size:.75em;padding:0}:host ::ng-deep lux-button ::ng-deep .mat-button-focus-overlay,:host ::ng-deep lux-button ::ng-deep .mat-button-ripple{display:none}:host ::ng-deep .lux-message-container{padding:0 24px}:host ::ng-deep .lux-hidden{visibility:hidden}:host mat-paginator ::ng-deep .mat-paginator-container{padding:0 20px!important}"]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], LuxMessageBoxComponent);
export { LuxMessageBoxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LW1lc3NhZ2UtYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpaGstZ2ZpL2x1eC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL2x1eC1jb21tb24vbHV4LW1lc3NhZ2UtYm94L2x1eC1tZXNzYWdlLWJveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBR3ZGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBYSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBU3JFLElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBMkRqQztRQTFEUSxpQkFBWSxHQUFrQixFQUFFLENBQUM7UUFDakMseUJBQW9CLEdBQVcsQ0FBQyxDQUFDO1FBQ2pDLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFFOUIsc0JBQWlCLEdBQWtCLEVBQUUsQ0FBQztRQUVDLGNBQVMsR0FBWSxJQUFJLENBQUM7UUFFdkQsc0JBQWlCLEdBQXlDLElBQUksWUFBWSxFQUEwQixDQUFDO1FBQ3JHLHFCQUFnQixHQUF3QyxJQUFJLFlBQVksRUFBeUIsQ0FBQztRQUNsRyx3QkFBbUIsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQWdEOUQsQ0FBQztJQTlDUCxJQUFJLFFBQVEsQ0FBQyxLQUFhO1FBQ2pDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNiLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDWDtRQUNELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ25DLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxD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RUFBRSxpQkFBaUI7UUFDM0IsdXpCQUErQztRQUUvQyxVQUFVLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztRQUMvQixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQzs7S0FDdkUsQ0FBQzs7R0FDVyxzQkFBc0IsQ0F1SWxDO1NBdklZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB2aXNpYmlsaXR5VHJpZ2dlciB9IGZyb20gJy4vbHV4LW1lc3NhZ2UtYm94LW1vZGVsL2x1eC1tZXNzYWdlLWJveC5hbmltYXRpb25zJztcbmltcG9ydCB7IElMdXhNZXNzYWdlQ2hhbmdlRXZlbnQsIElMdXhNZXNzYWdlQ2xvc2VFdmVudCB9IGZyb20gJy4vbHV4LW1lc3NhZ2UtYm94LW1vZGVsL2x1eC1tZXNzYWdlLWV2ZW50cy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUx1eE1lc3NhZ2UgfSBmcm9tICcuL2x1eC1tZXNzYWdlLWJveC1tb2RlbC9sdXgtbWVzc2FnZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTWF0UGFnaW5hdG9ySW50bCwgUGFnZUV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgTHV4UGFnaW5hdG9ySW50bCB9IGZyb20gJy4uLy4uL2x1eC11dGlsL2x1eC1wYWdpbmF0b3ItaW50bCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2x1eC1tZXNzYWdlLWJveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9sdXgtbWVzc2FnZS1ib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9sdXgtbWVzc2FnZS1ib3guY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW3Zpc2liaWxpdHlUcmlnZ2VyXSxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBNYXRQYWdpbmF0b3JJbnRsLCB1c2VDbGFzczogTHV4UGFnaW5hdG9ySW50bCB9XVxufSlcbmV4cG9ydCBjbGFzcyBMdXhNZXNzYWdlQm94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHJpdmF0ZSBfbHV4TWVzc2FnZXM6IElMdXhNZXNzYWdlW10gPSBbXTtcbiAgcHJpdmF0ZSBfbHV4TWF4aW11bURpc3BsYXllZDogbnVtYmVyID0gMTtcbiAgcHJpdmF0ZSBfbHV4SW5kZXg6IG51bWJlciA9IDA7XG5cbiAgZGlzcGxheWVkTWVzc2FnZXM6IElMdXhNZXNzYWdlW10gPSBbXTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm1hdC1lbGV2YXRpb24tejQnKSBib3hTaGFkb3c6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIEBPdXRwdXQoKSBsdXhNZXNzYWdlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPElMdXhNZXNzYWdlQ2hhbmdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxJTHV4TWVzc2FnZUNoYW5nZUV2ZW50PigpO1xuICBAT3V0cHV0KCkgbHV4TWVzc2FnZUNsb3NlZDogRXZlbnRFbWl0dGVyPElMdXhNZXNzYWdlQ2xvc2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPElMdXhNZXNzYWdlQ2xvc2VFdmVudD4oKTtcbiAgQE91dHB1dCgpIGx1eE1lc3NhZ2VCb3hDbG9zZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBASW5wdXQoKSBzZXQgbHV4SW5kZXgoaW5kZXg6IG51bWJlcikge1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGluZGV4ID0gMDtcbiAgICB9XG4gICAgaWYgKGluZGV4ID4gdGhpcy5sdXhNZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgIGluZGV4ID0gdGhpcy5sdXhNZXNzYWdlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgdGhpcy5fbHV4SW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnVwZGF0ZURpc3BsYXllZE1lc3NhZ2VzKGluZGV4KTtcbiAgfVxuXG4gIGdldCBsdXhJbmRleCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sdXhJbmRleDtcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBsdXhNYXhpbXVtRGlzcGxheWVkKG1heDogbnVtYmVyKSB7XG4gICAgaWYgKG1heCA8IDApIHtcbiAgICAgIG1heCA9IDA7XG4gICAgfVxuICAgIHRoaXMuX2x1eE1heGltdW1EaXNwbGF5ZWQgPSBtYXg7XG5cbiAgICB0aGlzLnVwZGF0ZURpc3BsYXllZE1lc3NhZ2VzKHRoaXMubHV4SW5kZXgpO1xuICB9XG5cbiAgZ2V0IGx1eE1heGltdW1EaXNwbGF5ZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbHV4TWF4aW11bURpc3BsYXllZDtcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBsdXhNZXNzYWdlcyhtZXNzYWdlczogSUx1eE1lc3NhZ2VbXSkge1xuICAgIGlmIChtZXNzYWdlcyAmJiBtZXNzYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl9sdXhNZXNzYWdlcyA9IG1lc3NhZ2VzO1xuICAgICAgdGhpcy51cGRhdGVEaXNwbGF5ZWRNZXNzYWdlcyh0aGlzLmx1eEluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2VubiBlcyB2b3JoZXIgV2VydGUgZ2FiLCBlaW4gQ2xvc2VkLUV2ZW50IGF1c2dlYmVuXG4gICAgICBpZiAodGhpcy5sdXhNZXNzYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMubHV4TWVzc2FnZUJveENsb3NlZC5lbWl0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9sdXhNZXNzYWdlcyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsdXhNZXNzYWdlcygpOiBJTHV4TWVzc2FnZVtdIHtcbiAgICByZXR1cm4gdGhpcy5fbHV4TWVzc2FnZXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgbmdPbkluaXQoKSB7fVxuXG4gIC8qKlxuICAgKiBXaXJkIGF1ZmdlcnVmZW4sIHdlbm4gZGVyIENsb3NlLUJ1dHRvbiBmw7xyIGVpbmUgTWVzc2FnZUJveCBhdWZnZXJ1ZmVuIHd1cmRlLlxuICAgKlxuICAgKiBHaWJ0IGVpbmUgRXZlbnQtUGF5bG9hZCBtaXQgZGVyIGJldHJvZmZlbmVuIE5hY2hyaWNodCBtaXQgSW5kZXggd2VpdGVyLlxuICAgKiBAcGFyYW0gJGV2ZW50XG4gICAqL1xuICBtZXNzYWdlQ2xvc2VkKCRldmVudDogSUx1eE1lc3NhZ2UpIHtcbiAgICBjb25zdCBldmVudFBheWxvYWQ6IElMdXhNZXNzYWdlQ2xvc2VFdmVudCA9IHtcbiAgICAgIGluZGV4OiB0aGlzLmx1eE1lc3NhZ2VzLmZpbmRJbmRleCgoY29tcGFyZU1lc3NhZ2U6IElMdXhNZXNzYWdlKSA9PiBjb21wYXJlTWVzc2FnZSA9PT0gJGV2ZW50KSxcbiAgICAgIG1lc3NhZ2U6ICRldmVudFxuICAgIH07XG4gICAgdGhpcy5sdXhNZXNzYWdlQ2xvc2VkLmVtaXQoZXZlbnRQYXlsb2FkKTtcblxuICAgIHRoaXMubHV4TWVzc2FnZXMgPSB0aGlzLmx1eE1lc3NhZ2VzLmZpbHRlcigobWVzc2FnZTogSUx1eE1lc3NhZ2UpID0+IG1lc3NhZ2UgIT09ICRldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQWt0dWFsaXNpZXJ0IGRpZSBhbmdlemVpZ3RlbiBOYWNocmljaHRlbiB1bmQgZGVuIFBhZ2luYXRvcixcbiAgICogZ2lidCBhdcOfZXJkZW0gZGFzIENoYW5nZS1FdmVudCBtaXQgZGVuIGFuZ2V6ZWlndGVuL3ZvcmhlcmlnZW4gTmFjaHJpY2h0ZW4uXG4gICAqIEBwYXJhbSAkZXZlbnRcbiAgICovXG4gIHBhZ2VDaGFuZ2VkKCRldmVudDogUGFnZUV2ZW50KSB7XG4gICAgY29uc3QgcHJldmlvdXNEaXNwbGF5ZWRNZXNzYWdlcyA9IFsuLi50aGlzLmRpc3BsYXllZE1lc3NhZ2VzXTtcbiAgICBjb25zdCBwcmV2aW91c0luZGV4ID0gdGhpcy5sdXhJbmRleDtcblxuICAgIHRoaXMudXBkYXRlRGlzcGxheWVkTWVzc2FnZXMoJGV2ZW50LnBhZ2VJbmRleCk7XG5cbiAgICBjb25zdCBtZXNzYWdlQ2hhbmdlUGF5bG9hZDogSUx1eE1lc3NhZ2VDaGFuZ2VFdmVudCA9IHtcbiAgICAgIGN1cnJlbnRQYWdlOiB7XG4gICAgICAgIGluZGV4OiB0aGlzLmx1eEluZGV4LFxuICAgICAgICBtZXNzYWdlczogWy4uLnRoaXMuZGlzcGxheWVkTWVzc2FnZXNdXG4gICAgICB9LFxuICAgICAgcHJldmlvdXNQYWdlOiB7XG4gICAgICAgIGluZGV4OiBwcmV2aW91c0luZGV4LFxuICAgICAgICBtZXNzYWdlczogcHJldmlvdXNEaXNwbGF5ZWRNZXNzYWdlc1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmx1eE1lc3NhZ2VDaGFuZ2VkLmVtaXQobWVzc2FnZUNoYW5nZVBheWxvYWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFrdHVhbGlzaWVydCBkaWUgYWt0dWVsbCBhbmdlemVpZ3RlbiBOYWNocmljaHRlbiBhbmhhbmQgZGVzIEluZGV4LlxuICAgKiBAcGFyYW0gcGFnZUluZGV4XG4gICAqIEBwYXJhbSBwYWdlU2l6ZVxuICAgKi9cbiAgdXBkYXRlRGlzcGxheWVkTWVzc2FnZXMocGFnZUluZGV4OiBudW1iZXIpIHtcbiAgICBjb25zdCBzdGFydCA9IHBhZ2VJbmRleCAqIHRoaXMubHV4TWF4aW11bURpc3BsYXllZDtcbiAgICBjb25zdCBlbmQgPSBzdGFydCArIHRoaXMubHV4TWF4aW11bURpc3BsYXllZDtcblxuICAgIC8vIFdlbm4gZGVyIGx1eEluZGV4IHVuZCBkZXIgUGFnZUluZGV4IHVuZ2xlaWNoIHNpbmQsIGRlbiBsdXhJbmRleCBha3R1YWxpc2llcmVuXG4gICAgaWYgKHRoaXMubHV4SW5kZXggIT09IHBhZ2VJbmRleCkge1xuICAgICAgdGhpcy5fbHV4SW5kZXggPSBwYWdlSW5kZXg7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2tlbiwgb2IgZGVyIEluZGV4IG5pY2h0IGRpZSBBcnJheS1HcsO2w59lIHNwcmVuZ3RcbiAgICBpZiAodGhpcy5sdXhJbmRleCA+IHRoaXMubHV4TWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9sdXhJbmRleCA9IHRoaXMubHV4TWVzc2FnZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmx1eEluZGV4IDwgMCkge1xuICAgICAgdGhpcy5fbHV4SW5kZXggPSAwO1xuICAgIH1cblxuICAgIC8vIE5hY2hyaWNodGVuIGFrdHVhbGlzaWVyZW5cbiAgICB0aGlzLmRpc3BsYXllZE1lc3NhZ2VzID0gdGhpcy5sdXhNZXNzYWdlcy5zbGljZShzdGFydCwgZW5kKTtcblxuICAgIC8vIFdlbm4gZGllIGFuZ2V6ZWlndGVuIE5hY2hyaWNodGVuIGxlZXIgc2luZCwgYWJlciBub2NoIHdlaXRlcmUgdm9yaGFuZGVuIHNpbmQsIGRpZSB2b3JoZXJpZ2UgU2VpdGUgYW56ZWlnZW5cbiAgICBpZiAodGhpcy5kaXNwbGF5ZWRNZXNzYWdlcy5sZW5ndGggPT09IDAgJiYgdGhpcy5sdXhNZXNzYWdlcy5sZW5ndGggPiAwICYmIHRoaXMubHV4SW5kZXggPiAwKSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXllZE1lc3NhZ2VzKHRoaXMubHV4SW5kZXggLSAxKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==