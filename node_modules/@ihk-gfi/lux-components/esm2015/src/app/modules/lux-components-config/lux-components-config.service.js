import * as tslib_1 from "tslib";
var LuxComponentsConfigService_1;
import { Inject, Injectable, Optional } from '@angular/core';
import { LuxConfigTokenService } from './lux-components-config.module';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./lux-components-config.module";
/**
 * Dieser Service wird dazu verwendet, auf die Konfiguration der LuxComponents zuzugreifen und diese auszulesen bzw.
 * auch zu aktualisieren.
 */
let LuxComponentsConfigService = LuxComponentsConfigService_1 = class LuxComponentsConfigService {
    constructor(config) {
        // Subject mit dem aktuellen Konfig-Wert, welcher ausgelesen werden kann
        this.config$ = new BehaviorSubject(null);
        // Wenn keine Konfiguration geladen werden konnte, Standard-Konfig benutzen und eine Warnung ausgeben.
        if (!config) {
            console.warn('Achtung: Es wurde keine Konfiguration für die LuxComponents definiert.\n', 'Benutze Standard-Konfiguration:', LuxComponentsConfigService_1.DEFAULT_CONFIG);
            this.config$.next(LuxComponentsConfigService_1.DEFAULT_CONFIG);
        }
        else {
            this.config$.next(this.mergeDefaultData(config));
        }
    }
    /**
     * Gibt das Observable mit der aktuell gesetzten Konfiguration zurück.
     */
    get config() {
        return this.config$.asObservable();
    }
    /**
     * Gibt die aktuell gesetzte Konfiguration direkt zurück.
     */
    get currentConfig() {
        return this.config$.getValue();
    }
    /**
     * Gibt zurück, ob die Labels als Uppercase gekennzeichnet sind und ob
     * die übergebenen Selektoren in den Ausnahmen geführt sind.
     * @param selector
     */
    isLabelUppercaseForSelector(selector) {
        const config = this.config$.value;
        return config.labelConfiguration.allUppercase && config.labelConfiguration.notAppliedTo.indexOf(selector) === -1;
    }
    /**
     * Ersetzt die aktuelle Konfiguration mit der übergebenen (wenn gültiger Wert).
     * @param config
     */
    updateConfiguration(config) {
        if (!config) {
            console.warn('Die übergebene Konfiguration ist undefined/null und wird nicht übernommen.');
        }
        else {
            this.config$.next(this.mergeDefaultData(config));
        }
    }
    /**
     * Kombiniert die übergebene Konfiguration mit der Standard-Konfig.
     *
     * Übernimmt die Werte aus der Standard-Konfig, die nicht im übergebenen gesetzt wurden.
     * @param config
     */
    mergeDefaultData(config) {
        const mergedConfig = {};
        Object.keys(config).forEach((key) => {
            mergedConfig[key] = config[key];
        });
        Object.keys(LuxComponentsConfigService_1.DEFAULT_CONFIG).forEach((key) => {
            if (mergedConfig[key] === undefined || mergedConfig[key] === null) {
                mergedConfig[key] = LuxComponentsConfigService_1.DEFAULT_CONFIG[key];
            }
        });
        return mergedConfig;
    }
};
// Fallback-Konfiguration, falls sonst keine gefunden werden konnte
LuxComponentsConfigService.DEFAULT_CONFIG = {
    displayLuxConsoleLogs: false,
    generateLuxTagIds: false,
    lookupServiceUrl: '/lookup/',
    labelConfiguration: {
        allUppercase: true,
        notAppliedTo: ['lux-link', 'lux-side-nav-item', 'lux-menu-item']
    },
    cardExpansionAnimationActive: true,
    displayBindingDebugHint: true,
    rippleConfiguration: {
        exitDuration: 500,
        enterDuration: 500
    }
};
LuxComponentsConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LuxConfigTokenService,] }, { type: Optional }] }
];
LuxComponentsConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxComponentsConfigService_Factory() { return new LuxComponentsConfigService(i0.ɵɵinject(i1.LuxConfigTokenService, 8)); }, token: LuxComponentsConfigService, providedIn: "root" });
LuxComponentsConfigService = LuxComponentsConfigService_1 = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(0, Inject(LuxConfigTokenService)), tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [Object])
], LuxComponentsConfigService);
export { LuxComponentsConfigService };
//# sourceMappingURL=data:application/json;base64,