import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
export var day = 'Tagen', week = 'Wochen', month = 'Monaten', year = 'Jahren';
export var today = 'Heute', yesterday = 'Gestern', tomorrow = 'Morgen';
export var prefixFuture = 'in', prefixPast = 'vor';
export var MS_PER_DAY = 1000 * 60 * 60 * 24;
export var timeDeltas = [
    { name: year, days: 672, dayUnit: 336 },
    { name: month, days: 56, dayUnit: 28 },
    { name: week, days: 14, dayUnit: 7 },
    { name: day, days: 2, dayUnit: 1 }
];
export var timeDeltasRelative = [
    { name: tomorrow, days: 1 },
    { name: yesterday, days: -1 },
    { name: today, days: 0 }
];
var LuxRelativeTimestampPipe = /** @class */ (function () {
    function LuxRelativeTimestampPipe() {
    }
    LuxRelativeTimestampPipe.prototype.transform = function (timestamp, defaultText, prefix) {
        var e_1, _a, e_2, _b;
        if (defaultText === void 0) { defaultText = ''; }
        if (!timestamp) {
            return defaultText;
        }
        var now = new Date();
        var then = new Date(timestamp);
        var delta = this.calcDiff(now, then);
        var timeName = null;
        try {
            for (var timeDeltas_1 = tslib_1.__values(timeDeltas), timeDeltas_1_1 = timeDeltas_1.next(); !timeDeltas_1_1.done; timeDeltas_1_1 = timeDeltas_1.next()) {
                var timeDelta = timeDeltas_1_1.value;
                var tempDelta = delta < 0 ? delta * -1 : delta;
                if (tempDelta >= timeDelta.days) {
                    if (!prefix) {
                        prefix = delta < 0 ? prefixPast : prefixFuture;
                    }
                    var timeUnits = timeDelta.name === day ? tempDelta : Math.floor(tempDelta / timeDelta.dayUnit);
                    timeUnits *= timeUnits < 0 ? -1 : 1;
                    timeName = prefix + " " + timeUnits + " " + timeDelta.name;
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (timeDeltas_1_1 && !timeDeltas_1_1.done && (_a = timeDeltas_1.return)) _a.call(timeDeltas_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (timeName === null) {
            try {
                for (var timeDeltasRelative_1 = tslib_1.__values(timeDeltasRelative), timeDeltasRelative_1_1 = timeDeltasRelative_1.next(); !timeDeltasRelative_1_1.done; timeDeltasRelative_1_1 = timeDeltasRelative_1.next()) {
                    var timeDelta = timeDeltasRelative_1_1.value;
                    if (delta === timeDelta.days) {
                        timeName = timeDelta.name;
                        break;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (timeDeltasRelative_1_1 && !timeDeltasRelative_1_1.done && (_b = timeDeltasRelative_1.return)) _b.call(timeDeltasRelative_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return timeName;
    };
    LuxRelativeTimestampPipe.prototype.calcDiff = function (a, b) {
        var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
        var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
        return Math.floor((utc2 - utc1) / MS_PER_DAY);
    };
    LuxRelativeTimestampPipe = tslib_1.__decorate([
        Pipe({
            name: 'luxRelativeTimestamp'
        })
    ], LuxRelativeTimestampPipe);
    return LuxRelativeTimestampPipe;
}());
export { LuxRelativeTimestampPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXJlbGF0aXZlLXRpbWVzdGFtcC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LXBpcGVzL2x1eC1yZWxhdGl2ZS10aW1lc3RhbXAvbHV4LXJlbGF0aXZlLXRpbWVzdGFtcC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRCxNQUFNLENBQUMsSUFBTSxHQUFHLEdBQUcsT0FBTyxFQUN4QixJQUFJLEdBQUcsUUFBUSxFQUNmLEtBQUssR0FBRyxTQUFTLEVBQ2pCLElBQUksR0FBRyxRQUFRLENBQUM7QUFDbEIsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFHLE9BQU8sRUFDMUIsU0FBUyxHQUFHLFNBQVMsRUFDckIsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUN0QixNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsSUFBSSxFQUM5QixVQUFVLEdBQUcsS0FBSyxDQUFDO0FBRXJCLE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFFOUMsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFHO0lBQ3hCLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7SUFDdkMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtJQUN0QyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO0lBQ3BDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7Q0FDbkMsQ0FB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QjtRQUhwQyxJQUFJLENBQUM7WUFDSixJQUFJLEVBQUUsc0JBQXNCO1NBQzdCLENBQUM7T0FDVyx3QkFBd0IsQ0E0Q3BDO0lBQUQsK0JBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQTVDWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBkYXkgPSAnVGFnZW4nLFxuICB3ZWVrID0gJ1dvY2hlbicsXG4gIG1vbnRoID0gJ01vbmF0ZW4nLFxuICB5ZWFyID0gJ0phaHJlbic7XG5leHBvcnQgY29uc3QgdG9kYXkgPSAnSGV1dGUnLFxuICB5ZXN0ZXJkYXkgPSAnR2VzdGVybicsXG4gIHRvbW9ycm93ID0gJ01vcmdlbic7XG5leHBvcnQgY29uc3QgcHJlZml4RnV0dXJlID0gJ2luJyxcbiAgcHJlZml4UGFzdCA9ICd2b3InO1xuXG5leHBvcnQgY29uc3QgTVNfUEVSX0RBWSA9IDEwMDAgKiA2MCAqIDYwICogMjQ7XG5cbmV4cG9ydCBjb25zdCB0aW1lRGVsdGFzID0gW1xuICB7IG5hbWU6IHllYXIsIGRheXM6IDY3MiwgZGF5VW5pdDogMzM2IH0sXG4gIHsgbmFtZTogbW9udGgsIGRheXM6IDU2LCBkYXlVbml0OiAyOCB9LFxuICB7IG5hbWU6IHdlZWssIGRheXM6IDE0LCBkYXlVbml0OiA3IH0sXG4gIHsgbmFtZTogZGF5LCBkYXlzOiAyLCBkYXlVbml0OiAxIH1cbl07XG5cbmV4cG9ydCBjb25zdCB0aW1lRGVsdGFzUmVsYXRpdmUgPSBbXG4gIHsgbmFtZTogdG9tb3Jyb3csIGRheXM6IDEgfSxcbiAgeyBuYW1lOiB5ZXN0ZXJkYXksIGRheXM6IC0xIH0sXG4gIHsgbmFtZTogdG9kYXksIGRheXM6IDAgfVxuXTtcblxuQFBpcGUoe1xuICBuYW1lOiAnbHV4UmVsYXRpdmVUaW1lc3RhbXAnXG59KVxuZXhwb3J0IGNsYXNzIEx1eFJlbGF0aXZlVGltZXN0YW1wUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0odGltZXN0YW1wOiBudW1iZXIsIGRlZmF1bHRUZXh0OiBzdHJpbmcgPSAnJywgcHJlZml4Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIXRpbWVzdGFtcCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUZXh0O1xuICAgIH1cblxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgdGhlbiA9IG5ldyBEYXRlKHRpbWVzdGFtcCk7XG5cbiAgICBjb25zdCBkZWx0YSA9IHRoaXMuY2FsY0RpZmYobm93LCB0aGVuKTtcbiAgICBsZXQgdGltZU5hbWUgPSBudWxsO1xuXG4gICAgZm9yIChjb25zdCB0aW1lRGVsdGEgb2YgdGltZURlbHRhcykge1xuICAgICAgY29uc3QgdGVtcERlbHRhID0gZGVsdGEgPCAwID8gZGVsdGEgKiAtMSA6IGRlbHRhO1xuXG4gICAgICBpZiAodGVtcERlbHRhID49IHRpbWVEZWx0YS5kYXlzKSB7XG4gICAgICAgIGlmICghcHJlZml4KSB7XG4gICAgICAgICAgcHJlZml4ID0gZGVsdGEgPCAwID8gcHJlZml4UGFzdCA6IHByZWZpeEZ1dHVyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0aW1lVW5pdHMgPSB0aW1lRGVsdGEubmFtZSA9PT0gZGF5ID8gdGVtcERlbHRhIDogTWF0aC5mbG9vcih0ZW1wRGVsdGEgLyB0aW1lRGVsdGEuZGF5VW5pdCk7XG4gICAgICAgIHRpbWVVbml0cyAqPSB0aW1lVW5pdHMgPCAwID8gLTEgOiAxO1xuICAgICAgICB0aW1lTmFtZSA9IGAke3ByZWZpeH0gJHt0aW1lVW5pdHN9ICR7dGltZURlbHRhLm5hbWV9YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVOYW1lID09PSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IHRpbWVEZWx0YSBvZiB0aW1lRGVsdGFzUmVsYXRpdmUpIHtcbiAgICAgICAgaWYgKGRlbHRhID09PSB0aW1lRGVsdGEuZGF5cykge1xuICAgICAgICAgIHRpbWVOYW1lID0gdGltZURlbHRhLm5hbWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRpbWVOYW1lO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjRGlmZihhLCBiKSB7XG4gICAgY29uc3QgdXRjMSA9IERhdGUuVVRDKGEuZ2V0RnVsbFllYXIoKSwgYS5nZXRNb250aCgpLCBhLmdldERhdGUoKSk7XG4gICAgY29uc3QgdXRjMiA9IERhdGUuVVRDKGIuZ2V0RnVsbFllYXIoKSwgYi5nZXRNb250aCgpLCBiLmdldERhdGUoKSk7XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcigodXRjMiAtIHV0YzEpIC8gTVNfUEVSX0RBWSk7XG4gIH1cbn1cbiJdfQ==