import * as tslib_1 from "tslib";
import { MatTableDataSource } from '@angular/material';
/**
 * Diese Ableitung berücksichtigt bei der Sortierung Sonderzeichen (z.B. öäüßé,...)
 * und ignoriert die Groß- und Kleinschreibung.
 */
var LuxTableDataSource = /** @class */ (function (_super) {
    tslib_1.__extends(LuxTableDataSource, _super);
    function LuxTableDataSource() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        _this_1.selectedEntries = new Set();
        return _this_1;
    }
    /**
     * Diese Methode liefert eine sortierte Kopie des Datenarrays zurück.
     * Die Sortierung berücksichtig ist nicht Case-Sensitive und berücksichtig
     * Sonderzeichen (z.B. öäüßé,...)
     */
    LuxTableDataSource.prototype._orderData = function (data) {
        var _this_1 = this;
        var _this = this;
        if (!this.sort || !this.sort.active || this.sort.direction === '') {
            return data;
        }
        var active = this.sort.active;
        var direction = this.sort.direction;
        if (active === 'multiSelect') {
            // muss checken welche in dem sorted array sind und alle anderen darunter
            var selected_1 = data.filter(function (value) { return _this_1.selectedEntries.has(value); });
            var notSelected = data.filter(function (value) { return !selected_1.some(function (selectedValue) { return selectedValue === value; }); });
            if (direction === 'asc') {
                return tslib_1.__spread(selected_1, notSelected);
            }
            else if (direction === 'desc') {
                return tslib_1.__spread(notSelected, selected_1);
            }
            else {
                return data.slice();
            }
        }
        return data.slice().sort(function (a, b) {
            var valueA = _this.sortingDataAccessor(a, active);
            var valueB = _this.sortingDataAccessor(b, active);
            if (!valueA) {
                valueA = '';
            }
            if (!valueB) {
                valueB = '';
            }
            if (typeof valueA === 'number' && typeof valueB === 'string') {
                valueA = '' + valueA;
            }
            if (typeof valueA === 'string' && typeof valueB === 'number') {
                valueB = '' + valueB;
            }
            if (typeof valueA === 'string' && typeof valueB === 'string') {
                var stringA = valueA.toLocaleLowerCase();
                var stringB = valueB.toLocaleLowerCase();
                return stringA.localeCompare(stringB) * (direction === 'asc' ? 1 : -1);
            }
            return (valueA < valueB ? -1 : 1) * (direction === 'asc' ? 1 : -1);
        });
    };
    /**
     * Override update paginator method
     * to ensure total unfiltered element count is consistent with the http result
     */
    LuxTableDataSource.prototype._updatePaginator = function (filteredDataLength) {
        if (this.filter === '') {
            _super.prototype._updatePaginator.call(this, this.totalElements);
        }
        else {
            _super.prototype._updatePaginator.call(this, filteredDataLength);
        }
    };
    return LuxTableDataSource;
}(MatTableDataSource));
export { LuxTableDataSource };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXRhYmxlLWRhdGEtc291cmNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWNvbW1vbi9sdXgtdGFibGUvbHV4LXRhYmxlLWRhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV2RDs7O0dBR0c7QUFDSDtJQUEyQyw4Q0FBcUI7SUFBaEU7UUFBQSx1RUF5RUM7UUF2RUMsdUJBQWUsR0FBYSxJQUFJLEdBQUcsRUFBTyxDQUFDOztJQXVFN0MsQ0FBQztJQXJFQzs7OztPQUlHO0lBQ0gsdUNBQVUsR0FBVixVQUFXLElBQVM7UUFBcEIsbUJBbURDO1FBbERDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtZQUNqRSxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDaEMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFdEMsSUFBSSxNQUFNLEtBQUssYUFBYSxFQUFFO1lBQzVCLHlFQUF5RTtZQUN6RSxJQUFNLFVBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsT0FBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQS9CLENBQStCLENBQUMsQ0FBQztZQUN2RSxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsQ0FBQyxVQUFRLENBQUMsSUFBSSxDQUFDLFVBQUEsYUFBYSxJQUFJLE9BQUEsYUFBYSxLQUFLLEtBQUssRUFBdkIsQ0FBdUIsQ0FBQyxFQUF4RCxDQUF3RCxDQUFDLENBQUM7WUFFbkcsSUFBSSxTQUFTLEtBQUssS0FBSyxFQUFFO2dCQUN2Qix3QkFBVyxVQUFRLEVBQUssV0FBVyxFQUFFO2FBQ3RDO2lCQUFNLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRTtnQkFDL0Isd0JBQVcsV0FBVyxFQUFLLFVBQVEsRUFBRTthQUN0QztpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNyQjtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7WUFDNUIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsRCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRWxELElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsTUFBTSxHQUFHLEVBQUUsQ0FBQzthQUNiO1lBRUQsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxNQUFNLEdBQUcsRUFBRSxDQUFDO2FBQ2I7WUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQzVELE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO2FBQ3RCO1lBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUM1RCxNQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQzthQUN0QjtZQUVELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtnQkFDNUQsSUFBTSxPQUFPLEdBQUksTUFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUN2RCxJQUFNLE9BQU8sR0FBSSxNQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7Z0JBQ3ZELE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4RTtZQUVELE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksNkNBQWdCLEdBQXZCLFVBQXdCLGtCQUEwQjtRQUNoRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ3RCLGlCQUFNLGdCQUFnQixZQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsaUJBQU0sZ0JBQWdCLFlBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUM1QztJQUNILENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUF6RUQsQ0FBMkMsa0JBQWtCLEdBeUU1RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdFRhYmxlRGF0YVNvdXJjZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuLyoqXG4gKiBEaWVzZSBBYmxlaXR1bmcgYmVyw7xja3NpY2h0aWd0IGJlaSBkZXIgU29ydGllcnVuZyBTb25kZXJ6ZWljaGVuICh6LkIuIMO2w6TDvMOfw6ksLi4uKVxuICogdW5kIGlnbm9yaWVydCBkaWUgR3Jvw58tIHVuZCBLbGVpbnNjaHJlaWJ1bmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBMdXhUYWJsZURhdGFTb3VyY2U8VD4gZXh0ZW5kcyBNYXRUYWJsZURhdGFTb3VyY2U8VD4ge1xuICB0b3RhbEVsZW1lbnRzOiBudW1iZXI7XG4gIHNlbGVjdGVkRW50cmllczogU2V0PGFueT4gPSBuZXcgU2V0PGFueT4oKTtcblxuICAvKipcbiAgICogRGllc2UgTWV0aG9kZSBsaWVmZXJ0IGVpbmUgc29ydGllcnRlIEtvcGllIGRlcyBEYXRlbmFycmF5cyB6dXLDvGNrLlxuICAgKiBEaWUgU29ydGllcnVuZyBiZXLDvGNrc2ljaHRpZyBpc3QgbmljaHQgQ2FzZS1TZW5zaXRpdmUgdW5kIGJlcsO8Y2tzaWNodGlnXG4gICAqIFNvbmRlcnplaWNoZW4gKHouQi4gw7bDpMO8w5/DqSwuLi4pXG4gICAqL1xuICBfb3JkZXJEYXRhKGRhdGE6IFRbXSk6IFRbXSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGlmICghdGhpcy5zb3J0IHx8ICF0aGlzLnNvcnQuYWN0aXZlIHx8IHRoaXMuc29ydC5kaXJlY3Rpb24gPT09ICcnKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLnNvcnQuYWN0aXZlO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuc29ydC5kaXJlY3Rpb247XG5cbiAgICBpZiAoYWN0aXZlID09PSAnbXVsdGlTZWxlY3QnKSB7XG4gICAgICAvLyBtdXNzIGNoZWNrZW4gd2VsY2hlIGluIGRlbSBzb3J0ZWQgYXJyYXkgc2luZCB1bmQgYWxsZSBhbmRlcmVuIGRhcnVudGVyXG4gICAgICBjb25zdCBzZWxlY3RlZCA9IGRhdGEuZmlsdGVyKHZhbHVlID0+IHRoaXMuc2VsZWN0ZWRFbnRyaWVzLmhhcyh2YWx1ZSkpO1xuICAgICAgY29uc3Qgbm90U2VsZWN0ZWQgPSBkYXRhLmZpbHRlcih2YWx1ZSA9PiAhc2VsZWN0ZWQuc29tZShzZWxlY3RlZFZhbHVlID0+IHNlbGVjdGVkVmFsdWUgPT09IHZhbHVlKSk7XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdhc2MnKSB7XG4gICAgICAgIHJldHVybiBbLi4uc2VsZWN0ZWQsIC4uLm5vdFNlbGVjdGVkXTtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGVzYycpIHtcbiAgICAgICAgcmV0dXJuIFsuLi5ub3RTZWxlY3RlZCwgLi4uc2VsZWN0ZWRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc2xpY2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YS5zbGljZSgpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGxldCB2YWx1ZUEgPSBfdGhpcy5zb3J0aW5nRGF0YUFjY2Vzc29yKGEsIGFjdGl2ZSk7XG4gICAgICBsZXQgdmFsdWVCID0gX3RoaXMuc29ydGluZ0RhdGFBY2Nlc3NvcihiLCBhY3RpdmUpO1xuXG4gICAgICBpZiAoIXZhbHVlQSkge1xuICAgICAgICB2YWx1ZUEgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKCF2YWx1ZUIpIHtcbiAgICAgICAgdmFsdWVCID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWVBID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdmFsdWVCID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YWx1ZUEgPSAnJyArIHZhbHVlQTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZUEgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZUIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhbHVlQiA9ICcnICsgdmFsdWVCO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlQSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlQiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3Qgc3RyaW5nQSA9ICh2YWx1ZUEgYXMgc3RyaW5nKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBzdHJpbmdCID0gKHZhbHVlQiBhcyBzdHJpbmcpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBzdHJpbmdBLmxvY2FsZUNvbXBhcmUoc3RyaW5nQikgKiAoZGlyZWN0aW9uID09PSAnYXNjJyA/IDEgOiAtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAodmFsdWVBIDwgdmFsdWVCID8gLTEgOiAxKSAqIChkaXJlY3Rpb24gPT09ICdhc2MnID8gMSA6IC0xKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB1cGRhdGUgcGFnaW5hdG9yIG1ldGhvZFxuICAgKiB0byBlbnN1cmUgdG90YWwgdW5maWx0ZXJlZCBlbGVtZW50IGNvdW50IGlzIGNvbnNpc3RlbnQgd2l0aCB0aGUgaHR0cCByZXN1bHRcbiAgICovXG4gIHB1YmxpYyBfdXBkYXRlUGFnaW5hdG9yKGZpbHRlcmVkRGF0YUxlbmd0aDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZmlsdGVyID09PSAnJykge1xuICAgICAgc3VwZXIuX3VwZGF0ZVBhZ2luYXRvcih0aGlzLnRvdGFsRWxlbWVudHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5fdXBkYXRlUGFnaW5hdG9yKGZpbHRlcmVkRGF0YUxlbmd0aCk7XG4gICAgfVxuICB9XG59XG4iXX0=