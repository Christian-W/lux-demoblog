import * as tslib_1 from "tslib";
import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { visibilityTrigger } from './lux-message-box-model/lux-message-box.animations';
import { MatPaginatorIntl } from '@angular/material';
import { LuxPaginatorIntl } from '../../lux-util/lux-paginator-intl';
var LuxMessageBoxComponent = /** @class */ (function () {
    function LuxMessageBoxComponent() {
        this._luxMessages = [];
        this._luxMaximumDisplayed = 1;
        this._luxIndex = 0;
        this.displayedMessages = [];
        this.boxShadow = true;
        this.luxMessageChanged = new EventEmitter();
        this.luxMessageClosed = new EventEmitter();
        this.luxMessageBoxClosed = new EventEmitter();
    }
    Object.defineProperty(LuxMessageBoxComponent.prototype, "luxIndex", {
        get: function () {
            return this._luxIndex;
        },
        set: function (index) {
            if (index < 0) {
                index = 0;
            }
            if (index > this.luxMessages.length) {
                index = this.luxMessages.length;
            }
            this._luxIndex = index;
            this.updateDisplayedMessages(index);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxMessageBoxComponent.prototype, "luxMaximumDisplayed", {
        get: function () {
            return this._luxMaximumDisplayed;
        },
        set: function (max) {
            if (max < 0) {
                max = 0;
            }
            this._luxMaximumDisplayed = max;
            this.updateDisplayedMessages(this.luxIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxMessageBoxComponent.prototype, "luxMessages", {
        get: function () {
            return this._luxMessages;
        },
        set: function (messages) {
            if (messages && messages.length > 0) {
                this._luxMessages = messages;
                this.updateDisplayedMessages(this.luxIndex);
            }
            else {
                // Wenn es vorher Werte gab, ein Closed-Event ausgeben
                if (this.luxMessages.length > 0) {
                    this.luxMessageBoxClosed.emit();
                }
                this._luxMessages = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    LuxMessageBoxComponent.prototype.ngOnInit = function () { };
    /**
     * Wird aufgerufen, wenn der Close-Button für eine MessageBox aufgerufen wurde.
     *
     * Gibt eine Event-Payload mit der betroffenen Nachricht mit Index weiter.
     * @param $event
     */
    LuxMessageBoxComponent.prototype.messageClosed = function ($event) {
        var eventPayload = {
            index: this.luxMessages.findIndex(function (compareMessage) { return compareMessage === $event; }),
            message: $event
        };
        this.luxMessageClosed.emit(eventPayload);
        this.luxMessages = this.luxMessages.filter(function (message) { return message !== $event; });
    };
    /**
     * Aktualisiert die angezeigten Nachrichten und den Paginator,
     * gibt außerdem das Change-Event mit den angezeigten/vorherigen Nachrichten.
     * @param $event
     */
    LuxMessageBoxComponent.prototype.pageChanged = function ($event) {
        var previousDisplayedMessages = tslib_1.__spread(this.displayedMessages);
        var previousIndex = this.luxIndex;
        this.updateDisplayedMessages($event.pageIndex);
        var messageChangePayload = {
            currentPage: {
                index: this.luxIndex,
                messages: tslib_1.__spread(this.displayedMessages)
            },
            previousPage: {
                index: previousIndex,
                messages: previousDisplayedMessages
            }
        };
        this.luxMessageChanged.emit(messageChangePayload);
    };
    /**
     * Aktualisiert die aktuell angezeigten Nachrichten anhand des Index.
     * @param pageIndex
     * @param pageSize
     */
    LuxMessageBoxComponent.prototype.updateDisplayedMessages = function (pageIndex) {
        var start = pageIndex * this.luxMaximumDisplayed;
        var end = start + this.luxMaximumDisplayed;
        // Wenn der luxIndex und der PageIndex ungleich sind, den luxIndex aktualisieren
        if (this.luxIndex !== pageIndex) {
            this._luxIndex = pageIndex;
        }
        // Checken, ob der Index nicht die Array-Größe sprengt
        if (this.luxIndex > this.luxMessages.length) {
            this._luxIndex = this.luxMessages.length;
        }
        if (this.luxIndex < 0) {
            this._luxIndex = 0;
        }
        // Nachrichten aktualisieren
        this.displayedMessages = this.luxMessages.slice(start, end);
        // Wenn die angezeigten Nachrichten leer sind, aber noch weitere vorhanden sind, die vorherige Seite anzeigen
        if (this.displayedMessages.length === 0 && this.luxMessages.length > 0 && this.luxIndex > 0) {
            this.updateDisplayedMessages(this.luxIndex - 1);
        }
    };
    tslib_1.__decorate([
        HostBinding('class.mat-elevation-z4'),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxMessageBoxComponent.prototype, "boxShadow", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxMessageBoxComponent.prototype, "luxMessageChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxMessageBoxComponent.prototype, "luxMessageClosed", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxMessageBoxComponent.prototype, "luxMessageBoxClosed", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], LuxMessageBoxComponent.prototype, "luxIndex", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], LuxMessageBoxComponent.prototype, "luxMaximumDisplayed", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], LuxMessageBoxComponent.prototype, "luxMessages", null);
    LuxMessageBoxComponent = tslib_1.__decorate([
        Component({
            selector: 'lux-message-box',
            template: "<div fxLayout=\"column\" [@messageBoxVisibility] luxAriaRole=\"list\" *ngIf=\"luxMessages && luxMessages.length > 0\">\n  <ng-container *ngFor=\"let displayedMessage of displayedMessages\">\n    <lux-message\n      class=\"lux-message-box mat-elevation-z1\"\n      [luxMessage]=\"displayedMessage\"\n      (luxMessageClosed)=\"messageClosed($event)\"\n    >\n    </lux-message>\n  </ng-container>\n  <div\n    class=\"lux-message-box-footer\"\n    [ngClass]=\"{ 'lux-display-none': luxMessages.length === 1 || luxMaximumDisplayed >= luxMessages.length }\"\n  >\n    <mat-paginator\n      [length]=\"luxMessages.length\"\n      [pageSize]=\"luxMaximumDisplayed\"\n      [hidePageSize]=\"true\"\n      [pageIndex]=\"luxIndex\"\n      (page)=\"pageChanged($event)\"\n    >\n    </mat-paginator>\n  </div>\n</div>\n",
            animations: [visibilityTrigger],
            providers: [{ provide: MatPaginatorIntl, useClass: LuxPaginatorIntl }],
            styles: [":host{display:block;overflow:hidden}:host .lux-message-box{margin-bottom:2px}:host .lux-display-none{display:none}:host ::ng-deep lux-button ::ng-deep button,:host ::ng-deep lux-button ::ng-deep lux-icon{width:32px;max-width:32px;min-width:32px;font-size:.75em;padding:0}:host ::ng-deep lux-button ::ng-deep .mat-button-focus-overlay,:host ::ng-deep lux-button ::ng-deep .mat-button-ripple{display:none}:host ::ng-deep .lux-message-container{padding:0 24px}:host ::ng-deep .lux-hidden{visibility:hidden}:host mat-paginator ::ng-deep .mat-paginator-container{padding:0 20px!important}"]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], LuxMessageBoxComponent);
    return LuxMessageBoxComponent;
}());
export { LuxMessageBoxComponent };
//# sourceMappingURL=data:application/json;base64,