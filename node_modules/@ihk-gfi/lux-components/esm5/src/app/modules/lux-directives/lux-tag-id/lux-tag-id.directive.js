import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { LuxUtil } from '../../lux-util/lux-util';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
import { luxFormControlSelektor } from '../../lux-form/lux-form-control/lux-form-control.component';
var LuxTagIdDirective = /** @class */ (function () {
    function LuxTagIdDirective(elementRef, renderer, componentsConfigService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.componentsConfigService = componentsConfigService;
    }
    LuxTagIdDirective_1 = LuxTagIdDirective;
    LuxTagIdDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.configSubscription = this.componentsConfigService.config.subscribe(function (newConfig) {
            _this.generateLuxTagIds = newConfig.generateLuxTagIds;
        });
    };
    LuxTagIdDirective.prototype.ngAfterViewInit = function () {
        if (this.generateLuxTagIds) {
            var luxComponent = this.findLuxComponent(this.elementRef.nativeElement);
            if (luxComponent) {
                var newTagId = this.luxTagId;
                if (!newTagId) {
                    newTagId = this.getLuxTagId(luxComponent);
                }
                if (newTagId) {
                    newTagId = this.mergeTagIds(this.getLuxTagIdParent(luxComponent.parentElement, ''), luxComponent.nodeName + LuxTagIdDirective_1.sepComponent + newTagId);
                    newTagId = newTagId.toLowerCase();
                    this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                }
                else {
                    var usedLabel = false;
                    if (luxComponent.getAttribute('luxLabel')) {
                        newTagId = this.mergeTagIds(luxComponent.getAttribute('luxLabel'), newTagId);
                        newTagId = newTagId.toLowerCase();
                        this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                        usedLabel = true;
                    }
                    else if (luxComponent.getAttribute('ng-reflect-lux-label')) {
                        newTagId = this.mergeTagIds(luxComponent.getAttribute('ng-reflect-lux-label'), newTagId);
                        newTagId = newTagId.toLowerCase();
                        this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                        usedLabel = true;
                    }
                    else if (luxComponent.getAttribute('ng-reflect-label')) {
                        newTagId = this.mergeTagIds(luxComponent.getAttribute('ng-reflect-label'), newTagId);
                        newTagId = newTagId.toLowerCase();
                        this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                        usedLabel = true;
                    }
                    else if (luxComponent.getElementsByClassName('lux-form-label')[0]) {
                        newTagId = this.mergeTagIds(luxComponent.getElementsByClassName('lux-form-label')[0].textContent.trim(), newTagId);
                        newTagId = newTagId.toLowerCase();
                        this.renderer.setAttribute(luxComponent, LuxTagIdDirective_1.luxTagIdAttrName, newTagId);
                        usedLabel = true;
                    }
                    if (!usedLabel) {
                        console.warn('Dem Tag "' +
                            this.getNodeName(luxComponent) +
                            '(' +
                            this.getParentPath(luxComponent.parentElement, '') +
                            ')' +
                            '" fehlt das luxTagId-Attribut. Dieses Attribut wird für die automatischen Tests benötigt.');
                    }
                }
            }
        }
    };
    LuxTagIdDirective.prototype.ngOnDestroy = function () {
        this.configSubscription.unsubscribe();
    };
    LuxTagIdDirective.prototype.getParentPath = function (element, currentTagId) {
        if (element && element.parentElement) {
            return this.getParentPath(element.parentElement, currentTagId + '.' + this.getNodeName(element.parentElement));
        }
        return currentTagId;
    };
    LuxTagIdDirective.prototype.getLuxTagIdParent = function (element, currentTagId) {
        if (element) {
            var newTagId = currentTagId;
            if (element.hasAttribute('luxTagId')) {
                newTagId = this.mergeTagIds('luxTagId', newTagId);
            }
            else if (element.hasAttribute(LuxTagIdDirective_1.luxTagIdAttrName)) {
                newTagId = this.mergeTagIds(element.getAttribute(LuxTagIdDirective_1.luxTagIdAttrName), newTagId);
            }
            else if (element.hasAttribute('luxcontrolbinding')) {
                newTagId = this.mergeTagIds(element.getAttribute('luxcontrolbinding'), newTagId);
            }
            else if (element.hasAttribute('formgroupname')) {
                newTagId = this.mergeTagIds('formgroup' + LuxTagIdDirective_1.sepComponent + element.getAttribute('formgroupname'), newTagId);
            }
            return this.getLuxTagIdParent(element.parentElement, newTagId);
        }
        return currentTagId;
    };
    LuxTagIdDirective.prototype.mergeTagIds = function (tagId1, tagId2) {
        var tagId;
        if (!LuxUtil.isEmpty(tagId1) && !LuxUtil.isEmpty(tagId2)) {
            tagId = tagId1 + LuxTagIdDirective_1.sepParent + tagId2;
        }
        else if (!LuxUtil.isEmpty(tagId1) && LuxUtil.isEmpty(tagId2)) {
            tagId = tagId1;
        }
        else if (LuxUtil.isEmpty(tagId1) && !LuxUtil.isEmpty(tagId2)) {
            tagId = tagId2;
        }
        else {
            tagId = '';
        }
        return tagId;
    };
    LuxTagIdDirective.prototype.getLuxTagId = function (element) {
        var newId = '';
        if (element) {
            if (element.hasAttribute('luxTagId')) {
                newId = element.getAttribute('luxTagId');
            }
            else if (element.hasAttribute(LuxTagIdDirective_1.luxTagIdAttrName)) {
                newId = element.getAttribute(LuxTagIdDirective_1.luxTagIdAttrName);
            }
            else if (element.hasAttribute('luxcontrolbinding')) {
                newId = element.getAttribute('luxcontrolbinding');
            }
            else if (element.hasAttribute('formgroupname')) {
                newId = element.getAttribute('formgroupname');
            }
        }
        return newId;
    };
    LuxTagIdDirective.prototype.findLuxComponent = function (element) {
        if (element) {
            var nodeName = this.getNodeName(element);
            if (nodeName && nodeName.startsWith('lux-'.toUpperCase()) && nodeName !== luxFormControlSelektor.toUpperCase()) {
                return element;
            }
            else {
                return this.findLuxComponent(element.parentElement);
            }
        }
        return null;
    };
    LuxTagIdDirective.prototype.getNodeName = function (element) {
        return element && element.nodeName ? element.nodeName : '';
    };
    var LuxTagIdDirective_1;
    LuxTagIdDirective.luxTagIdAttrName = 'data-luxtagid';
    LuxTagIdDirective.sepParent = '.';
    LuxTagIdDirective.sepComponent = '#';
    LuxTagIdDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LuxComponentsConfigService }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxTagIdDirective.prototype, "luxTagId", void 0);
    LuxTagIdDirective = LuxTagIdDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[luxTagIdHandler]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            LuxComponentsConfigService])
    ], LuxTagIdDirective);
    return LuxTagIdDirective;
}());
export { LuxTagIdDirective };
//# sourceMappingURL=data:application/json;base64,