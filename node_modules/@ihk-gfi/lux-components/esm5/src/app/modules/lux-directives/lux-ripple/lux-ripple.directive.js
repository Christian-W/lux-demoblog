import * as tslib_1 from "tslib";
import { Platform } from '@angular/cdk/platform';
import { Directive, ElementRef, Inject, Input, NgZone, OnDestroy, OnInit, Optional } from '@angular/core';
import { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';
import { MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple } from '@angular/material';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
// @dynamic Erklärung steht in der Datei "lux-decorators.ts".
var LuxRippleDirective = /** @class */ (function (_super) {
    tslib_1.__extends(LuxRippleDirective, _super);
    function LuxRippleDirective(configService, luxElementRef, luxNgZone, luxPlatform, luxGlobalOptions, luxAnimationMode) {
        var _this = _super.call(this, luxElementRef, luxNgZone, luxPlatform, luxGlobalOptions, luxAnimationMode) || this;
        _this.configService = configService;
        _this.luxElementRef = luxElementRef;
        _this.luxNgZone = luxNgZone;
        _this.luxPlatform = luxPlatform;
        _this.luxGlobalOptions = luxGlobalOptions;
        _this.luxAnimationMode = luxAnimationMode;
        _this._luxRippleUnbounded = false;
        _this._luxRippleCentered = false;
        _this._luxRippleDisabled = false;
        _this._luxRippleRadius = 0;
        _this._luxRippleEnterDuration = 0;
        _this._luxRippleExitDuration = 0;
        return _this;
    }
    Object.defineProperty(LuxRippleDirective.prototype, "luxRippleColor", {
        get: function () {
            return this._luxRippleColor;
        },
        set: function (value) {
            this._luxRippleColor = value;
            this.color = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxRippleDirective.prototype, "luxRippleUnbounded", {
        get: function () {
            return this._luxRippleUnbounded;
        },
        set: function (value) {
            this._luxRippleUnbounded = value;
            this.unbounded = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxRippleDirective.prototype, "luxRippleCentered", {
        get: function () {
            return this._luxRippleCentered;
        },
        set: function (value) {
            this._luxRippleCentered = value;
            this.centered = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxRippleDirective.prototype, "luxRippleRadius", {
        get: function () {
            return this._luxRippleRadius;
        },
        set: function (value) {
            this._luxRippleRadius = value;
            this.radius = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxRippleDirective.prototype, "luxRippleDisabled", {
        get: function () {
            return this._luxRippleDisabled;
        },
        set: function (value) {
            this._luxRippleDisabled = value;
            this.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxRippleDirective.prototype, "luxRippleEnterDuration", {
        get: function () {
            return this._luxRippleEnterDuration;
        },
        set: function (value) {
            this._luxRippleEnterDuration = value;
            if (!this.animation) {
                this.animation = {};
            }
            this.animation.exitDuration = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxRippleDirective.prototype, "luxRippleExitDuration", {
        get: function () {
            return this._luxRippleExitDuration;
        },
        set: function (value) {
            this._luxRippleExitDuration = value;
            if (!this.animation) {
                this.animation = {};
            }
            this.animation.exitDuration = value;
        },
        enumerable: true,
        configurable: true
    });
    LuxRippleDirective.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        // Globale Konfiguration für die LUX-Ripples auslesen und die Component entsprechend aktualisieren
        this.configSubscription = this.configService.config.subscribe(function (_a) {
            var rippleConfiguration = _a.rippleConfiguration;
            if (rippleConfiguration) {
                _this.luxRippleEnterDuration = rippleConfiguration.enterDuration;
                _this.luxRippleExitDuration = rippleConfiguration.exitDuration;
                _this.luxRippleColor = rippleConfiguration.color;
                _this.luxRippleCentered = rippleConfiguration.centered;
                _this.luxRippleDisabled = rippleConfiguration.disabled;
                _this.luxRippleRadius = rippleConfiguration.radius;
                _this.luxRippleUnbounded = rippleConfiguration.unbounded;
            }
        });
    };
    LuxRippleDirective.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this.configSubscription) {
            this.configSubscription.unsubscribe();
        }
    };
    LuxRippleDirective.ctorParameters = function () { return [
        { type: LuxComponentsConfigService },
        { type: ElementRef },
        { type: NgZone },
        { type: Platform },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], LuxRippleDirective.prototype, "luxRippleColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxRippleDirective.prototype, "luxRippleUnbounded", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxRippleDirective.prototype, "luxRippleCentered", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], LuxRippleDirective.prototype, "luxRippleRadius", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxRippleDirective.prototype, "luxRippleDisabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], LuxRippleDirective.prototype, "luxRippleEnterDuration", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], LuxRippleDirective.prototype, "luxRippleExitDuration", null);
    LuxRippleDirective = tslib_1.__decorate([
        Directive({
            selector: '[luxRipple], [lux-ripple]',
            host: {
                class: 'mat-ripple lux-ripple',
                '[class.mat-ripple-unbounded]': 'unbounded'
            }
        }),
        tslib_1.__param(4, Optional()), tslib_1.__param(4, Inject(MAT_RIPPLE_GLOBAL_OPTIONS)),
        tslib_1.__param(5, Optional()), tslib_1.__param(5, Inject(ANIMATION_MODULE_TYPE)),
        tslib_1.__metadata("design:paramtypes", [LuxComponentsConfigService,
            ElementRef,
            NgZone,
            Platform, Object, String])
    ], LuxRippleDirective);
    return LuxRippleDirective;
}(MatRipple));
export { LuxRippleDirective };
//# sourceMappingURL=data:application/json;base64,