import * as tslib_1 from "tslib";
import { Directive, DoCheck, ElementRef, Input, NgZone, OnChanges, Optional, Renderer2, SimpleChanges } from '@angular/core';
import { MatBadge } from '@angular/material';
import { AriaDescriber } from '@angular/cdk/a11y';
import { LuxUtil } from '../../lux-util/lux-util';
var LuxBadgeNotificationDirective = /** @class */ (function (_super) {
    tslib_1.__extends(LuxBadgeNotificationDirective, _super);
    function LuxBadgeNotificationDirective(luxNgZone, luxElementRef, luxAriaDescriber, luxRenderer) {
        var _this = _super.call(this, luxNgZone, luxElementRef, luxAriaDescriber, luxRenderer) || this;
        _this.luxNgZone = luxNgZone;
        _this.luxElementRef = luxElementRef;
        _this.luxAriaDescriber = luxAriaDescriber;
        _this.luxRenderer = luxRenderer;
        _this.luxBadgeColor = 'default';
        _this.luxBadgeSize = 'medium';
        _this.luxBadgePosition = 'above after';
        _this.luxBadgeDisabled = false;
        _this.luxBadgeHidden = false;
        _this.luxBadgeOverlap = true;
        luxElementRef.nativeElement.classList.add('lux-badge-notification');
        return _this;
    }
    LuxBadgeNotificationDirective.prototype.ngOnChanges = function (changes) {
        this.updateContent(this.luxBadgeNotification);
        this.color = this.luxBadgeColor;
        this.size = this.luxBadgeSize;
        this.position = this.luxBadgePosition;
        this.disabled = this.luxBadgeDisabled;
        this.hidden = !!this.luxBadgeHidden;
        this.overlap = this.luxBadgeOverlap;
    };
    LuxBadgeNotificationDirective.prototype.ngDoCheck = function () {
        this.checkMaxNumber();
    };
    LuxBadgeNotificationDirective.prototype.updateContent = function (value) {
        var newContent = value;
        if (typeof newContent === 'number') {
            // Wenn der Wert eine Zahl ist, muss dieser f端r die Weiterverarbeitung in einen String umgewandelt werden.
            newContent = '' + newContent;
        }
        else if (!newContent) {
            // Die Werte "undefined" und "null" zum Leerstring umwandeln,
            // damit diese nicht angezeigt werden.
            newContent = '';
        }
        this.content = newContent;
        this.description = newContent;
    };
    LuxBadgeNotificationDirective.prototype.isHidden = function () {
        return this.hidden || !this.content;
    };
    /**
     * Pr端ft ob der Inhalt eine Zahl, eine Maximalzahl gegeben und diese 端berschritten worden ist.
     * Wenn ja, wird der Inhalt mit einem "+" abgek端rzt.
     */
    LuxBadgeNotificationDirective.prototype.checkMaxNumber = function () {
        if (this.luxBadgeNotification && this.luxBadgeCap && LuxUtil.isNumber(this.luxBadgeNotification)) {
            if (+this.luxBadgeNotification > this.luxBadgeCap) {
                this.updateContent(this.luxBadgeCap + '+');
            }
        }
    };
    LuxBadgeNotificationDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: AriaDescriber },
        { type: Renderer2, decorators: [{ type: Optional }] }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgeNotification", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgeColor", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgeSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgePosition", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgeDisabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgeHidden", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgeOverlap", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], LuxBadgeNotificationDirective.prototype, "luxBadgeCap", void 0);
    LuxBadgeNotificationDirective = tslib_1.__decorate([
        Directive({
            selector: '[luxBadgeNotification], [lux-badge-notification]',
            host: {
                class: 'mat-badge',
                '[class.mat-badge-overlap]': 'overlap',
                '[class.mat-badge-above]': 'isAbove()',
                '[class.mat-badge-below]': '!isAbove()',
                '[class.mat-badge-before]': '!isAfter()',
                '[class.mat-badge-after]': 'isAfter()',
                '[class.mat-badge-small]': 'size === "small"',
                '[class.mat-badge-medium]': 'size === "medium"',
                '[class.mat-badge-large]': 'size === "large"',
                '[class.mat-badge-hidden]': 'hidden || isHidden()',
                '[class.mat-badge-disabled]': 'disabled',
                '[class.lux-badge-color-default]': 'color !== "primary" && color !== "warn" && color !== "accent"'
            }
        }),
        tslib_1.__param(3, Optional()),
        tslib_1.__metadata("design:paramtypes", [NgZone,
            ElementRef,
            AriaDescriber,
            Renderer2])
    ], LuxBadgeNotificationDirective);
    return LuxBadgeNotificationDirective;
}(MatBadge));
export { LuxBadgeNotificationDirective };
//# sourceMappingURL=data:application/json;base64,