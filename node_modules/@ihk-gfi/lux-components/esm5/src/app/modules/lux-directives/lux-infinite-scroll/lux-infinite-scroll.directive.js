import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
var LuxInfiniteScrollDirective = /** @class */ (function () {
    /**
     * Constructor
     * @param elementRef Ziel-Element dieser Direktive
     */
    function LuxInfiniteScrollDirective(elementRef) {
        this.elementRef = elementRef;
        this.scroll$ = new Subject();
        this.lastPosition = { scrollHeight: 0, scrollTop: 0, clientHeight: 0 };
        // Prozentzahl nach der ein scrollCallback ausgeloest wird
        this.luxScrollPercent = 85;
        // Direkt bei Initialisierung einen ScrollEvent emitten
        this.luxImmediateCallback = true;
        // Flag ob aktuell Daten geladen werden (aus aufrufender Komponente)
        this.luxIsLoading = false;
        // Emitter an den sich andere Komponenten haengen koennen um auf den Scroll zu reagieren
        this.luxScrolled = new EventEmitter();
    }
    LuxInfiniteScrollDirective_1 = LuxInfiniteScrollDirective;
    LuxInfiniteScrollDirective.prototype.ngOnInit = function () {
        var _this = this;
        window.addEventListener('scroll', this.onScroll.bind(this), true);
        // Die neuen Scroll-Events bündeln und nach der Zeitspanne SCROLL_DEBOUNCE_TIME prüfen ob ein
        // "luxScrolled" emitten soll oder nicht.
        this.scrollSubscription = this.scroll$
            .pipe(debounceTime(LuxInfiniteScrollDirective_1.SCROLL_DEBOUNCE_TIME))
            .subscribe(function () {
            _this.performScrollCheck();
        });
    };
    LuxInfiniteScrollDirective.prototype.ngAfterViewInit = function () {
        // Prüfen ob ein initiales Laden von Daten starten soll
        if (this.hasScrollbar() && this.luxImmediateCallback && !this.luxIsLoading) {
            this.luxScrolled.emit();
        }
    };
    LuxInfiniteScrollDirective.prototype.ngOnDestroy = function () {
        window.removeEventListener('scroll', this.onScroll, true);
        this.scrollSubscription.unsubscribe();
    };
    /**
     * Prüft ob ein Scroll-Event auf dem Zielelement stattgefunden hat.
     * Wenn ja, wird das Subject scroll$ angestoßen.
     * @param event
     */
    LuxInfiniteScrollDirective.prototype.onScroll = function (event) {
        var target = event.target ? event.target : event.srcElement;
        if (target === this.elementRef.nativeElement) {
            this.scroll$.next();
        }
    };
    /**
     * Holt die aktuelle Position im Scroll-Bereich und fuehrt
     * einen Event-Emit durch wenn die Bedingungen erfuellt sind.
     */
    LuxInfiniteScrollDirective.prototype.performScrollCheck = function () {
        var position = {
            scrollTop: this.elementRef.nativeElement.scrollTop,
            scrollHeight: this.elementRef.nativeElement.scrollHeight,
            clientHeight: this.elementRef.nativeElement.clientHeight
        };
        // Wenn nach unten gescrollt wird und die angegebene Prozentzahl ueberschritten wird
        if (this.isUserScrollingDown(position) && this.isScrollExpectedPercent(position) && !this.luxIsLoading) {
            this.luxScrolled.emit();
        }
        this.lastPosition = position;
    };
    /**
     * Prueft ob der User gerade nach unten scrollt.
     * Vergleicht dabei die scrollTop Position des Users mit der des Elements.
     * @param curPos
     */
    LuxInfiniteScrollDirective.prototype.isUserScrollingDown = function (curPos) {
        return this.lastPosition.scrollTop < curPos.scrollTop;
    };
    /**
     * Prueft ob der Scrollbereich ueberschritten wurde.
     * @param position
     * @returns boolean
     */
    LuxInfiniteScrollDirective.prototype.isScrollExpectedPercent = function (position) {
        return (position.scrollTop + position.clientHeight) / position.scrollHeight > this.luxScrollPercent / 100;
    };
    /**
     * Prüft ob das Zielelement eine Scrollbar gesetzt hat.
     */
    LuxInfiniteScrollDirective.prototype.hasScrollbar = function () {
        return this.elementRef.nativeElement.scrollHeight > this.elementRef.nativeElement.clientHeight;
    };
    var LuxInfiniteScrollDirective_1;
    // Zeitgrenze (ms) nach der das neuste Scroll-Event des Subjects genommen wird
    LuxInfiniteScrollDirective.SCROLL_DEBOUNCE_TIME = 200;
    LuxInfiniteScrollDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxInfiniteScrollDirective.prototype, "luxScrollPercent", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxInfiniteScrollDirective.prototype, "luxImmediateCallback", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxInfiniteScrollDirective.prototype, "luxIsLoading", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxInfiniteScrollDirective.prototype, "luxScrolled", void 0);
    LuxInfiniteScrollDirective = LuxInfiniteScrollDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[luxInfiniteScroll]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], LuxInfiniteScrollDirective);
    return LuxInfiniteScrollDirective;
}());
export { LuxInfiniteScrollDirective };
//# sourceMappingURL=data:application/json;base64,