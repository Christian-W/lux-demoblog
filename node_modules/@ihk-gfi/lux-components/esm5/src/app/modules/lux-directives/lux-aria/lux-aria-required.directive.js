import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { LuxAriaBase } from './lux-aria-base';
var LuxAriaRequiredDirective = /** @class */ (function (_super) {
    tslib_1.__extends(LuxAriaRequiredDirective, _super);
    function LuxAriaRequiredDirective(elementRef, renderer) {
        var _this = _super.call(this, elementRef, renderer, 'aria-required') || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        return _this;
    }
    Object.defineProperty(LuxAriaRequiredDirective.prototype, "luxAriaRequired", {
        get: function () {
            return this._luxAriaRequired;
        },
        set: function (required) {
            this._luxAriaRequired = required;
            this.renderAria();
        },
        enumerable: true,
        configurable: true
    });
    LuxAriaRequiredDirective.prototype.getSelector = function () {
        return this.luxAriaRequiredSelector;
    };
    LuxAriaRequiredDirective.prototype.getValue = function () {
        return this._luxAriaRequired;
    };
    LuxAriaRequiredDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxAriaRequiredDirective.prototype, "luxAriaRequiredSelector", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], LuxAriaRequiredDirective.prototype, "luxAriaRequired", null);
    LuxAriaRequiredDirective = tslib_1.__decorate([
        Directive({
            selector: '[luxAriaRequired]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
    ], LuxAriaRequiredDirective);
    return LuxAriaRequiredDirective;
}(LuxAriaBase));
export { LuxAriaRequiredDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWFyaWEtcmVxdWlyZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWRpcmVjdGl2ZXMvbHV4LWFyaWEvbHV4LWFyaWEtcmVxdWlyZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUs5QztJQUE4QyxvREFBVztJQWdCdkQsa0NBQXNCLFVBQXNCLEVBQVksUUFBbUI7UUFBM0UsWUFDRSxrQkFBTSxVQUFVLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxTQUM3QztRQUZxQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFZLGNBQVEsR0FBUixRQUFRLENBQVc7O0lBRTNFLENBQUM7SUFaRCxzQkFBSSxxREFBZTthQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQy9CLENBQUM7YUFFRCxVQUFvQixRQUFnQjtZQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO1lBRWpDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixDQUFDOzs7T0FOQTtJQVlELDhDQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztJQUN0QyxDQUFDO0lBRUQsMkNBQVEsR0FBUjtRQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7O2dCQVZpQyxVQUFVO2dCQUFzQixTQUFTOztJQWJsRTtRQUFSLEtBQUssRUFBRTs7NkVBQWlDO0lBR3pDO1FBREMsS0FBSyxFQUFFOzs7bUVBR1A7SUFSVSx3QkFBd0I7UUFIcEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG1CQUFtQjtTQUM5QixDQUFDO2lEQWlCa0MsVUFBVSxFQUFzQixTQUFTO09BaEJoRSx3QkFBd0IsQ0EyQnBDO0lBQUQsK0JBQUM7Q0FBQSxBQTNCRCxDQUE4QyxXQUFXLEdBMkJ4RDtTQTNCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx1eEFyaWFCYXNlIH0gZnJvbSAnLi9sdXgtYXJpYS1iYXNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2x1eEFyaWFSZXF1aXJlZF0nXG59KVxuZXhwb3J0IGNsYXNzIEx1eEFyaWFSZXF1aXJlZERpcmVjdGl2ZSBleHRlbmRzIEx1eEFyaWFCYXNlIHtcbiAgX2x1eEFyaWFSZXF1aXJlZDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIGx1eEFyaWFSZXF1aXJlZFNlbGVjdG9yOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgZ2V0IGx1eEFyaWFSZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbHV4QXJpYVJlcXVpcmVkO1xuICB9XG5cbiAgc2V0IGx1eEFyaWFSZXF1aXJlZChyZXF1aXJlZDogc3RyaW5nKSB7XG4gICAgdGhpcy5fbHV4QXJpYVJlcXVpcmVkID0gcmVxdWlyZWQ7XG5cbiAgICB0aGlzLnJlbmRlckFyaWEoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJlbmRlcmVyLCAnYXJpYS1yZXF1aXJlZCcpO1xuICB9XG5cbiAgZ2V0U2VsZWN0b3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sdXhBcmlhUmVxdWlyZWRTZWxlY3RvcjtcbiAgfVxuXG4gIGdldFZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2x1eEFyaWFSZXF1aXJlZDtcbiAgfVxufVxuIl19