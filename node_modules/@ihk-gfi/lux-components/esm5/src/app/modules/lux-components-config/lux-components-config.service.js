import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { LuxConfigTokenService } from './lux-components-config.module';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./lux-components-config.module";
/**
 * Dieser Service wird dazu verwendet, auf die Konfiguration der LuxComponents zuzugreifen und diese auszulesen bzw.
 * auch zu aktualisieren.
 */
var LuxComponentsConfigService = /** @class */ (function () {
    function LuxComponentsConfigService(config) {
        // Subject mit dem aktuellen Konfig-Wert, welcher ausgelesen werden kann
        this.config$ = new BehaviorSubject(null);
        // Wenn keine Konfiguration geladen werden konnte, Standard-Konfig benutzen und eine Warnung ausgeben.
        if (!config) {
            console.warn('Achtung: Es wurde keine Konfiguration für die LuxComponents definiert.\n', 'Benutze Standard-Konfiguration:', LuxComponentsConfigService_1.DEFAULT_CONFIG);
            this.config$.next(LuxComponentsConfigService_1.DEFAULT_CONFIG);
        }
        else {
            this.config$.next(this.mergeDefaultData(config));
        }
    }
    LuxComponentsConfigService_1 = LuxComponentsConfigService;
    Object.defineProperty(LuxComponentsConfigService.prototype, "config", {
        /**
         * Gibt das Observable mit der aktuell gesetzten Konfiguration zurück.
         */
        get: function () {
            return this.config$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxComponentsConfigService.prototype, "currentConfig", {
        /**
         * Gibt die aktuell gesetzte Konfiguration direkt zurück.
         */
        get: function () {
            return this.config$.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gibt zurück, ob die Labels als Uppercase gekennzeichnet sind und ob
     * die übergebenen Selektoren in den Ausnahmen geführt sind.
     * @param selector
     */
    LuxComponentsConfigService.prototype.isLabelUppercaseForSelector = function (selector) {
        var config = this.config$.value;
        return config.labelConfiguration.allUppercase && config.labelConfiguration.notAppliedTo.indexOf(selector) === -1;
    };
    /**
     * Ersetzt die aktuelle Konfiguration mit der übergebenen (wenn gültiger Wert).
     * @param config
     */
    LuxComponentsConfigService.prototype.updateConfiguration = function (config) {
        if (!config) {
            console.warn('Die übergebene Konfiguration ist undefined/null und wird nicht übernommen.');
        }
        else {
            this.config$.next(this.mergeDefaultData(config));
        }
    };
    /**
     * Kombiniert die übergebene Konfiguration mit der Standard-Konfig.
     *
     * Übernimmt die Werte aus der Standard-Konfig, die nicht im übergebenen gesetzt wurden.
     * @param config
     */
    LuxComponentsConfigService.prototype.mergeDefaultData = function (config) {
        var mergedConfig = {};
        Object.keys(config).forEach(function (key) {
            mergedConfig[key] = config[key];
        });
        Object.keys(LuxComponentsConfigService_1.DEFAULT_CONFIG).forEach(function (key) {
            if (mergedConfig[key] === undefined || mergedConfig[key] === null) {
                mergedConfig[key] = LuxComponentsConfigService_1.DEFAULT_CONFIG[key];
            }
        });
        return mergedConfig;
    };
    var LuxComponentsConfigService_1;
    // Fallback-Konfiguration, falls sonst keine gefunden werden konnte
    LuxComponentsConfigService.DEFAULT_CONFIG = {
        displayLuxConsoleLogs: false,
        generateLuxTagIds: false,
        lookupServiceUrl: '/lookup/',
        labelConfiguration: {
            allUppercase: true,
            notAppliedTo: ['lux-link', 'lux-side-nav-item', 'lux-menu-item']
        },
        cardExpansionAnimationActive: true,
        displayBindingDebugHint: true,
        rippleConfiguration: {
            exitDuration: 500,
            enterDuration: 500
        }
    };
    LuxComponentsConfigService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LuxConfigTokenService,] }, { type: Optional }] }
    ]; };
    LuxComponentsConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxComponentsConfigService_Factory() { return new LuxComponentsConfigService(i0.ɵɵinject(i1.LuxConfigTokenService, 8)); }, token: LuxComponentsConfigService, providedIn: "root" });
    LuxComponentsConfigService = LuxComponentsConfigService_1 = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__param(0, Inject(LuxConfigTokenService)), tslib_1.__param(0, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxComponentsConfigService);
    return LuxComponentsConfigService;
}());
export { LuxComponentsConfigService };
//# sourceMappingURL=data:application/json;base64,