import * as tslib_1 from "tslib";
import { InjectionToken, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';
import { LuxComponentsHammerConfig } from './lux-components-hammer-config.class';
// Diesen bitte !nicht! injecten, sondern den LuxComponentsConfigService.
export var LuxConfigTokenService = new InjectionToken('luxConfig');
var LuxComponentsConfigModule = /** @class */ (function () {
    function LuxComponentsConfigModule() {
    }
    LuxComponentsConfigModule_1 = LuxComponentsConfigModule;
    // Den InjectionToken mit der übergebenen Konfiguration überschreiben, damit die Komponenten diese nutzen können
    LuxComponentsConfigModule.forRoot = function (config) {
        return {
            ngModule: LuxComponentsConfigModule_1,
            providers: [
                {
                    provide: LuxConfigTokenService,
                    useValue: config
                }
            ]
        };
    };
    var LuxComponentsConfigModule_1;
    LuxComponentsConfigModule = LuxComponentsConfigModule_1 = tslib_1.__decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [],
            providers: [
                {
                    provide: HAMMER_GESTURE_CONFIG,
                    useClass: LuxComponentsHammerConfig
                }
            ]
        })
    ], LuxComponentsConfigModule);
    return LuxComponentsConfigModule;
}());
export { LuxComponentsConfigModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWNvbXBvbmVudHMtY29uZmlnLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpaGstZ2ZpL2x1eC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL2x1eC1jb21wb25lbnRzLWNvbmZpZy9sdXgtY29tcG9uZW50cy1jb25maWcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFakYseUVBQXlFO0FBQ3pFLE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFnQyxXQUFXLENBQUMsQ0FBQztBQVlwRztJQUFBO0lBYUEsQ0FBQztrQ0FiWSx5QkFBeUI7SUFDcEMsZ0hBQWdIO0lBQ3pHLGlDQUFPLEdBQWQsVUFBZSxNQUFxQztRQUNsRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLDJCQUF5QjtZQUNuQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHFCQUFxQjtvQkFDOUIsUUFBUSxFQUFFLE1BQU07aUJBQ2pCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7SUFaVSx5QkFBeUI7UUFWckMsUUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO1lBQ3ZCLFlBQVksRUFBRSxFQUFFO1lBQ2hCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUscUJBQXFCO29CQUM5QixRQUFRLEVBQUUseUJBQXlCO2lCQUNwQzthQUNGO1NBQ0YsQ0FBQztPQUNXLHlCQUF5QixDQWFyQztJQUFELGdDQUFDO0NBQUEsQUFiRCxJQWFDO1NBYlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTHV4Q29tcG9uZW50c0NvbmZpZ1BhcmFtZXRlcnMgfSBmcm9tICcuL2x1eC1jb21wb25lbnRzLWNvbmZpZy1wYXJhbWV0ZXJzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBIQU1NRVJfR0VTVFVSRV9DT05GSUcgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IEx1eENvbXBvbmVudHNIYW1tZXJDb25maWcgfSBmcm9tICcuL2x1eC1jb21wb25lbnRzLWhhbW1lci1jb25maWcuY2xhc3MnO1xuXG4vLyBEaWVzZW4gYml0dGUgIW5pY2h0ISBpbmplY3Rlbiwgc29uZGVybiBkZW4gTHV4Q29tcG9uZW50c0NvbmZpZ1NlcnZpY2UuXG5leHBvcnQgY29uc3QgTHV4Q29uZmlnVG9rZW5TZXJ2aWNlID0gbmV3IEluamVjdGlvblRva2VuPEx1eENvbXBvbmVudHNDb25maWdQYXJhbWV0ZXJzPignbHV4Q29uZmlnJyk7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIQU1NRVJfR0VTVFVSRV9DT05GSUcsXG4gICAgICB1c2VDbGFzczogTHV4Q29tcG9uZW50c0hhbW1lckNvbmZpZ1xuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMdXhDb21wb25lbnRzQ29uZmlnTW9kdWxlIHtcbiAgLy8gRGVuIEluamVjdGlvblRva2VuIG1pdCBkZXIgw7xiZXJnZWJlbmVuIEtvbmZpZ3VyYXRpb24gw7xiZXJzY2hyZWliZW4sIGRhbWl0IGRpZSBLb21wb25lbnRlbiBkaWVzZSBudXR6ZW4ga8O2bm5lblxuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IEx1eENvbXBvbmVudHNDb25maWdQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBMdXhDb21wb25lbnRzQ29uZmlnTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBMdXhDb25maWdUb2tlblNlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19