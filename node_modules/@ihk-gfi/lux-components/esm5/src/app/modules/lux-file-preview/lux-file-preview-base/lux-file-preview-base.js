import * as tslib_1 from "tslib";
import { ESCAPE } from '@angular/cdk/keycodes';
import { HostListener, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { LuxUtil } from '../../lux-util/lux-util';
import { LUX_FILE_PREVIEW_DATA } from '../lux-file-preview-config';
import { LuxFilePreviewRef } from '../lux-file-preview-ref';
var LuxFilePreviewBase = /** @class */ (function () {
    function LuxFilePreviewBase(previewRef, previewData, sanitizer) {
        this.previewRef = previewRef;
        this.previewData = previewData;
        this.sanitizer = sanitizer;
        this.urls = [];
        this.paddingWith = 100;
        this.paddingHeight = 150;
        this.startPhase = true;
        this.startDurationMs = 250;
        this.loading = true;
        this.downloadIconName = 'fas fa-download';
        this.downloadTagId = 'file-preview-download-btn';
        this.downloadAriaLabel = 'Datei herunterladen';
        this.closeIconName = 'fas fa-window-close';
        this.closeTagId = 'file-preview-close-btn';
        this.closeAriaLabel = 'Dateivorschau schlie√üen';
    }
    LuxFilePreviewBase.prototype.handleKeydown = function (event) {
        if (event.keyCode === ESCAPE) {
            this.onClose();
        }
    };
    LuxFilePreviewBase.prototype.windowResize = function () {
        this.updateWidthAndHeight();
    };
    LuxFilePreviewBase.prototype.ngOnInit = function () {
        var _this = this;
        this.loadingTimer = setTimeout(function () {
            _this.startPhase = false;
        }, this.startDurationMs);
        this.updateWidthAndHeight();
        setTimeout(function () {
            var myBlob;
            if ('string' === typeof _this.previewData.fileObject.content) {
                myBlob = new Blob([LuxUtil.base64ToArrayBuffer(_this.previewData.fileObject.content.split(',')[1])], {
                    type: _this.previewData.fileObject.type
                });
            }
            else {
                myBlob = _this.previewData.fileObject.content;
            }
            _this.url = window.URL.createObjectURL(myBlob);
            _this.urls.push(_this.url);
        });
    };
    LuxFilePreviewBase.prototype.ngOnDestroy = function () {
        this.urls.forEach(function (url) {
            window.URL.revokeObjectURL(url);
        });
    };
    LuxFilePreviewBase.prototype.onDownload = function () {
        this.previewData.fileComponent.downloadFile(this.previewData.fileObject);
        this.previewRef.close();
    };
    LuxFilePreviewBase.prototype.onClose = function () {
        this.previewRef.close();
    };
    LuxFilePreviewBase.prototype.loadingFinished = function () {
        this.loading = false;
    };
    LuxFilePreviewBase.prototype.clearFocus = function () {
        if (document.activeElement instanceof HTMLElement) {
            document.activeElement.blur();
        }
    };
    LuxFilePreviewBase.prototype.updateWidthAndHeight = function () {
        this.width = window.innerWidth - this.paddingWith;
        this.height = window.innerHeight - this.paddingHeight;
    };
    tslib_1.__decorate([
        HostListener('document:keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LuxFilePreviewBase.prototype, "handleKeydown", null);
    tslib_1.__decorate([
        HostListener('window:resize'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], LuxFilePreviewBase.prototype, "windowResize", null);
    LuxFilePreviewBase = tslib_1.__decorate([
        tslib_1.__param(1, Inject(LUX_FILE_PREVIEW_DATA)),
        tslib_1.__metadata("design:paramtypes", [LuxFilePreviewRef, Object, DomSanitizer])
    ], LuxFilePreviewBase);
    return LuxFilePreviewBase;
}());
export { LuxFilePreviewBase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWZpbGUtcHJldmlldy1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWZpbGUtcHJldmlldy9sdXgtZmlsZS1wcmV2aWV3LWJhc2UvbHV4LWZpbGUtcHJldmlldy1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFbkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFNUQ7SUFtQ0UsNEJBQ1ksVUFBNkIsRUFDRSxXQUErQixFQUM5RCxTQUF1QjtRQUZ2QixlQUFVLEdBQVYsVUFBVSxDQUFtQjtRQUNFLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUM5RCxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBcENuQyxTQUFJLEdBQWEsRUFBRSxDQUFDO1FBRXBCLGdCQUFXLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLGtCQUFhLEdBQUcsR0FBRyxDQUFDO1FBS3BCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsb0JBQWUsR0FBRyxHQUFHLENBQUM7UUFDdEIsWUFBTyxHQUFHLElBQUksQ0FBQztRQUdmLHFCQUFnQixHQUFHLGlCQUFpQixDQUFDO1FBQ3JDLGtCQUFhLEdBQUcsMkJBQTJCLENBQUM7UUFDNUMsc0JBQWlCLEdBQUcscUJBQXFCLENBQUM7UUFFMUMsa0JBQWEsR0FBRyxxQkFBcUIsQ0FBQztRQUN0QyxlQUFVLEdBQUcs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QkFBcUIsQ0FBQyxDQUFBO2lEQURSLGlCQUFpQixVQUVsQixZQUFZO09BdEN4QixrQkFBa0IsQ0E0RjlCO0lBQUQseUJBQUM7Q0FBQSxBQTVGRCxJQTRGQztTQTVGWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFU0NBUEUgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgSG9zdExpc3RlbmVyLCBJbmplY3QsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IEx1eFV0aWwgfSBmcm9tICcuLi8uLi9sdXgtdXRpbC9sdXgtdXRpbCc7XG5pbXBvcnQgeyBMVVhfRklMRV9QUkVWSUVXX0RBVEEgfSBmcm9tICcuLi9sdXgtZmlsZS1wcmV2aWV3LWNvbmZpZyc7XG5pbXBvcnQgeyBMdXhGaWxlUHJldmlld0RhdGEgfSBmcm9tICcuLi9sdXgtZmlsZS1wcmV2aWV3LWRhdGEnO1xuaW1wb3J0IHsgTHV4RmlsZVByZXZpZXdSZWYgfSBmcm9tICcuLi9sdXgtZmlsZS1wcmV2aWV3LXJlZic7XG5cbmV4cG9ydCBjbGFzcyBMdXhGaWxlUHJldmlld0Jhc2UgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHVybDogc3RyaW5nO1xuICB1cmxzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIHBhZGRpbmdXaXRoID0gMTAwO1xuICBwYWRkaW5nSGVpZ2h0ID0gMTUwO1xuXG4gIGhlaWdodDogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xuXG4gIHN0YXJ0UGhhc2UgPSB0cnVlO1xuICBzdGFydER1cmF0aW9uTXMgPSAyNTA7XG4gIGxvYWRpbmcgPSB0cnVlO1xuICBsb2FkaW5nVGltZXI6IGFueTtcblxuICBkb3dubG9hZEljb25OYW1lID0gJ2ZhcyBmYS1kb3dubG9hZCc7XG4gIGRvd25sb2FkVGFnSWQgPSAnZmlsZS1wcmV2aWV3LWRvd25sb2FkLWJ0bic7XG4gIGRvd25sb2FkQXJpYUxhYmVsID0gJ0RhdGVpIGhlcnVudGVybGFkZW4nO1xuXG4gIGNsb3NlSWNvbk5hbWUgPSAnZmFzIGZhLXdpbmRvdy1jbG9zZSc7XG4gIGNsb3NlVGFnSWQgPSAnZmlsZS1wcmV2aWV3LWNsb3NlLWJ0bic7XG4gIGNsb3NlQXJpYUxhYmVsID0gJ0RhdGVpdm9yc2NoYXUgc2NobGllw59lbic7XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIGhhbmRsZUtleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gRVNDQVBFKSB7XG4gICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJylcbiAgd2luZG93UmVzaXplKCkge1xuICAgIHRoaXMudXBkYXRlV2lkdGhBbmRIZWlnaHQoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBwcmV2aWV3UmVmOiBMdXhGaWxlUHJldmlld1JlZixcbiAgICBASW5qZWN0KExVWF9GSUxFX1BSRVZJRVdfREFUQSkgcHJvdGVjdGVkIHByZXZpZXdEYXRhOiBMdXhGaWxlUHJldmlld0RhdGEsXG4gICAgcHJvdGVjdGVkIHNhbml0aXplcjogRG9tU2FuaXRpemVyXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmxvYWRpbmdUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zdGFydFBoYXNlID0gZmFsc2U7XG4gICAgfSwgdGhpcy5zdGFydER1cmF0aW9uTXMpO1xuXG4gICAgdGhpcy51cGRhdGVXaWR0aEFuZEhlaWdodCgpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsZXQgbXlCbG9iOiBCbG9iO1xuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdGhpcy5wcmV2aWV3RGF0YS5maWxlT2JqZWN0LmNvbnRlbnQpIHtcbiAgICAgICAgbXlCbG9iID0gbmV3IEJsb2IoW0x1eFV0aWwuYmFzZTY0VG9BcnJheUJ1ZmZlcih0aGlzLnByZXZpZXdEYXRhLmZpbGVPYmplY3QuY29udGVudC5zcGxpdCgnLCcpWzFdKV0sIHtcbiAgICAgICAgICB0eXBlOiB0aGlzLnByZXZpZXdEYXRhLmZpbGVPYmplY3QudHlwZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG15QmxvYiA9IHRoaXMucHJldmlld0RhdGEuZmlsZU9iamVjdC5jb250ZW50O1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG15QmxvYik7XG4gICAgICB0aGlzLnVybHMucHVzaCh0aGlzLnVybCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnVybHMuZm9yRWFjaCh1cmwgPT4ge1xuICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uRG93bmxvYWQoKSB7XG4gICAgdGhpcy5wcmV2aWV3RGF0YS5maWxlQ29tcG9uZW50LmRvd25sb2FkRmlsZSh0aGlzLnByZXZpZXdEYXRhLmZpbGVPYmplY3QpO1xuICAgIHRoaXMucHJldmlld1JlZi5jbG9zZSgpO1xuICB9XG5cbiAgb25DbG9zZSgpIHtcbiAgICB0aGlzLnByZXZpZXdSZWYuY2xvc2UoKTtcbiAgfVxuXG4gIGxvYWRpbmdGaW5pc2hlZCgpIHtcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGNsZWFyRm9jdXMoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlV2lkdGhBbmRIZWlnaHQoKSB7XG4gICAgdGhpcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gdGhpcy5wYWRkaW5nV2l0aDtcbiAgICB0aGlzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHRoaXMucGFkZGluZ0hlaWdodDtcbiAgfVxufVxuIl19