import * as tslib_1 from "tslib";
import { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { ComponentRef, Injectable, Injector } from '@angular/core';
import { LUX_FILE_PREVIEW_DATA } from './lux-file-preview-config';
import { LuxFilePreviewRef } from './lux-file-preview-ref';
import { LuxFilePreviewComponent } from './lux-file-preview.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export var DEFAULT_FILE_PREVIEW_CONFIG = {
    hasBackdrop: true,
    backdropClass: 'lux-file-preview-backdrop',
    panelClass: 'lux-file-preview-panel',
    previewData: {
        fileComponent: null,
        fileObject: null
    }
};
var LuxFilePreviewService = /** @class */ (function () {
    function LuxFilePreviewService(injector, overlay) {
        this.injector = injector;
        this.overlay = overlay;
    }
    LuxFilePreviewService.prototype.open = function (config) {
        var previewConfig = tslib_1.__assign({}, DEFAULT_FILE_PREVIEW_CONFIG, config);
        var overlayRef = this.createOverlay(previewConfig);
        var previewRef = new LuxFilePreviewRef(overlayRef);
        var previewComponent = this.attachDialogContainer(overlayRef, previewRef, previewConfig);
        overlayRef.backdropClick().subscribe(function () { return previewComponent.onClose(); });
        return previewRef;
    };
    LuxFilePreviewService.prototype.attachDialogContainer = function (overlayRef, dialogRef, config) {
        var injector = this.createInjector(config, dialogRef);
        var containerPortal = new ComponentPortal(LuxFilePreviewComponent, null, injector);
        var containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    };
    LuxFilePreviewService.prototype.createOverlay = function (config) {
        return this.overlay.create(this.getOverlayConfig(config));
    };
    LuxFilePreviewService.prototype.createInjector = function (config, dialogRef) {
        var injectionTokens = new WeakMap();
        injectionTokens.set(LuxFilePreviewRef, dialogRef);
        injectionTokens.set(LUX_FILE_PREVIEW_DATA, config.previewData);
        return new PortalInjector(this.injector, injectionTokens);
    };
    LuxFilePreviewService.prototype.getOverlayConfig = function (config) {
        var positionStrategy = this.overlay
            .position()
            .global()
            .centerHorizontally()
            .centerVertically();
        var overlayConfig = new OverlayConfig({
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass,
            panelClass: config.panelClass,
            scrollStrategy: this.overlay.scrollStrategies.block(),
            positionStrategy: positionStrategy
        });
        return overlayConfig;
    };
    LuxFilePreviewService.ctorParameters = function () { return [
        { type: Injector },
        { type: Overlay }
    ]; };
    LuxFilePreviewService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxFilePreviewService_Factory() { return new LuxFilePreviewService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Overlay)); }, token: LuxFilePreviewService, providedIn: "root" });
    LuxFilePreviewService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [Injector, Overlay])
    ], LuxFilePreviewService);
    return LuxFilePreviewService;
}());
export { LuxFilePreviewService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWZpbGUtcHJldmlldy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWZpbGUtcHJldmlldy9sdXgtZmlsZS1wcmV2aWV3LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxxQkFBcUIsRUFBd0IsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7O0FBRXZFLE1BQU0sQ0FBQyxJQUFNLDJCQUEyQixHQUF5QjtJQUMvRCxXQUFXLEVBQUUsSUFBSTtJQUNqQixhQUFhLEVBQUUsMkJBQTJCO0lBQzFDLFVBQVUsRUFBRSx3QkFBd0I7SUFDcEMsV0FBVyxFQUFFO1FBQ1gsYUFBYSxFQUFFLElBQUk7UUFDbkIsVUFBVSxFQUFFLElBQUk7S0FDakI7Q0FDRixDQUFDO0FBS0Y7SUFDRSwrQkFBb0IsUUFBa0IsRUFBVSxPQUFnQjtRQUE1QyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUFHLENBQUM7SUFFcEUsb0NBQUksR0FBSixVQUFLLE1BQTRCO1FBQy9CLElBQU0sYUFBYSx3QkFBUSwyQkFBMkIsRUFBSyxNQUFNLENBQUUsQ0FBQztRQUNwRSxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JELElBQU0sVUFBVSxHQUFHLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckQsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUUzRixVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO1FBRXZFLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFTyxxREFBcUIsR0FBN0IsVUFBOEIsVUFBc0IsRUFBRSxTQUE0QixFQUFFLE1BQTRCO1FBQzlHLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hELElBQU0sZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDLHVCQUF1QixFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyRixJQUFNLFlBQVksR0FBMEMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUUvRixPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFDL0IsQ0FBQztJQUVPLDZDQUFhLEdBQXJCLFVBQXNCLE1BQTRCO1FBQ2hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVPLDhDQUFjLEdBQXRCLFVBQXVCLE1BQTRCLEVBQUUsU0FBNEI7UUFDL0UsSUFBTSxlQUFlLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUV0QyxlQUFlLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2xELGVBQWUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRS9ELE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU8sZ0RBQWdCLEdBQXhCLFVBQXlCLE1BQTRCO1FBQ25ELElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDbEMsUUFBUSxFQUFFO2FBQ1YsTUFBTSxFQUFFO2FBQ1Isa0JBQWtCLEVBQUU7YUFDcEIsZ0JBQWdCLEVBQUUsQ0FBQztRQUV0QixJQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBQztZQUN0QyxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVc7WUFDL0IsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhO1lBQ25DLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTtZQUM3QixjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUU7WUFDckQsZ0JBQWdCLGtCQUFBO1NBQ2pCLENBQUMsQ0FBQztRQUVILE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7O2dCQWxENkIsUUFBUTtnQkFBbUIsT0FBTzs7O0lBRHJELHFCQUFxQjtRQUhqQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO2lEQUU4QixRQUFRLEVBQW1CLE9BQU87T0FEckQscUJBQXFCLENBb0RqQztnQ0F4RUQ7Q0F3RUMsQUFwREQsSUFvREM7U0FwRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3ZlcmxheSwgT3ZlcmxheUNvbmZpZywgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IENvbXBvbmVudFBvcnRhbCwgUG9ydGFsSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExVWF9GSUxFX1BSRVZJRVdfREFUQSwgTHV4RmlsZVByZXZpZXdDb25maWcgfSBmcm9tICcuL2x1eC1maWxlLXByZXZpZXctY29uZmlnJztcbmltcG9ydCB7IEx1eEZpbGVQcmV2aWV3UmVmIH0gZnJvbSAnLi9sdXgtZmlsZS1wcmV2aWV3LXJlZic7XG5pbXBvcnQgeyBMdXhGaWxlUHJldmlld0NvbXBvbmVudCB9IGZyb20gJy4vbHV4LWZpbGUtcHJldmlldy5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9GSUxFX1BSRVZJRVdfQ09ORklHOiBMdXhGaWxlUHJldmlld0NvbmZpZyA9IHtcbiAgaGFzQmFja2Ryb3A6IHRydWUsXG4gIGJhY2tkcm9wQ2xhc3M6ICdsdXgtZmlsZS1wcmV2aWV3LWJhY2tkcm9wJyxcbiAgcGFuZWxDbGFzczogJ2x1eC1maWxlLXByZXZpZXctcGFuZWwnLFxuICBwcmV2aWV3RGF0YToge1xuICAgIGZpbGVDb21wb25lbnQ6IG51bGwsXG4gICAgZmlsZU9iamVjdDogbnVsbFxuICB9XG59O1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMdXhGaWxlUHJldmlld1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5KSB7fVxuXG4gIG9wZW4oY29uZmlnOiBMdXhGaWxlUHJldmlld0NvbmZpZyk6IEx1eEZpbGVQcmV2aWV3UmVmIHtcbiAgICBjb25zdCBwcmV2aWV3Q29uZmlnID0geyAuLi5ERUZBVUxUX0ZJTEVfUFJFVklFV19DT05GSUcsIC4uLmNvbmZpZyB9O1xuICAgIGNvbnN0IG92ZXJsYXlSZWYgPSB0aGlzLmNyZWF0ZU92ZXJsYXkocHJldmlld0NvbmZpZyk7XG4gICAgY29uc3QgcHJldmlld1JlZiA9IG5ldyBMdXhGaWxlUHJldmlld1JlZihvdmVybGF5UmVmKTtcbiAgICBjb25zdCBwcmV2aWV3Q29tcG9uZW50ID0gdGhpcy5hdHRhY2hEaWFsb2dDb250YWluZXIob3ZlcmxheVJlZiwgcHJldmlld1JlZiwgcHJldmlld0NvbmZpZyk7XG5cbiAgICBvdmVybGF5UmVmLmJhY2tkcm9wQ2xpY2soKS5zdWJzY3JpYmUoKCkgPT4gcHJldmlld0NvbXBvbmVudC5vbkNsb3NlKCkpO1xuXG4gICAgcmV0dXJuIHByZXZpZXdSZWY7XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaERpYWxvZ0NvbnRhaW5lcihvdmVybGF5UmVmOiBPdmVybGF5UmVmLCBkaWFsb2dSZWY6IEx1eEZpbGVQcmV2aWV3UmVmLCBjb25maWc6IEx1eEZpbGVQcmV2aWV3Q29uZmlnKSB7XG4gICAgY29uc3QgaW5qZWN0b3IgPSB0aGlzLmNyZWF0ZUluamVjdG9yKGNvbmZpZywgZGlhbG9nUmVmKTtcbiAgICBjb25zdCBjb250YWluZXJQb3J0YWwgPSBuZXcgQ29tcG9uZW50UG9ydGFsKEx1eEZpbGVQcmV2aWV3Q29tcG9uZW50LCBudWxsLCBpbmplY3Rvcik7XG4gICAgY29uc3QgY29udGFpbmVyUmVmOiBDb21wb25lbnRSZWY8THV4RmlsZVByZXZpZXdDb21wb25lbnQ+ID0gb3ZlcmxheVJlZi5hdHRhY2goY29udGFpbmVyUG9ydGFsKTtcblxuICAgIHJldHVybiBjb250YWluZXJSZWYuaW5zdGFuY2U7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU92ZXJsYXkoY29uZmlnOiBMdXhGaWxlUHJldmlld0NvbmZpZykge1xuICAgIHJldHVybiB0aGlzLm92ZXJsYXkuY3JlYXRlKHRoaXMuZ2V0T3ZlcmxheUNvbmZpZyhjb25maWcpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlSW5qZWN0b3IoY29uZmlnOiBMdXhGaWxlUHJldmlld0NvbmZpZywgZGlhbG9nUmVmOiBMdXhGaWxlUHJldmlld1JlZik6IFBvcnRhbEluamVjdG9yIHtcbiAgICBjb25zdCBpbmplY3Rpb25Ub2tlbnMgPSBuZXcgV2Vha01hcCgpO1xuXG4gICAgaW5qZWN0aW9uVG9rZW5zLnNldChMdXhGaWxlUHJldmlld1JlZiwgZGlhbG9nUmVmKTtcbiAgICBpbmplY3Rpb25Ub2tlbnMuc2V0KExVWF9GSUxFX1BSRVZJRVdfREFUQSwgY29uZmlnLnByZXZpZXdEYXRhKTtcblxuICAgIHJldHVybiBuZXcgUG9ydGFsSW5qZWN0b3IodGhpcy5pbmplY3RvciwgaW5qZWN0aW9uVG9rZW5zKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3ZlcmxheUNvbmZpZyhjb25maWc6IEx1eEZpbGVQcmV2aWV3Q29uZmlnKTogT3ZlcmxheUNvbmZpZyB7XG4gICAgY29uc3QgcG9zaXRpb25TdHJhdGVneSA9IHRoaXMub3ZlcmxheVxuICAgICAgLnBvc2l0aW9uKClcbiAgICAgIC5nbG9iYWwoKVxuICAgICAgLmNlbnRlckhvcml6b250YWxseSgpXG4gICAgICAuY2VudGVyVmVydGljYWxseSgpO1xuXG4gICAgY29uc3Qgb3ZlcmxheUNvbmZpZyA9IG5ldyBPdmVybGF5Q29uZmlnKHtcbiAgICAgIGhhc0JhY2tkcm9wOiBjb25maWcuaGFzQmFja2Ryb3AsXG4gICAgICBiYWNrZHJvcENsYXNzOiBjb25maWcuYmFja2Ryb3BDbGFzcyxcbiAgICAgIHBhbmVsQ2xhc3M6IGNvbmZpZy5wYW5lbENsYXNzLFxuICAgICAgc2Nyb2xsU3RyYXRlZ3k6IHRoaXMub3ZlcmxheS5zY3JvbGxTdHJhdGVnaWVzLmJsb2NrKCksXG4gICAgICBwb3NpdGlvblN0cmF0ZWd5XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb3ZlcmxheUNvbmZpZztcbiAgfVxufVxuIl19