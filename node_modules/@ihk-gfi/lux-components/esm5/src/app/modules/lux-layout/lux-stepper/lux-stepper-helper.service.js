import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
var LuxStepperHelperService = /** @class */ (function () {
    function LuxStepperHelperService() {
        this.switchStep = new Map();
    }
    /**
     * Springt im Stepper zum naechsten Step.
     * Alternativ (ohne Stepper als Parameter) laesst die Funktion alle
     * bekannten Stepper einen Schritt nach vorne springen.
     *
     * Voraussetzung: luxLinear = false oder aktuell Form ist valide.
     */
    LuxStepperHelperService.prototype.nextStep = function (stepper) {
        if (stepper) {
            var subject = this.switchStep.get(stepper);
            if (subject) {
                subject.next(true);
            }
        }
        else {
            this.switchStep.forEach(function (switchStep) { return switchStep.next(true); });
        }
    };
    /**
     * Springt im Stepper zum vorherigen Step.
     * Alternativ (ohne Stepper als Parameter) laesst die Funktion alle
     * Bekannten Stepper einen Schritt zurueckspringen.
     */
    LuxStepperHelperService.prototype.previousStep = function (stepper) {
        if (stepper) {
            var subject = this.switchStep.get(stepper);
            if (subject) {
                subject.next(false);
            }
        }
        else {
            this.switchStep.forEach(function (switchStep) { return switchStep.next(false); });
        }
    };
    /**
     * Gibt das Observable der internen Map fuer den Stepper zurueck.
     * @param stepper
     * @returns Observable<boolean> | Observable<any>
     */
    LuxStepperHelperService.prototype.getObservable = function (stepper) {
        var subject = this.switchStep.get(stepper);
        return subject ? subject.asObservable() : of(null);
    };
    /**
     * Traegt den Stepper in die Map der dem Service bekannten Stepper ein.
     * @param stepper
     */
    LuxStepperHelperService.prototype.registerStepper = function (stepper) {
        if (!this.switchStep.get(stepper)) {
            this.switchStep.set(stepper, new BehaviorSubject(false));
        }
    };
    LuxStepperHelperService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], LuxStepperHelperService);
    return LuxStepperHelperService;
}());
export { LuxStepperHelperService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXN0ZXBwZXItaGVscGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtbGF5b3V0L2x1eC1zdGVwcGVyL2x1eC1zdGVwcGVyLWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSXZEO0lBR0U7UUFGUSxlQUFVLEdBQXVELElBQUksR0FBRyxFQUFFLENBQUM7SUFFcEUsQ0FBQztJQUVoQjs7Ozs7O09BTUc7SUFDSSwwQ0FBUSxHQUFmLFVBQWdCLE9BQTZCO1FBQzNDLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQW9DLElBQUssT0FBQSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUM7U0FDMUY7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLDhDQUFZLEdBQW5CLFVBQW9CLE9BQTZCO1FBQy9DLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQW9DLElBQUssT0FBQSxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUF0QixDQUFzQixDQUFDLENBQUM7U0FDM0Y7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLCtDQUFhLEdBQXBCLFVBQXFCLE9BQTRCO1FBQy9DLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksaURBQWUsR0FBdEIsVUFBdUIsT0FBNEI7UUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQXpEVSx1QkFBdUI7UUFEbkMsVUFBVSxFQUFFOztPQUNBLHVCQUF1QixDQTBEbkM7SUFBRCw4QkFBQztDQUFBLEFBMURELElBMERDO1NBMURZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEx1eFN0ZXBwZXJDb21wb25lbnQgfSBmcm9tICcuL2x1eC1zdGVwcGVyLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhTdGVwcGVySGVscGVyU2VydmljZSB7XG4gIHByaXZhdGUgc3dpdGNoU3RlcDogTWFwPEx1eFN0ZXBwZXJDb21wb25lbnQsIEJlaGF2aW9yU3ViamVjdDxib29sZWFuPj4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBTcHJpbmd0IGltIFN0ZXBwZXIgenVtIG5hZWNoc3RlbiBTdGVwLlxuICAgKiBBbHRlcm5hdGl2IChvaG5lIFN0ZXBwZXIgYWxzIFBhcmFtZXRlcikgbGFlc3N0IGRpZSBGdW5rdGlvbiBhbGxlXG4gICAqIGJla2FubnRlbiBTdGVwcGVyIGVpbmVuIFNjaHJpdHQgbmFjaCB2b3JuZSBzcHJpbmdlbi5cbiAgICpcbiAgICogVm9yYXVzc2V0enVuZzogbHV4TGluZWFyID0gZmFsc2Ugb2RlciBha3R1ZWxsIEZvcm0gaXN0IHZhbGlkZS5cbiAgICovXG4gIHB1YmxpYyBuZXh0U3RlcChzdGVwcGVyPzogTHV4U3RlcHBlckNvbXBvbmVudCkge1xuICAgIGlmIChzdGVwcGVyKSB7XG4gICAgICBjb25zdCBzdWJqZWN0ID0gdGhpcy5zd2l0Y2hTdGVwLmdldChzdGVwcGVyKTtcbiAgICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICAgIHN1YmplY3QubmV4dCh0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zd2l0Y2hTdGVwLmZvckVhY2goKHN3aXRjaFN0ZXA6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPikgPT4gc3dpdGNoU3RlcC5uZXh0KHRydWUpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3ByaW5ndCBpbSBTdGVwcGVyIHp1bSB2b3JoZXJpZ2VuIFN0ZXAuXG4gICAqIEFsdGVybmF0aXYgKG9obmUgU3RlcHBlciBhbHMgUGFyYW1ldGVyKSBsYWVzc3QgZGllIEZ1bmt0aW9uIGFsbGVcbiAgICogQmVrYW5udGVuIFN0ZXBwZXIgZWluZW4gU2Nocml0dCB6dXJ1ZWNrc3ByaW5nZW4uXG4gICAqL1xuICBwdWJsaWMgcHJldmlvdXNTdGVwKHN0ZXBwZXI/OiBMdXhTdGVwcGVyQ29tcG9uZW50KSB7XG4gICAgaWYgKHN0ZXBwZXIpIHtcbiAgICAgIGNvbnN0IHN1YmplY3QgPSB0aGlzLnN3aXRjaFN0ZXAuZ2V0KHN0ZXBwZXIpO1xuICAgICAgaWYgKHN1YmplY3QpIHtcbiAgICAgICAgc3ViamVjdC5uZXh0KGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zd2l0Y2hTdGVwLmZvckVhY2goKHN3aXRjaFN0ZXA6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPikgPT4gc3dpdGNoU3RlcC5uZXh0KGZhbHNlKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdpYnQgZGFzIE9ic2VydmFibGUgZGVyIGludGVybmVuIE1hcCBmdWVyIGRlbiBTdGVwcGVyIHp1cnVlY2suXG4gICAqIEBwYXJhbSBzdGVwcGVyXG4gICAqIEByZXR1cm5zIE9ic2VydmFibGU8Ym9vbGVhbj4gfCBPYnNlcnZhYmxlPGFueT5cbiAgICovXG4gIHB1YmxpYyBnZXRPYnNlcnZhYmxlKHN0ZXBwZXI6IEx1eFN0ZXBwZXJDb21wb25lbnQpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gdGhpcy5zd2l0Y2hTdGVwLmdldChzdGVwcGVyKTtcbiAgICByZXR1cm4gc3ViamVjdCA/IHN1YmplY3QuYXNPYnNlcnZhYmxlKCkgOiBvZihudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFlZ3QgZGVuIFN0ZXBwZXIgaW4gZGllIE1hcCBkZXIgZGVtIFNlcnZpY2UgYmVrYW5udGVuIFN0ZXBwZXIgZWluLlxuICAgKiBAcGFyYW0gc3RlcHBlclxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVyU3RlcHBlcihzdGVwcGVyOiBMdXhTdGVwcGVyQ29tcG9uZW50KSB7XG4gICAgaWYgKCF0aGlzLnN3aXRjaFN0ZXAuZ2V0KHN0ZXBwZXIpKSB7XG4gICAgICB0aGlzLnN3aXRjaFN0ZXAuc2V0KHN0ZXBwZXIsIG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==