import * as tslib_1 from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { MatAccordion } from '@angular/material';
import { Subject } from 'rxjs';
var LuxAccordionComponent = /** @class */ (function () {
    function LuxAccordionComponent() {
        this.changed$ = new Subject();
        this.luxMode = 'default';
        this.luxMulti = false;
        this._luxDisabled = false;
        this._luxHideToggle = false;
    }
    Object.defineProperty(LuxAccordionComponent.prototype, "luxDisabled", {
        get: function () {
            return this._luxDisabled;
        },
        set: function (disabled) {
            this._luxDisabled = disabled;
            this.changed$.next('luxDisabled');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxAccordionComponent.prototype, "luxHideToggle", {
        get: function () {
            return this._luxHideToggle;
        },
        set: function (hideToggle) {
            this._luxHideToggle = hideToggle;
            this.changed$.next('luxHideToggle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxAccordionComponent.prototype, "luxExpandedHeaderHeight", {
        get: function () {
            return this._luxExpandedHeaderHeight;
        },
        set: function (height) {
            this._luxExpandedHeaderHeight = height;
            this.changed$.next('luxExpandedHeaderHeight');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxAccordionComponent.prototype, "luxCollapsedHeaderHeight", {
        get: function () {
            return this._luxCollapsedHeaderHeight;
        },
        set: function (height) {
            this._luxCollapsedHeaderHeight = height;
            this.changed$.next('luxCollapsedHeaderHeight');
        },
        enumerable: true,
        configurable: true
    });
    LuxAccordionComponent.prototype.ngOnInit = function () { };
    LuxAccordionComponent.prototype.ngOnDestroy = function () {
        this.changed$.complete();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxAccordionComponent.prototype, "luxMode", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxAccordionComponent.prototype, "luxMulti", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxAccordionComponent.prototype, "luxDisabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxAccordionComponent.prototype, "luxHideToggle", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], LuxAccordionComponent.prototype, "luxExpandedHeaderHeight", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], LuxAccordionComponent.prototype, "luxCollapsedHeaderHeight", null);
    tslib_1.__decorate([
        ViewChild(MatAccordion, { static: true }),
        tslib_1.__metadata("design:type", MatAccordion)
    ], LuxAccordionComponent.prototype, "matAccordion", void 0);
    LuxAccordionComponent = tslib_1.__decorate([
        Component({
            selector: 'lux-accordion',
            template: "<mat-accordion [displayMode]=\"luxMode\" [multi]=\"luxMulti\">\n  <ng-content select=\"lux-panel\"></ng-content>\n</mat-accordion>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], LuxAccordionComponent);
    return LuxAccordionComponent;
}());
export { LuxAccordionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWFjY29yZGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtbGF5b3V0L2x1eC1hY2NvcmRpb24vbHV4LWFjY29yZGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFNL0I7SUF5REU7UUF4REEsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFFaEIsWUFBTyxHQUF1QixTQUFTLENBQUM7UUFDeEMsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUVuQyxpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUM5QixtQkFBYyxHQUFZLEtBQUssQ0FBQztJQWtEakIsQ0FBQztJQTdDaEIsc0JBQUksOENBQVc7YUFBZjtZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzQixDQUFDO2FBRUQsVUFBZ0IsUUFBaUI7WUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7WUFFN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDcEMsQ0FBQzs7O09BTkE7SUFTRCxzQkFBSSxnREFBYTthQUFqQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUM3QixDQUFDO2FBRUQsVUFBa0IsVUFBbUI7WUFDbkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUM7WUFFakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdEMsQ0FBQzs7O09BTkE7SUFTRCxzQkFBSSwwREFBdUI7YUFBM0I7WUFDRSxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztRQUN2QyxDQUFDO2FBRUQsVUFBNEIsTUFBYztZQUN4QyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsTUFBTSxDQUFDO1lBRXZDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDaEQsQ0FBQzs7O09BTkE7SUFTRCxzQkFBSSwyREFBd0I7YUFBNUI7WUFDRSxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztRQUN4QyxDQUFDO2FBRUQsVUFBNkIsTUFBYztZQUN6QyxJQUFJLENBQUMseUJBQXlCLEdBQUcsTUFBTSxDQUFDO1lBRXhDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDakQsQ0FBQzs7O09BTkE7SUFZRCx3Q0FBUSxHQUFSLGNBQVksQ0FBQztJQUViLDJDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUE1RFE7UUFBUixLQUFLLEVBQUU7OzBEQUF5QztJQUN4QztRQUFSLEtBQUssRUFBRTs7MkRBQTJCO0lBUW5DO1FBREMsS0FBSyxFQUFFOzs7NERBR1A7SUFTRDtRQURDLEtBQUssRUFBRTs7OzhEQUdQO0lBU0Q7UUFEQyxLQUFLLEVBQUU7Ozt3RUFHUDtJQVNEO1FBREMsS0FBSyxFQUFFOzs7eUVBR1A7SUFRMEM7UUFBMUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzswQ0FBZSxZQUFZOytEQUFDO0lBdkQzRCxxQkFBcUI7UUFKakMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGVBQWU7WUFDekIsZ0pBQTZDO1NBQzlDLENBQUM7O09BQ1cscUJBQXFCLENBZ0VqQztJQUFELDRCQUFDO0NBQUEsQUFoRUQsSUFnRUM7U0FoRVkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0QWNjb3JkaW9uIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsdXgtYWNjb3JkaW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2x1eC1hY2NvcmRpb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEx1eEFjY29yZGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgY2hhbmdlZCQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIEBJbnB1dCgpIGx1eE1vZGU6ICdkZWZhdWx0JyB8ICdmbGF0JyA9ICdkZWZhdWx0JztcbiAgQElucHV0KCkgbHV4TXVsdGk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBfbHV4RGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgX2x1eEhpZGVUb2dnbGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgX2x1eEV4cGFuZGVkSGVhZGVySGVpZ2h0OiBzdHJpbmc7XG4gIF9sdXhDb2xsYXBzZWRIZWFkZXJIZWlnaHQ6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBnZXQgbHV4RGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2x1eERpc2FibGVkO1xuICB9XG5cbiAgc2V0IGx1eERpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbHV4RGlzYWJsZWQgPSBkaXNhYmxlZDtcblxuICAgIHRoaXMuY2hhbmdlZCQubmV4dCgnbHV4RGlzYWJsZWQnKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCBsdXhIaWRlVG9nZ2xlKCkge1xuICAgIHJldHVybiB0aGlzLl9sdXhIaWRlVG9nZ2xlO1xuICB9XG5cbiAgc2V0IGx1eEhpZGVUb2dnbGUoaGlkZVRvZ2dsZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2x1eEhpZGVUb2dnbGUgPSBoaWRlVG9nZ2xlO1xuXG4gICAgdGhpcy5jaGFuZ2VkJC5uZXh0KCdsdXhIaWRlVG9nZ2xlJyk7XG4gIH1cblxuICBASW5wdXQoKVxuICBnZXQgbHV4RXhwYW5kZWRIZWFkZXJIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2x1eEV4cGFuZGVkSGVhZGVySGVpZ2h0O1xuICB9XG5cbiAgc2V0IGx1eEV4cGFuZGVkSGVhZGVySGVpZ2h0KGhlaWdodDogc3RyaW5nKSB7XG4gICAgdGhpcy5fbHV4RXhwYW5kZWRIZWFkZXJIZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICB0aGlzLmNoYW5nZWQkLm5leHQoJ2x1eEV4cGFuZGVkSGVhZGVySGVpZ2h0Jyk7XG4gIH1cblxuICBASW5wdXQoKVxuICBnZXQgbHV4Q29sbGFwc2VkSGVhZGVySGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl9sdXhDb2xsYXBzZWRIZWFkZXJIZWlnaHQ7XG4gIH1cblxuICBzZXQgbHV4Q29sbGFwc2VkSGVhZGVySGVpZ2h0KGhlaWdodDogc3RyaW5nKSB7XG4gICAgdGhpcy5fbHV4Q29sbGFwc2VkSGVhZGVySGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgdGhpcy5jaGFuZ2VkJC5uZXh0KCdsdXhDb2xsYXBzZWRIZWFkZXJIZWlnaHQnKTtcbiAgfVxuXG4gIEBWaWV3Q2hpbGQoTWF0QWNjb3JkaW9uLCB7IHN0YXRpYzogdHJ1ZSB9KSBtYXRBY2NvcmRpb246IE1hdEFjY29yZGlvbjtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgbmdPbkluaXQoKSB7fVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY2hhbmdlZCQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19