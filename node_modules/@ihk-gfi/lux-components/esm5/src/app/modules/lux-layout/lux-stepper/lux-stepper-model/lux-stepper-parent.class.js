import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';
/**
 * Parent-Klasse für den LuxStepperVertical und LuxStepperHorizontal, beide Komponenten werden ausschließlich von
 * dem LuxStepper zur Darstellung genutzt.
 */
var LuxStepperParent = /** @class */ (function () {
    function LuxStepperParent() {
        // Diese Outputs werden bei den Klicks auf die Stepper-eigenen Navigations-Buttons augelöst und informieren die
        // LuxStepperComponent
        this.luxFinButtonClicked = new EventEmitter();
        this.luxNextButtonClicked = new EventEmitter();
        this.luxPrevButtonClicked = new EventEmitter();
        // Wird beim Wechsel des Steps (über Header oder Button) aufgerufen
        this.luxStepChanged = new EventEmitter();
        this.luxCheckValidation = new EventEmitter();
        // Wird beim AfterViewInit und bei jeder Aktualisierung der MatStepLabels aufgerufen um die LuxStepperComponent
        // über die aktuellen Elemente informiert zu halten
        this.luxMatStepperLoaded = new EventEmitter();
        this.luxMatStepLabelsLoaded = new EventEmitter();
    }
    LuxStepperParent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // Sobald die Component initialisiert ist, dem Parent (luxStepper) den
        // MatStepper und die MatStepLabels mitteilen
        this.luxMatStepperLoaded.emit(this.matStepper);
        this.luxMatStepLabelsLoaded.emit(this.matStepLabels.toArray());
        this.matStepLabels.changes.subscribe(function () {
            _this.luxMatStepLabelsLoaded.emit(_this.matStepLabels.toArray());
        });
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxStepperParent.prototype, "luxFinButtonClicked", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxStepperParent.prototype, "luxNextButtonClicked", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxStepperParent.prototype, "luxPrevButtonClicked", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxStepperParent.prototype, "luxStepChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxStepperParent.prototype, "luxCheckValidation", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxStepperParent.prototype, "luxMatStepperLoaded", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxStepperParent.prototype, "luxMatStepLabelsLoaded", void 0);
    tslib_1.__decorate([
        ViewChild('stepper', { static: true }),
        tslib_1.__metadata("design:type", Object)
    ], LuxStepperParent.prototype, "matStepper", void 0);
    tslib_1.__decorate([
        ViewChildren('matStepLabel', { read: ViewContainerRef }),
        tslib_1.__metadata("design:type", QueryList)
    ], LuxStepperParent.prototype, "matStepLabels", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxStepperParent.prototype, "luxStepperConfig", void 0);
    return LuxStepperParent;
}());
export { LuxStepperParent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXN0ZXBwZXItcGFyZW50LmNsYXNzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWxheW91dC9sdXgtc3RlcHBlci9sdXgtc3RlcHBlci1tb2RlbC9sdXgtc3RlcHBlci1wYXJlbnQuY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULFlBQVksRUFDWixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFLdkI7OztHQUdHO0FBQ0g7SUFtQkU7UUFsQkEsK0dBQStHO1FBQy9HLHNCQUFzQjtRQUNaLHdCQUFtQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzVELHlCQUFvQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdELHlCQUFvQixHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3ZFLG1FQUFtRTtRQUN6RCxtQkFBYyxHQUF3QyxJQUFJLFlBQVksRUFBeUIsQ0FBQztRQUNoRyx1QkFBa0IsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUM1RSwrR0FBK0c7UUFDL0csbURBQW1EO1FBQ3pDLHdCQUFtQixHQUE0RCxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xHLDJCQUFzQixHQUFxQyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBT3pFLENBQUM7SUFFaEIsMENBQWUsR0FBZjtRQUFBLGlCQVFDO1FBUEMsc0VBQXNFO1FBQ3RFLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDbkMsS0FBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBMUJTO1FBQVQsTUFBTSxFQUFFOzBDQUFzQixZQUFZO2lFQUEyQjtJQUM1RDtRQUFULE1BQU0sRUFBRTswQ0FBdUIsWUFBWTtrRUFBMkI7SUFDN0Q7UUFBVCxNQUFNLEVBQUU7MENBQXVCLFlBQVk7a0VBQTJCO0lBRTdEO1FBQVQsTUFBTSxFQUFFOzBDQUFpQixZQUFZOzREQUFvRTtJQUNoRztRQUFULE1BQU0sRUFBRTswQ0FBcUIsWUFBWTtnRUFBa0M7SUFHbEU7UUFBVCxNQUFNLEVBQUU7MENBQXNCLFlBQVk7aUVBQWlFO0lBQ2xHO1FBQVQsTUFBTSxFQUFFOzBDQUF5QixZQUFZO29FQUEwQztJQUVoRDtRQUF2QyxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzt3REFBdUQ7SUFDcEM7UUFBekQsWUFBWSxDQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDOzBDQUFnQixTQUFTOzJEQUFtQjtJQUU1RjtRQUFSLEtBQUssRUFBRTs7OERBQTRDO0lBYXRELHVCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E5QlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NoaWxkcmVuLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0SG9yaXpvbnRhbFN0ZXBwZXIsIE1hdFZlcnRpY2FsU3RlcHBlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IFN0ZXBwZXJTZWxlY3Rpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcbmltcG9ydCB7IElMdXhTdGVwcGVyQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vbHV4LXN0ZXBwZXItY29uZmlndXJhdGlvbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIFBhcmVudC1LbGFzc2UgZsO8ciBkZW4gTHV4U3RlcHBlclZlcnRpY2FsIHVuZCBMdXhTdGVwcGVySG9yaXpvbnRhbCwgYmVpZGUgS29tcG9uZW50ZW4gd2VyZGVuIGF1c3NjaGxpZcOfbGljaCB2b25cbiAqIGRlbSBMdXhTdGVwcGVyIHp1ciBEYXJzdGVsbHVuZyBnZW51dHp0LlxuICovXG5leHBvcnQgY2xhc3MgTHV4U3RlcHBlclBhcmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAvLyBEaWVzZSBPdXRwdXRzIHdlcmRlbiBiZWkgZGVuIEtsaWNrcyBhdWYgZGllIFN0ZXBwZXItZWlnZW5lbiBOYXZpZ2F0aW9ucy1CdXR0b25zIGF1Z2Vsw7ZzdCB1bmQgaW5mb3JtaWVyZW4gZGllXG4gIC8vIEx1eFN0ZXBwZXJDb21wb25lbnRcbiAgQE91dHB1dCgpIGx1eEZpbkJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbHV4TmV4dEJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbHV4UHJldkJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAvLyBXaXJkIGJlaW0gV2VjaHNlbCBkZXMgU3RlcHMgKMO8YmVyIEhlYWRlciBvZGVyIEJ1dHRvbikgYXVmZ2VydWZlblxuICBAT3V0cHV0KCkgbHV4U3RlcENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxTdGVwcGVyU2VsZWN0aW9uRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxTdGVwcGVyU2VsZWN0aW9uRXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSBsdXhDaGVja1ZhbGlkYXRpb246IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgLy8gV2lyZCBiZWltIEFmdGVyVmlld0luaXQgdW5kIGJlaSBqZWRlciBBa3R1YWxpc2llcnVuZyBkZXIgTWF0U3RlcExhYmVscyBhdWZnZXJ1ZmVuIHVtIGRpZSBMdXhTdGVwcGVyQ29tcG9uZW50XG4gIC8vIMO8YmVyIGRpZSBha3R1ZWxsZW4gRWxlbWVudGUgaW5mb3JtaWVydCB6dSBoYWx0ZW5cbiAgQE91dHB1dCgpIGx1eE1hdFN0ZXBwZXJMb2FkZWQ6IEV2ZW50RW1pdHRlcjxNYXRIb3Jpem9udGFsU3RlcHBlciB8IE1hdFZlcnRpY2FsU3RlcHBlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBsdXhNYXRTdGVwTGFiZWxzTG9hZGVkOiBFdmVudEVtaXR0ZXI8Vmlld0NvbnRhaW5lclJlZltdPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAVmlld0NoaWxkKCdzdGVwcGVyJywgeyBzdGF0aWM6IHRydWUgfSkgbWF0U3RlcHBlcjogTWF0SG9yaXpvbnRhbFN0ZXBwZXIgfCBNYXRWZXJ0aWNhbFN0ZXBwZXI7XG4gIEBWaWV3Q2hpbGRyZW4oJ21hdFN0ZXBMYWJlbCcsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KSBtYXRTdGVwTGFiZWxzOiBRdWVyeUxpc3Q8Vmlld0NvbnRhaW5lclJlZj47XG5cbiAgQElucHV0KCkgbHV4U3RlcHBlckNvbmZpZzogSUx1eFN0ZXBwZXJDb25maWd1cmF0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgLy8gU29iYWxkIGRpZSBDb21wb25lbnQgaW5pdGlhbGlzaWVydCBpc3QsIGRlbSBQYXJlbnQgKGx1eFN0ZXBwZXIpIGRlblxuICAgIC8vIE1hdFN0ZXBwZXIgdW5kIGRpZSBNYXRTdGVwTGFiZWxzIG1pdHRlaWxlblxuICAgIHRoaXMubHV4TWF0U3RlcHBlckxvYWRlZC5lbWl0KHRoaXMubWF0U3RlcHBlcik7XG4gICAgdGhpcy5sdXhNYXRTdGVwTGFiZWxzTG9hZGVkLmVtaXQodGhpcy5tYXRTdGVwTGFiZWxzLnRvQXJyYXkoKSk7XG4gICAgdGhpcy5tYXRTdGVwTGFiZWxzLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMubHV4TWF0U3RlcExhYmVsc0xvYWRlZC5lbWl0KHRoaXMubWF0U3RlcExhYmVscy50b0FycmF5KCkpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=