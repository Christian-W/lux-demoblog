import * as tslib_1 from "tslib";
import { Component, EventEmitter, forwardRef, HostBinding, Inject, Input, Optional, Output, ViewChild } from '@angular/core';
import { MatExpansionPanel } from '@angular/material';
import { LuxAccordionComponent } from '../lux-accordion/lux-accordion.component';
var LuxPanelComponent = /** @class */ (function () {
    function LuxPanelComponent(parent) {
        this.parent = parent;
        this.luxExpanded = false;
        this.luxOpened = new EventEmitter();
        this.luxClosed = new EventEmitter();
        this.luxExpandedChange = new EventEmitter();
        this.pr1 = true;
        this.pl1 = true;
    }
    LuxPanelComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.parent) {
            if (this.luxHideToggle === undefined) {
                this.luxHideToggle = this.parent.luxHideToggle;
            }
            if (this.luxDisabled === undefined) {
                this.luxDisabled = this.parent.luxDisabled;
            }
            if (this.luxExpandedHeaderHeight === undefined) {
                this.luxExpandedHeaderHeight = this.parent.luxExpandedHeaderHeight;
            }
            if (this.luxCollapsedHeaderHeight === undefined) {
                this.luxCollapsedHeaderHeight = this.parent.luxCollapsedHeaderHeight;
            }
            // Diese Zeile wird benötigt, damit der Multi-Mode
            // (nur ein Abschnitt darf geöffnet sein) des Accordions funktioniert.
            this.matExpansionPanel.accordion = this.parent.matAccordion;
            // Um eine zyklische Abhängigkeit mit dem lux-accordion zu vermeiden,
            // wurde hier ein Event verwendet.
            this.subscription = this.parent.changed$.subscribe(function (propertyName) {
                if (propertyName === 'luxHideToggle') {
                    _this.luxHideToggle = _this.parent.luxHideToggle;
                }
                else if (propertyName === 'luxDisabled') {
                    _this.luxDisabled = _this.parent.luxDisabled;
                }
                else if (propertyName === 'luxExpandedHeaderHeight') {
                    _this.luxExpandedHeaderHeight = _this.parent.luxExpandedHeaderHeight;
                }
                else if (propertyName === 'luxCollapsedHeaderHeight') {
                    _this.luxCollapsedHeaderHeight = _this.parent.luxCollapsedHeaderHeight;
                }
            });
        }
    };
    LuxPanelComponent.prototype.ngOnDestroy = function () {
        if (this.parent) {
            this.subscription.unsubscribe();
        }
    };
    LuxPanelComponent.prototype.onOpened = function (eventValue) {
        this.luxOpened.emit(eventValue);
        this.luxExpanded = true;
        this.luxExpandedChange.emit(this.luxExpanded);
    };
    LuxPanelComponent.prototype.onClosed = function (eventValue) {
        this.luxClosed.emit(eventValue);
        this.luxExpanded = false;
        this.luxExpandedChange.emit(this.luxExpanded);
    };
    LuxPanelComponent.ctorParameters = function () { return [
        { type: LuxAccordionComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return LuxAccordionComponent; }),] }] }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxPanelComponent.prototype, "luxDisabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxPanelComponent.prototype, "luxExpanded", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxPanelComponent.prototype, "luxHideToggle", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxPanelComponent.prototype, "luxCollapsedHeaderHeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxPanelComponent.prototype, "luxExpandedHeaderHeight", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], LuxPanelComponent.prototype, "luxOpened", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], LuxPanelComponent.prototype, "luxClosed", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxPanelComponent.prototype, "luxExpandedChange", void 0);
    tslib_1.__decorate([
        ViewChild(MatExpansionPanel, { static: true }),
        tslib_1.__metadata("design:type", MatExpansionPanel)
    ], LuxPanelComponent.prototype, "matExpansionPanel", void 0);
    tslib_1.__decorate([
        HostBinding('class.lux-pr-1'),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxPanelComponent.prototype, "pr1", void 0);
    tslib_1.__decorate([
        HostBinding('class.lux-pl-1'),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxPanelComponent.prototype, "pl1", void 0);
    LuxPanelComponent = tslib_1.__decorate([
        Component({
            selector: 'lux-panel',
            template: "<mat-expansion-panel\n  [disabled]=\"luxDisabled\"\n  [expanded]=\"luxExpanded\"\n  [hideToggle]=\"luxHideToggle\"\n  (opened)=\"onOpened($event)\"\n  (closed)=\"onClosed($event)\"\n  ngClass.sm=\"lux-panel-mobile\"\n  ngClass.xs=\"lux-panel-mobile\"\n>\n  <mat-expansion-panel-header [expandedHeight]=\"luxExpandedHeaderHeight\" [collapsedHeight]=\"luxCollapsedHeaderHeight\">\n    <ng-content select=\"lux-panel-header-title\"></ng-content>\n    <ng-content select=\"lux-panel-header-description\"></ng-content>\n  </mat-expansion-panel-header>\n  <ng-content select=\"lux-panel-content\"></ng-content>\n  <ng-content select=\"lux-panel-action\"></ng-content>\n</mat-expansion-panel>\n",
            styles: [":host{display:block}.lux-panel-mobile .mat-expansion-panel-header{padding:0 12px!important}.lux-panel-mobile ::ng-deep .mat-expansion-panel-body{padding:0 12px 8px!important}.lux-panel-mobile ::ng-deep .mat-expansion-panel-body .mat-expansion-panel-content,.lux-panel-mobile ::ng-deep .mat-expansion-panel-body .mat-expansion-panel-header{position:relative}"]
        }),
        tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(forwardRef(function () { return LuxAccordionComponent; }))),
        tslib_1.__metadata("design:paramtypes", [LuxAccordionComponent])
    ], LuxPanelComponent);
    return LuxPanelComponent;
}());
export { LuxPanelComponent };
//# sourceMappingURL=data:application/json;base64,