import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { LuxMediaQueryObserverService } from '../../lux-util/lux-media-query-observer.service';
var LuxMasterDetailMobileHelperService = /** @class */ (function () {
    function LuxMasterDetailMobileHelperService(mediaObserver) {
        var _this = this;
        this.mediaObserver = mediaObserver;
        this._mdRegistered$ = new BehaviorSubject(false);
        this._masterCollapsed$ = new BehaviorSubject(true);
        this._hasValue$ = new BehaviorSubject(false);
        this.mediaObserver.getMediaQueryChangedAsObservable().subscribe(function () {
            setTimeout(function () {
                _this.handleMasterCollapseState();
            });
        });
    }
    Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "masterCollapsed$", {
        get: function () {
            return this._masterCollapsed$.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "masterCollapsedObservable", {
        get: function () {
            return this._masterCollapsed$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "isRegisteredObservable", {
        get: function () {
            return this._mdRegistered$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "isRegistered", {
        get: function () {
            return this._mdRegistered$.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "hasValueObservable", {
        get: function () {
            return this._hasValue$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxMasterDetailMobileHelperService.prototype, "hasValue", {
        get: function () {
            return this._hasValue$.getValue();
        },
        set: function (hasValue) {
            this._hasValue$.next(hasValue);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sendet ueber den masterCollapsed$-Subject ein Event mit dem Wert true.
     * Kennzeichnet das der Master geoeffnet werden soll.
     */
    LuxMasterDetailMobileHelperService.prototype.openMaster = function () {
        this._masterCollapsed$.next(true);
    };
    /**
     * Sendet ueber den masterCollapsed$-Subject ein Event mit dem Wert false.
     * Kennzeichnet das der Master geschlossen werden soll.
     */
    LuxMasterDetailMobileHelperService.prototype.closeMaster = function () {
        this._masterCollapsed$.next(false);
    };
    /**
     * Gibt zurueck ob eine Media-Query fuer XS oder SM aktuell aktiv ist.
     * @returns boolean
     */
    LuxMasterDetailMobileHelperService.prototype.isMobile = function () {
        return this.mediaObserver.isXS() || this.mediaObserver.isSM();
    };
    /**
     * Meldet eine Master-Detail-Komponente fuer diesen Service an.
     */
    LuxMasterDetailMobileHelperService.prototype.register = function () {
        if (!this.isRegistered) {
            this._mdRegistered$.next(true);
        }
        else {
            console.error('Fehler: Ein Master-Detail-Helper-Service kann nur eine registrierte Master-Detail-Komponente haben.');
        }
    };
    /**
     * Meldet die aktuelle Master-Detail-Komponente dieses Services ab.
     */
    LuxMasterDetailMobileHelperService.prototype.unregister = function () {
        if (this.isRegistered) {
            this._mdRegistered$.next(false);
        }
    };
    /**
     * Sendet ein Event um den Master zu oeffnen bzw. zu schliessen
     * wenn sich der Zustand der Media-Query geaendert hat.
     */
    LuxMasterDetailMobileHelperService.prototype.handleMasterCollapseState = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.hasValue && (_this.mediaObserver.isXS() || _this.mediaObserver.isSM())) {
                _this.closeMaster();
            }
            else {
                _this.openMaster();
            }
        });
    };
    LuxMasterDetailMobileHelperService.ctorParameters = function () { return [
        { type: LuxMediaQueryObserverService }
    ]; };
    LuxMasterDetailMobileHelperService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [LuxMediaQueryObserverService])
    ], LuxMasterDetailMobileHelperService);
    return LuxMasterDetailMobileHelperService;
}());
export { LuxMasterDetailMobileHelperService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LW1hc3Rlci1kZXRhaWwtbW9iaWxlLWhlbHBlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWxheW91dC9sdXgtbWFzdGVyLWRldGFpbC9sdXgtbWFzdGVyLWRldGFpbC1tb2JpbGUtaGVscGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUcvRjtJQUtFLDRDQUFvQixhQUEyQztRQUEvRCxpQkFNQztRQU5tQixrQkFBYSxHQUFiLGFBQWEsQ0FBOEI7UUFKdkQsbUJBQWMsR0FBNkIsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEUsc0JBQWlCLEdBQTZCLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hFLGVBQVUsR0FBNkIsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFHeEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUM5RCxVQUFVLENBQUM7Z0JBQ1QsS0FBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxzQkFBVyxnRUFBZ0I7YUFBM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMzQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFXLHlFQUF5QjthQUFwQztZQUNFLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQy9DLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsc0VBQXNCO2FBQWpDO1lBQ0UsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsNERBQVk7YUFBdkI7WUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyxrRUFBa0I7YUFBN0I7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyx3REFBUTthQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwQyxDQUFDO2FBRUQsVUFBb0IsUUFBaUI7WUFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsQ0FBQzs7O09BSkE7SUFNRDs7O09BR0c7SUFDSSx1REFBVSxHQUFqQjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHdEQUFXLEdBQWxCO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0kscURBQVEsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7T0FFRztJQUNJLHFEQUFRLEdBQWY7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsT0FBTyxDQUFDLEtBQUssQ0FDWCxxR0FBcUcsQ0FDdEcsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksdURBQVUsR0FBakI7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssc0VBQXlCLEdBQWpDO1FBQUEsaUJBUUM7UUFQQyxVQUFVLENBQUM7WUFDVCxJQUFJLEtBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtnQkFDN0UsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3BCO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNuQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBOUZrQyw0QkFBNEI7O0lBTHBELGtDQUFrQztRQUQ5QyxVQUFVLEVBQUU7aURBTXdCLDRCQUE0QjtPQUxwRCxrQ0FBa0MsQ0FvRzlDO0lBQUQseUNBQUM7Q0FBQSxBQXBHRCxJQW9HQztTQXBHWSxrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEx1eE1lZGlhUXVlcnlPYnNlcnZlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9sdXgtdXRpbC9sdXgtbWVkaWEtcXVlcnktb2JzZXJ2ZXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhNYXN0ZXJEZXRhaWxNb2JpbGVIZWxwZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfbWRSZWdpc3RlcmVkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG4gIHByaXZhdGUgX21hc3RlckNvbGxhcHNlZCQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3QodHJ1ZSk7XG4gIHByaXZhdGUgX2hhc1ZhbHVlJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtZWRpYU9ic2VydmVyOiBMdXhNZWRpYVF1ZXJ5T2JzZXJ2ZXJTZXJ2aWNlKSB7XG4gICAgdGhpcy5tZWRpYU9ic2VydmVyLmdldE1lZGlhUXVlcnlDaGFuZ2VkQXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZU1hc3RlckNvbGxhcHNlU3RhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldCBtYXN0ZXJDb2xsYXBzZWQkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9tYXN0ZXJDb2xsYXBzZWQkLmdldFZhbHVlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1hc3RlckNvbGxhcHNlZE9ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX21hc3RlckNvbGxhcHNlZCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzUmVnaXN0ZXJlZE9ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX21kUmVnaXN0ZXJlZCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzUmVnaXN0ZXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbWRSZWdpc3RlcmVkJC5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBoYXNWYWx1ZU9ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX2hhc1ZhbHVlJC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaGFzVmFsdWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hhc1ZhbHVlJC5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgcHVibGljIHNldCBoYXNWYWx1ZShoYXNWYWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hhc1ZhbHVlJC5uZXh0KGhhc1ZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kZXQgdWViZXIgZGVuIG1hc3RlckNvbGxhcHNlZCQtU3ViamVjdCBlaW4gRXZlbnQgbWl0IGRlbSBXZXJ0IHRydWUuXG4gICAqIEtlbm56ZWljaG5ldCBkYXMgZGVyIE1hc3RlciBnZW9lZmZuZXQgd2VyZGVuIHNvbGwuXG4gICAqL1xuICBwdWJsaWMgb3Blbk1hc3RlcigpOiB2b2lkIHtcbiAgICB0aGlzLl9tYXN0ZXJDb2xsYXBzZWQkLm5leHQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZGV0IHVlYmVyIGRlbiBtYXN0ZXJDb2xsYXBzZWQkLVN1YmplY3QgZWluIEV2ZW50IG1pdCBkZW0gV2VydCBmYWxzZS5cbiAgICogS2VubnplaWNobmV0IGRhcyBkZXIgTWFzdGVyIGdlc2NobG9zc2VuIHdlcmRlbiBzb2xsLlxuICAgKi9cbiAgcHVibGljIGNsb3NlTWFzdGVyKCk6IHZvaWQge1xuICAgIHRoaXMuX21hc3RlckNvbGxhcHNlZCQubmV4dChmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogR2lidCB6dXJ1ZWNrIG9iIGVpbmUgTWVkaWEtUXVlcnkgZnVlciBYUyBvZGVyIFNNIGFrdHVlbGwgYWt0aXYgaXN0LlxuICAgKiBAcmV0dXJucyBib29sZWFuXG4gICAqL1xuICBwdWJsaWMgaXNNb2JpbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubWVkaWFPYnNlcnZlci5pc1hTKCkgfHwgdGhpcy5tZWRpYU9ic2VydmVyLmlzU00oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZWxkZXQgZWluZSBNYXN0ZXItRGV0YWlsLUtvbXBvbmVudGUgZnVlciBkaWVzZW4gU2VydmljZSBhbi5cbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcigpIHtcbiAgICBpZiAoIXRoaXMuaXNSZWdpc3RlcmVkKSB7XG4gICAgICB0aGlzLl9tZFJlZ2lzdGVyZWQkLm5leHQodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdGZWhsZXI6IEVpbiBNYXN0ZXItRGV0YWlsLUhlbHBlci1TZXJ2aWNlIGthbm4gbnVyIGVpbmUgcmVnaXN0cmllcnRlIE1hc3Rlci1EZXRhaWwtS29tcG9uZW50ZSBoYWJlbi4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZWxkZXQgZGllIGFrdHVlbGxlIE1hc3Rlci1EZXRhaWwtS29tcG9uZW50ZSBkaWVzZXMgU2VydmljZXMgYWIuXG4gICAqL1xuICBwdWJsaWMgdW5yZWdpc3RlcigpIHtcbiAgICBpZiAodGhpcy5pc1JlZ2lzdGVyZWQpIHtcbiAgICAgIHRoaXMuX21kUmVnaXN0ZXJlZCQubmV4dChmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRldCBlaW4gRXZlbnQgdW0gZGVuIE1hc3RlciB6dSBvZWZmbmVuIGJ6dy4genUgc2NobGllc3NlblxuICAgKiB3ZW5uIHNpY2ggZGVyIFp1c3RhbmQgZGVyIE1lZGlhLVF1ZXJ5IGdlYWVuZGVydCBoYXQuXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZU1hc3RlckNvbGxhcHNlU3RhdGUoKTogdm9pZCB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5oYXNWYWx1ZSAmJiAodGhpcy5tZWRpYU9ic2VydmVyLmlzWFMoKSB8fCB0aGlzLm1lZGlhT2JzZXJ2ZXIuaXNTTSgpKSkge1xuICAgICAgICB0aGlzLmNsb3NlTWFzdGVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wZW5NYXN0ZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19