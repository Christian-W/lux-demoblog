import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxDialogRef } from './lux-dialog-model/lux-dialog-ref.class';
import { DEFAULT_DIALOG_CONF } from './lux-dialog-model/lux-dialog-config.interface';
import { DEFAULT_DIALOG_PRESET_CONF } from './lux-dialog-model/lux-dialog-preset-config.interface';
import { LuxDialogPresetComponent } from './lux-dialog-preset/lux-dialog-preset.component';
var LuxDialogService = /** @class */ (function () {
    function LuxDialogService(matDialog, logger, luxDialogRef) {
        this.matDialog = matDialog;
        this.logger = logger;
        this.luxDialogRef = luxDialogRef;
        this.dialogOpened = false;
    }
    LuxDialogService_1 = LuxDialogService;
    /**
     * Öffnet einen Dialog basierend auf der übergebenen Component und den entsprechenden Daten.
     * @param component
     * @param config
     * @param data
     */
    LuxDialogService.prototype.openComponent = function (component, config, data) {
        this.handleOpen(component, config, data, DEFAULT_DIALOG_CONF);
        return this.luxDialogRef;
    };
    /**
     * Öffnet einen Dialog basierend auf der LuxDialogComponent und der LuxDialogConfig.
     * @param config
     */
    LuxDialogService.prototype.open = function (config) {
        // Eine Dialog-Instanz erzeugen, als Data übergeben wir hier noch einmal die Config
        this.handleOpen(LuxDialogPresetComponent, config, config, DEFAULT_DIALOG_PRESET_CONF);
        return this.luxDialogRef;
    };
    /**
     * Prüft ob bereits ein Dialog geöffnet ist und etwaige CSS-Klassen für den Dialog gegeben sind.
     * Anschließend wird der Dialog mit den übergebenen Config-Optionen und Data-Informationen geöffnet.
     * @param component
     * @param config
     * @param data
     * @param defaultConfig
     */
    LuxDialogService.prototype.handleOpen = function (component, config, data, defaultConfig) {
        if (this.dialogOpened) {
            this.logger.error(LuxDialogService_1.ALREADY_OPENED_ERROR);
            return null;
        }
        // Wenn keine Config übergeben ist, die defaultConfig nehmen
        config = config ? config : defaultConfig;
        // Die CSS-Klassen fürs Panel herausfinden
        var panelClass = ['lux-dialog'];
        if (config.panelClass) {
            if (Array.isArray(config.panelClass)) {
                panelClass.push.apply(panelClass, tslib_1.__spread(config.panelClass));
            }
            else {
                panelClass.push(config.panelClass);
            }
        }
        // Dialog öffnen und Konfiguration übergeben
        var matDialogRef = this.matDialog.open(component, {
            width: config.width,
            height: config.height,
            autoFocus: false,
            restoreFocus: true,
            disableClose: config.disableClose,
            panelClass: panelClass
        });
        this.luxDialogRef.init(matDialogRef, data);
    };
    var LuxDialogService_1;
    LuxDialogService.ALREADY_OPENED_ERROR = 'Aktuell ist bereits ein Dialog geöffnet';
    LuxDialogService.ctorParameters = function () { return [
        { type: MatDialog },
        { type: LuxConsoleService },
        { type: LuxDialogRef }
    ]; };
    LuxDialogService = LuxDialogService_1 = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [MatDialog, LuxConsoleService, LuxDialogRef])
    ], LuxDialogService);
    return LuxDialogService;
}());
export { LuxDialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LXBvcHVwcy9sdXgtZGlhbG9nL2x1eC1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFOUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxtQkFBbUIsRUFBb0IsTUFBTSxnREFBZ0QsQ0FBQztBQUN2RyxPQUFPLEVBQ0wsMEJBQTBCLEVBRTNCLE1BQU0sdURBQXVELENBQUM7QUFDL0QsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFHM0Y7SUFLRSwwQkFBb0IsU0FBb0IsRUFBVSxNQUF5QixFQUFVLFlBQTBCO1FBQTNGLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBRnZHLGlCQUFZLEdBQVksS0FBSyxDQUFDO0lBRTRFLENBQUM7eUJBTHhHLGdCQUFnQjtJQU8zQjs7Ozs7T0FLRztJQUNILHdDQUFhLEdBQWIsVUFBYyxTQUE2QixFQUFFLE1BQXlCLEVBQUUsSUFBVTtRQUNoRixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDOUQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDSCwrQkFBSSxHQUFKLFVBQUssTUFBK0I7UUFDbEMsbUZBQW1GO1FBQ25GLElBQUksQ0FBQyxVQUFVLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBQ3RGLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNLLHFDQUFVLEdBQWxCLFVBQ0UsU0FBNkIsRUFDN0IsTUFBd0IsRUFDeEIsSUFBUyxFQUNULGFBQXdEO1FBRXhELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3pELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCw0REFBNEQ7UUFDNUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFekMsMENBQTBDO1FBQzFDLElBQU0sVUFBVSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3JCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3BDLFVBQVUsQ0FBQyxJQUFJLE9BQWYsVUFBVSxtQkFBUyxNQUFNLENBQUMsVUFBVSxHQUFFO2FBQ3ZDO2lCQUFNO2dCQUNMLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3BDO1NBQ0Y7UUFFRCw0Q0FBNEM7UUFDNUMsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xELEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztZQUNuQixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDckIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsWUFBWSxFQUFFLElBQUk7WUFDbEIsWUFBWSxFQUFFLE1BQU0sQ0FBQyxZQUFZO1lBQ2pDLFVBQVUsRUFBRSxVQUFVO1NBQ3ZCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDOztJQXRFdUIscUNBQW9CLEdBQVcseUNBQXlDLENBQUM7O2dCQUlsRSxTQUFTO2dCQUFrQixpQkFBaUI7Z0JBQXdCLFlBQVk7O0lBTHBHLGdCQUFnQjtRQUQ1QixVQUFVLEVBQUU7aURBTW9CLFNBQVMsRUFBa0IsaUJBQWlCLEVBQXdCLFlBQVk7T0FMcEcsZ0JBQWdCLENBd0U1QjtJQUFELHVCQUFDO0NBQUEsQUF4RUQsSUF3RUM7U0F4RVksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgTHV4Q29uc29sZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9sdXgtdXRpbC9sdXgtY29uc29sZS5zZXJ2aWNlJztcbmltcG9ydCB7IEx1eERpYWxvZ1JlZiB9IGZyb20gJy4vbHV4LWRpYWxvZy1tb2RlbC9sdXgtZGlhbG9nLXJlZi5jbGFzcyc7XG5pbXBvcnQgeyBERUZBVUxUX0RJQUxPR19DT05GLCBJTHV4RGlhbG9nQ29uZmlnIH0gZnJvbSAnLi9sdXgtZGlhbG9nLW1vZGVsL2x1eC1kaWFsb2ctY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQge1xuICBERUZBVUxUX0RJQUxPR19QUkVTRVRfQ09ORixcbiAgSUx1eERpYWxvZ1ByZXNldENvbmZpZ1xufSBmcm9tICcuL2x1eC1kaWFsb2ctbW9kZWwvbHV4LWRpYWxvZy1wcmVzZXQtY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBMdXhEaWFsb2dQcmVzZXRDb21wb25lbnQgfSBmcm9tICcuL2x1eC1kaWFsb2ctcHJlc2V0L2x1eC1kaWFsb2ctcHJlc2V0LmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhEaWFsb2dTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQUxSRUFEWV9PUEVORURfRVJST1I6IHN0cmluZyA9ICdBa3R1ZWxsIGlzdCBiZXJlaXRzIGVpbiBEaWFsb2cgZ2XDtmZmbmV0JztcblxuICBwcml2YXRlIGRpYWxvZ09wZW5lZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWF0RGlhbG9nOiBNYXREaWFsb2csIHByaXZhdGUgbG9nZ2VyOiBMdXhDb25zb2xlU2VydmljZSwgcHJpdmF0ZSBsdXhEaWFsb2dSZWY6IEx1eERpYWxvZ1JlZikge31cblxuICAvKipcbiAgICogw5ZmZm5ldCBlaW5lbiBEaWFsb2cgYmFzaWVyZW5kIGF1ZiBkZXIgw7xiZXJnZWJlbmVuIENvbXBvbmVudCB1bmQgZGVuIGVudHNwcmVjaGVuZGVuIERhdGVuLlxuICAgKiBAcGFyYW0gY29tcG9uZW50XG4gICAqIEBwYXJhbSBjb25maWdcbiAgICogQHBhcmFtIGRhdGFcbiAgICovXG4gIG9wZW5Db21wb25lbnQoY29tcG9uZW50OiBDb21wb25lbnRUeXBlPGFueT4sIGNvbmZpZz86IElMdXhEaWFsb2dDb25maWcsIGRhdGE/OiBhbnkpOiBMdXhEaWFsb2dSZWYge1xuICAgIHRoaXMuaGFuZGxlT3Blbihjb21wb25lbnQsIGNvbmZpZywgZGF0YSwgREVGQVVMVF9ESUFMT0dfQ09ORik7XG4gICAgcmV0dXJuIHRoaXMubHV4RGlhbG9nUmVmO1xuICB9XG5cbiAgLyoqXG4gICAqIMOWZmZuZXQgZWluZW4gRGlhbG9nIGJhc2llcmVuZCBhdWYgZGVyIEx1eERpYWxvZ0NvbXBvbmVudCB1bmQgZGVyIEx1eERpYWxvZ0NvbmZpZy5cbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKi9cbiAgb3Blbihjb25maWc/OiBJTHV4RGlhbG9nUHJlc2V0Q29uZmlnKTogTHV4RGlhbG9nUmVmIHtcbiAgICAvLyBFaW5lIERpYWxvZy1JbnN0YW56IGVyemV1Z2VuLCBhbHMgRGF0YSDDvGJlcmdlYmVuIHdpciBoaWVyIG5vY2ggZWlubWFsIGRpZSBDb25maWdcbiAgICB0aGlzLmhhbmRsZU9wZW4oTHV4RGlhbG9nUHJlc2V0Q29tcG9uZW50LCBjb25maWcsIGNvbmZpZywgREVGQVVMVF9ESUFMT0dfUFJFU0VUX0NPTkYpO1xuICAgIHJldHVybiB0aGlzLmx1eERpYWxvZ1JlZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcsO8ZnQgb2IgYmVyZWl0cyBlaW4gRGlhbG9nIGdlw7ZmZm5ldCBpc3QgdW5kIGV0d2FpZ2UgQ1NTLUtsYXNzZW4gZsO8ciBkZW4gRGlhbG9nIGdlZ2ViZW4gc2luZC5cbiAgICogQW5zY2hsaWXDn2VuZCB3aXJkIGRlciBEaWFsb2cgbWl0IGRlbiDDvGJlcmdlYmVuZW4gQ29uZmlnLU9wdGlvbmVuIHVuZCBEYXRhLUluZm9ybWF0aW9uZW4gZ2XDtmZmbmV0LlxuICAgKiBAcGFyYW0gY29tcG9uZW50XG4gICAqIEBwYXJhbSBjb25maWdcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHBhcmFtIGRlZmF1bHRDb25maWdcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlT3BlbihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudFR5cGU8YW55PixcbiAgICBjb25maWc6IElMdXhEaWFsb2dDb25maWcsXG4gICAgZGF0YTogYW55LFxuICAgIGRlZmF1bHRDb25maWc6IElMdXhEaWFsb2dDb25maWcgfCBJTHV4RGlhbG9nUHJlc2V0Q29uZmlnXG4gICkge1xuICAgIGlmICh0aGlzLmRpYWxvZ09wZW5lZCkge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoTHV4RGlhbG9nU2VydmljZS5BTFJFQURZX09QRU5FRF9FUlJPUik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBXZW5uIGtlaW5lIENvbmZpZyDDvGJlcmdlYmVuIGlzdCwgZGllIGRlZmF1bHRDb25maWcgbmVobWVuXG4gICAgY29uZmlnID0gY29uZmlnID8gY29uZmlnIDogZGVmYXVsdENvbmZpZztcblxuICAgIC8vIERpZSBDU1MtS2xhc3NlbiBmw7xycyBQYW5lbCBoZXJhdXNmaW5kZW5cbiAgICBjb25zdCBwYW5lbENsYXNzID0gWydsdXgtZGlhbG9nJ107XG4gICAgaWYgKGNvbmZpZy5wYW5lbENsYXNzKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcucGFuZWxDbGFzcykpIHtcbiAgICAgICAgcGFuZWxDbGFzcy5wdXNoKC4uLmNvbmZpZy5wYW5lbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhbmVsQ2xhc3MucHVzaChjb25maWcucGFuZWxDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGlhbG9nIMO2ZmZuZW4gdW5kIEtvbmZpZ3VyYXRpb24gw7xiZXJnZWJlblxuICAgIGNvbnN0IG1hdERpYWxvZ1JlZiA9IHRoaXMubWF0RGlhbG9nLm9wZW4oY29tcG9uZW50LCB7XG4gICAgICB3aWR0aDogY29uZmlnLndpZHRoLFxuICAgICAgaGVpZ2h0OiBjb25maWcuaGVpZ2h0LFxuICAgICAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgICAgIHJlc3RvcmVGb2N1czogdHJ1ZSxcbiAgICAgIGRpc2FibGVDbG9zZTogY29uZmlnLmRpc2FibGVDbG9zZSxcbiAgICAgIHBhbmVsQ2xhc3M6IHBhbmVsQ2xhc3NcbiAgICB9KTtcblxuICAgIHRoaXMubHV4RGlhbG9nUmVmLmluaXQobWF0RGlhbG9nUmVmLCBkYXRhKTtcbiAgfVxufVxuIl19