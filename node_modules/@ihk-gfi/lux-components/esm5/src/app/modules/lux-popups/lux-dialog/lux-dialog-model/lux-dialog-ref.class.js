import * as tslib_1 from "tslib";
import { ReplaySubject } from 'rxjs';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var LuxDialogRef = /** @class */ (function () {
    function LuxDialogRef() {
        this._dialogConfirmed = new ReplaySubject(1);
        this._dialogDeclined = new ReplaySubject(1);
        this._dialogClosed = new ReplaySubject(1);
    }
    Object.defineProperty(LuxDialogRef.prototype, "componentInstance", {
        /**
         * Gibt die Component, die in dem Dialog angezeigt wird wieder.
         */
        get: function () {
            return this._matDialogRef.componentInstance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxDialogRef.prototype, "dialogConfirmed", {
        /**
         * Damit hier ein Wert abgegeben wird, muss "closeDialog" ein Result mit dem Wert "true" übergeben bekommen.
         */
        get: function () {
            return this._dialogConfirmed.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxDialogRef.prototype, "dialogDeclined", {
        /**
         * Damit hier ein Wert abgegeben wird, muss "closeDialog" ein Result mit dem Wert "false" übergeben bekommen.
         */
        get: function () {
            return this._dialogDeclined.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxDialogRef.prototype, "dialogClosed", {
        /**
         * Wird bei Beenden des Dialogs ausgelöst.
         */
        get: function () {
            return this._dialogClosed.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxDialogRef.prototype, "data", {
        /**
         * Enthält die Daten für die Dialog-Component.
         */
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * (Re-)Initialisiert diese Dialog-Referenz neu.
     * @param matDialogRef
     * @param data
     */
    LuxDialogRef.prototype.init = function (matDialogRef, data) {
        this._matDialogRef = matDialogRef;
        this._dialogConfirmed = new ReplaySubject(1);
        this._dialogDeclined = new ReplaySubject(1);
        this._dialogClosed = new ReplaySubject(1);
        this._data = data;
    };
    /**
     * Schließt den Dialog und gibt nach Beenden die entsprechenden Events aus.
     * @param result
     */
    LuxDialogRef.prototype.closeDialog = function (result) {
        var _this = this;
        this._matDialogRef.close(result);
        this._matDialogRef.afterClosed().subscribe(function (dialogResult) {
            if (dialogResult === true) {
                _this._dialogConfirmed.next();
            }
            else if (dialogResult === false) {
                _this._dialogDeclined.next();
            }
            _this._dialogClosed.next(result);
        });
    };
    LuxDialogRef.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxDialogRef_Factory() { return new LuxDialogRef(); }, token: LuxDialogRef, providedIn: "root" });
    LuxDialogRef = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], LuxDialogRef);
    return LuxDialogRef;
}());
export { LuxDialogRef };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWRpYWxvZy1yZWYuY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtcG9wdXBzL2x1eC1kaWFsb2cvbHV4LWRpYWxvZy1tb2RlbC9sdXgtZGlhbG9nLXJlZi5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQztJQTBDRTtRQXhDUSxxQkFBZ0IsR0FBd0IsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0Qsb0JBQWUsR0FBd0IsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsa0JBQWEsR0FBdUIsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFzQ2xELENBQUM7SUFoQ2hCLHNCQUFJLDJDQUFpQjtRQUhyQjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO1FBQzlDLENBQUM7OztPQUFBO0lBS0Qsc0JBQUkseUNBQWU7UUFIbkI7O1dBRUc7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzlDLENBQUM7OztPQUFBO0lBS0Qsc0JBQUksd0NBQWM7UUFIbEI7O1dBRUc7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM3QyxDQUFDOzs7T0FBQTtJQUtELHNCQUFJLHNDQUFZO1FBSGhCOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0MsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSw4QkFBSTtRQUhSOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzs7O09BQUE7SUFJRDs7OztPQUlHO0lBQ0gsMkJBQUksR0FBSixVQUFLLFlBQStCLEVBQUUsSUFBUztRQUM3QyxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxrQ0FBVyxHQUFYLFVBQVksTUFBWTtRQUF4QixpQkFVQztRQVRDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsWUFBaUI7WUFDM0QsSUFBSSxZQUFZLEtBQUssSUFBSSxFQUFFO2dCQUN6QixLQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDOUI7aUJBQU0sSUFBSSxZQUFZLEtBQUssS0FBSyxFQUFFO2dCQUNqQyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQzdCO1lBQ0QsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztJQXZFVSxZQUFZO1FBSHhCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7O09BQ1csWUFBWSxDQXdFeEI7dUJBL0VEO0NBK0VDLEFBeEVELElBd0VDO1NBeEVZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEx1eERpYWxvZ1JlZiB7XG4gIHByaXZhdGUgX21hdERpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPGFueT47XG4gIHByaXZhdGUgX2RpYWxvZ0NvbmZpcm1lZDogUmVwbGF5U3ViamVjdDx2b2lkPiA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICBwcml2YXRlIF9kaWFsb2dEZWNsaW5lZDogUmVwbGF5U3ViamVjdDx2b2lkPiA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICBwcml2YXRlIF9kaWFsb2dDbG9zZWQ6IFJlcGxheVN1YmplY3Q8YW55PiA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICBwcml2YXRlIF9kYXRhOiBhbnk7XG5cbiAgLyoqXG4gICAqIEdpYnQgZGllIENvbXBvbmVudCwgZGllIGluIGRlbSBEaWFsb2cgYW5nZXplaWd0IHdpcmQgd2llZGVyLlxuICAgKi9cbiAgZ2V0IGNvbXBvbmVudEluc3RhbmNlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX21hdERpYWxvZ1JlZi5jb21wb25lbnRJbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEYW1pdCBoaWVyIGVpbiBXZXJ0IGFiZ2VnZWJlbiB3aXJkLCBtdXNzIFwiY2xvc2VEaWFsb2dcIiBlaW4gUmVzdWx0IG1pdCBkZW0gV2VydCBcInRydWVcIiDDvGJlcmdlYmVuIGJla29tbWVuLlxuICAgKi9cbiAgZ2V0IGRpYWxvZ0NvbmZpcm1lZCgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fZGlhbG9nQ29uZmlybWVkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERhbWl0IGhpZXIgZWluIFdlcnQgYWJnZWdlYmVuIHdpcmQsIG11c3MgXCJjbG9zZURpYWxvZ1wiIGVpbiBSZXN1bHQgbWl0IGRlbSBXZXJ0IFwiZmFsc2VcIiDDvGJlcmdlYmVuIGJla29tbWVuLlxuICAgKi9cbiAgZ2V0IGRpYWxvZ0RlY2xpbmVkKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9kaWFsb2dEZWNsaW5lZC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaXJkIGJlaSBCZWVuZGVuIGRlcyBEaWFsb2dzIGF1c2dlbMO2c3QuXG4gICAqL1xuICBnZXQgZGlhbG9nQ2xvc2VkKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2RpYWxvZ0Nsb3NlZC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnRow6RsdCBkaWUgRGF0ZW4gZsO8ciBkaWUgRGlhbG9nLUNvbXBvbmVudC5cbiAgICovXG4gIGdldCBkYXRhKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIChSZS0pSW5pdGlhbGlzaWVydCBkaWVzZSBEaWFsb2ctUmVmZXJlbnogbmV1LlxuICAgKiBAcGFyYW0gbWF0RGlhbG9nUmVmXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqL1xuICBpbml0KG1hdERpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPGFueT4sIGRhdGE6IGFueSkge1xuICAgIHRoaXMuX21hdERpYWxvZ1JlZiA9IG1hdERpYWxvZ1JlZjtcbiAgICB0aGlzLl9kaWFsb2dDb25maXJtZWQgPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcbiAgICB0aGlzLl9kaWFsb2dEZWNsaW5lZCA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICAgIHRoaXMuX2RpYWxvZ0Nsb3NlZCA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjaGxpZcOfdCBkZW4gRGlhbG9nIHVuZCBnaWJ0IG5hY2ggQmVlbmRlbiBkaWUgZW50c3ByZWNoZW5kZW4gRXZlbnRzIGF1cy5cbiAgICogQHBhcmFtIHJlc3VsdFxuICAgKi9cbiAgY2xvc2VEaWFsb2cocmVzdWx0PzogYW55KSB7XG4gICAgdGhpcy5fbWF0RGlhbG9nUmVmLmNsb3NlKHJlc3VsdCk7XG4gICAgdGhpcy5fbWF0RGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKChkaWFsb2dSZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgaWYgKGRpYWxvZ1Jlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9kaWFsb2dDb25maXJtZWQubmV4dCgpO1xuICAgICAgfSBlbHNlIGlmIChkaWFsb2dSZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX2RpYWxvZ0RlY2xpbmVkLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RpYWxvZ0Nsb3NlZC5uZXh0KHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==