import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { MatSnackBar, MatSnackBarDismiss } from '@angular/material';
import { LuxSnackbarComponent } from './lux-snackbar-component/lux-snackbar.component';
/**
 * Über den LuxSnackbarService können einfach Snackbarinfos angezeigt werden.
 */
var LuxSnackbarService = /** @class */ (function () {
    function LuxSnackbarService(snackBar) {
        this.snackBar = snackBar;
    }
    LuxSnackbarService_1 = LuxSnackbarService;
    /**
     * Diese Methode öffnet eine Snackbar mit einem Text.
     *
     * @param message Ein Text.
     * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
     * muss der Wert 0 angegeben werden.
     * @param actionName Eine Bezeichnung (z.B. Wiederherstellen) für die Action. Dieser Parameter ist optional und
     * muss nicht angegeben werden.
     */
    LuxSnackbarService.prototype.openText = function (message, duration, actionName) {
        this.snackBar.open(message, actionName, {
            duration: duration,
            verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
            horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
            panelClass: 'lux-snackbar'
        });
    };
    /**
     * Diese Methode öffnet eine Snackbar, in der die übergebene Komponente angezeigt wird.
     *
     * @param component Die Komponente, die angezeigt werden soll.
     * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
     * muss der Wert 0 angegeben werden.
     * @param data Ein Datenobjekt, das an die Komponente weitergereicht wird. Mit dem Code folgenden Code, können die
     * Daten verwendet werden. constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any).
     */
    LuxSnackbarService.prototype.openComponent = function (component, duration, data) {
        if (duration === void 0) { duration = 0; }
        this.snackBar.openFromComponent(component, {
            duration: duration,
            data: data,
            verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
            horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
            panelClass: 'lux-snackbar'
        });
    };
    /**
     * Oeffnet eine Snackbar anhand der uebergebenen Konfiguration.
     * Ermoeglicht eine genaue Konfiguration der Snackbar.
     * @param config
     */
    LuxSnackbarService.prototype.open = function (duration, config) {
        this.snackBar.openFromComponent(LuxSnackbarComponent, {
            duration: duration,
            data: config,
            verticalPosition: LuxSnackbarService_1.VERTICAL_POSITION,
            horizontalPosition: LuxSnackbarService_1.HORIZONTAL_POSITION,
            panelClass: 'lux-snackbar'
        });
    };
    /**
     * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
     * geklickt wird.
     */
    LuxSnackbarService.prototype.onAction = function () {
        if (this.snackBar._openedSnackBarRef.instance instanceof LuxSnackbarComponent) {
            return this.snackBar._openedSnackBarRef.instance.onAction();
        }
        return this.snackBar._openedSnackBarRef.onAction();
    };
    /**
     * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
     * geklickt wird.
     */
    LuxSnackbarService.prototype.afterDismissed = function () {
        return this.snackBar._openedSnackBarRef.afterDismissed();
    };
    /**
     * Diese Methode blendet die Snackbar aus.
     */
    LuxSnackbarService.prototype.dismiss = function () {
        this.snackBar.dismiss();
    };
    var LuxSnackbarService_1;
    LuxSnackbarService.VERTICAL_POSITION = 'top';
    LuxSnackbarService.HORIZONTAL_POSITION = 'end';
    LuxSnackbarService.ctorParameters = function () { return [
        { type: MatSnackBar }
    ]; };
    LuxSnackbarService = LuxSnackbarService_1 = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [MatSnackBar])
    ], LuxSnackbarService);
    return LuxSnackbarService;
}());
export { LuxSnackbarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LXNuYWNrYmFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtcG9wdXBzL2x1eC1zbmFja2Jhci9sdXgtc25hY2tiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFHdkY7O0dBRUc7QUFFSDtJQUlFLDRCQUFvQixRQUFxQjtRQUFyQixhQUFRLEdBQVIsUUFBUSxDQUFhO0lBQUcsQ0FBQzsyQkFKbEMsa0JBQWtCO0lBTTdCOzs7Ozs7OztPQVFHO0lBQ0kscUNBQVEsR0FBZixVQUFnQixPQUFlLEVBQUUsUUFBZ0IsRUFBRSxVQUFtQjtRQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFO1lBQ3RDLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLGdCQUFnQixFQUFFLG9CQUFrQixDQUFDLGlCQUFpQjtZQUN0RCxrQkFBa0IsRUFBRSxvQkFBa0IsQ0FBQyxtQkFBbUI7WUFDMUQsVUFBVSxFQUFFLGNBQWM7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksMENBQWEsR0FBcEIsVUFBcUIsU0FBNkIsRUFBRSxRQUFvQixFQUFFLElBQVU7UUFBaEMseUJBQUEsRUFBQSxZQUFvQjtRQUN0RSxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRTtZQUN6QyxRQUFRLEVBQUUsUUFBUTtZQUNsQixJQUFJLEVBQUUsSUFBSTtZQUNWLGdCQUFnQixFQUFFLG9CQUFrQixDQUFDLGlCQUFpQjtZQUN0RCxrQkFBa0IsRUFBRSxvQkFBa0IsQ0FBQyxtQkFBbUI7WUFDMUQsVUFBVSxFQUFFLGNBQWM7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxpQ0FBSSxHQUFYLFVBQVksUUFBZ0IsRUFBRSxNQUEwQjtRQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixFQUFFO1lBQ3BELFFBQVEsRUFBRSxRQUFRO1lBQ2xCLElBQUksRUFBRSxNQUFNO1lBQ1osZ0JBQWdCLEVBQUUsb0JBQWtCLENBQUMsaUJBQWlCO1lBQ3RELGtCQUFrQixFQUFFLG9CQUFrQixDQUFDLG1CQUFtQjtZQUMxRCxVQUFVLEVBQUUsY0FBYztTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0kscUNBQVEsR0FBZjtRQUNFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLFlBQVksb0JBQW9CLEVBQUU7WUFDN0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUM3RDtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksMkNBQWMsR0FBckI7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0QsQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0NBQU8sR0FBZDtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7SUFsRnVCLG9DQUFpQixHQUFHLEtBQUssQ0FBQztJQUMxQixzQ0FBbUIsR0FBRyxLQUFLLENBQUM7O2dCQUV0QixXQUFXOztJQUo5QixrQkFBa0I7UUFEOUIsVUFBVSxFQUFFO2lEQUttQixXQUFXO09BSjlCLGtCQUFrQixDQW9GOUI7SUFBRCx5QkFBQztDQUFBLEFBcEZELElBb0ZDO1NBcEZZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFR5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFNuYWNrQmFyLCBNYXRTbmFja0JhckRpc21pc3MgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMdXhTbmFja2JhckNvbXBvbmVudCB9IGZyb20gJy4vbHV4LXNuYWNrYmFyLWNvbXBvbmVudC9sdXgtc25hY2tiYXIuY29tcG9uZW50JztcbmltcG9ydCB7IEx1eFNuYWNrYmFyQ29uZmlnIH0gZnJvbSAnLi9sdXgtc25hY2tiYXItY29uZmlnJztcblxuLyoqXG4gKiDDnGJlciBkZW4gTHV4U25hY2tiYXJTZXJ2aWNlIGvDtm5uZW4gZWluZmFjaCBTbmFja2JhcmluZm9zIGFuZ2V6ZWlndCB3ZXJkZW4uXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMdXhTbmFja2JhclNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBWRVJUSUNBTF9QT1NJVElPTiA9ICd0b3AnO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBIT1JJWk9OVEFMX1BPU0lUSU9OID0gJ2VuZCc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzbmFja0JhcjogTWF0U25hY2tCYXIpIHt9XG5cbiAgLyoqXG4gICAqIERpZXNlIE1ldGhvZGUgw7ZmZm5ldCBlaW5lIFNuYWNrYmFyIG1pdCBlaW5lbSBUZXh0LlxuICAgKlxuICAgKiBAcGFyYW0gbWVzc2FnZSBFaW4gVGV4dC5cbiAgICogQHBhcmFtIGR1cmF0aW9uIEVpbmUgRGF1ZXIgaW4gTXNlYyAoei5CLiAyMDAwID0gMiBTZWt1bmRlbikuIFdlbm4gZGllIFNuYWNrYmFyIHBlcm1hbmVudCBhbmdlemVpZ3Qgd2VyZGVuIHNvbGwsXG4gICAqIG11c3MgZGVyIFdlcnQgMCBhbmdlZ2ViZW4gd2VyZGVuLlxuICAgKiBAcGFyYW0gYWN0aW9uTmFtZSBFaW5lIEJlemVpY2hudW5nICh6LkIuIFdpZWRlcmhlcnN0ZWxsZW4pIGbDvHIgZGllIEFjdGlvbi4gRGllc2VyIFBhcmFtZXRlciBpc3Qgb3B0aW9uYWwgdW5kXG4gICAqIG11c3MgbmljaHQgYW5nZWdlYmVuIHdlcmRlbi5cbiAgICovXG4gIHB1YmxpYyBvcGVuVGV4dChtZXNzYWdlOiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIsIGFjdGlvbk5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNuYWNrQmFyLm9wZW4obWVzc2FnZSwgYWN0aW9uTmFtZSwge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgdmVydGljYWxQb3NpdGlvbjogTHV4U25hY2tiYXJTZXJ2aWNlLlZFUlRJQ0FMX1BPU0lUSU9OLFxuICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uOiBMdXhTbmFja2JhclNlcnZpY2UuSE9SSVpPTlRBTF9QT1NJVElPTixcbiAgICAgIHBhbmVsQ2xhc3M6ICdsdXgtc25hY2tiYXInXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGllc2UgTWV0aG9kZSDDtmZmbmV0IGVpbmUgU25hY2tiYXIsIGluIGRlciBkaWUgw7xiZXJnZWJlbmUgS29tcG9uZW50ZSBhbmdlemVpZ3Qgd2lyZC5cbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudCBEaWUgS29tcG9uZW50ZSwgZGllIGFuZ2V6ZWlndCB3ZXJkZW4gc29sbC5cbiAgICogQHBhcmFtIGR1cmF0aW9uIEVpbmUgRGF1ZXIgaW4gTXNlYyAoei5CLiAyMDAwID0gMiBTZWt1bmRlbikuIFdlbm4gZGllIFNuYWNrYmFyIHBlcm1hbmVudCBhbmdlemVpZ3Qgd2VyZGVuIHNvbGwsXG4gICAqIG11c3MgZGVyIFdlcnQgMCBhbmdlZ2ViZW4gd2VyZGVuLlxuICAgKiBAcGFyYW0gZGF0YSBFaW4gRGF0ZW5vYmpla3QsIGRhcyBhbiBkaWUgS29tcG9uZW50ZSB3ZWl0ZXJnZXJlaWNodCB3aXJkLiBNaXQgZGVtIENvZGUgZm9sZ2VuZGVuIENvZGUsIGvDtm5uZW4gZGllXG4gICAqIERhdGVuIHZlcndlbmRldCB3ZXJkZW4uIGNvbnN0cnVjdG9yKEBJbmplY3QoTUFUX1NOQUNLX0JBUl9EQVRBKSBwdWJsaWMgZGF0YTogYW55KS5cbiAgICovXG4gIHB1YmxpYyBvcGVuQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50VHlwZTxhbnk+LCBkdXJhdGlvbjogbnVtYmVyID0gMCwgZGF0YT86IGFueSkge1xuICAgIHRoaXMuc25hY2tCYXIub3BlbkZyb21Db21wb25lbnQoY29tcG9uZW50LCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdmVydGljYWxQb3NpdGlvbjogTHV4U25hY2tiYXJTZXJ2aWNlLlZFUlRJQ0FMX1BPU0lUSU9OLFxuICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uOiBMdXhTbmFja2JhclNlcnZpY2UuSE9SSVpPTlRBTF9QT1NJVElPTixcbiAgICAgIHBhbmVsQ2xhc3M6ICdsdXgtc25hY2tiYXInXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT2VmZm5ldCBlaW5lIFNuYWNrYmFyIGFuaGFuZCBkZXIgdWViZXJnZWJlbmVuIEtvbmZpZ3VyYXRpb24uXG4gICAqIEVybW9lZ2xpY2h0IGVpbmUgZ2VuYXVlIEtvbmZpZ3VyYXRpb24gZGVyIFNuYWNrYmFyLlxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqL1xuICBwdWJsaWMgb3BlbihkdXJhdGlvbjogbnVtYmVyLCBjb25maWc/OiBMdXhTbmFja2JhckNvbmZpZykge1xuICAgIHRoaXMuc25hY2tCYXIub3BlbkZyb21Db21wb25lbnQoTHV4U25hY2tiYXJDb21wb25lbnQsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGRhdGE6IGNvbmZpZyxcbiAgICAgIHZlcnRpY2FsUG9zaXRpb246IEx1eFNuYWNrYmFyU2VydmljZS5WRVJUSUNBTF9QT1NJVElPTixcbiAgICAgIGhvcml6b250YWxQb3NpdGlvbjogTHV4U25hY2tiYXJTZXJ2aWNlLkhPUklaT05UQUxfUE9TSVRJT04sXG4gICAgICBwYW5lbENsYXNzOiAnbHV4LXNuYWNrYmFyJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpZXNlIE1ldGhvZGUgbGllZmVydCBlaW4gT2JzZXJ2YWJsZSB6dXLDvGNrLCBkYXMgZGVuIEF1ZnJ1ZmVyIGJlbmFjaHJpY2h0aWd0LCB3ZW5uIGRpZSBBY3Rpb24gaW4gZGVyIFNuYWNrYmFyXG4gICAqIGdla2xpY2t0IHdpcmQuXG4gICAqL1xuICBwdWJsaWMgb25BY3Rpb24oKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuc25hY2tCYXIuX29wZW5lZFNuYWNrQmFyUmVmLmluc3RhbmNlIGluc3RhbmNlb2YgTHV4U25hY2tiYXJDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNuYWNrQmFyLl9vcGVuZWRTbmFja0JhclJlZi5pbnN0YW5jZS5vbkFjdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNuYWNrQmFyLl9vcGVuZWRTbmFja0JhclJlZi5vbkFjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpZXNlIE1ldGhvZGUgbGllZmVydCBlaW4gT2JzZXJ2YWJsZSB6dXLDvGNrLCBkYXMgZGVuIEF1ZnJ1ZmVyIGJlbmFjaHJpY2h0aWd0LCB3ZW5uIGRpZSBBY3Rpb24gaW4gZGVyIFNuYWNrYmFyXG4gICAqIGdla2xpY2t0IHdpcmQuXG4gICAqL1xuICBwdWJsaWMgYWZ0ZXJEaXNtaXNzZWQoKTogT2JzZXJ2YWJsZTxNYXRTbmFja0JhckRpc21pc3M+IHtcbiAgICByZXR1cm4gdGhpcy5zbmFja0Jhci5fb3BlbmVkU25hY2tCYXJSZWYuYWZ0ZXJEaXNtaXNzZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaWVzZSBNZXRob2RlIGJsZW5kZXQgZGllIFNuYWNrYmFyIGF1cy5cbiAgICovXG4gIHB1YmxpYyBkaXNtaXNzKCkge1xuICAgIHRoaXMuc25hY2tCYXIuZGlzbWlzcygpO1xuICB9XG59XG4iXX0=