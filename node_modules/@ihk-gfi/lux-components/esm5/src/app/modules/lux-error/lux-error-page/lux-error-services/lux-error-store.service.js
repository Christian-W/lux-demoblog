import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Dieser Service dient dazu, die aktuellen Fehlermeldungen und die Error-Page Konfiguration zu speichern.
 *
 * Er wird von LuxErrorService und LuxErrorPageComponent benutzt, ohne ihn gäbe es Cycle-Dependency Fehler.
 */
var LuxErrorStoreService = /** @class */ (function () {
    function LuxErrorStoreService() {
        /**
         * Enthaelt die normale Konfiguration der Fehlerseite, kann bei Bedarf mit setConfig ueberschrieben werden.
         */
        this._defaultConfig = {
            iconName: 'far fa-times-circle',
            iconSize: '5x',
            errorText: 'Uups... da ist etwas schief gelaufen. Wir kennen die Fehlerdetails bereits und kümmern uns darum.',
            homeRedirectText: 'Zurück zur Startseite',
            homeRedirectUrl: '',
            errorPageUrl: 'errorpage',
            skipLocationChange: true
        };
    }
    Object.defineProperty(LuxErrorStoreService.prototype, "config", {
        /**
         * Gibt die aktuelle Konfiguration zurueck.
         * @returns ILuxErrorPageConfig
         */
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxErrorStoreService.prototype, "lastErrors", {
        /**
         * Gibt ein Array der letzten Fehler zurueck.
         * @returns Array<ILuxError[]>
         */
        get: function () {
            return Array.of(this._lastErrors);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxErrorStoreService.prototype, "error", {
        /**
         * Gibt den aktuellen Fehler zurueck.
         * @returns ILuxError
         */
        get: function () {
            return this._error;
        },
        /**
         * Sichert den Fehler in der Property und fügt ihn der "lastErrors"-Liste hinzu.
         * @param newError
         */
        set: function (newError) {
            this._error = newError;
            this._lastErrors.push(newError);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialisiert den Service.
     */
    LuxErrorStoreService.prototype.init = function () {
        this._lastErrors = [];
        this._error = null;
        this._config = {};
        this.safeNewConfig(this._defaultConfig);
    };
    /**
     *
     * @param luxErrorPageConfig
     */
    LuxErrorStoreService.prototype.safeNewConfig = function (luxErrorPageConfig) {
        var _this = this;
        // wenn keine Config übergeben wird, ein leeres Objekt erzeugen
        // das sorgt dafür, dass wenigstens die default-Werte genommen werden
        luxErrorPageConfig = luxErrorPageConfig ? luxErrorPageConfig : {};
        // alle Werte der übergebenen Config prüfen und ggf. default-Werte nutzen
        Object.keys(luxErrorPageConfig).forEach(function (e) {
            if (luxErrorPageConfig[e] !== undefined && luxErrorPageConfig[e] !== null) {
                _this._config[e] = luxErrorPageConfig[e];
            }
            else {
                _this._config[e] = _this._defaultConfig[e];
            }
        });
    };
    LuxErrorStoreService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxErrorStoreService_Factory() { return new LuxErrorStoreService(); }, token: LuxErrorStoreService, providedIn: "root" });
    LuxErrorStoreService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], LuxErrorStoreService);
    return LuxErrorStoreService;
}());
export { LuxErrorStoreService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWVycm9yLXN0b3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtZXJyb3IvbHV4LWVycm9yLXBhZ2UvbHV4LWVycm9yLXNlcnZpY2VzL2x1eC1lcnJvci1zdG9yZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQzs7OztHQUlHO0FBSUg7SUFtREU7UUE5Q0E7O1dBRUc7UUFDYyxtQkFBYyxHQUF3QjtZQUNyRCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFFBQVEsRUFBRSxJQUFJO1lBQ2QsU0FBUyxFQUFFLG1HQUFtRztZQUM5RyxnQkFBZ0IsRUFBRSx1QkFBdUI7WUFDekMsZUFBZSxFQUFFLEVBQUU7WUFDbkIsWUFBWSxFQUFFLFdBQVc7WUFDekIsa0JBQWtCLEVBQUUsSUFBSTtTQUN6QixDQUFDO0lBbUNhLENBQUM7SUE3QmhCLHNCQUFJLHdDQUFNO1FBSlY7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSw0Q0FBVTtRQUpkOzs7V0FHRzthQUNIO1lBQ0UsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwQyxDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLHVDQUFLO1FBSlQ7OztXQUdHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQUVEOzs7V0FHRzthQUNILFVBQVUsUUFBbUI7WUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7WUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMsQ0FBQzs7O09BVEE7SUFhRDs7T0FFRztJQUNILG1DQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsNENBQWEsR0FBYixVQUFjLGtCQUF1QztRQUFyRCxpQkFZQztRQVhDLCtEQUErRDtRQUMvRCxxRUFBcUU7UUFDckUsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEUseUVBQXlFO1FBQ3pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ3ZDLElBQUksa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxJQUFJLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDekUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN6QztpQkFBTTtnQkFDTCxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O0lBL0VVLG9CQUFvQjtRQUhoQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDOztPQUNXLG9CQUFvQixDQWdGaEM7K0JBNUZEO0NBNEZDLEFBaEZELElBZ0ZDO1NBaEZZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElMdXhFcnJvclBhZ2VDb25maWcgfSBmcm9tICcuLi9sdXgtZXJyb3ItaW50ZXJmYWNlcy9sdXgtZXJyb3ItcGFnZS1jb25maWcuaW50ZXJmYWNlJztcbmltcG9ydCB7IElMdXhFcnJvciB9IGZyb20gJy4uL2x1eC1lcnJvci1pbnRlcmZhY2VzL2x1eC1lcnJvci5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIERpZXNlciBTZXJ2aWNlIGRpZW50IGRhenUsIGRpZSBha3R1ZWxsZW4gRmVobGVybWVsZHVuZ2VuIHVuZCBkaWUgRXJyb3ItUGFnZSBLb25maWd1cmF0aW9uIHp1IHNwZWljaGVybi5cbiAqXG4gKiBFciB3aXJkIHZvbiBMdXhFcnJvclNlcnZpY2UgdW5kIEx1eEVycm9yUGFnZUNvbXBvbmVudCBiZW51dHp0LCBvaG5lIGlobiBnw6RiZSBlcyBDeWNsZS1EZXBlbmRlbmN5IEZlaGxlci5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTHV4RXJyb3JTdG9yZVNlcnZpY2Uge1xuICBwcml2YXRlIF9jb25maWc6IElMdXhFcnJvclBhZ2VDb25maWc7XG4gIHByaXZhdGUgX2Vycm9yOiBJTHV4RXJyb3I7XG4gIHByaXZhdGUgX2xhc3RFcnJvcnM6IElMdXhFcnJvcltdO1xuXG4gIC8qKlxuICAgKiBFbnRoYWVsdCBkaWUgbm9ybWFsZSBLb25maWd1cmF0aW9uIGRlciBGZWhsZXJzZWl0ZSwga2FubiBiZWkgQmVkYXJmIG1pdCBzZXRDb25maWcgdWViZXJzY2hyaWViZW4gd2VyZGVuLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBfZGVmYXVsdENvbmZpZzogSUx1eEVycm9yUGFnZUNvbmZpZyA9IHtcbiAgICBpY29uTmFtZTogJ2ZhciBmYS10aW1lcy1jaXJjbGUnLFxuICAgIGljb25TaXplOiAnNXgnLFxuICAgIGVycm9yVGV4dDogJ1V1cHMuLi4gZGEgaXN0IGV0d2FzIHNjaGllZiBnZWxhdWZlbi4gV2lyIGtlbm5lbiBkaWUgRmVobGVyZGV0YWlscyBiZXJlaXRzIHVuZCBrw7xtbWVybiB1bnMgZGFydW0uJyxcbiAgICBob21lUmVkaXJlY3RUZXh0OiAnWnVyw7xjayB6dXIgU3RhcnRzZWl0ZScsXG4gICAgaG9tZVJlZGlyZWN0VXJsOiAnJyxcbiAgICBlcnJvclBhZ2VVcmw6ICdlcnJvcnBhZ2UnLFxuICAgIHNraXBMb2NhdGlvbkNoYW5nZTogdHJ1ZVxuICB9O1xuXG4gIC8qKlxuICAgKiBHaWJ0IGRpZSBha3R1ZWxsZSBLb25maWd1cmF0aW9uIHp1cnVlY2suXG4gICAqIEByZXR1cm5zIElMdXhFcnJvclBhZ2VDb25maWdcbiAgICovXG4gIGdldCBjb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHaWJ0IGVpbiBBcnJheSBkZXIgbGV0enRlbiBGZWhsZXIgenVydWVjay5cbiAgICogQHJldHVybnMgQXJyYXk8SUx1eEVycm9yW10+XG4gICAqL1xuICBnZXQgbGFzdEVycm9ycygpIHtcbiAgICByZXR1cm4gQXJyYXkub2YodGhpcy5fbGFzdEVycm9ycyk7XG4gIH1cblxuICAvKipcbiAgICogR2lidCBkZW4gYWt0dWVsbGVuIEZlaGxlciB6dXJ1ZWNrLlxuICAgKiBAcmV0dXJucyBJTHV4RXJyb3JcbiAgICovXG4gIGdldCBlcnJvcigpOiBJTHV4RXJyb3Ige1xuICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWNoZXJ0IGRlbiBGZWhsZXIgaW4gZGVyIFByb3BlcnR5IHVuZCBmw7xndCBpaG4gZGVyIFwibGFzdEVycm9yc1wiLUxpc3RlIGhpbnp1LlxuICAgKiBAcGFyYW0gbmV3RXJyb3JcbiAgICovXG4gIHNldCBlcnJvcihuZXdFcnJvcjogSUx1eEVycm9yKSB7XG4gICAgdGhpcy5fZXJyb3IgPSBuZXdFcnJvcjtcbiAgICB0aGlzLl9sYXN0RXJyb3JzLnB1c2gobmV3RXJyb3IpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXNpZXJ0IGRlbiBTZXJ2aWNlLlxuICAgKi9cbiAgaW5pdCgpIHtcbiAgICB0aGlzLl9sYXN0RXJyb3JzID0gW107XG4gICAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX2NvbmZpZyA9IHt9O1xuICAgIHRoaXMuc2FmZU5ld0NvbmZpZyh0aGlzLl9kZWZhdWx0Q29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gbHV4RXJyb3JQYWdlQ29uZmlnXG4gICAqL1xuICBzYWZlTmV3Q29uZmlnKGx1eEVycm9yUGFnZUNvbmZpZzogSUx1eEVycm9yUGFnZUNvbmZpZykge1xuICAgIC8vIHdlbm4ga2VpbmUgQ29uZmlnIMO8YmVyZ2ViZW4gd2lyZCwgZWluIGxlZXJlcyBPYmpla3QgZXJ6ZXVnZW5cbiAgICAvLyBkYXMgc29yZ3QgZGFmw7xyLCBkYXNzIHdlbmlnc3RlbnMgZGllIGRlZmF1bHQtV2VydGUgZ2Vub21tZW4gd2VyZGVuXG4gICAgbHV4RXJyb3JQYWdlQ29uZmlnID0gbHV4RXJyb3JQYWdlQ29uZmlnID8gbHV4RXJyb3JQYWdlQ29uZmlnIDoge307XG4gICAgLy8gYWxsZSBXZXJ0ZSBkZXIgw7xiZXJnZWJlbmVuIENvbmZpZyBwcsO8ZmVuIHVuZCBnZ2YuIGRlZmF1bHQtV2VydGUgbnV0emVuXG4gICAgT2JqZWN0LmtleXMobHV4RXJyb3JQYWdlQ29uZmlnKS5mb3JFYWNoKGUgPT4ge1xuICAgICAgaWYgKGx1eEVycm9yUGFnZUNvbmZpZ1tlXSAhPT0gdW5kZWZpbmVkICYmIGx1eEVycm9yUGFnZUNvbmZpZ1tlXSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9jb25maWdbZV0gPSBsdXhFcnJvclBhZ2VDb25maWdbZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jb25maWdbZV0gPSB0aGlzLl9kZWZhdWx0Q29uZmlnW2VdO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=