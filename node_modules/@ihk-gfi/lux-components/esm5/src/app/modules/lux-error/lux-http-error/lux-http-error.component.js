import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';
import { LuxHttpErrorInterceptor } from './lux-http-error-interceptor';
import { LuxBackgroundColorsEnum } from '../../lux-util/lux-colors.enum';
var LuxHttpErrorComponent = /** @class */ (function () {
    function LuxHttpErrorComponent(router) {
        this.subs = [];
        // Beim Ansteuern einer neuen Route, die aktuellen Fehler resetten.
        router.events.forEach(function (event) {
            if (event instanceof NavigationStart) {
                LuxHttpErrorInterceptor.dataStream.next([]);
            }
        });
    }
    LuxHttpErrorComponent.prototype.ngOnInit = function () {
        this.errors = [];
    };
    LuxHttpErrorComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // Wenn neue Fehler-Objekte kommen, diese umformatieren und in der LuxMessageBoxComponent anzeigen.
        this.subs.push(LuxHttpErrorInterceptor.dataStream$().subscribe(function (errors) {
            _this.updateErrors(errors);
        }));
    };
    LuxHttpErrorComponent.prototype.ngOnDestroy = function () {
        // Alle bekannten Subscriptions auflösen.
        this.subs.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    /**
     * Updated das aktuelle Errors-Array mit dem übergebenen Wert.
     * Liest dabei die Message aus dem Fehler und erzeugt LuxMessage-Objekte für die LuxMessageBoxComponent.
     * @param errors
     */
    LuxHttpErrorComponent.prototype.updateErrors = function (errors) {
        var _this = this;
        var errorMessages = [];
        if (errors && errors.length > 0) {
            errors.forEach(function (error) {
                errorMessages.push({
                    text: _this.readErrorMessage(error),
                    color: LuxBackgroundColorsEnum.red,
                    iconName: 'fa-bug'
                });
            });
        }
        setTimeout(function () {
            _this.errors = errorMessages;
        });
    };
    /**
     * Versucht eine Fehlermeldung aus dem Fehler zu lesen.
     * Zuerst wird geschaut, ob der Fehler selbst nur ein String ist ==> Wenn ja, diesen zurückgeben.
     * Dann wird geprüft, ob der Fehler eine "message"-Property besitzt ==> Wenn ja, diese zurückgeben
     * Als letzter Ausweg wird das "error"-Objekt selbst über die toString-Methode zurückgegeben.
     * @param error
     */
    LuxHttpErrorComponent.prototype.readErrorMessage = function (error) {
        if (typeof error === 'string') {
            return error;
        }
        else if (error.hasOwnProperty('message')) {
            return error['message'];
        }
        else {
            return error.toString();
        }
    };
    LuxHttpErrorComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    LuxHttpErrorComponent = tslib_1.__decorate([
        Component({
            selector: 'lux-http-error',
            template: "<lux-message-box [luxMessages]=\"errors\"> </lux-message-box>\n",
            styles: [""]
        }),
        tslib_1.__metadata("design:paramtypes", [Router])
    ], LuxHttpErrorComponent);
    return LuxHttpErrorComponent;
}());
export { LuxHttpErrorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWh0dHAtZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGloay1nZmkvbHV4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvbHV4LWVycm9yL2x1eC1odHRwLWVycm9yL2x1eC1odHRwLWVycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFPekU7SUFLRSwrQkFBWSxNQUFjO1FBSmxCLFNBQUksR0FBbUIsRUFBRSxDQUFDO1FBS2hDLG1FQUFtRTtRQUNuRSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDekIsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO2dCQUNwQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzdDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsd0NBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCwrQ0FBZSxHQUFmO1FBQUEsaUJBT0M7UUFOQyxtR0FBbUc7UUFDbkcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osdUJBQXVCLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBYTtZQUM1RCxLQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsMkNBQVcsR0FBWDtRQUNFLHlDQUF5QztRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDbkIsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyw0Q0FBWSxHQUFwQixVQUFxQixNQUFhO1FBQWxDLGlCQWNDO1FBYkMsSUFBTSxhQUFhLEdBQWtCLEVBQUUsQ0FBQztRQUN4QyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBVTtnQkFDeEIsYUFBYSxDQUFDLElBQUksQ0FBQztvQkFDakIsSUFBSSxFQUFFLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7b0JBQ2xDLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxHQUFHO29CQUNsQyxRQUFRLEVBQUUsUUFBUTtpQkFDbkIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELFVBQVUsQ0FBQztZQUNULEtBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNLLGdEQUFnQixHQUF4QixVQUF5QixLQUFVO1FBQ2pDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7YUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDekI7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7Z0JBakVtQixNQUFNOztJQUxmLHFCQUFxQjtRQUxqQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLDJFQUE0Qzs7U0FFN0MsQ0FBQztpREFNb0IsTUFBTTtPQUxmLHFCQUFxQixDQXVFakM7SUFBRCw0QkFBQztDQUFBLEFBdkVELElBdUVDO1NBdkVZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRpb25TdGFydCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEx1eEh0dHBFcnJvckludGVyY2VwdG9yIH0gZnJvbSAnLi9sdXgtaHR0cC1lcnJvci1pbnRlcmNlcHRvcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElMdXhNZXNzYWdlIH0gZnJvbSAnLi4vLi4vbHV4LWNvbW1vbi9sdXgtbWVzc2FnZS1ib3gvbHV4LW1lc3NhZ2UtYm94LW1vZGVsL2x1eC1tZXNzYWdlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBMdXhCYWNrZ3JvdW5kQ29sb3JzRW51bSB9IGZyb20gJy4uLy4uL2x1eC11dGlsL2x1eC1jb2xvcnMuZW51bSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2x1eC1odHRwLWVycm9yJyxcbiAgdGVtcGxhdGVVcmw6ICdsdXgtaHR0cC1lcnJvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydsdXgtaHR0cC1lcnJvci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEx1eEh0dHBFcnJvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgcHJpdmF0ZSBzdWJzOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGVycm9yczogYW55W107XG5cbiAgY29uc3RydWN0b3Iocm91dGVyOiBSb3V0ZXIpIHtcbiAgICAvLyBCZWltIEFuc3RldWVybiBlaW5lciBuZXVlbiBSb3V0ZSwgZGllIGFrdHVlbGxlbiBGZWhsZXIgcmVzZXR0ZW4uXG4gICAgcm91dGVyLmV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25TdGFydCkge1xuICAgICAgICBMdXhIdHRwRXJyb3JJbnRlcmNlcHRvci5kYXRhU3RyZWFtLm5leHQoW10pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvLyBXZW5uIG5ldWUgRmVobGVyLU9iamVrdGUga29tbWVuLCBkaWVzZSB1bWZvcm1hdGllcmVuIHVuZCBpbiBkZXIgTHV4TWVzc2FnZUJveENvbXBvbmVudCBhbnplaWdlbi5cbiAgICB0aGlzLnN1YnMucHVzaChcbiAgICAgIEx1eEh0dHBFcnJvckludGVyY2VwdG9yLmRhdGFTdHJlYW0kKCkuc3Vic2NyaWJlKChlcnJvcnM6IGFueVtdKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlRXJyb3JzKGVycm9ycyk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAvLyBBbGxlIGJla2FubnRlbiBTdWJzY3JpcHRpb25zIGF1ZmzDtnNlbi5cbiAgICB0aGlzLnN1YnMuZm9yRWFjaChzdWIgPT4ge1xuICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlZCBkYXMgYWt0dWVsbGUgRXJyb3JzLUFycmF5IG1pdCBkZW0gw7xiZXJnZWJlbmVuIFdlcnQuXG4gICAqIExpZXN0IGRhYmVpIGRpZSBNZXNzYWdlIGF1cyBkZW0gRmVobGVyIHVuZCBlcnpldWd0IEx1eE1lc3NhZ2UtT2JqZWt0ZSBmw7xyIGRpZSBMdXhNZXNzYWdlQm94Q29tcG9uZW50LlxuICAgKiBAcGFyYW0gZXJyb3JzXG4gICAqL1xuICBwcml2YXRlIHVwZGF0ZUVycm9ycyhlcnJvcnM6IGFueVtdKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlczogSUx1eE1lc3NhZ2VbXSA9IFtdO1xuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGVycm9ycy5mb3JFYWNoKChlcnJvcjogYW55KSA9PiB7XG4gICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCh7XG4gICAgICAgICAgdGV4dDogdGhpcy5yZWFkRXJyb3JNZXNzYWdlKGVycm9yKSxcbiAgICAgICAgICBjb2xvcjogTHV4QmFja2dyb3VuZENvbG9yc0VudW0ucmVkLFxuICAgICAgICAgIGljb25OYW1lOiAnZmEtYnVnJ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JNZXNzYWdlcztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJzdWNodCBlaW5lIEZlaGxlcm1lbGR1bmcgYXVzIGRlbSBGZWhsZXIgenUgbGVzZW4uXG4gICAqIFp1ZXJzdCB3aXJkIGdlc2NoYXV0LCBvYiBkZXIgRmVobGVyIHNlbGJzdCBudXIgZWluIFN0cmluZyBpc3QgPT0+IFdlbm4gamEsIGRpZXNlbiB6dXLDvGNrZ2ViZW4uXG4gICAqIERhbm4gd2lyZCBnZXByw7xmdCwgb2IgZGVyIEZlaGxlciBlaW5lIFwibWVzc2FnZVwiLVByb3BlcnR5IGJlc2l0enQgPT0+IFdlbm4gamEsIGRpZXNlIHp1csO8Y2tnZWJlblxuICAgKiBBbHMgbGV0enRlciBBdXN3ZWcgd2lyZCBkYXMgXCJlcnJvclwiLU9iamVrdCBzZWxic3Qgw7xiZXIgZGllIHRvU3RyaW5nLU1ldGhvZGUgenVyw7xja2dlZ2ViZW4uXG4gICAqIEBwYXJhbSBlcnJvclxuICAgKi9cbiAgcHJpdmF0ZSByZWFkRXJyb3JNZXNzYWdlKGVycm9yOiBhbnkpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSBlbHNlIGlmIChlcnJvci5oYXNPd25Qcm9wZXJ0eSgnbWVzc2FnZScpKSB7XG4gICAgICByZXR1cm4gZXJyb3JbJ21lc3NhZ2UnXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9XG59XG4iXX0=