import * as tslib_1 from "tslib";
import { SPACE } from '@angular/cdk/keycodes';
import { CommonModule } from '@angular/common';
import { getTestBed, TestBed, tick } from '@angular/core/testing';
import { FlexLayoutModule } from '@angular/flex-layout';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatAutocompleteModule, MatBadgeModule, MatButtonModule, MatCardModule, MatCheckboxModule, MatChipsModule, MatCommonModule, MatDatepickerModule, MatDividerModule, MatExpansionModule, MatFormFieldModule, MatIconModule, MatInputModule, MatNativeDateModule, MatOptionModule, MatPaginatorModule, MatProgressBarModule, MatProgressSpinnerModule, MatRadioModule, MatSelectModule, MatSliderModule, MatSortModule, MatStepperModule, MatTableModule, MatTabsModule, MatTooltipModule } from '@angular/material';
import { BrowserModule, By } from '@angular/platform-browser';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { RouterModule } from '@angular/router';
import { LuxActionModule } from '../../lux-action/lux-action.module';
import { LuxDirectivesModule } from '../../lux-directives/lux-directives.module';
import { LuxFormModule } from '../../lux-form/lux-form.module';
import { LuxIconModule } from '../../lux-icon/lux-icon.module';
import { LuxLayoutModule } from '../../lux-layout/lux-layout.module';
import { LuxPipesModule } from '../../lux-pipes/lux-pipes.module';
import { LuxLookupModule } from '../../lux-lookup/lux-lookup.module';
import { RouterTestingModule } from '@angular/router/testing';
import { LuxComponentsConfigModule } from '../../lux-components-config/lux-components-config.module';
import { LuxErrorModule } from '../../lux-error/lux-error.module';
import { LuxCommonModule } from '../../lux-common/lux-common.module';
import { LuxPopupsModule } from '../../lux-popups/lux-popups.module';
var LuxTestHelper = /** @class */ (function () {
    function LuxTestHelper() {
    }
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     */
    LuxTestHelper.setInputValue = function (input, value, fixture) {
        if (input) {
            input.value = value;
            input.dispatchEvent(LuxTestHelper.createFakeEvent('input'));
            LuxTestHelper.wait(fixture);
        }
        else {
            console.error('UNIT-TEST FEHLER: input ist nicht definiert.');
        }
    };
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     * Wartet asynchrone Aufrufe ab und ruft die ChangeDetection auf
     * @param fixture
     * @param tickDuration
     */
    LuxTestHelper.wait = function (fixture, tickDuration) {
        fixture.detectChanges();
        tick(tickDuration);
        fixture.detectChanges();
    };
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     * Sendet ein Klick-Event ab und wartet dann.
     * @param fixture
     * @param DebugElement
     */
    LuxTestHelper.click = function (fixture, debugElement) {
        debugElement.triggerEventHandler('click', null);
        LuxTestHelper.wait(fixture);
    };
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     * Sendet ein Change-Event ab und wartet dann.
     * @param fixture
     * @param DebugElement
     */
    LuxTestHelper.radioButtonChange = function (fixture, radioButton) {
        radioButton.nativeElement.dispatchEvent(LuxTestHelper.createFakeEvent('change'));
        LuxTestHelper.wait(fixture);
    };
    /**
     * Erstellt eine ComponentFixture fuer die mitgegebene Komponente, optional ist es moeglich
     * weitere Provider und Declarations einzutragen. Diese werden dann im Testmodul eingetragen.
     * @param component
     * @param providers
     * @param declarations
     * @deprecated Stattdessen configureTestModule in Kombination mit configureTestSuite verwenden --> erheblich performanter
     */
    LuxTestHelper.createComponent = function (component, providers, declarations) {
        if (providers === void 0) { providers = []; }
        if (declarations === void 0) { declarations = []; }
        TestBed.configureTestingModule({
            imports: tslib_1.__spread(LuxTestHelper.COMMON_ANGULAR_MODULES, LuxTestHelper.MATERIAL_MODULES, LuxTestHelper.LUX_MODULES),
            declarations: tslib_1.__spread(declarations, [component]),
            providers: tslib_1.__spread(providers)
        });
        TestBed.compileComponents();
        return TestBed.createComponent(component);
    };
    /** Utility to dispatch any event on a Node. */
    LuxTestHelper.dispatchEvent = function (node, event) {
        node.dispatchEvent(event);
        return event;
    };
    /** Shorthand to dispatch a fake event on a specified node. */
    LuxTestHelper.dispatchFakeEvent = function (node, type, canBubble) {
        return LuxTestHelper.dispatchEvent(node, LuxTestHelper.createFakeEvent(type, canBubble));
    };
    /** Shorthand to dispatch a keyboard event with a specified key code. */
    LuxTestHelper.dispatchKeyboardEvent = function (node, type, keyCode, target) {
        return LuxTestHelper.dispatchEvent(node, LuxTestHelper.createKeyboardEvent(type, keyCode, target));
    };
    /** Focuses an input and sets its value. Dispatches an fake input event afterwards. */
    LuxTestHelper.typeInElement = function (element, value, noInputEvent) {
        element.focus();
        element.value = value;
        if (!noInputEvent) {
            LuxTestHelper.dispatchFakeEvent(element, 'input');
        }
    };
    /** Steuerung und triggern von Overlays implementieren **/
    /**
     * Inserts data into an input field, that has to update asynchrounos before calling a callback-function
     * Allows to use RxJs Interval-Timers within the Target-Components.
     */
    LuxTestHelper.typeInElementAsynch = function (text, fixture, element, callback) {
        fixture.whenStable().then(function () {
            LuxTestHelper.typeInElement(element, text);
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                LuxTestHelper.dispatchKeyboardEvent(element, 'keydown', SPACE);
                fixture.detectChanges();
                fixture.whenStable().then(function () {
                    callback();
                });
            });
        });
    };
    /** Dispatches a keydown event from an element. */
    LuxTestHelper.createKeyboardEvent = function (type, keyCode, target, key) {
        var event = document.createEvent('KeyboardEvent');
        // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.
        var initEventFn = (event.initKeyEvent || event.initKeyboardEvent).bind(event);
        var originalPreventDefault = event.preventDefault;
        initEventFn(type, true, true, window, 0, 0, 0, 0, 0, keyCode);
        // Webkit Browsers don't set the keyCode when calling the init function.
        // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735
        Object.defineProperties(event, {
            keyCode: { get: function () { return keyCode; } },
            key: { get: function () { return key; } },
            target: { get: function () { return target; } }
        });
        // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.
        event.preventDefault = function () {
            Object.defineProperty(event, 'defaultPrevented', { get: function () { return true; } });
            return originalPreventDefault.apply(this, arguments);
        };
        return event;
    };
    /** Creates a fake event object with any desired event type. */
    LuxTestHelper.createFakeEvent = function (type, canBubble, cancelable) {
        if (canBubble === void 0) { canBubble = false; }
        if (cancelable === void 0) { cancelable = true; }
        var event;
        if (typeof Event === 'function') {
            event = new Event(type);
        }
        else {
            event = document.createEvent('Event');
            event.initEvent(type, canBubble, cancelable);
        }
        return event;
    };
    /**
     * Selektiert ein Element anhand der Query von dem Fixture
     */
    LuxTestHelper.selectOneFromFixture = function (fixture, query) {
        return fixture.debugElement.query(By.css(query));
    };
    /**
     * Selektiert ein Array von Elementen anhand der Query von dem Fixture
     */
    LuxTestHelper.selectAllFromFixture = function (fixture, query) {
        return fixture.debugElement.queryAll(By.css(query));
    };
    /**
     * Entfernt nicht-ASCII-Chars aus dem String (Beim IE wichtig, dieser fügt gerne versteckte Steuerzeichen
     * in Input-Feldern an die Strings).
     * @param dateString
     */
    LuxTestHelper.stringWithoutASCIIChars = function (dateString) {
        var exp = new RegExp('[^A-Za-z 0-9 \\.,\\?""!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~]*', 'g');
        return dateString.replace(exp, '');
    };
    /**
     *  Deaktiviert den Reset des Testmoduls am Ende eines Testdurchlaufs.
     *  Verbessert die Performance der Karma-Tests erheblich.
     *  Am Ende der Testsuite wird diese Funktion wieder aktiviert.
     *
     *  Funktion dafür einfach am Anfang einer Testsuite (erstes describe) aufrufen und in einem beforeAll das Testmodul
     *  erzeugen. Dieses wird nun nicht mehr nach jedem Test neu erzeugt.
     */
    LuxTestHelper.configureTestSuite = function () {
        var testBedApi = getTestBed();
        var originReset = TestBed.resetTestingModule;
        beforeAll(function () {
            TestBed.resetTestingModule();
            TestBed.resetTestingModule = function () { return TestBed; };
        });
        afterEach(function () {
            testBedApi._activeFixtures.forEach(function (fixture) { return fixture.destroy(); });
            testBedApi._instantiated = false;
        });
        afterAll(function () {
            TestBed.resetTestingModule = originReset;
            TestBed.resetTestingModule();
        });
    };
    /**
     * Konfiguriert das TestModul für eine Testsuite, kann dabei Provider und Komponenten (Deklarationen) entgegennehmen.
     * @param providers
     * @param declarations
     * @param imports
     */
    LuxTestHelper.configureTestModule = function (providers, declarations, imports) {
        if (providers === void 0) { providers = []; }
        if (declarations === void 0) { declarations = []; }
        if (imports === void 0) { imports = []; }
        TestBed.configureTestingModule({
            imports: tslib_1.__spread(LuxTestHelper.COMMON_ANGULAR_MODULES, LuxTestHelper.MATERIAL_MODULES, LuxTestHelper.LUX_MODULES, imports),
            declarations: tslib_1.__spread(declarations),
            providers: tslib_1.__spread(providers)
        });
        TestBed.compileComponents();
    };
    /**
     * Erstellt ein leeres File-Objekt mit Namen und Typ via Blob-Constructor (um Edge/IE-Fehler zu vermeiden).
     * @param name
     * @param type
     */
    LuxTestHelper.createFileBrowserSafe = function (name, type) {
        var file = new Blob([''], { type: type });
        file['name'] = name;
        return file;
    };
    LuxTestHelper.COMMON_ANGULAR_MODULES = [
        NoopAnimationsModule,
        CommonModule,
        RouterModule,
        FormsModule,
        ReactiveFormsModule,
        FlexLayoutModule,
        BrowserModule,
        RouterTestingModule
    ];
    LuxTestHelper.MATERIAL_MODULES = [
        MatButtonModule,
        MatCardModule,
        MatIconModule,
        MatFormFieldModule,
        MatTabsModule,
        MatTooltipModule,
        MatChipsModule,
        MatProgressSpinnerModule,
        MatProgressBarModule,
        MatExpansionModule,
        MatStepperModule,
        MatTableModule,
        MatPaginatorModule,
        MatSortModule,
        MatDividerModule,
        MatSelectModule,
        MatInputModule,
        MatCheckboxModule,
        MatRadioModule,
        MatDatepickerModule,
        MatNativeDateModule,
        MatAutocompleteModule,
        MatSliderModule,
        MatOptionModule,
        MatCommonModule,
        MatBadgeModule
    ];
    LuxTestHelper.LUX_MODULES = [
        LuxFormModule,
        LuxLayoutModule,
        LuxActionModule,
        LuxDirectivesModule,
        LuxPipesModule,
        LuxIconModule,
        LuxLookupModule,
        LuxErrorModule,
        LuxCommonModule,
        LuxPopupsModule,
        LuxComponentsConfigModule.forRoot({
            generateLuxTagIds: false,
            displayLuxConsoleLogs: true,
            labelConfiguration: {
                allUppercase: true,
                notAppliedTo: []
            },
            cardExpansionAnimationActive: true
        })
    ];
    return LuxTestHelper;
}());
export { LuxTestHelper };
//# sourceMappingURL=data:application/json;base64,