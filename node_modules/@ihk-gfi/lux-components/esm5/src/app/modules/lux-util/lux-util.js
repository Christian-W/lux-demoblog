import * as tslib_1 from "tslib";
import { FormGroup } from '@angular/forms';
import { LuxBackgroundColorsEnum, LuxFontColorsEnum } from './lux-colors.enum';
var LuxUtil = /** @class */ (function () {
    function LuxUtil() {
    }
    /**
     * Prueft ob ein String leer ist.
     * @param str
     * @returns boolean
     */
    LuxUtil.isEmpty = function (str) {
        return !str || 0 === str.length;
    };
    /**
     * Liest aus einem Objekt ein bestimmtes Feld aus.
     * Laesst sich auch ueber mehrere Unterobjekte verschachteln.
     * Beispiele fuer propertyNamePath:
     * "value"
     * "unterobjekt1.unterobjekt2.value"
     *
     * @param el
     * @param propertyNamePath
     * @returns any
     */
    LuxUtil.readPropertyValueFromObject = function (el, propertyNamePath) {
        var e_1, _a;
        var result = null;
        if (el && propertyNamePath) {
            var splitProperties = propertyNamePath.split('.');
            if (splitProperties.length > 0) {
                var tempObject = el;
                try {
                    for (var splitProperties_1 = tslib_1.__values(splitProperties), splitProperties_1_1 = splitProperties_1.next(); !splitProperties_1_1.done; splitProperties_1_1 = splitProperties_1.next()) {
                        var property = splitProperties_1_1.value;
                        tempObject = tempObject[property];
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (splitProperties_1_1 && !splitProperties_1_1.done && (_a = splitProperties_1.return)) _a.call(splitProperties_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                result = tempObject;
            }
            else {
                result = el[propertyNamePath];
            }
        }
        return result;
    };
    /**
     * Gibt eine von verschiedenen vordefinierten Fehlernachrichten passend zu den
     * vorhandenen Fehlern der uebergebenen FormControl zurueck.
     * @param formControl
     * @returns string
     */
    LuxUtil.getErrorMessage = function (formControl) {
        if (formControl) {
            if (formControl.hasError('required')) {
                return 'Dieses Feld darf nicht leer sein';
            }
            if (formControl.hasError('minlength')) {
                return 'Die Mindestlänge ist ' + formControl.getError('minlength').requiredLength;
            }
            if (formControl.hasError('maxlength')) {
                return 'Die Maximallänge ist ' + formControl.getError('maxlength').requiredLength;
            }
            if (formControl.hasError('email')) {
                return 'Dies ist keine gültige E-Mailadresse';
            }
            if (formControl.hasError('min')) {
                return 'Der Minimalwert ist ' + formControl.getError('min').min;
            }
            if (formControl.hasError('max')) {
                return 'Der Maximalwert ist ' + formControl.getError('max').max;
            }
            if (formControl.hasError('pattern')) {
                var pattern = formControl.getError('pattern').requiredPattern;
                return 'Entspricht nicht dem Muster "' + pattern.substring(1, pattern.length - 1) + '"';
            }
        }
        return '';
    };
    /**
     * Prueft ob der uebergebene Wert ein JS-Datum ist.
     * @param value
     * @returns boolean
     */
    LuxUtil.isDate = function (value) {
        return value instanceof Date && !isNaN(value.valueOf());
    };
    /**
     * Zeigt die Validierungsfehler der einzelnen FormControls innerhalb der FormGroup an.
     * Wenn innerhalb der übergebenen FormGroup weitere Formgroups enthalten sind, werden
     * diese ebenfalls validiert.
     * @param formGroup
     */
    LuxUtil.showValidationErrors = function (formGroup) {
        var _this = this;
        Object.keys(formGroup.controls).forEach(function (field) {
            var control = formGroup.get(field);
            if (control instanceof FormGroup) {
                _this.showValidationErrors(control);
            }
            else {
                control.markAsTouched({ onlySelf: true });
            }
        });
    };
    /**
     * Diese Methode scrollt zu der übergebenen Id.
     *
     * @param id Eine Elementid (z.B. <tag id="myId">...)
     */
    LuxUtil.goTo = function (id) {
        var element = document.querySelector('#' + id);
        if (element) {
            setTimeout(function () {
                element.scrollIntoView();
            });
        }
    };
    /**
     * Prueft ob die Applikation im IE geoeffnet ist.
     * @returns boolean
     */
    LuxUtil.isIE = function () {
        var msie = window.document['documentMode'];
        return msie && msie <= 11;
    };
    /**
     * Prueft ob die Applikation im Edge geoeffnet ist.
     * @returns boolean
     */
    LuxUtil.isEdge = function () {
        return window.navigator.userAgent.indexOf('Edge') > -1;
    };
    /**
     * Prueft ob die Applikation im IE oder Edge geoffnet ist.
     * @returns boolean
     */
    LuxUtil.isIEorEdge = function () {
        return LuxUtil.isIE() || LuxUtil.isEdge();
    };
    /**
     * Diese Methode verhindert, dass ein Event weiterverarbeitet wird.
     *
     * @param event Ein beliebiges Event.
     */
    LuxUtil.stopEventPropagation = function (event) {
        if (event) {
            if (event.stopPropagation) {
                event.stopPropagation();
            }
            else {
                console.log('Die Funktion "event.stopPropagation()" wird nicht unterstützt.');
            }
        }
    };
    LuxUtil.getColorsByBgColorsEnum = function (color) {
        var result = { backgroundCSSClass: 'lux-bg-color-blue', fontCSSClass: 'lux-font-color-white' };
        if (LuxBackgroundColorsEnum[color]) {
            result.backgroundCSSClass = 'lux-bg-color-' + color;
            switch (color) {
                case LuxBackgroundColorsEnum.gray:
                case LuxBackgroundColorsEnum.orange:
                case LuxBackgroundColorsEnum.yellow:
                    result.fontCSSClass = 'lux-font-color-' + LuxFontColorsEnum.black;
                    break;
                default:
                    result.fontCSSClass = 'lux-font-color-' + LuxFontColorsEnum.white;
                    break;
            }
        }
        return result;
    };
    LuxUtil.isNumber = function (toCheck) {
        return !Number.isNaN(+toCheck);
    };
    LuxUtil.base64ToArrayBuffer = function (data) {
        var binaryString = window.atob(data);
        var bytes = new Uint8Array(binaryString.length);
        for (var i = 0; i < binaryString.length; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }
        return bytes;
    };
    LuxUtil.ISO_8601_FULL = new RegExp('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', 'i');
    return LuxUtil;
}());
export { LuxUtil };
//# sourceMappingURL=data:application/json;base64,