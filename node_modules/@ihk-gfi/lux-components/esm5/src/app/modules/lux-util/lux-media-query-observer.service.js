import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { LuxConsoleService } from './lux-console.service';
import { BehaviorSubject } from 'rxjs';
import { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';
var LuxMediaQueryObserverService = /** @class */ (function () {
    function LuxMediaQueryObserverService(breakpointObserver, logger) {
        this.breakpointObserver = breakpointObserver;
        this.logger = logger;
        this._mediaQueryChanged = new BehaviorSubject('');
        this._subscriptions = [];
        this.addQuerySubscription(Breakpoints.XSmall, 'xs');
        this.addQuerySubscription(Breakpoints.Small, 'sm');
        this.addQuerySubscription(Breakpoints.Medium, 'md');
        this.addQuerySubscription(Breakpoints.Large, 'lg');
        this.addQuerySubscription(Breakpoints.XLarge, 'xl');
    }
    Object.defineProperty(LuxMediaQueryObserverService.prototype, "activeMediaQuery", {
        get: function () {
            return this._mediaQueryChanged.getValue();
        },
        enumerable: true,
        configurable: true
    });
    LuxMediaQueryObserverService.prototype.ngOnDestroy = function () {
        this._subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this._mediaQueryChanged.complete();
    };
    LuxMediaQueryObserverService.prototype.getMediaQueryChangedAsObservable = function () {
        return this._mediaQueryChanged.asObservable();
    };
    LuxMediaQueryObserverService.prototype.isXS = function () {
        return this.activeMediaQuery === 'xs';
    };
    LuxMediaQueryObserverService.prototype.isSM = function () {
        return this.activeMediaQuery === 'sm';
    };
    LuxMediaQueryObserverService.prototype.isMD = function () {
        return this.activeMediaQuery === 'md';
    };
    LuxMediaQueryObserverService.prototype.isLG = function () {
        return this.activeMediaQuery === 'lg';
    };
    LuxMediaQueryObserverService.prototype.isXL = function () {
        return this.activeMediaQuery === 'xl';
    };
    LuxMediaQueryObserverService.prototype.addQuerySubscription = function (breakpoint, breakpointString) {
        var _this = this;
        this._subscriptions.push(this.breakpointObserver.observe([breakpoint]).subscribe(function (state) {
            if (state.matches) {
                _this._mediaQueryChanged.next(breakpointString);
                _this.logger.log("MediaQuery [" + _this.activeMediaQuery + "] activated.");
            }
        }));
    };
    LuxMediaQueryObserverService.ctorParameters = function () { return [
        { type: BreakpointObserver },
        { type: LuxConsoleService }
    ]; };
    LuxMediaQueryObserverService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [BreakpointObserver, LuxConsoleService])
    ], LuxMediaQueryObserverService);
    return LuxMediaQueryObserverService;
}());
export { LuxMediaQueryObserverService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LW1lZGlhLXF1ZXJ5LW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtdXRpbC9sdXgtbWVkaWEtcXVlcnktb2JzZXJ2ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZUFBZSxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3ZGO0lBSUUsc0NBQW9CLGtCQUFzQyxFQUFVLE1BQXlCO1FBQXpFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUhyRix1QkFBa0IsR0FBNEIsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7UUFDOUUsbUJBQWMsR0FBbUIsRUFBRSxDQUFDO1FBRzFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxzQkFBVywwREFBZ0I7YUFBM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTtJQUVELGtEQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQTBCLElBQUssT0FBQSxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQTFCLENBQTBCLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVNLHVFQUFnQyxHQUF2QztRQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFTSwyQ0FBSSxHQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFTSwyQ0FBSSxHQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFTSwyQ0FBSSxHQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFTSwyQ0FBSSxHQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFTSwyQ0FBSSxHQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFFTywyREFBb0IsR0FBNUIsVUFBNkIsVUFBZSxFQUFFLGdCQUF3QjtRQUF0RSxpQkFTQztRQVJDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUN0QixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxLQUFzQjtZQUM3RSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDL0MsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWUsS0FBSSxDQUFDLGdCQUFnQixpQkFBYyxDQUFDLENBQUM7YUFDckU7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Z0JBbER1QyxrQkFBa0I7Z0JBQWtCLGlCQUFpQjs7SUFKbEYsNEJBQTRCO1FBRHhDLFVBQVUsRUFBRTtpREFLNkIsa0JBQWtCLEVBQWtCLGlCQUFpQjtPQUpsRiw0QkFBNEIsQ0F1RHhDO0lBQUQsbUNBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXZEWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEx1eENvbnNvbGVTZXJ2aWNlIH0gZnJvbSAnLi9sdXgtY29uc29sZS5zZXJ2aWNlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCcmVha3BvaW50T2JzZXJ2ZXIsIEJyZWFrcG9pbnRzLCBCcmVha3BvaW50U3RhdGUgfSBmcm9tICdAYW5ndWxhci9jZGsvbGF5b3V0JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1eE1lZGlhUXVlcnlPYnNlcnZlclNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9tZWRpYVF1ZXJ5Q2hhbmdlZDogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJycpO1xuICBwcml2YXRlIF9zdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJlYWtwb2ludE9ic2VydmVyOiBCcmVha3BvaW50T2JzZXJ2ZXIsIHByaXZhdGUgbG9nZ2VyOiBMdXhDb25zb2xlU2VydmljZSkge1xuICAgIHRoaXMuYWRkUXVlcnlTdWJzY3JpcHRpb24oQnJlYWtwb2ludHMuWFNtYWxsLCAneHMnKTtcbiAgICB0aGlzLmFkZFF1ZXJ5U3Vic2NyaXB0aW9uKEJyZWFrcG9pbnRzLlNtYWxsLCAnc20nKTtcbiAgICB0aGlzLmFkZFF1ZXJ5U3Vic2NyaXB0aW9uKEJyZWFrcG9pbnRzLk1lZGl1bSwgJ21kJyk7XG4gICAgdGhpcy5hZGRRdWVyeVN1YnNjcmlwdGlvbihCcmVha3BvaW50cy5MYXJnZSwgJ2xnJyk7XG4gICAgdGhpcy5hZGRRdWVyeVN1YnNjcmlwdGlvbihCcmVha3BvaW50cy5YTGFyZ2UsICd4bCcpO1xuICB9XG5cbiAgcHVibGljIGdldCBhY3RpdmVNZWRpYVF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLl9tZWRpYVF1ZXJ5Q2hhbmdlZC5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbikgPT4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCkpO1xuICAgIHRoaXMuX21lZGlhUXVlcnlDaGFuZ2VkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWVkaWFRdWVyeUNoYW5nZWRBc09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fbWVkaWFRdWVyeUNoYW5nZWQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgaXNYUygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVNZWRpYVF1ZXJ5ID09PSAneHMnO1xuICB9XG5cbiAgcHVibGljIGlzU00oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlTWVkaWFRdWVyeSA9PT0gJ3NtJztcbiAgfVxuXG4gIHB1YmxpYyBpc01EKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU1lZGlhUXVlcnkgPT09ICdtZCc7XG4gIH1cblxuICBwdWJsaWMgaXNMRygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVNZWRpYVF1ZXJ5ID09PSAnbGcnO1xuICB9XG5cbiAgcHVibGljIGlzWEwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlTWVkaWFRdWVyeSA9PT0gJ3hsJztcbiAgfVxuXG4gIHByaXZhdGUgYWRkUXVlcnlTdWJzY3JpcHRpb24oYnJlYWtwb2ludDogYW55LCBicmVha3BvaW50U3RyaW5nOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLmJyZWFrcG9pbnRPYnNlcnZlci5vYnNlcnZlKFticmVha3BvaW50XSkuc3Vic2NyaWJlKChzdGF0ZTogQnJlYWtwb2ludFN0YXRlKSA9PiB7XG4gICAgICAgIGlmIChzdGF0ZS5tYXRjaGVzKSB7XG4gICAgICAgICAgdGhpcy5fbWVkaWFRdWVyeUNoYW5nZWQubmV4dChicmVha3BvaW50U3RyaW5nKTtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coYE1lZGlhUXVlcnkgWyR7dGhpcy5hY3RpdmVNZWRpYVF1ZXJ5fV0gYWN0aXZhdGVkLmApO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==