import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { environment } from '../../../environments/environment';
import { LuxComponentsConfigService } from '../lux-components-config/lux-components-config.service';
import * as i0 from "@angular/core";
import * as i1 from "../lux-components-config/lux-components-config.service";
export var noop = function () { return undefined; };
var LuxConsoleService = /** @class */ (function () {
    function LuxConsoleService(componentsConfigService) {
        // Aus der Konfiguration die Info erhalten, ob Logs angezeigt werden sollen
        componentsConfigService.config.subscribe(function (newConfig) {
            LuxConsoleService_1.config = newConfig;
        });
    }
    LuxConsoleService_1 = LuxConsoleService;
    Object.defineProperty(LuxConsoleService.prototype, "log", {
        /* Nicht-statische Log-Methoden, sie zeigen auch die Quelle des Logs an! */
        get: function () {
            if (LuxConsoleService_1.isDebugMode()) {
                return console.log.bind.call(console.log, console, LuxConsoleService_1.logDate() + ' -');
            }
            else {
                return noop;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxConsoleService.prototype, "warn", {
        get: function () {
            if (LuxConsoleService_1.isDebugMode()) {
                return console.warn.bind.call(console.warn, console, LuxConsoleService_1.logDate() + ' -');
            }
            else {
                return noop;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxConsoleService.prototype, "error", {
        get: function () {
            if (LuxConsoleService_1.isDebugMode()) {
                return console.error.bind.call(console.error, console, LuxConsoleService_1.logDate() + ' -');
            }
            else {
                return noop;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxConsoleService.prototype, "group", {
        get: function () {
            if (LuxConsoleService_1.isDebugMode()) {
                return console.group.bind.call(console.group, console);
            }
            else {
                return noop;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxConsoleService.prototype, "info", {
        get: function () {
            if (LuxConsoleService_1.isDebugMode()) {
                return console.info.bind.call(console.info, console);
            }
            else {
                return noop;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxConsoleService.prototype, "groupEnd", {
        get: function () {
            if (LuxConsoleService_1.isDebugMode()) {
                return console.groupEnd.bind.call(console.groupEnd, console);
            }
            else {
                return noop;
            }
        },
        enumerable: true,
        configurable: true
    });
    /* Statische Log-Methoden, sie zeigen nicht die Quelle des Logs an! */
    LuxConsoleService.LOG = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!LuxConsoleService_1.isDebugMode()) {
            return;
        }
        if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
            console.log(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else if (args.length === 1) {
            console.log(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else {
            console.log(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
        }
    };
    LuxConsoleService.WARN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!LuxConsoleService_1.isDebugMode()) {
            return;
        }
        if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
            console.warn(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else if (args.length === 1) {
            console.warn(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else {
            console.warn(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
        }
    };
    LuxConsoleService.ERROR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!LuxConsoleService_1.isDebugMode()) {
            return;
        }
        if (args.length === 1 && args[0] !== null && typeof args[0] === 'object') {
            console.error(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else if (args.length === 1) {
            console.error(LuxConsoleService_1.logDate() + ' -', args[0]);
        }
        else {
            console.error(LuxConsoleService_1.logDate() + ' - ' + this.getLogValue(args));
        }
    };
    LuxConsoleService.logDate = function () {
        var now = new Date();
        var day = LuxConsoleService_1.checkTime(now.getDate());
        var month = LuxConsoleService_1.checkTime(now.getMonth() + 1);
        var year = LuxConsoleService_1.checkTime(now.getFullYear());
        var hours = LuxConsoleService_1.checkTime(now.getHours());
        var minutes = LuxConsoleService_1.checkTime(now.getMinutes());
        var seconds = LuxConsoleService_1.checkTime(now.getSeconds());
        return day + '.' + month + '.' + year + ' ' + hours + ':' + minutes + ':' + seconds;
    };
    LuxConsoleService.getLogValue = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var logValue = [];
        args.forEach(function (arg) {
            if (arg !== null && typeof arg === 'object') {
                arg = JSON.stringify(arg);
            }
            logValue.push(arg);
        });
        return logValue;
    };
    LuxConsoleService.isDebugMode = function () {
        return LuxConsoleService_1.config ? LuxConsoleService_1.config.displayLuxConsoleLogs : environment.production;
    };
    LuxConsoleService.checkTime = function (timeUnit) {
        return timeUnit < 10 ? '0' + timeUnit : timeUnit;
    };
    var LuxConsoleService_1;
    LuxConsoleService.config = {};
    LuxConsoleService.ctorParameters = function () { return [
        { type: LuxComponentsConfigService }
    ]; };
    LuxConsoleService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LuxConsoleService_Factory() { return new LuxConsoleService(i0.ɵɵinject(i1.LuxComponentsConfigService)); }, token: LuxConsoleService, providedIn: "root" });
    LuxConsoleService = LuxConsoleService_1 = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [LuxComponentsConfigService])
    ], LuxConsoleService);
    return LuxConsoleService;
}());
export { LuxConsoleService };
//# sourceMappingURL=data:application/json;base64,