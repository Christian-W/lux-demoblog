import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/**
 * Der LuxStorageService speichert Daten im lokalen Browserstorage.
 * Wenn man beim Speichern (Methode -> setItem) angibt, dass es sich um sensible Daten handelt,
 * können diese einfach über die Methode 'clearSensitiveItems' gelöscht werden.
 */
var LuxStorageService = /** @class */ (function () {
    function LuxStorageService() {
        var _this = this;
        this.postfixSensitive = '.sensitive';
        this.itemSources = new Map();
        addEventListener('storage', function (event) {
            if (event.key) {
                if (_this.itemSources.has(event.key)) {
                    _this.itemSources.get(event.key).next(event.newValue);
                }
            }
        });
    }
    /**
     * Diese Methode liefert den Wert für den übergebenen Schlüssel zurück.
     *
     * @param key - Der eindeutige Schlüssel.
     * @returns Liefert den Wert für den übergebenen Schlüssel zurück.
     */
    LuxStorageService.prototype.getItem = function (key) {
        if (!this.itemSources.has(key)) {
            this.itemSources.set(key, new BehaviorSubject(localStorage.getItem(key)));
        }
        return this.itemSources.get(key).getValue();
    };
    /**
     * Diese Methode liefert ein Observable zurück, das über alle Änderungen an dem Schlüssel informiert wird.
     *
     * @param key - Der eindeutige Schlüssel.
     * @returns Liefert ein Observable zurück, das über alle Änderungen an dem Schlüssel informiert wird.
     */
    LuxStorageService.prototype.getItemAsObservable = function (key) {
        if (!this.itemSources.has(key)) {
            this.itemSources.set(key, new BehaviorSubject(localStorage.getItem(key)));
        }
        return this.itemSources.get(key).asObservable();
    };
    /**
     * Diese Methode setzt den übergebenen Wert für den Schlüssel. Zusätzlich muss angegeben werden, ob es sich um
     * sensible oder personenbezogene Daten handelt.
     *
     * @param key - Der eindeutige Schlüssel.
     * @param value - Der neue Wert.
     * @param sensitive - Gibt an, ob es sich um sensible oder personenbezogene Daten handelt. Diese können leicht über
     *                    die Methode 'clearSensitiveItems' (z.B. beim Ausloggen) gelöscht werden.
     */
    LuxStorageService.prototype.setItem = function (key, value, sensitive) {
        try {
            localStorage.setItem(key, value);
            if (sensitive) {
                localStorage.setItem(key + this.postfixSensitive, 'true');
            }
            if (this.itemSources.has(key)) {
                this.itemSources.get(key).next(localStorage.getItem(key));
            }
        }
        catch (error) {
            this.itemSources.get(key).error(error);
        }
    };
    /**
     * Diese Methode entfernt den übergebenen Schlüssel.
     *
     * @param key - Der eindeutige Schlüssel.
     */
    LuxStorageService.prototype.removeItem = function (key) {
        localStorage.removeItem(key);
        localStorage.removeItem(key + this.postfixSensitive);
        if (this.itemSources.has(key)) {
            this.itemSources.get(key).next(localStorage.getItem(key));
        }
    };
    /**
     * Diese Methode löscht alle sensiblen und personenbezogenen Einträge (d.h. alle Items bei denen das Flag 'sensitive'
     * auf true gesetzt wurde).
     */
    LuxStorageService.prototype.clearSensitiveItems = function () {
        var _this = this;
        // Alle Schlüssel sammeln.
        var keys = [];
        for (var i = 0; i < localStorage.length; i++) {
            keys.push(localStorage.key(i));
        }
        // Alle sensiblen Einträge löschen.
        keys.forEach(function (key) {
            if (key && key.endsWith(_this.postfixSensitive)) {
                _this.removeItem(key.replace(_this.postfixSensitive, ''));
            }
        });
    };
    /**
     * Diese Methode löscht alle Einträge aus dem Storage.
     */
    LuxStorageService.prototype.clearAll = function () {
        localStorage.clear();
        this.itemSources.forEach(function (itemSource) {
            itemSource.next(null);
            itemSource.complete();
        });
        this.itemSources.clear();
    };
    LuxStorageService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], LuxStorageService);
    return LuxStorageService;
}());
export { LuxStorageService };
//# sourceMappingURL=data:application/json;base64,