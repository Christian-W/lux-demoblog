import * as tslib_1 from "tslib";
import { ContentChild, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { LuxUtil } from '../../lux-util/lux-util';
import { distinctUntilChanged } from 'rxjs/operators';
import { LuxFormLabelComponent } from '../lux-form-control/lux-form-control-subcomponents/lux-form-label.component';
import { LuxFormHintComponent } from '../lux-form-control/lux-form-control-subcomponents/lux-form-hint.component';
var luxFormControlUID = 0;
var LuxFormComponentBase = /** @class */ (function () {
    function LuxFormComponentBase(controlContainer, cdr, logger, configService) {
        this.cdr = cdr;
        this.logger = logger;
        this.configService = configService;
        this.hasHadRequiredValidator = false;
        this.latestErrors = null;
        this.preventUnwantedValueChange = false;
        this.displayBindingDebugHint = false;
        this.errorMessage = undefined;
        this.uid = 'lux-form-control-' + luxFormControlUID++;
        this.cssReadonly = this._luxReadonly;
        this.luxFocusIn = new EventEmitter();
        this.luxFocusOut = new EventEmitter();
        this.luxDisabledChange = new EventEmitter();
        this.luxErrorCallback = function (value, errors) { return undefined; };
        this.controlContainer = controlContainer;
        // Wir fragen hier direkt ab, ob die Binding-Warnung ausgegeben werden sollen
        this.displayBindingDebugHint = this.configService.currentConfig.displayBindingDebugHint;
    }
    Object.defineProperty(LuxFormComponentBase.prototype, "luxDisabled", {
        get: function () {
            return this._luxDisabled;
        },
        set: function (disabled) {
            this._luxDisabled = disabled;
            this.cdr.detectChanges();
            if (this.formControl) {
                this.handleFormDisabledState();
            }
            this.luxDisabledChange.emit(this._luxDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormComponentBase.prototype, "luxReadonly", {
        get: function () {
            return this._luxReadonly;
        },
        set: function (readonly) {
            this._luxReadonly = readonly;
            this.cssReadonly = readonly;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormComponentBase.prototype, "luxRequired", {
        get: function () {
            return this._luxRequired;
        },
        set: function (required) {
            if (this.isInForm()) {
                this.logger.error("Achtung: Bei Komponenten innerhalb von ReactiveForms den Required-Validator anstelle der " +
                    "Property \"luxRequired\" nutzen.\n" +
                    ("Betroffene Komponente: " + (this.luxControlBinding ? this.luxControlBinding : 'Kein Binding gefunden')));
            }
            else {
                this._luxRequired = required;
                this.updateValidators(this.luxControlValidators);
                // flag um ungewollte Wertänderungen von undefined zu null zu unterbinden
                this.preventUnwantedValueChange = true;
                this.cdr.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    LuxFormComponentBase.prototype.ngOnInit = function () {
        this.initFormControl();
        this.initDisabledState();
        this.initFormValueSubscription();
        this.initFormStateSubscription();
        this.updateValidators(this.luxControlValidators);
        this.triggerOutputPatternCheck();
    };
    LuxFormComponentBase.prototype.ngOnChanges = function (simpleChanges) {
        if (simpleChanges.luxControlValidators && this.formControl) {
            this.updateValidators(this.luxControlValidators);
        }
        this.triggerInputPatternCheck(simpleChanges);
    };
    LuxFormComponentBase.prototype.ngDoCheck = function () {
        // Prüfen, ob es neue Fehlermeldungen gibt, wenn ja diese laden und speichern.
        if (this.latestErrors !== this.formControl.errors && this.formControl.touched) {
            this.latestErrors = this.formControl.errors;
            this.errorMessage = this.fetchErrorMessage();
        }
        // Prüfen, ob für das Reactive-Form-Control ein required-Validator ergänzt worden ist
        if (this.isInForm()) {
            var hasRequiredValidator = this.hasRequiredValidator(this.formControl);
            if (this.hasHadRequiredValidator !== hasRequiredValidator) {
                this._luxRequired = hasRequiredValidator;
                this.formControl.updateValueAndValidity();
                this.cdr.detectChanges();
            }
            this.hasHadRequiredValidator = hasRequiredValidator;
        }
    };
    LuxFormComponentBase.prototype.ngOnDestroy = function () {
        if (this._formValueChangeSubscr) {
            this._formValueChangeSubscr.unsubscribe();
        }
        if (this._formStatusChangeSubscr) {
            this._formStatusChangeSubscr.unsubscribe();
        }
        if (this._configSubscription) {
            this._configSubscription.unsubscribe();
        }
    };
    LuxFormComponentBase.prototype.isInForm = function () {
        return this.controlContainer != null && !LuxUtil.isEmpty(this.luxControlBinding);
    };
    /**
     * Versucht eine Fehlermeldung für diese Komponente auszulesen und gibt diese zurück.
     * Wenn das Element nicht den "touched"-Zustand besitzt, wird keine Fehlermeldung zurückgegeben.
     */
    LuxFormComponentBase.prototype.fetchErrorMessage = function () {
        // Control undefined/null oder unberührt? => Keinen Fehler ausgeben
        if (!this.formControl || !this.formControl.touched) {
            return undefined;
        }
        var _a = this.formControl, value = _a.value, errors = _a.errors;
        // Gibt der Callback bereits einen User-definierten Fehler wieder? => diesen zurückgeben
        var errorMsg = this.luxErrorMessage
            ? this.luxErrorMessage
            : this.luxErrorCallback
                ? this.luxErrorCallback(value, errors || {})
                : undefined;
        if (errors && errorMsg) {
            return errorMsg;
        }
        // Evtl. falls vorhanden Fehlerbehandlung der ableitenden Komponente aufrufen
        errorMsg = this.errorMessageModifier(value, errors || {});
        if (errorMsg) {
            return errorMsg;
        }
        // Last-but-not-least => versuchen einen Standardfehler auszulesen
        errorMsg = LuxUtil.getErrorMessage(this.formControl);
        return errorMsg;
    };
    /**
     * Mappt den Input-Wert aus disabled auf das FormControl.
     */
    LuxFormComponentBase.prototype.handleFormDisabledState = function () {
        if (this.luxDisabled && !this.formControl.disabled) {
            this.formControl.disable();
        }
        if (!this.luxDisabled && this.formControl.disabled) {
            this.formControl.enable();
        }
    };
    /**
     * Method-Stub der von ableitenden Klassen genutzt werden kann, um
     * weitergreifende Fehlermeldungen anzugeben.
     */
    LuxFormComponentBase.prototype.errorMessageModifier = function (value, errors) { };
    /**
     * Standard-Getter Funktion für den aktuellen Wert in dieser FormComponent.
     */
    LuxFormComponentBase.prototype.getValue = function () {
        return this.formControl ? this.formControl.value : this._initialValue;
    };
    /**
     * Standard-Setter Funktion für den aktuellen Wert in dieser FormComponent.
     */
    LuxFormComponentBase.prototype.setValue = function (value) {
        // Wenn noch kein FormControl vorhanden, den init-Wert merken und Fn beenden
        if (!this.formControl) {
            this._initialValue = value;
            return;
        }
        // Wenn der Wert bereits in dem FormControl bekannt ist, die Fn beenden
        if (value === this.formControl.value) {
            return;
        }
        // Den Wert im FormControl merken
        this.formControl.setValue(value);
    };
    /**
     * Wird nach der Aktualisierung des Wertes aufgerufen.
     * Hier kann z.B. valueChange.emit() ausgeführt werden.
     * @param formValue
     */
    LuxFormComponentBase.prototype.notifyFormValueChanged = function (formValue) { };
    /**
     * Wird nach der Aktualisierung des Status aufgerufen.
     * @param formStatus
     */
    LuxFormComponentBase.prototype.notifyFormStatusChanged = function (formStatus) { };
    /**
     * Prueft ob das uebergebene Control einen required-Validator besitzt.
     * @param abstractControl
     */
    LuxFormComponentBase.prototype.hasRequiredValidator = function (abstractControl) {
        if (abstractControl.validator) {
            var validator = abstractControl.validator({});
            if (validator && (validator.required || validator.requiredTrue)) {
                return true;
            }
        }
        return false;
    };
    /**
     * Initialisiert die FormGroup und das FormControl abhängig davon, ob es sich um eine ReactiveForm-Component
     * handelt.
     */
    LuxFormComponentBase.prototype.initFormControl = function () {
        if (this.isInForm()) {
            this.formGroup = this.controlContainer.control;
            this.formControl = this.formGroup.controls[this.luxControlBinding];
        }
        else {
            this.formGroup = new FormGroup({
                control: new FormControl()
            });
            this.formControl = this.formGroup.get(LuxFormComponentBase.DEFAULT_CTRL_NAME);
        }
    };
    /**
     * Initialisiert den Disabled-Zustand nach Erstellung dieser Component.
     */
    LuxFormComponentBase.prototype.initDisabledState = function () {
        if (this._luxDisabled) {
            this.handleFormDisabledState();
        }
        else if (this.luxDisabled === undefined) {
            this.luxDisabled = this.formControl.disabled;
        }
    };
    /**
     * Initialisiert das Handling von Wertaktualisierungen.
     * Setzt den (optional vorhanden) Initial-Wert und folgende Änderungen über das FormControl.
     */
    LuxFormComponentBase.prototype.initFormValueSubscription = function () {
        var _this = this;
        if (this._initialValue !== null && this._initialValue !== undefined) {
            this.setValue(this._initialValue);
        }
        // Aktualisierungen an dem FormControl-Value sollen auch via EventEmitter bekannt gemacht werden
        this._formValueChangeSubscr = this.formControl.valueChanges.pipe(distinctUntilChanged()).subscribe(function (value) {
            if (_this.preventUnwantedValueChange && value === null) {
                _this.preventUnwantedValueChange = false;
                return;
            }
            _this.notifyFormValueChanged(value);
        });
    };
    /**
     * Initialisiert das Handling von Statusaktualisierungen.
     */
    LuxFormComponentBase.prototype.initFormStateSubscription = function () {
        var _this = this;
        this._formStatusChangeSubscr = this.formControl.statusChanges.subscribe(function (status) {
            if (status === 'DISABLED' && !_this.luxDisabled) {
                // Das FormControl hat den Zustand "DISABLED", aber die Property "luxDisabled"
                // hat noch den Wert "false". D.h. der FormControl-Status und die Property
                // sind nicht mehr synchron.
                _this.luxDisabled = true;
            }
            else if ((status === 'VALID' || status === 'INVALID') && _this.luxDisabled) {
                // Das FormControl hat den Zustand "VALID" oder "INVALID" und ist aktiv,
                // aber die Property "luxDisabled" hat noch den Wert "true".
                // D.h. der FormControl-Status und die Property sind nicht mehr synchron.
                _this.luxDisabled = false;
            }
            _this.notifyFormStatusChanged(status);
        });
    };
    /**
     * Diese Funktion prüft ob luxRequired auf true gesetzt wurde und die übergebenen validators bereits den
     * required-Validator besitzen.
     * Für den Fall das luxRequired auf false gesetzt worden ist, wird der Validator entfernt.
     *
     * Hinweis: LuxFormCheckableBase überschreibt diese Funktion, um statt required requiredTrue zu setzen.
     * @param validators
     */
    LuxFormComponentBase.prototype.checkValidatorsContainRequired = function (validators) {
        // Fall: required = true, aber neue Validatoren werden gesetzt
        if (this.luxRequired === true) {
            // Sind es mehrere Validatoren, aber kein .required? Dann wird er ergänzt
            if (Array.isArray(validators) && validators.indexOf(Validators.required) === -1) {
                validators.push(Validators.required);
            }
            else if (!Array.isArray(validators) && validators !== Validators.required) {
                // Ist es nur ein einzelner Validator und nicht .required? Dann Array erstellen und beide kombinieren
                validators = [validators, Validators.required];
            }
        }
        else if (this.luxRequired === false) {
            if (Array.isArray(validators)) {
                validators = validators.filter(function (validator) { return validator !== Validators.required; });
            }
            else if (validators === Validators.required) {
                validators = undefined;
            }
        }
        return validators;
    };
    /**
     * Versucht die Validatoren für diese Komponente zu setzen.
     * Ist nur erfolgreich, wenn es sich hierbei nicht um eine ReactiveForm-Komponente handelt.
     * @param validators
     */
    LuxFormComponentBase.prototype.updateValidators = function (validators) {
        var _this = this;
        if ((!Array.isArray(validators) && validators) || (Array.isArray(validators) && validators.length > 0)) {
            if (!this.isInForm()) {
                setTimeout(function () {
                    _this.luxControlValidators = _this.checkValidatorsContainRequired(validators);
                    _this.formControl.setValidators(_this.luxControlValidators);
                    _this.formControl.updateValueAndValidity();
                });
            }
            else {
                this.logger.error("Die Validatoren einer ReactiveForm-Komponente d\u00FCrfen nicht \u00FCber " + "das Template gesetzt werden.");
            }
        }
    };
    /**
     * Gibt an, ob diese Component Output-Property-Binding nutzt obwohl diese Component eigentlich ein Reactive FormControl ist.
     * @param observers
     */
    LuxFormComponentBase.prototype.checkOutputPatternViolation = function (observers) {
        if (this.displayBindingDebugHint && this.isInForm() && observers && observers.length > 0) {
            this.logPatternViolationWarning();
        }
    };
    /**
     * Gibt an, ob diese Component Input-Property-Binding nutzt obwohl diese Component eigentlich ein Reactive FormControl ist.
     * Wird von den ngOnChanges Methoden der Child-Klassen aufgerufen.
     * @param simpleChange
     */
    LuxFormComponentBase.prototype.checkInputPatternViolation = function (simpleChange) {
        if (this.displayBindingDebugHint && this.isInForm() && simpleChange && simpleChange.firstChange) {
            this.logPatternViolationWarning();
        }
    };
    /**
     * Gibt über den LuxConsoleService eine Warnung aus, dass hier gegen das ReactiveForm-Pattern mit Property-Binding
     * verstoßen worden ist.
     */
    LuxFormComponentBase.prototype.logPatternViolationWarning = function () {
        this.logger.warn("Achtung: Die Component \"" + this.luxControlBinding + "\" ist Teil einer ReactiveForm, nutzt aber trotzdem Property-Binding.\n\n" +
            "[Mit ReactiveForms]\n" +
            "F\u00FCr Components innerhalb von ReactiveForms k\u00F6nnen Wertaktualisierungen wie folgt abgefragt werden:\n\n" +
            "// Nicht vergessen unsubscribe in ngOnDestroy f\u00FCr die Subscription aufzurufen\n" +
            "this.subscription = this.myForm.get('myFormControl').valueChanges.subscribe((value: any) => console.log(value));\n\n" +
            "Das Setzen von Werten erfolgt zum Beispiel so:\n\n" +
            "this.myForm.get('myFormControl').setValue('myValue');\n\n" +
            "[Ohne ReactiveForms]\n" +
            "F\u00FCr Components au\u00DFerhalb von ReactiveForms k\u00F6nnen Wertaktualisierungen wie folgt abgefragt werden:\n\n" +
            "<lux-xyz-form-component (luxValueChange)=\"onValueChange($event)\"><lux-xyz-form-component>\n\n" +
            "Das Setzen von Werten erfolgt zum Beispiel so:\n\n" +
            "<lux-xyz-form-component [luxValue]=\"value\"><lux-xyz-form-component>\n\n" +
            "Alternativ kann \u00FCber Two-Way-Binding immer der aktuelle Wert in einer Property gehalten werden:\n\n" +
            "<lux-xyz-form-component [(luxValue)]=\"value\"><lux-xyz-form-component>");
        // Wir deaktivieren weitere Log-Ausgaben für diese Component, um doppelte Meldung zu vermeiden.
        // z.B. wenn Two-Way-Binding genutzt wird.
        this.displayBindingDebugHint = false;
    };
    LuxFormComponentBase.DEFAULT_CTRL_NAME = 'control';
    tslib_1.__decorate([
        ContentChild(LuxFormLabelComponent, { static: false }),
        tslib_1.__metadata("design:type", LuxFormLabelComponent)
    ], LuxFormComponentBase.prototype, "formLabelComponent", void 0);
    tslib_1.__decorate([
        ContentChild(LuxFormHintComponent, { static: false }),
        tslib_1.__metadata("design:type", LuxFormHintComponent)
    ], LuxFormComponentBase.prototype, "formHintComponent", void 0);
    tslib_1.__decorate([
        HostBinding('class.lux-form-control-readonly'),
        tslib_1.__metadata("design:type", Object)
    ], LuxFormComponentBase.prototype, "cssReadonly", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxFormComponentBase.prototype, "luxFocusIn", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxFormComponentBase.prototype, "luxFocusOut", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxFormComponentBase.prototype, "luxDisabledChange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormComponentBase.prototype, "luxHint", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormComponentBase.prototype, "luxLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormComponentBase.prototype, "luxControlBinding", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxFormComponentBase.prototype, "luxControlValidators", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormComponentBase.prototype, "luxErrorMessage", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], LuxFormComponentBase.prototype, "luxErrorCallback", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxFormComponentBase.prototype, "luxDisabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxFormComponentBase.prototype, "luxReadonly", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], LuxFormComponentBase.prototype, "luxRequired", null);
    return LuxFormComponentBase;
}());
export { LuxFormComponentBase };
//# sourceMappingURL=data:application/json;base64,