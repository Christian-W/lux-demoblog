import * as tslib_1 from "tslib";
import { LuxFormComponentBase } from './lux-form-component-base.class';
import { EventEmitter, Input, Output } from '@angular/core';
/**
 * Basis-Klasse für FormComponents, die einen ähnlichen Grundaufbau für die Auswahl von
 * Optionen aus einem Array anbieten (Radio-Buttons und Selects z.B.).
 */
var LuxFormSelectableBase = /** @class */ (function (_super) {
    tslib_1.__extends(LuxFormSelectableBase, _super);
    function LuxFormSelectableBase(controlContainer, cdr, logger, config) {
        var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
        _this._luxOptions = [];
        _this.luxSelectedChange = new EventEmitter();
        _this.luxOptionLabelProp = '';
        _this.luxCompareWith = function (o1, o2) { return o1 === o2; };
        /**
         * Kapselung von der übergebenen luxCompareWith-Funktion.
         * Fängt undefinierte Objekte ab und returned stattdessen false.
         * @param o1
         * @param o2
         */
        _this.compareObjects = function (o1, o2) {
            if ((!o1 && o2) || (o1 && !o2)) {
                return false;
            }
            else if (_this.luxCompareWith && !!o1 && !!o2) {
                return _this.luxCompareWith(o1, o2);
            }
            else {
                return o1 === o2;
            }
        };
        return _this;
    }
    Object.defineProperty(LuxFormSelectableBase.prototype, "luxSelected", {
        get: function () {
            return this.getValue();
        },
        set: function (selected) {
            this.setValue(selected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormSelectableBase.prototype, "luxOptions", {
        get: function () {
            return this._luxOptions;
        },
        set: function (options) {
            this._luxOptions = options;
            this.checkSelectedAndUpdate(this.luxSelected);
        },
        enumerable: true,
        configurable: true
    });
    // region Overridden methods
    LuxFormSelectableBase.prototype.notifyFormValueChanged = function (formValue) {
        this.checkSelectedAndUpdate(formValue);
    };
    // endregion
    /**
     * Versucht, wenn Options und FormControl vorhanden sind, den selected-Wert mit den Options
     * zu vergleichen und dann auch wenn möglich als luxSelected-Wert zu sichern.
     * @param selected
     */
    LuxFormSelectableBase.prototype.checkSelectedAndUpdate = function (selected) {
        var _this = this;
        if (this.luxOptions && this.luxOptions.length > 0 && this.formControl) {
            if (this.luxPickValue && selected instanceof Object && !Array.isArray(selected)) {
                // Wenn der Wert zufälligerweise noch ein Objekt sein sollte, versuchen den Key auszulesen
                selected = this.luxPickValue(selected);
                // Da der Wert neu gesetzt wurde, diesen im nächsten Zyklus erst in die Werte schreiben
                setTimeout(function () {
                    _this.checkSelectedAndUpdate(selected);
                });
            }
            else {
                // Für den Fall, das der eingesetzte Wert sich doch noch vom FormControl-Value unterscheidet,
                // diesen ergänzen
                if (this.luxSelected !== selected) {
                    this.luxSelected = selected;
                }
                this.checkSelectedInOptions(selected);
                setTimeout(function () {
                    _this.luxSelectedChange.emit(selected);
                });
            }
        }
    };
    /**
     * Prüft ob der übergebene Wert in den luxOptions ist.
     * Kann auch ein Array als "selected" enthalten.
     * Wenn der Wert nicht gefunden werden konnte wird eine Fehlermeldung in der console ausgegeben.
     * @param selected
     */
    LuxFormSelectableBase.prototype.checkSelectedInOptions = function (selected) {
        var selectedAsArray = Array.isArray(selected) ? selected : [selected];
        if (selected && this.luxOptions && !this.allSelectedInOptions(selectedAsArray)) {
            // Selected nicht in Options = einen Fehler in die Console loggen
            this.logSelectedNotFound(selected);
        }
    };
    /**
     * Prüft ob die übergebenen Select-Objekte in den luxOptions enthalten sind.
     * @param selectedAsArray
     */
    LuxFormSelectableBase.prototype.allSelectedInOptions = function (selectedAsArray) {
        var _this = this;
        // Prüfen ob ein Unterarray von Elementen existiert.
        var optionsHasSubarray = this.luxOptions.length === 0
            ? false
            : // Dieses kann direkt in den Options stehen oder als value-Property
                Array.isArray(this.luxOptions[0]) ||
                    (!!this.luxPickValue && Array.isArray(this.luxPickValue(this.luxOptions[0])));
        var targetLength = optionsHasSubarray ? 1 : selectedAsArray.length;
        var length = this.luxOptions.filter(function (optionEntry) {
            if (optionsHasSubarray) {
                return _this.luxPickValue
                    ? _this.luxPickValue(optionEntry) === selectedAsArray
                    : _this.compareObjects(optionEntry, selectedAsArray);
            }
            else {
                return selectedAsArray.find(function (selectedEntry) {
                    return _this.luxPickValue
                        ? _this.luxPickValue(optionEntry) === selectedEntry
                        : _this.compareObjects(optionEntry, selectedEntry);
                });
            }
        }).length;
        return length === targetLength;
    };
    /**
     * Loggt die Fehlermeldung in die Console, wenn das neue Value-Objekt nicht in den Options gefunden
     * werden konnte.
     * @param selected
     */
    LuxFormSelectableBase.prototype.logSelectedNotFound = function (selected) {
        this.logger.error("\n### Das Objekt " + JSON.stringify(selected) + " ist nicht Teil der m\u00F6glichen Optionen.\n" +
            ("\n### Komponente: \"" + this + "\"\n") +
            "Pr\u00FCfen Sie evtl. die luxCompareWith-Funktion, um Properties anstelle ganzer Objekte zu vergleichen.");
    };
    LuxFormSelectableBase.prototype.triggerOutputPatternCheck = function () {
        this.checkOutputPatternViolation(this.luxSelectedChange.observers);
    };
    LuxFormSelectableBase.prototype.triggerInputPatternCheck = function (simpleChanges) {
        this.checkInputPatternViolation(simpleChanges.luxSelected);
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxFormSelectableBase.prototype, "luxSelectedChange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormSelectableBase.prototype, "luxOptionLabelProp", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormSelectableBase.prototype, "luxTagId", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], LuxFormSelectableBase.prototype, "luxPickValue", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxFormSelectableBase.prototype, "luxReadonly", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxFormSelectableBase.prototype, "luxCompareWith", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxFormSelectableBase.prototype, "luxSelected", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], LuxFormSelectableBase.prototype, "luxOptions", null);
    return LuxFormSelectableBase;
}(LuxFormComponentBase));
export { LuxFormSelectableBase };
//# sourceMappingURL=data:application/json;base64,