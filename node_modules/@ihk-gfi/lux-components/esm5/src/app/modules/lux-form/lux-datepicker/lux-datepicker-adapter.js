import * as tslib_1 from "tslib";
import { NativeDateAdapter } from '@angular/material';
import { Injectable } from '@angular/core';
import { LuxUtil } from '../../lux-util/lux-util';
var LuxDatepickerAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(LuxDatepickerAdapter, _super);
    function LuxDatepickerAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // dd.MM.yyyy
        _this.dotRegExp = new RegExp(/\d{1,2}\.\d{1,2}\.\d{4}/);
        // MM/dd/yyyy
        _this.backslashRegExp = new RegExp(/\d{1,2}\/\d{1,2}\/\d{4}/);
        // dd-MM-yyyy
        _this.hyphenRegExp = new RegExp(/\d{1,2}-\d{1,2}-\d{4}/);
        // yyyy-MM-dd
        _this.hyphenRegExp_1 = new RegExp(/\d{4}-\d{1,2}-\d{1,2}/);
        return _this;
    }
    LuxDatepickerAdapter.prototype.format = function (date, displayFormat) {
        if (date) {
            if (displayFormat) {
                if (typeof date === 'string') {
                    date = new Date(date);
                }
                return date.toLocaleDateString(this.locale, displayFormat);
            }
            else {
                return date.toLocaleDateString(this.locale);
            }
        }
        else {
            return '';
        }
    };
    LuxDatepickerAdapter.prototype.parse = function (value) {
        if (value) {
            // Pr端fen, ob der Wert ein ISO-String ist
            if (LuxUtil.ISO_8601_FULL.test(value)) {
                return new Date(value);
            }
            // Hat der String das Format dd.MM.YYYY ?
            if (this.dotRegExp.test(value)) {
                return this.getUTCNulled_ddMMYYYY(value, '.');
            }
            else if (this.backslashRegExp.test(value)) {
                return this.getUTCNulled_MMddYYY(value, '/');
            }
            else if (this.hyphenRegExp.test(value)) {
                return this.getUTCNulled_ddMMYYYY(value, '-');
            }
            else if (this.hyphenRegExp_1.test(value)) {
                return this.getUTCNulled_YYYYMMdd(value, '-');
            }
            return value;
        }
        return null;
    };
    /**
     * UTC Date mit 0-Werten f端r Time aus einem ddMMYYYY-String erhalten.
     * @param dateString
     * @param separator
     */
    LuxDatepickerAdapter.prototype.getUTCNulled_ddMMYYYY = function (dateString, separator) {
        var splitDate = dateString.split(separator);
        var tempDate = new Date(0);
        tempDate.setUTCFullYear(+splitDate[2], +splitDate[1] - 1, +splitDate[0]);
        return tempDate;
    };
    /**
     * UTC Date mit 0-Werten f端r Time aus einem YYYYMMdd-String erhalten.
     * @param dateString
     * @param separator
     */
    LuxDatepickerAdapter.prototype.getUTCNulled_YYYYMMdd = function (dateString, separator) {
        var splitDate = dateString.split(separator);
        var tempDate = new Date(0);
        tempDate.setUTCFullYear(+splitDate[0], +splitDate[1] - 1, +splitDate[2]);
        return tempDate;
    };
    /**
     * UTC Date mit 0-Werten f端r Time aus einem MMddYYYY-String erhalten.
     * @param dateString
     * @param separator
     */
    LuxDatepickerAdapter.prototype.getUTCNulled_MMddYYY = function (dateString, separator) {
        var splitDate = dateString.split(separator);
        var tempDate = new Date(0);
        tempDate.setUTCFullYear(+splitDate[2], +splitDate[0] - 1, +splitDate[1]);
        return tempDate;
    };
    LuxDatepickerAdapter.prototype.isValid = function (date) {
        return LuxUtil.isDate(date);
    };
    LuxDatepickerAdapter = tslib_1.__decorate([
        Injectable()
    ], LuxDatepickerAdapter);
    return LuxDatepickerAdapter;
}(NativeDateAdapter));
export { LuxDatepickerAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWRhdGVwaWNrZXItYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpaGstZ2ZpL2x1eC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL2x1eC1mb3JtL2x1eC1kYXRlcGlja2VyL2x1eC1kYXRlcGlja2VyLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSWxEO0lBQTBDLGdEQUFpQjtJQUQzRDtRQUFBLHFFQXlGQztRQXZGQyxhQUFhO1FBQ0ksZUFBUyxHQUFHLElBQUksTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFbkUsYUFBYTtRQUNJLHFCQUFlLEdBQUcsSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUV6RSxhQUFhO1FBQ0ksa0JBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRXBFLGFBQWE7UUFDSSxvQkFBYyxHQUFHLElBQUksTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7O0lBNkV4RSxDQUFDO0lBM0VDLHFDQUFNLEdBQU4sVUFBTyxJQUFtQixFQUFFLGFBQW9DO1FBQzlELElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO29CQUM1QixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3ZCO2dCQUNELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDNUQ7aUJBQU07Z0JBQ0wsT0FBUSxJQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxD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QUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUF2RlUsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTtPQUNBLG9CQUFvQixDQXdGaEM7SUFBRCwyQkFBQztDQUFBLEFBeEZELENBQTBDLGlCQUFpQixHQXdGMUQ7U0F4Rlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmF0aXZlRGF0ZUFkYXB0ZXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMdXhVdGlsIH0gZnJvbSAnLi4vLi4vbHV4LXV0aWwvbHV4LXV0aWwnO1xuaW1wb3J0IERhdGVUaW1lRm9ybWF0T3B0aW9ucyA9IEludGwuRGF0ZVRpbWVGb3JtYXRPcHRpb25zO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTHV4RGF0ZXBpY2tlckFkYXB0ZXIgZXh0ZW5kcyBOYXRpdmVEYXRlQWRhcHRlciB7XG4gIC8vIGRkLk1NLnl5eXlcbiAgcHJpdmF0ZSByZWFkb25seSBkb3RSZWdFeHAgPSBuZXcgUmVnRXhwKC9cXGR7MSwyfVxcLlxcZHsxLDJ9XFwuXFxkezR9Lyk7XG5cbiAgLy8gTU0vZGQveXl5eVxuICBwcml2YXRlIHJlYWRvbmx5IGJhY2tzbGFzaFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1xcZHsxLDJ9XFwvXFxkezEsMn1cXC9cXGR7NH0vKTtcblxuICAvLyBkZC1NTS15eXl5XG4gIHByaXZhdGUgcmVhZG9ubHkgaHlwaGVuUmVnRXhwID0gbmV3IFJlZ0V4cCgvXFxkezEsMn0tXFxkezEsMn0tXFxkezR9Lyk7XG5cbiAgLy8geXl5eS1NTS1kZFxuICBwcml2YXRlIHJlYWRvbmx5IGh5cGhlblJlZ0V4cF8xID0gbmV3IFJlZ0V4cCgvXFxkezR9LVxcZHsxLDJ9LVxcZHsxLDJ9Lyk7XG5cbiAgZm9ybWF0KGRhdGU6IERhdGUgfCBzdHJpbmcsIGRpc3BsYXlGb3JtYXQ6IERhdGVUaW1lRm9ybWF0T3B0aW9ucyk6IHN0cmluZyB7XG4gICAgaWYgKGRhdGUpIHtcbiAgICAgIGlmIChkaXNwbGF5Rm9ybWF0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKHRoaXMubG9jYWxlLCBkaXNwbGF5Rm9ybWF0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoZGF0ZSBhcyBEYXRlKS50b0xvY2FsZURhdGVTdHJpbmcodGhpcy5sb2NhbGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgcGFyc2UodmFsdWU6IHN0cmluZyk6IERhdGUgfCBudWxsIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIC8vIFByw7xmZW4sIG9iIGRlciBXZXJ0IGVpbiBJU08tU3RyaW5nIGlzdFxuICAgICAgaWYgKEx1eFV0aWwuSVNPXzg2MDFfRlVMTC50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xuICAgICAgfVxuICAgICAgLy8gSGF0IGRlciBTdHJpbmcgZGFzIEZvcm1hdCBkZC5NTS5ZWVlZID9cbiAgICAgIGlmICh0aGlzLmRvdFJlZ0V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRVVENOdWxsZWRfZGRNTVlZWVkodmFsdWUsICcuJyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYmFja3NsYXNoUmVnRXhwLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFVUQ051bGxlZF9NTWRkWVlZKHZhbHVlLCAnLycpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmh5cGhlblJlZ0V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRVVENOdWxsZWRfZGRNTVlZWVkodmFsdWUsICctJyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaHlwaGVuUmVnRXhwXzEudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VVRDTnVsbGVkX1lZWVlNTWRkKHZhbHVlLCAnLScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDxhbnk+dmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFVUQyBEYXRlIG1pdCAwLVdlcnRlbiBmw7xyIFRpbWUgYXVzIGVpbmVtIGRkTU1ZWVlZLVN0cmluZyBlcmhhbHRlbi5cbiAgICogQHBhcmFtIGRhdGVTdHJpbmdcbiAgICogQHBhcmFtIHNlcGFyYXRvclxuICAgKi9cbiAgcHJpdmF0ZSBnZXRVVENOdWxsZWRfZGRNTVlZWVkoZGF0ZVN0cmluZzogc3RyaW5nLCBzZXBhcmF0b3I6IHN0cmluZykge1xuICAgIGNvbnN0IHNwbGl0RGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQoc2VwYXJhdG9yKTtcbiAgICBjb25zdCB0ZW1wRGF0ZSA9IG5ldyBEYXRlKDApO1xuICAgIHRlbXBEYXRlLnNldFVUQ0Z1bGxZZWFyKCtzcGxpdERhdGVbMl0sICtzcGxpdERhdGVbMV0gLSAxLCArc3BsaXREYXRlWzBdKTtcbiAgICByZXR1cm4gdGVtcERhdGU7XG4gIH1cblxuICAvKipcbiAgICogVVRDIERhdGUgbWl0IDAtV2VydGVuIGbDvHIgVGltZSBhdXMgZWluZW0gWVlZWU1NZGQtU3RyaW5nIGVyaGFsdGVuLlxuICAgKiBAcGFyYW0gZGF0ZVN0cmluZ1xuICAgKiBAcGFyYW0gc2VwYXJhdG9yXG4gICAqL1xuICBwcml2YXRlIGdldFVUQ051bGxlZF9ZWVlZTU1kZChkYXRlU3RyaW5nOiBzdHJpbmcsIHNlcGFyYXRvcjogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3BsaXREYXRlID0gZGF0ZVN0cmluZy5zcGxpdChzZXBhcmF0b3IpO1xuICAgIGNvbnN0IHRlbXBEYXRlID0gbmV3IERhdGUoMCk7XG4gICAgdGVtcERhdGUuc2V0VVRDRnVsbFllYXIoK3NwbGl0RGF0ZVswXSwgK3NwbGl0RGF0ZVsxXSAtIDEsICtzcGxpdERhdGVbMl0pO1xuICAgIHJldHVybiB0ZW1wRGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVVEMgRGF0ZSBtaXQgMC1XZXJ0ZW4gZsO8ciBUaW1lIGF1cyBlaW5lbSBNTWRkWVlZWS1TdHJpbmcgZXJoYWx0ZW4uXG4gICAqIEBwYXJhbSBkYXRlU3RyaW5nXG4gICAqIEBwYXJhbSBzZXBhcmF0b3JcbiAgICovXG4gIHByaXZhdGUgZ2V0VVRDTnVsbGVkX01NZGRZWVkoZGF0ZVN0cmluZzogc3RyaW5nLCBzZXBhcmF0b3I6IHN0cmluZykge1xuICAgIGNvbnN0IHNwbGl0RGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQoc2VwYXJhdG9yKTtcbiAgICBjb25zdCB0ZW1wRGF0ZSA9IG5ldyBEYXRlKDApO1xuICAgIHRlbXBEYXRlLnNldFVUQ0Z1bGxZZWFyKCtzcGxpdERhdGVbMl0sICtzcGxpdERhdGVbMF0gLSAxLCArc3BsaXREYXRlWzFdKTtcbiAgICByZXR1cm4gdGVtcERhdGU7XG4gIH1cblxuICBpc1ZhbGlkKGRhdGU6IGFueSkge1xuICAgIHJldHVybiBMdXhVdGlsLmlzRGF0ZShkYXRlKTtcbiAgfVxufVxuIl19