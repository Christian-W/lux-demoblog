import * as tslib_1 from "tslib";
import { ChangeDetectorRef, ElementRef, EventEmitter, HostBinding, HostListener, Input, Optional, Output, ViewChild } from '@angular/core';
import { ControlContainer, Validators } from '@angular/forms';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxUtil } from '../../lux-util/lux-util';
import { LuxFormComponentBase } from './lux-form-component-base.class';
import { LuxFileErrorCause } from '../lux-file/lux-file-model/lux-file-error.interface';
import { HttpClient, HttpEventType } from '@angular/common/http';
import { isObservable, throwError } from 'rxjs';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
var LuxFormFileBase = /** @class */ (function (_super) {
    tslib_1.__extends(LuxFormFileBase, _super);
    function LuxFormFileBase(controlContainer, cdr, logger, config, http, liveAnnouncer) {
        var _this = _super.call(this, controlContainer, cdr, logger, config) || this;
        _this.http = http;
        _this.liveAnnouncer = liveAnnouncer;
        _this.defaultReadFileDelay = 1000;
        _this._luxAccept = '';
        _this._luxUploadActionConfig = {
            disabled: false,
            hidden: false,
            iconName: 'fas fa-cloud-upload-alt',
            label: 'Hochladen'
        };
        _this._luxDeleteActionConfig = {
            disabled: false,
            hidden: false,
            iconName: 'fas fa-trash',
            label: 'Löschen'
        };
        _this._luxViewActionConfig = {
            disabled: false,
            hidden: true,
            iconName: 'fas fa-eye',
            label: 'Ansehen'
        };
        _this._luxDownloadActionConfig = {
            disabled: false,
            hidden: true,
            iconName: 'fas fa-download',
            label: 'Download'
        };
        _this.progress = -1;
        _this.forceProgressIndeterminate = false;
        _this.luxSelectedFilesChange = new EventEmitter();
        _this.luxUploadReportProgress = false;
        _this.luxContentsAsBlob = false;
        _this.luxMaxSizeMB = 10;
        _this.luxCapture = '';
        _this.luxUploadUrl = '';
        _this.luxDnDActive = true;
        _this.isDragActive = false;
        return _this;
    }
    LuxFormFileBase.prototype.onDragOver = function ($event) {
        if (this.isDnDAllowed()) {
            this.handleDragOver($event);
        }
    };
    LuxFormFileBase.prototype.onDragLeave = function ($event) {
        if (this.isDnDAllowed()) {
            this.handleDragLeave($event);
        }
    };
    LuxFormFileBase.prototype.onDrop = function ($event) {
        if (this.isDnDAllowed()) {
            this.handleDrop($event);
        }
    };
    Object.defineProperty(LuxFormFileBase.prototype, "luxUploadActionConfig", {
        get: function () {
            return this._luxUploadActionConfig;
        },
        set: function (config) {
            if (config) {
                this._luxUploadActionConfig = config;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormFileBase.prototype, "luxDeleteActionConfig", {
        get: function () {
            return this._luxDeleteActionConfig;
        },
        set: function (config) {
            if (config) {
                this._luxDeleteActionConfig = config;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormFileBase.prototype, "luxViewActionConfig", {
        get: function () {
            return this._luxViewActionConfig;
        },
        set: function (config) {
            if (config) {
                this._luxViewActionConfig = config;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormFileBase.prototype, "luxDownloadActionConfig", {
        get: function () {
            return this._luxDownloadActionConfig;
        },
        set: function (config) {
            if (config) {
                this._luxDownloadActionConfig = config;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormFileBase.prototype, "luxSelectedFiles", {
        get: function () {
            return this.getValue();
        },
        set: function (selectedFiles) {
            this.setValue(selectedFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormFileBase.prototype, "luxAccept", {
        get: function () {
            return this._luxAccept;
        },
        set: function (accepts) {
            if (!accepts) {
                accepts = '';
            }
            this._luxAccept = Array.isArray(accepts) ? accepts.join(',') : accepts;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormFileBase.prototype, "progressMode", {
        get: function () {
            return (this.progress === 0 && !this.luxUploadReportProgress) || this.forceProgressIndeterminate
                ? 'indeterminate'
                : 'determinate';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LuxFormFileBase.prototype, "isProgressVisible", {
        get: function () {
            return this.progress >= 0 || this.forceProgressIndeterminate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Wird beim Fokussieren des Elements aufgerufen und markiert das FormControl als "touched".
     * @param $event
     */
    LuxFormFileBase.prototype.onFocusIn = function ($event) {
        this.formControl.markAsTouched();
        this.luxFocusIn.emit($event);
    };
    /**
     * Entfernt die aktuell selektierten Dateien und entfernt etwaige (spezifische) Fehler aus dem FormControl.
     * @param $event
     */
    LuxFormFileBase.prototype.clearFiles = function ($event) {
        this.formControl.markAsTouched();
        this.formControl.markAsDirty();
        this.luxSelectedFiles = undefined;
        this.notifyFormValueChanged();
        this.clearFormControlErrors();
        if (this.luxDeleteActionConfig.onClick) {
            this.luxDeleteActionConfig.onClick();
        }
        this.announceAllFilesRemove();
    };
    /**
     * Löst den Download der übergebenen Datei aus.
     * @param file
     */
    LuxFormFileBase.prototype.downloadFile = function (file) {
        this.formControl.markAsTouched();
        file = Array.isArray(file) ? file[0] : file;
        var downloadLink = this.downloadLink.nativeElement;
        downloadLink.download = file.name;
        if (file.content instanceof Blob) {
            if (window.navigator.msSaveBlob) {
                // IE
                window.navigator.msSaveOrOpenBlob(file.content, file.name);
            }
            else {
                var url = window.URL.createObjectURL(file.content);
                downloadLink.href = url;
                downloadLink.click();
                window.URL.revokeObjectURL(url);
            }
        }
        else {
            if (window.navigator.msSaveBlob) {
                // IE
                try {
                    var arrBuffer = LuxUtil.base64ToArrayBuffer(file.content.split(',')[1]);
                    window.navigator.msSaveOrOpenBlob(new Blob([arrBuffer], { type: file.type }), file.name);
                }
                catch (e) {
                    console.log(e);
                }
            }
            else {
                downloadLink.href = file.content;
                downloadLink.click();
            }
        }
        if (this.luxDownloadActionConfig.onClick) {
            this.luxDownloadActionConfig.onClick(file);
        }
    };
    /**
     * Löst den base64Callback der übergebenen Datei aus.
     * Schreibt dann anschließend den Base64-String in die Datei.
     * @param file
     */
    LuxFormFileBase.prototype.viewFile = function (file) {
        var _this = this;
        this.formControl.markAsTouched();
        // Wenn die Datei bereits einen Base64-Wert besitzt, den onClick-Callback ausführen
        if (file.content) {
            this.triggerViewFileClick(file);
            return;
        }
        var callbackResult = file.contentCallback();
        // Wenn der Callback ein Observable ist, dieses auflösen und dem File-Base64 zuweisen
        if (isObservable(callbackResult)) {
            callbackResult.subscribe(function (content) {
                file.content = content;
                _this.triggerViewFileClick(file);
            });
        }
        else {
            // Wenn der Callback ein normaler String oder Promise ist, diesen auflösen und den File-Base64 aktualisieren
            Promise.resolve(callbackResult).then(function (content) {
                file.content = content;
                _this.triggerViewFileClick(file);
            });
        }
    };
    /**
     * Wandelt File-Objekt zu LuxFileObjects um und versucht diese Hochzuladen.
     * Gibt ein Promise mit den neuen FileObjects zurück bzw. einen Fehler aus den internen Promises.
     * @param files
     */
    LuxFormFileBase.prototype.updateSelectedFiles = function (files) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var newFiles_1, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        newFiles_1 = [];
                        return [4 /*yield*/, this.mapFilesToFileObjects(files).then(function (fileObjects) { return (newFiles_1 = fileObjects); })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.uploadFiles(newFiles_1)];
                    case 2:
                        _a.sent();
                        if (this.luxUploadActionConfig.onClick) {
                            this.luxUploadActionConfig.onClick(newFiles_1 && newFiles_1.length === 1 ? newFiles_1[0] : newFiles_1);
                        }
                        this.formControl.markAsTouched();
                        this.formControl.markAsDirty();
                        return [2 /*return*/, Promise.resolve(newFiles_1)];
                    case 3:
                        error_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(error_1)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Stößt das Hochladen der Dateien zu einer bestimmten URL an.
     */
    LuxFormFileBase.prototype.uploadFiles = function (files) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var formData, selectedFiles;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.luxUploadUrl) {
                            this.forceProgressIndeterminate = false;
                            return [2 /*return*/, Promise.resolve()];
                        }
                        if (this.luxUploadReportProgress) {
                            this.forceProgressIndeterminate = false;
                        }
                        this.progress = 0;
                        formData = new FormData();
                        selectedFiles = [];
                        if (!files) {
                            selectedFiles = [];
                        }
                        else if (!Array.isArray(files)) {
                            selectedFiles.push(files);
                        }
                        else {
                            selectedFiles.push.apply(selectedFiles, tslib_1.__spread(files));
                        }
                        selectedFiles.forEach(function (fileObject) {
                            formData.append(fileObject.name, fileObject.content);
                        });
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var options = {};
                                if (_this.luxUploadReportProgress) {
                                    options['reportProgress'] = true;
                                    options['observe'] = 'events';
                                }
                                options['responseType'] = 'blob';
                                _this.http.post(_this.luxUploadUrl, formData, options).subscribe(function (event) {
                                    // wenn wir eine determinierte Fortschrittsanzeige haben, dann muss der Fortschritt auch korrekt abgefangen werden
                                    if (_this.luxUploadReportProgress) {
                                        if (event.type === HttpEventType.UploadProgress) {
                                            _this.progress = Math.round((event.loaded / event.total) * 100);
                                        }
                                        else if (event.type === HttpEventType.Response) {
                                            resolve();
                                        }
                                    }
                                    else {
                                        resolve();
                                    }
                                }, function (error) {
                                    // Hier geben wir den speziellen Fehler noch mal in die console
                                    console.error(error);
                                    // Für den Fall das der Upload fehlschlägt, melden wir einen Fehler am Component
                                    reject(error);
                                    return throwError(error);
                                });
                            }).then(function () {
                                _this.progress = -1;
                                _this.forceProgressIndeterminate = false;
                                return Promise.resolve();
                            }, function (error) {
                                _this.progress = -1;
                                _this.forceProgressIndeterminate = false;
                                return Promise.reject({
                                    cause: LuxFileErrorCause.UploadFileError,
                                    exception: error,
                                    file: files
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Liest die übergebenen Dateien aus und erzeugt daraus ein Promise, welches abgefragt werden kann.
     * Fängt potentielle Fehler ab und gibt diese als abgelehnte Promises zurück.
     * @param files
     */
    LuxFormFileBase.prototype.mapFilesToFileObjects = function (files) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1, _a, filesArray, newFiles, _loop_1, this_1, filesArray_1, filesArray_1_1, file, state_1, e_1_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._luxSelectedFiles = [];
                        filesArray = Array.from(files);
                        newFiles = [];
                        _loop_1 = function (file) {
                            var splitAccepted, splitFileEnding, fileEnding, isAccepted;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!file) {
                                            return [2 /*return*/, "continue"];
                                        }
                                        // Prüfen ob Dateigröße überschritten worden ist
                                        if (this_1.getFileSizeInMB(file) > this_1.luxMaxSizeMB) {
                                            return [2 /*return*/, { value: Promise.reject({
                                                        cause: LuxFileErrorCause.MaxSizeError,
                                                        exception: this_1.getMaxSizeErrorMessage(file),
                                                        file: file
                                                    }) }];
                                        }
                                        splitAccepted = this_1.luxAccept ? this_1.luxAccept.split(',') : [];
                                        splitFileEnding = file.name.split('.');
                                        fileEnding = "." + splitFileEnding[splitFileEnding.length - 1];
                                        isAccepted = splitAccepted.length === 0 ? true : false;
                                        splitAccepted.forEach(function (accepted) {
                                            if (accepted) {
                                                accepted = accepted.toLocaleLowerCase();
                                                if (accepted === '.txt') {
                                                    accepted = 'text/plain';
                                                }
                                            }
                                            if (!isAccepted) {
                                                // Für spezielle Wildcards nutzen wir diese Umwandlung
                                                switch (accepted) {
                                                    case 'image/*':
                                                        accepted = 'image';
                                                        break;
                                                    case 'video/*':
                                                        accepted = 'video';
                                                        break;
                                                    case 'audio/*':
                                                        accepted = 'audio';
                                                        break;
                                                }
                                                if (accepted === fileEnding.toLocaleLowerCase() || file.type.toLocaleLowerCase().indexOf(accepted) > -1) {
                                                    isAccepted = true;
                                                }
                                            }
                                        });
                                        if (!isAccepted) {
                                            return [2 /*return*/, { value: Promise.reject({
                                                        cause: LuxFileErrorCause.FileNotAccepted,
                                                        exception: this_1.getFileNotAcceptedMessage(file),
                                                        file: file
                                                    }) }];
                                        }
                                        if (!this_1.luxContentsAsBlob) return [3 /*break*/, 1];
                                        // Wenn direkt die Blobs genutzt werden sollen, einfach die Datei als content merken
                                        newFiles.push({ name: file.name, content: file, type: file.type });
                                        return [3 /*break*/, 3];
                                    case 1: 
                                    // Das Auslesen der Datei anstoßen, wenn erfolgreich, wird die Datei zu selectedFiles hinzugefügt.
                                    // Bei einem Fehler wird das Promise rejected und gibt einen Fehler zurück.
                                    return [4 /*yield*/, this_1.readFile(file)
                                            .then(function (content) {
                                            newFiles.push({ name: file.name, content: content, type: file.type });
                                        })
                                            .catch(function (error) {
                                            return Promise.reject({
                                                cause: LuxFileErrorCause.ReadingFileError,
                                                exception: error,
                                                file: file
                                            });
                                        })];
                                    case 2:
                                        // Das Auslesen der Datei anstoßen, wenn erfolgreich, wird die Datei zu selectedFiles hinzugefügt.
                                        // Bei einem Fehler wird das Promise rejected und gibt einen Fehler zurück.
                                        _a.sent();
                                        _a.label = 3;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        filesArray_1 = tslib_1.__values(filesArray), filesArray_1_1 = filesArray_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!filesArray_1_1.done) return [3 /*break*/, 5];
                        file = filesArray_1_1.value;
                        return [5 /*yield**/, _loop_1(file)];
                    case 3:
                        state_1 = _b.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        _b.label = 4;
                    case 4:
                        filesArray_1_1 = filesArray_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (filesArray_1_1 && !filesArray_1_1.done && (_a = filesArray_1.return)) _a.call(filesArray_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: 
                    // Das Array mit den neuen Dateien zurückgeben
                    return [2 /*return*/, Promise.resolve(newFiles)];
                }
            });
        });
    };
    /**
     * Liest (asynchron) den Base64-String aus der übergebenen Datei heraus bzw. gibt den Fehler zurück, wenn einer
     * aufgetreten ist.
     * @param file
     */
    LuxFormFileBase.prototype.readFile = function (file) {
        return new Promise(function (resolve, reject) {
            var reader = new window['FileReader']();
            reader.onload = function (fileData) { return resolve(fileData.target.result); };
            reader.onerror = function (error) { return reject(error); };
            reader.readAsDataURL(file);
        });
    };
    /**
     * Wird beim Drag-Over über dem LuxFormControl aufgerufen.
     * @param $event
     */
    LuxFormFileBase.prototype.handleDragOver = function ($event) {
        this.isDragActive = true;
        $event.stopPropagation();
        $event.preventDefault();
        // Der Drop Effect wird nur gesetzt, wenn die Property auch
        // vorhanden ist. In den Tests gibt es keinen Drop Effect.
        if ($event.dataTransfer && $event.dataTransfer.dropEffect) {
            $event.dataTransfer.dropEffect = 'copy';
        }
    };
    /**
     * Wird beim Drag-Leave über dem LuxFormControl aufgerufen.
     * @param $event
     */
    LuxFormFileBase.prototype.handleDragLeave = function ($event) {
        if ($event.target.nodeName.toLocaleLowerCase() === 'lux-file-input') {
            this.isDragActive = false;
        }
        $event.stopPropagation();
        $event.preventDefault();
    };
    /**
     * Wird beim Drop eines/mehrerer gezogener Elemente über dem LuxFormControl aufgerufen und löst
     * die Auswähl-Methoden für die entsprechenden Dateien aus.
     */
    LuxFormFileBase.prototype.handleDrop = function ($event) {
        this.forceProgressIndeterminate = true;
        this.isDragActive = false;
        $event.stopPropagation();
        $event.preventDefault();
        if ($event.dataTransfer) {
            this.selectFiles($event.dataTransfer.files);
        }
    };
    /**
     * Prüft ob der Base64-String für die Datei gesetzt ist und ob ein onClick-Aufruf für die View-Action vorhanden ist.
     * Wenn ja, wird dieser ausgeführt.
     * @param file
     */
    LuxFormFileBase.prototype.triggerViewFileClick = function (file) {
        if (file.content && this.luxViewActionConfig.onClick) {
            this.luxViewActionConfig.onClick(file);
        }
    };
    /**
     * Entfernt die in dieser Component gesetzten Fehlermeldungen.
     */
    LuxFormFileBase.prototype.clearFormControlErrors = function () {
        var e_2, _a;
        // Das aktuelle Fehlerobjekt auslesen
        var errors = this.formControl.errors;
        if (errors) {
            try {
                // Die componentspezifischen Fehler aus dem Objekt entfernen
                for (var _b = tslib_1.__values(Object.keys(LuxFileErrorCause)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var cause = _c.value;
                    delete errors[LuxFileErrorCause[cause]];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            // Falls errors ein leeres Objekt ist, nehmen wir stattdessen null
            errors = Object.keys(errors).length === 0 ? null : errors;
            // Das neue Fehlerobjekt in das FormControl schreiben
            this.formControl.setErrors(errors);
        }
    };
    /**
     * Aktualisiert das Fehlerobjekt am FormControl, damit eine entsprechende Fehlermeldung angezeigt werden kann.
     * Leert die Anzeige und gibt Events mit leerem Array aus.
     * @param error
     */
    LuxFormFileBase.prototype.setFormControlErrors = function (error) {
        this.forceProgressIndeterminate = false;
        // Vorherige definierte Fehler entfernen
        this.clearFormControlErrors();
        // Hier aktualisieren wir das Fehlerobjekt an dem zugrunde liegenden FormControl dieser Component
        var errors = this.formControl.errors ? this.formControl.errors : {};
        errors[error.cause] = { file: error.file };
        this.formControl.setErrors(errors);
    };
    /**
     * Berechnet die Größe der übergebenen Datei in MB.
     * @param file
     */
    LuxFormFileBase.prototype.getFileSizeInMB = function (file) {
        return file.size / 1000000;
    };
    /**
     * Gibt die Message für Überschreitung der maximalen Dateigröße zurück.
     * @param file
     */
    LuxFormFileBase.prototype.getMaxSizeErrorMessage = function (file) {
        return ("Die Datei \"" + file.name + "\" \u00FCberschreitet mit " + +this.getFileSizeInMB(file).toFixed(2) + "MB " +
            ("die erlaubte Dateigr\u00F6\u00DFe von " + +this.luxMaxSizeMB.toFixed(2) + "MB"));
    };
    /**
     * Gibt die Message für Fehler beim Auslesen einer Datei zurück.
     * @param file
     */
    LuxFormFileBase.prototype.getReadingFileErrorMessage = function (file) {
        return "Beim Lesen der Datei \"" + file.name + "\" ist ein Fehler aufgetreten";
    };
    /**
     * Gibt die Message für Fehler beim Upload einer Datei zurück.
     * @param files
     */
    LuxFormFileBase.prototype.getUploadFileErrorMessage = function (files) {
        if (!files) {
            return 'Das Hochladen ist fehlgeschlagen';
        }
        return "Das Hochladen der " + (files.length > 1 ? 'ausgewählten Dateien' : 'ausgewählten Datei') + " ist fehlgeschlagen";
    };
    /**
     * Gibt die Message für falsche Dateitypen zurück.
     * @param file
     */
    LuxFormFileBase.prototype.getFileNotAcceptedMessage = function (file) {
        return "Die Datei \"" + file.name + "\" hat einen nicht akzeptierten Dateityp";
    };
    /**
     * Gibt die Message für falsche Dateitypen zurück.
     * @param file
     */
    LuxFormFileBase.prototype.getMultipleForbiddenMessage = function () {
        return "Es darf nur eine Datei ausgew\u00E4hlt werden";
    };
    /**
     * Meldet dem ScreenReader, dass gerade eine/mehrere Dateien bearbeitet werden (Ladeanzeige).
     * @param multiple
     */
    LuxFormFileBase.prototype.announceFileProcess = function (multiple) {
        this.liveAnnouncer.announce("Bitte warten. Die " + (multiple ? 'Dateien werden' : 'Datei wird') + " verarbeitet.", 'assertive');
    };
    /**
     * Meldet dem ScreenReader, dass alle Dateien entfernt werden sollen.
     */
    LuxFormFileBase.prototype.announceAllFilesRemove = function () {
        this.liveAnnouncer.announce("Alle Dateien werden entfernt.", 'assertive');
    };
    /**
     * Meldet dem ScreenReader, dass eine bestimmte Datei entfernt werden soll.
     * @param fileName
     */
    LuxFormFileBase.prototype.announceFileRemove = function (fileName) {
        this.liveAnnouncer.announce("Die Datei " + fileName + " wird entfernt.", 'assertive');
    };
    /**
     * Gibt wieder, ob Drag-and-Drop gerade aktiv und möglich ist.
     */
    LuxFormFileBase.prototype.isDnDAllowed = function () {
        return this.luxDnDActive && !this.luxDisabled && !this.luxReadonly;
    };
    // region Overridden methods
    LuxFormFileBase.prototype.errorMessageModifier = function (value, errors) {
        if (errors[LuxFileErrorCause.MaxSizeError]) {
            return this.getMaxSizeErrorMessage(errors[LuxFileErrorCause.MaxSizeError].file);
        }
        else if (errors[LuxFileErrorCause.ReadingFileError]) {
            return this.getReadingFileErrorMessage(errors[LuxFileErrorCause.ReadingFileError].file);
        }
        else if (errors[LuxFileErrorCause.UploadFileError]) {
            return this.getUploadFileErrorMessage(errors[LuxFileErrorCause.UploadFileError].file);
        }
        else if (errors[LuxFileErrorCause.FileNotAccepted]) {
            return this.getFileNotAcceptedMessage(errors[LuxFileErrorCause.FileNotAccepted].file);
        }
        else if (errors[LuxFileErrorCause.MultipleForbidden]) {
            return this.getMultipleForbiddenMessage();
        }
        return undefined;
    };
    LuxFormFileBase.prototype.notifyFormValueChanged = function () {
        this.luxSelectedFilesChange.emit(this.luxSelectedFiles);
        // Wir leeren nach jedem Value-Change das Input, da wir das FormControl bereits als SSoT besitzen
        // und das Input durch den Browser gelegentlich sonst geblockt werden (wenn eine Datei ausgewählt worden ist)
        this.fileuploadInput.nativeElement.value = null;
    };
    LuxFormFileBase.prototype.updateValidators = function (validators) {
        if (!validators && this.luxRequired) {
            validators = Validators.required;
        }
        _super.prototype.updateValidators.call(this, validators);
    };
    LuxFormFileBase.prototype.initFormValueSubscription = function () {
        var _this = this;
        this._formValueChangeSubscr = this.formControl.valueChanges.subscribe(function () {
            // Wenn die Dateien erfolgreich gelesen werden konnten, die (spezifischen) Fehler entfernen
            _this.clearFormControlErrors();
        });
        if (this._initialValue !== null && this._initialValue !== undefined) {
            this.setValue(this._initialValue);
        }
    };
    LuxFormFileBase.prototype.triggerOutputPatternCheck = function () {
        this.checkOutputPatternViolation(this.luxSelectedFilesChange.observers);
    };
    LuxFormFileBase.prototype.triggerInputPatternCheck = function (simpleChanges) {
        this.checkInputPatternViolation(simpleChanges.luxSelectedFiles);
    };
    tslib_1.__decorate([
        ViewChild('downloadLink', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], LuxFormFileBase.prototype, "downloadLink", void 0);
    tslib_1.__decorate([
        ViewChild('fileupload', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], LuxFormFileBase.prototype, "fileuploadInput", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxFormFileBase.prototype, "luxSelectedFilesChange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxFormFileBase.prototype, "luxUploadReportProgress", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxFormFileBase.prototype, "luxContentsAsBlob", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormFileBase.prototype, "luxTagId", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], LuxFormFileBase.prototype, "luxMaxSizeMB", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormFileBase.prototype, "luxCapture", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxFormFileBase.prototype, "luxUploadUrl", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxFormFileBase.prototype, "luxDnDActive", void 0);
    tslib_1.__decorate([
        HostBinding('class.lux-file-highlight'),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxFormFileBase.prototype, "isDragActive", void 0);
    tslib_1.__decorate([
        HostListener('dragover', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LuxFormFileBase.prototype, "onDragOver", null);
    tslib_1.__decorate([
        HostListener('dragleave', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LuxFormFileBase.prototype, "onDragLeave", null);
    tslib_1.__decorate([
        HostListener('drop', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LuxFormFileBase.prototype, "onDrop", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxFormFileBase.prototype, "luxUploadActionConfig", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxFormFileBase.prototype, "luxDeleteActionConfig", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxFormFileBase.prototype, "luxViewActionConfig", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxFormFileBase.prototype, "luxDownloadActionConfig", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxFormFileBase.prototype, "luxSelectedFiles", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxFormFileBase.prototype, "luxAccept", null);
    LuxFormFileBase = tslib_1.__decorate([
        tslib_1.__param(0, Optional()),
        tslib_1.__metadata("design:paramtypes", [ControlContainer,
            ChangeDetectorRef,
            LuxConsoleService,
            LuxComponentsConfigService,
            HttpClient,
            LiveAnnouncer])
    ], LuxFormFileBase);
    return LuxFormFileBase;
}(LuxFormComponentBase));
export { LuxFormFileBase };
//# sourceMappingURL=data:application/json;base64,