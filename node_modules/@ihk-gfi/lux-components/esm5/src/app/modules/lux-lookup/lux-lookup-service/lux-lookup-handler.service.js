import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var LuxLookupHandlerService = /** @class */ (function () {
    function LuxLookupHandlerService() {
        this.lookupElements = new Map();
    }
    /**
     * Fügt ein LookupComponent zu der Map hinzu.
     * @param string name
     */
    LuxLookupHandlerService.prototype.addLookupElement = function (name) {
        this.lookupElements.set(name, new Subject());
    };
    /**
     * Gibt das Subject einer LookupComponent als Observable zurück (oder null).
     * @param string name
     * @returns Observable<any> | null
     */
    LuxLookupHandlerService.prototype.getLookupElementObsv = function (name) {
        var lookupEl = this.getLookupElementSubject(name);
        if (lookupEl) {
            return lookupEl.asObservable();
        }
        return null;
    };
    /**
     * Gibt das Subject einer LookupComponent zurück (oder null).
     * @param string name
     * @returns Observable<any> | null
     */
    LuxLookupHandlerService.prototype.getLookupElementSubject = function (name) {
        var lookupEl = this.lookupElements.get(name);
        if (lookupEl) {
            return lookupEl;
        }
        return null;
    };
    /**
     * Stößt das Neuladen von Schlüsseltabellendaten einer LookupComponent an.
     * @param string name
     */
    LuxLookupHandlerService.prototype.reloadData = function (lookupId) {
        var lookupEl = this.getLookupElementSubject(lookupId);
        if (lookupEl) {
            lookupEl.next();
        }
        else {
            console.error('Die Lookup-Komponente ' + lookupId + ' konnte nicht gefunden werden.');
        }
    };
    LuxLookupHandlerService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], LuxLookupHandlerService);
    return LuxLookupHandlerService;
}());
export { LuxLookupHandlerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHV4LWxvb2t1cC1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaWhrLWdmaS9sdXgtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy9sdXgtbG9va3VwL2x1eC1sb29rdXAtc2VydmljZS9sdXgtbG9va3VwLWhhbmRsZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzNDO0lBR0U7UUFGUSxtQkFBYyxHQUE4QixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRS9DLENBQUM7SUFFaEI7OztPQUdHO0lBQ0gsa0RBQWdCLEdBQWhCLFVBQWlCLElBQVk7UUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksT0FBTyxFQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHNEQUFvQixHQUFwQixVQUFxQixJQUFZO1FBQy9CLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHlEQUF1QixHQUF2QixVQUF3QixJQUFZO1FBQ2xDLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7O09BR0c7SUFDSCw0Q0FBVSxHQUFWLFVBQVcsUUFBZ0I7UUFDekIsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELElBQUksUUFBUSxFQUFFO1lBQ1osUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLHdCQUF3QixHQUFHLFFBQVEsR0FBRyxnQ0FBZ0MsQ0FBQyxDQUFDO1NBQ3ZGO0lBQ0gsQ0FBQztJQWxEVSx1QkFBdUI7UUFEbkMsVUFBVSxFQUFFOztPQUNBLHVCQUF1QixDQW1EbkM7SUFBRCw4QkFBQztDQUFBLEFBbkRELElBbURDO1NBbkRZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1eExvb2t1cEhhbmRsZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBsb29rdXBFbGVtZW50czogTWFwPHN0cmluZywgU3ViamVjdDxhbnk+PiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIEbDvGd0IGVpbiBMb29rdXBDb21wb25lbnQgenUgZGVyIE1hcCBoaW56dS5cbiAgICogQHBhcmFtIHN0cmluZyBuYW1lXG4gICAqL1xuICBhZGRMb29rdXBFbGVtZW50KG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMubG9va3VwRWxlbWVudHMuc2V0KG5hbWUsIG5ldyBTdWJqZWN0PGJvb2xlYW4+KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpYnQgZGFzIFN1YmplY3QgZWluZXIgTG9va3VwQ29tcG9uZW50IGFscyBPYnNlcnZhYmxlIHp1csO8Y2sgKG9kZXIgbnVsbCkuXG4gICAqIEBwYXJhbSBzdHJpbmcgbmFtZVxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPGFueT4gfCBudWxsXG4gICAqL1xuICBnZXRMb29rdXBFbGVtZW50T2JzdihuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4gfCBudWxsIHtcbiAgICBjb25zdCBsb29rdXBFbCA9IHRoaXMuZ2V0TG9va3VwRWxlbWVudFN1YmplY3QobmFtZSk7XG4gICAgaWYgKGxvb2t1cEVsKSB7XG4gICAgICByZXR1cm4gbG9va3VwRWwuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpYnQgZGFzIFN1YmplY3QgZWluZXIgTG9va3VwQ29tcG9uZW50IHp1csO8Y2sgKG9kZXIgbnVsbCkuXG4gICAqIEBwYXJhbSBzdHJpbmcgbmFtZVxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPGFueT4gfCBudWxsXG4gICAqL1xuICBnZXRMb29rdXBFbGVtZW50U3ViamVjdChuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsb29rdXBFbCA9IHRoaXMubG9va3VwRWxlbWVudHMuZ2V0KG5hbWUpO1xuICAgIGlmIChsb29rdXBFbCkge1xuICAgICAgcmV0dXJuIGxvb2t1cEVsO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdMO2w590IGRhcyBOZXVsYWRlbiB2b24gU2NobMO8c3NlbHRhYmVsbGVuZGF0ZW4gZWluZXIgTG9va3VwQ29tcG9uZW50IGFuLlxuICAgKiBAcGFyYW0gc3RyaW5nIG5hbWVcbiAgICovXG4gIHJlbG9hZERhdGEobG9va3VwSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGxvb2t1cEVsID0gdGhpcy5nZXRMb29rdXBFbGVtZW50U3ViamVjdChsb29rdXBJZCk7XG4gICAgaWYgKGxvb2t1cEVsKSB7XG4gICAgICBsb29rdXBFbC5uZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RpZSBMb29rdXAtS29tcG9uZW50ZSAnICsgbG9va3VwSWQgKyAnIGtvbm50ZSBuaWNodCBnZWZ1bmRlbiB3ZXJkZW4uJyk7XG4gICAgfVxuICB9XG59XG4iXX0=