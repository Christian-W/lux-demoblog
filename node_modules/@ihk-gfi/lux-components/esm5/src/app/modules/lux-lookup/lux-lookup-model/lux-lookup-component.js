// tslint:disable:max-line-length
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { LuxBehandlungsOptionenUngueltige, LuxLookupParameters } from './lux-lookup-parameters';
import { LuxFormComponentBase } from '../../lux-form/lux-form-model/lux-form-component-base.class';
var LuxLookupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LuxLookupComponent, _super);
    function LuxLookupComponent(lookupService, lookupHandler, controlContainer, cdr, logger, componentsConfigService) {
        var _this = _super.call(this, controlContainer, cdr, logger, componentsConfigService) || this;
        _this.LuxBehandlungsOptionenUngueltige = LuxBehandlungsOptionenUngueltige;
        _this.luxBehandlungUngueltige = LuxBehandlungsOptionenUngueltige.ausgrauen;
        _this.luxDataLoaded = new EventEmitter();
        _this.luxValueChange = new EventEmitter();
        _this.entries = [];
        _this.lookupService = lookupService;
        _this.lookupHandler = lookupHandler;
        _this.componentsConfigService = componentsConfigService;
        return _this;
    }
    Object.defineProperty(LuxLookupComponent.prototype, "luxValue", {
        get: function () {
            return this.getValue();
        },
        set: function (value) {
            this.setValue(value);
        },
        enumerable: true,
        configurable: true
    });
    LuxLookupComponent.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        if (!this.luxLookupId) {
            console.error("Die Lookup-Komponente mit der Tabellen-Nr. " + this.luxTableNo + " besitzt keine LookupId. Bitte tragen Sie diese nach.");
        }
        this.lookupHandler.addLookupElement(this.luxLookupId);
        this.lookupHandler.getLookupElementObsv(this.luxLookupId).subscribe(function () {
            _this.fetchLookupData();
        });
        this.configSubscription = this.componentsConfigService.config.subscribe(function (newConfig) {
            _this.apiPath = newConfig.lookupServiceUrl;
            _this.lookupHandler.reloadData(_this.luxLookupId);
        });
    };
    LuxLookupComponent.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.configSubscription.unsubscribe();
    };
    /**
     * Gibt zurueck, ob die RenderProperty eine Funktion ist oder nicht.
     *
     * @returns boolean
     */
    LuxLookupComponent.prototype.isRenderPropAFunction = function () {
        return typeof this.luxRenderProp === 'function';
    };
    /**
     * Gibt zurück ob sich das entsprechende Element in der Liste ungültiger Elemente befindet.
     * @param LuxLookupTableEntry entry
     * @returns boolean
     */
    LuxLookupComponent.prototype.isUngueltig = function (entry) {
        var isUngueltig = false;
        if (entry) {
            if (!Array.isArray(entry)) {
                if (entry.gueltigkeitBis) {
                    isUngueltig = Date.now() > +entry.gueltigkeitBis;
                }
            }
            else {
                entry.forEach(function (element) {
                    if (element.gueltigkeitBis && !isUngueltig) {
                        isUngueltig = Date.now() > +element.gueltigkeitBis;
                    }
                });
            }
        }
        return isUngueltig;
    };
    /**
     * Gibt zurück ob ungültige Einträge angezeigt werden sollen.
     * @returns boolean
     */
    LuxLookupComponent.prototype.showUngueltige = function () {
        return (this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.ausgrauen ||
            this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.anzeigen);
    };
    /**
     * Gibt zurück ob ungültige Einträge deaktiviert werden sollen.
     * @returns boolean
     */
    LuxLookupComponent.prototype.disableUngueltige = function () {
        return this.luxBehandlungUngueltige === this.LuxBehandlungsOptionenUngueltige.ausgrauen;
    };
    /**
     * Gibt die mitgegebenen Styles abhaengig ob das Element invalid ist zurueck.
     * @param boolean invalid
     * @returns LuxLookupOptionStyle
     */
    LuxLookupComponent.prototype.getStyles = function (invalid) {
        if (invalid) {
            return this.luxCustomInvalidStyles ? this.luxCustomInvalidStyles : {};
        }
        return this.luxCustomStyles ? this.luxCustomStyles : {};
    };
    /**
     * @override errorMessageModifier - Modifikation der Fehlermeldung
     * @param value
     * @param errors
     */
    LuxLookupComponent.prototype.errorMessageModifier = function (value, errors) {
        if (errors['ungueltig']) {
            return 'Der ausgewählte Wert ist ungültig.';
        }
        return undefined;
    };
    LuxLookupComponent.prototype.getLabel = function (entry) {
        if (this.isRenderPropAFunction()) {
            return this.luxRenderProp(entry);
        }
        if (entry[this.luxRenderProp]) {
            return entry[this.luxRenderProp];
        }
        return 'Fehler beim Auslesen (Property unbekannt)';
    };
    /**
     * Holt die Lookup-Table Daten vom Backend
     */
    LuxLookupComponent.prototype.fetchLookupData = function () {
        var _this = this;
        var backendRequest = this.lookupService.getLookupTable(this.luxTableNo, this.luxParameters, this.apiPath);
        backendRequest.subscribe(function (entries) {
            _this.setLookupData(entries);
            _this.luxDataLoaded.emit(true);
        }, function () {
            _this.luxDataLoaded.emit(false);
        });
    };
    /**
     * Setzt die aktuellen Werte auf die mitgegebenen Entries.
     * @param entries
     */
    LuxLookupComponent.prototype.setLookupData = function (entries) {
        var _this = this;
        this.entries = entries;
        if (this.entries) {
            // Merken welche Eintraege ungueltig sind, um bei vielen Informationen
            // nicht die ganzen Funktionsaufrufe zu haben
            this.entries.forEach(function (entry) {
                entry.isUngueltig = _this.isUngueltig(entry);
            });
        }
    };
    // region Overridden methods
    LuxLookupComponent.prototype.notifyFormValueChanged = function (formValue) {
        this.luxValueChange.emit(formValue);
    };
    LuxLookupComponent.prototype.triggerOutputPatternCheck = function () {
        this.checkOutputPatternViolation(this.luxValueChange.observers);
    };
    LuxLookupComponent.prototype.triggerInputPatternCheck = function (simpleChanges) {
        this.checkInputPatternViolation(simpleChanges.luxValue);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxLookupComponent.prototype, "luxPlaceholder", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], LuxLookupComponent.prototype, "luxReadonly", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxLookupComponent.prototype, "luxLookupId", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxLookupComponent.prototype, "luxTableNo", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxLookupComponent.prototype, "luxRenderProp", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxLookupComponent.prototype, "luxBehandlungUngueltige", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", LuxLookupParameters)
    ], LuxLookupComponent.prototype, "luxParameters", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxLookupComponent.prototype, "luxCustomStyles", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LuxLookupComponent.prototype, "luxCustomInvalidStyles", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], LuxLookupComponent.prototype, "luxTagId", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxLookupComponent.prototype, "luxDataLoaded", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], LuxLookupComponent.prototype, "luxValueChange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LuxLookupComponent.prototype, "luxValue", null);
    return LuxLookupComponent;
}(LuxFormComponentBase));
export { LuxLookupComponent };
//# sourceMappingURL=data:application/json;base64,