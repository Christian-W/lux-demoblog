import { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { LuxLookupComponent } from '../lux-lookup-model/lux-lookup-component';
import { LuxLookupService } from '../lux-lookup-service/lux-lookup.service';
import { ControlContainer } from '@angular/forms';
import { Observable } from 'rxjs';
import { MatAutocomplete, MatAutocompleteSelectedEvent, MatAutocompleteTrigger } from '@angular/material';
import { LuxLookupHandlerService } from '../lux-lookup-service/lux-lookup-handler.service';
import { LuxLookupTableEntry } from '../lux-lookup-model/lux-lookup-table-entry';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
export declare class LuxLookupAutocompleteComponent extends LuxLookupComponent implements OnInit {
    filteredEntries: Observable<LuxLookupTableEntry[]>;
    entriesCount: number;
    latestSearchValue: string;
    luxDebounceTime: number;
    luxMaximumDisplayed: number;
    luxBlur: EventEmitter<any>;
    luxFocus: EventEmitter<any>;
    matAutocomplete: MatAutocomplete;
    matAutocompleteTrigger: MatAutocompleteTrigger;
    constructor(lookupService: LuxLookupService, lookupHandler: LuxLookupHandlerService, controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, componentsConfigService: LuxComponentsConfigService);
    ngOnInit(): void;
    /**
     * Vergleicht den eingegebenen Wert mit den Display-Werten der Einträge.
     * @param filterTerm
     * @returns LuxLookupTableEntry[]
     */
    filter(filterTerm: any): LuxLookupTableEntry[];
    /**
     * Bestimmt wie eingegebene Optionen dargestellt werden.
     * @param option
     * @returns string
     */
    displayFn(option: LuxLookupTableEntry): string;
    /**
     * Wird beim Klick auf das Input Feld aufgerufen.
     * @param clickEvent
     */
    onClick(clickEvent: any): void;
    /**
     * Setzt den aktuellen Value-Wert auf den ausgewählten Wert.
     * @param MatAutocompleteSelectedEvent $event
     */
    selected($event: MatAutocompleteSelectedEvent): void;
    /**
     * @override errorMessageModifier - Modifikation der Fehlermeldung
     * @param value
     * @param errors
     */
    errorMessageModifier(value: any, errors: any): string;
}
