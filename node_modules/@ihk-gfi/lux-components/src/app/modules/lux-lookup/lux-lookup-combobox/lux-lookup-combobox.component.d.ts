import { AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { LuxLookupTableEntry } from '../lux-lookup-model/lux-lookup-table-entry';
import { LuxLookupService } from '../lux-lookup-service/lux-lookup.service';
import { ControlContainer } from '@angular/forms';
import { LuxLookupComponent } from '../lux-lookup-model/lux-lookup-component';
import { MatSelect, MatSelectChange } from '@angular/material';
import { LuxLookupHandlerService } from '../lux-lookup-service/lux-lookup-handler.service';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
export declare class LuxLookupComboboxComponent extends LuxLookupComponent implements AfterViewInit {
    luxMultiple: boolean;
    luxEntryBlockSize: number;
    displayedEntries: LuxLookupTableEntry[];
    matSelect: MatSelect;
    constructor(lookupService: LuxLookupService, lookupHandler: LuxLookupHandlerService, controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, componentsConfigService: LuxComponentsConfigService);
    ngAfterViewInit(): void;
    /**
     * Vergleicht die Optionen anhand der Key-Werte
     * @param value1
     * @param value2
     * @returns boolean
     */
    compareByKey(value1: any, value2: any): boolean;
    setLookupData(entries: LuxLookupTableEntry[]): void;
    /**
     * Setzt den aktuellen Value-Wert auf den ausgew√§hlten Wert.
     * @param $event
     */
    selected($event: MatSelectChange): void;
    /**
     * Fuegt beim Oeffnen des Selects einen Scrolllistener hinzu.
     */
    private registerPanelScrollEvent;
    /**
     * Stoesst das Nachladen von Elementen an, wenn ein bestimmter Scrollwert erreicht wurde.
     * @param event - ScrollEvent
     */
    private loadOnScroll;
    /**
     * Laed den naechsten Block Daten aus den Entries nach.
     */
    private reloadNextDataBlock;
}
