import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { LuxBehandlungsOptionenUngueltige, LuxLookupParameters } from './lux-lookup-parameters';
import { LuxLookupTableEntry } from './lux-lookup-table-entry';
import { LuxLookupService } from '../lux-lookup-service/lux-lookup.service';
import { ControlContainer } from '@angular/forms';
import { LuxFormComponentBase } from '../../lux-form/lux-form-model/lux-form-component-base.class';
import { LuxLookupHandlerService } from '../lux-lookup-service/lux-lookup-handler.service';
import { LuxLookupErrorStateMatcher } from './lux-lookup-error-state-matcher';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
export declare abstract class LuxLookupComponent extends LuxFormComponentBase implements OnInit, OnChanges, OnDestroy {
    LuxBehandlungsOptionenUngueltige: typeof LuxBehandlungsOptionenUngueltige;
    lookupService: LuxLookupService;
    lookupHandler: LuxLookupHandlerService;
    componentsConfigService: LuxComponentsConfigService;
    stateMatcher: LuxLookupErrorStateMatcher;
    apiPath: string;
    luxPlaceholder: string;
    luxReadonly: boolean;
    luxLookupId: string;
    luxTableNo: string;
    luxRenderProp: any;
    luxBehandlungUngueltige: LuxBehandlungsOptionenUngueltige;
    luxParameters: LuxLookupParameters;
    luxCustomStyles: any;
    luxCustomInvalidStyles: any;
    luxTagId: string;
    luxDataLoaded: EventEmitter<boolean>;
    luxValueChange: EventEmitter<LuxLookupTableEntry | LuxLookupTableEntry[]>;
    entries: LuxLookupTableEntry[];
    private configSubscription;
    protected constructor(lookupService: LuxLookupService, lookupHandler: LuxLookupHandlerService, controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, componentsConfigService: LuxComponentsConfigService);
    luxValue: any;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Gibt zurueck, ob die RenderProperty eine Funktion ist oder nicht.
     *
     * @returns boolean
     */
    isRenderPropAFunction(): boolean;
    /**
     * Gibt zurück ob sich das entsprechende Element in der Liste ungültiger Elemente befindet.
     * @param LuxLookupTableEntry entry
     * @returns boolean
     */
    isUngueltig(entry: LuxLookupTableEntry | LuxLookupTableEntry[]): boolean;
    /**
     * Gibt zurück ob ungültige Einträge angezeigt werden sollen.
     * @returns boolean
     */
    showUngueltige(): boolean;
    /**
     * Gibt zurück ob ungültige Einträge deaktiviert werden sollen.
     * @returns boolean
     */
    disableUngueltige(): boolean;
    /**
     * Gibt die mitgegebenen Styles abhaengig ob das Element invalid ist zurueck.
     * @param boolean invalid
     * @returns LuxLookupOptionStyle
     */
    getStyles(invalid: boolean): any;
    /**
     * @override errorMessageModifier - Modifikation der Fehlermeldung
     * @param value
     * @param errors
     */
    errorMessageModifier(value: any, errors: any): string;
    getLabel(entry: any): string;
    /**
     * Holt die Lookup-Table Daten vom Backend
     */
    protected fetchLookupData(): void;
    /**
     * Setzt die aktuellen Werte auf die mitgegebenen Entries.
     * @param entries
     */
    protected setLookupData(entries: LuxLookupTableEntry[]): void;
    notifyFormValueChanged(formValue: any): void;
    protected triggerOutputPatternCheck(): void;
    protected triggerInputPatternCheck(simpleChanges: SimpleChanges): void;
}
