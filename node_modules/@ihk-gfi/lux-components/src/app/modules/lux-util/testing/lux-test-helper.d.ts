import { DebugElement, Provider } from '@angular/core';
import { ComponentFixture } from '@angular/core/testing';
export declare class LuxTestHelper {
    static COMMON_ANGULAR_MODULES: any[];
    static MATERIAL_MODULES: any[];
    static LUX_MODULES: any[];
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     */
    static setInputValue(input: any, value: any, fixture: any): void;
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     * Wartet asynchrone Aufrufe ab und ruft die ChangeDetection auf
     * @param fixture
     * @param tickDuration
     */
    static wait(fixture: any, tickDuration?: number): void;
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     * Sendet ein Klick-Event ab und wartet dann.
     * @param fixture
     * @param DebugElement
     */
    static click(fixture: any, debugElement: DebugElement): void;
    /**
     * Wichtig: aus fakeAsync-Block heraus aufrufen, da hier tick() genutzt wird.
     * Sendet ein Change-Event ab und wartet dann.
     * @param fixture
     * @param DebugElement
     */
    static radioButtonChange(fixture: any, radioButton: DebugElement): void;
    /**
     * Erstellt eine ComponentFixture fuer die mitgegebene Komponente, optional ist es moeglich
     * weitere Provider und Declarations einzutragen. Diese werden dann im Testmodul eingetragen.
     * @param component
     * @param providers
     * @param declarations
     * @deprecated Stattdessen configureTestModule in Kombination mit configureTestSuite verwenden --> erheblich performanter
     */
    static createComponent(component: any, providers?: Provider[], declarations?: any[]): ComponentFixture<any>;
    /** Utility to dispatch any event on a Node. */
    static dispatchEvent(node: Node | Window, event: Event): Event;
    /** Shorthand to dispatch a fake event on a specified node. */
    static dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event;
    /** Shorthand to dispatch a keyboard event with a specified key code. */
    static dispatchKeyboardEvent(node: Node, type: string, keyCode: number, target?: Element): KeyboardEvent;
    /** Focuses an input and sets its value. Dispatches an fake input event afterwards. */
    static typeInElement(element: HTMLInputElement, value: string, noInputEvent?: boolean): void;
    /** Steuerung und triggern von Overlays implementieren **/
    /**
     * Inserts data into an input field, that has to update asynchrounos before calling a callback-function
     * Allows to use RxJs Interval-Timers within the Target-Components.
     */
    static typeInElementAsynch(text: string, fixture: ComponentFixture<any>, element: HTMLInputElement, callback: any): void;
    /** Dispatches a keydown event from an element. */
    static createKeyboardEvent(type: string, keyCode: number, target?: Element, key?: string): any;
    /** Creates a fake event object with any desired event type. */
    static createFakeEvent(type: string, canBubble?: boolean, cancelable?: boolean): any;
    /**
     * Selektiert ein Element anhand der Query von dem Fixture
     */
    static selectOneFromFixture(fixture: ComponentFixture<any>, query: string): DebugElement;
    /**
     * Selektiert ein Array von Elementen anhand der Query von dem Fixture
     */
    static selectAllFromFixture(fixture: ComponentFixture<any>, query: string): DebugElement[];
    /**
     * Entfernt nicht-ASCII-Chars aus dem String (Beim IE wichtig, dieser fügt gerne versteckte Steuerzeichen
     * in Input-Feldern an die Strings).
     * @param dateString
     */
    static stringWithoutASCIIChars(dateString: string): string;
    /**
     *  Deaktiviert den Reset des Testmoduls am Ende eines Testdurchlaufs.
     *  Verbessert die Performance der Karma-Tests erheblich.
     *  Am Ende der Testsuite wird diese Funktion wieder aktiviert.
     *
     *  Funktion dafür einfach am Anfang einer Testsuite (erstes describe) aufrufen und in einem beforeAll das Testmodul
     *  erzeugen. Dieses wird nun nicht mehr nach jedem Test neu erzeugt.
     */
    static configureTestSuite(): void;
    /**
     * Konfiguriert das TestModul für eine Testsuite, kann dabei Provider und Komponenten (Deklarationen) entgegennehmen.
     * @param providers
     * @param declarations
     * @param imports
     */
    static configureTestModule(providers?: Provider[], declarations?: any[], imports?: any[]): void;
    /**
     * Erstellt ein leeres File-Objekt mit Namen und Typ via Blob-Constructor (um Edge/IE-Fehler zu vermeiden).
     * @param name
     * @param type
     */
    static createFileBrowserSafe(name: any, type: any): File;
}
