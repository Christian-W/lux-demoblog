import { Observable } from 'rxjs';
/**
 * Der LuxStorageService speichert Daten im lokalen Browserstorage.
 * Wenn man beim Speichern (Methode -> setItem) angibt, dass es sich um sensible Daten handelt,
 * können diese einfach über die Methode 'clearSensitiveItems' gelöscht werden.
 */
export declare class LuxStorageService {
    private readonly postfixSensitive;
    private itemSources;
    constructor();
    /**
     * Diese Methode liefert den Wert für den übergebenen Schlüssel zurück.
     *
     * @param key - Der eindeutige Schlüssel.
     * @returns Liefert den Wert für den übergebenen Schlüssel zurück.
     */
    getItem(key: string): string;
    /**
     * Diese Methode liefert ein Observable zurück, das über alle Änderungen an dem Schlüssel informiert wird.
     *
     * @param key - Der eindeutige Schlüssel.
     * @returns Liefert ein Observable zurück, das über alle Änderungen an dem Schlüssel informiert wird.
     */
    getItemAsObservable(key: string): Observable<string>;
    /**
     * Diese Methode setzt den übergebenen Wert für den Schlüssel. Zusätzlich muss angegeben werden, ob es sich um
     * sensible oder personenbezogene Daten handelt.
     *
     * @param key - Der eindeutige Schlüssel.
     * @param value - Der neue Wert.
     * @param sensitive - Gibt an, ob es sich um sensible oder personenbezogene Daten handelt. Diese können leicht über
     *                    die Methode 'clearSensitiveItems' (z.B. beim Ausloggen) gelöscht werden.
     */
    setItem(key: string, value: string, sensitive: boolean): void;
    /**
     * Diese Methode entfernt den übergebenen Schlüssel.
     *
     * @param key - Der eindeutige Schlüssel.
     */
    removeItem(key: string): void;
    /**
     * Diese Methode löscht alle sensiblen und personenbezogenen Einträge (d.h. alle Items bei denen das Flag 'sensitive'
     * auf true gesetzt wurde).
     */
    clearSensitiveItems(): void;
    /**
     * Diese Methode löscht alle Einträge aus dem Storage.
     */
    clearAll(): void;
}
