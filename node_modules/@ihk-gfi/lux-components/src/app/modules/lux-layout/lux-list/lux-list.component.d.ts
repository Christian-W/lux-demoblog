import { AfterViewInit, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { LuxListItemComponent } from './lux-list-subcomponents/lux-list-item.component';
export declare class LuxListComponent implements OnInit, AfterViewInit, OnDestroy {
    private _luxSelectedPosition;
    private previousFocusedPosition;
    private clickSubscriptions;
    private listItemsSubscription;
    private keyManager;
    luxItems: QueryList<LuxListItemComponent>;
    luxFocusedItemChange: EventEmitter<LuxListItemComponent>;
    luxFocusedPositionChange: EventEmitter<number>;
    luxSelectedPositionChange: EventEmitter<number>;
    luxEmptyIconName: string;
    luxEmptyIconSize: string;
    luxEmptyLabel: string;
    role: string;
    tabindex: string;
    ariaMulti: string;
    onKeydown($event: any): void;
    luxSelectedPosition: number;
    constructor();
    ngOnInit(): void;
    isEmpty(): boolean;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Wird beim Drücken einer Taste ausgeführt und handelt die Aktionen bei speziellen Tasten
     * (UP_ARROW || DOWN_ARROW werden vom KeyManager selbstständig gepflegt)
     * @param $event
     */
    keydown($event: KeyboardEvent): void;
    /**
     * Auf Click-Events der hier bekannten LuxListItems hören und entsprechend das selektierte ListItem aktualisieren.
     */
    private listenForClicks;
    /**
     * Merkt sich die position als Selektions-Position und aktualisiert den luxSelected-Wert
     * aller luxItems, die hier bekannt sind.
     * @param position
     */
    private select;
    /**
     * Merkt sich die position als Fokus-Position und aktualisiert die CSS-Klassen der ListItems.
     * @param position
     */
    private focus;
    /**
     * Scrollt zu dem Element an der position.
     * @param position
     */
    private scroll;
    /**
     * Gibt das ListItem an der position zurück bzw. null wenn die luxItems undefined/null sind.
     * @param position
     */
    private findListItem;
}
