import { AfterViewInit, ElementRef, OnDestroy, OnInit, QueryList } from '@angular/core';
import { LuxSideNavItemComponent } from './lux-side-nav-subcomponents/lux-side-nav-item.component';
export declare class LuxSideNavComponent implements OnInit, AfterViewInit, OnDestroy {
    luxDashboardLink: string;
    luxDashboardLinkTitle: string;
    luxOpenLinkBlank: boolean;
    sideNavItems: QueryList<LuxSideNavItemComponent>;
    directSideNavItems: QueryList<LuxSideNavItemComponent>;
    sideNavEl: ElementRef;
    sideNavHeaderEl: ElementRef;
    sideNavFooterEl: ElementRef;
    focusElement: any;
    sideNavExpanded: boolean;
    height: number;
    width: number;
    visibility: string;
    private itemClickSubscriptions;
    keyEvent(event: KeyboardEvent): void;
    windowResize(): void;
    constructor();
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    toggle(): void;
    /**
     * Wenn die Animation beendet ist, wird das Menü ausgeblendet, damit der Fokus weiter zum Inhalt springt und nicht
     * durch das versteckte Menü wandert. Das ist auch für Screenreader nötig.
     */
    updateSideNavAfterAnimationIsFinished(): void;
    open(): void;
    close(): void;
    /**
     * Berechnet die Höhe für den Container der SideNavMenuItems.
     * Dafür wird die Gesamthöhe minus der Höhe des Headers und des Footers sowie eine feste Höhe
     * für den App-Header gerechnet.
     */
    private calculateWidthHeight;
    /**
     * Hängt sich an die Klick-Events der einzelnen SideNavItems, um so, je nach Einstellung der Items,
     * die SideNav zu schließen.
     */
    private updateItemClickListeners;
}
