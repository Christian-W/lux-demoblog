import { AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, ViewContainerRef } from '@angular/core';
import { LuxListItemComponent } from '../lux-list/lux-list-subcomponents/lux-list-item.component';
import { LuxTabsComponent } from '../lux-tabs/lux-tabs.component';
import { LuxMasterDetailMobileHelperService } from './lux-master-detail-mobile-helper.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
export declare class LuxMasterDetailComponent implements OnInit, AfterViewInit, DoCheck, OnDestroy {
    mobileHelperService: LuxMasterDetailMobileHelperService;
    private cdr;
    private cfr;
    private liveAnnouncer;
    luxSelectedDetailChange: EventEmitter<any>;
    luxScrolled: EventEmitter<any>;
    masterSimple: any;
    detailView: any;
    masterFooter: ElementRef;
    luxMasterQueryList: QueryList<ElementRef>;
    luxMasterListItemQueryList: QueryList<LuxListItemComponent>;
    masterHeader: ElementRef;
    luxMasterEntryElementRef: ElementRef;
    tabsComponent: LuxTabsComponent;
    masterSpinnerCard: ElementRef;
    detailFrame: ElementRef;
    detailEmpty: ElementRef;
    detailViewContainerRef: ViewContainerRef;
    masterContainer: ElementRef;
    overflowY: boolean;
    private _luxMasterList;
    private _luxOpen;
    private _luxSelectedDetail;
    private masterListLength;
    private maxItemsVisible;
    private updateDetail$;
    private updateDetailSubscription;
    detailContext: {
        $implicit: {};
    };
    flexMaster: string;
    flexDetail: string;
    selectedPosition: number;
    alignEmptyIndicators: boolean;
    luxEmptyIconMaster: string;
    luxEmptyLabelMaster: string;
    luxEmptyIconDetail: string;
    luxEmptyLabelDetail: string;
    luxEmptyIconMasterSize: string;
    luxEmptyIconDetailSize: string;
    luxMasterSpinnerDelay: number;
    luxTagIdMaster: string;
    luxTagIdDetail: string;
    luxTitleLineBreak: boolean;
    luxMasterIsLoading: boolean;
    luxCompareWith: (o1: any, o2: any) => boolean;
    luxOpen: boolean;
    luxSelectedDetail: any;
    luxMasterList: any[];
    constructor(mobileHelperService: LuxMasterDetailMobileHelperService, cdr: ChangeDetectorRef, cfr: ComponentFactoryResolver, liveAnnouncer: LiveAnnouncer);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    /**
     * Wenn in der LuxList ein neuer Selected-Wert gepusht wird, diesen abfangen und
     * ein neues Detail auswählen.
     * @param $event
     */
    onSelectedChange($event: number): void;
    /**
     * Bestimmt ob die Masterliste auf- oder eingeklappt ist.
     * @param open
     */
    toggleList(open: boolean): void;
    /**
     * Prueft ob die Detailansicht gerade fuer den User sichtbar ist.
     * @returns boolean
     */
    isDetailInvisible(): boolean;
    onInfiniteScrollingLoad($event: any): void;
    onSwipeLeft(): void;
    onSwipeRight(): void;
    /**
     * Kapselung von der übergebenen luxCompareWith-Funktion.
     * Fängt undefinierte Objekte ab und returned stattdessen false.
     * @param o1
     * @param o2
     */
    compareObjects(o1: any, o2: any): boolean;
    /**
     * Steuert das Breitenverhaeltnis von Master und Detail je nachdem
     * ob der Master auf- oder eingeklappt ist und ob eine Mobilansicht aktiv ist.
     */
    private updateOpen;
    /**
     * Kümmert sich um Änderungen an der HTML-Node der Master-Liste.
     * Rückt dabei das selektierte Element in den Fokus und berechnet wie viele Elemente
     * gerade in der Liste sichtbar sein können (für das Durchschalten mit Pfeiltasten benötigt).
     */
    private handleMasterQueryList;
    /**
     * Kümmert sich um die Kollabierung der Master-Liste, wenn zwischen Mobil- und Desktopansicht gewechselt wird.
     */
    private handleViewCollapse;
    /**
     * Kümmert sich um Änderungen an dem selektierten Detail.
     * Dabei werden mehrere Zuweisungen an das Detail über throttleTime gebündelt und nur das Aktuellste genommen.
     * Anschließend wird die Komponente angewiesen das neue Detail-Objekt zu rendern.
     */
    private handleDetailUpdate;
    /**
     * Wird aufgerufen nachdem ein neues Detail-Template gerendert wurde und aktualisiert
     * luxSelectedDetail dementsprechend.
     */
    private setNewDetail;
    /**
     * Kümmert sich um den Fall, dass die Master-Liste selbst sich ändert.
     */
    private handleMasterListUpdate;
    /**
     * Prüft ob das Header- oder -Footer-Element der Masterliste ca. 50% der Master-Höhe einnehmen.
     *
     * Wenn ja, wird die Ausrichtung des Master-Empty-Labels und Master-Empty-Icons nicht mehr anhand des Detail bestimmt.
     */
    private checkEmptyIndicatorAlignment;
    /**
     * Meldet über den LiveAnnouncer, dass evtl. weitere Daten via InfiniteScrolling nachgeladen werden könnten.
     *
     * "assertive", damit die Meldung auf jeden Fall vom ScreenReader vorgelesen wird und nicht von etwaigen anderen
     * Aussagen verdeckt wird.
     */
    private announcePossibleInfiniteScrolling;
}
