import { ComponentType } from '@angular/cdk/portal';
import { MatSnackBar, MatSnackBarDismiss } from '@angular/material';
import { Observable } from 'rxjs';
import { LuxSnackbarConfig } from './lux-snackbar-config';
/**
 * Über den LuxSnackbarService können einfach Snackbarinfos angezeigt werden.
 */
export declare class LuxSnackbarService {
    private snackBar;
    private static readonly VERTICAL_POSITION;
    private static readonly HORIZONTAL_POSITION;
    constructor(snackBar: MatSnackBar);
    /**
     * Diese Methode öffnet eine Snackbar mit einem Text.
     *
     * @param message Ein Text.
     * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
     * muss der Wert 0 angegeben werden.
     * @param actionName Eine Bezeichnung (z.B. Wiederherstellen) für die Action. Dieser Parameter ist optional und
     * muss nicht angegeben werden.
     */
    openText(message: string, duration: number, actionName?: string): void;
    /**
     * Diese Methode öffnet eine Snackbar, in der die übergebene Komponente angezeigt wird.
     *
     * @param component Die Komponente, die angezeigt werden soll.
     * @param duration Eine Dauer in Msec (z.B. 2000 = 2 Sekunden). Wenn die Snackbar permanent angezeigt werden soll,
     * muss der Wert 0 angegeben werden.
     * @param data Ein Datenobjekt, das an die Komponente weitergereicht wird. Mit dem Code folgenden Code, können die
     * Daten verwendet werden. constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any).
     */
    openComponent(component: ComponentType<any>, duration?: number, data?: any): void;
    /**
     * Oeffnet eine Snackbar anhand der uebergebenen Konfiguration.
     * Ermoeglicht eine genaue Konfiguration der Snackbar.
     * @param config
     */
    open(duration: number, config?: LuxSnackbarConfig): void;
    /**
     * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
     * geklickt wird.
     */
    onAction(): Observable<void>;
    /**
     * Diese Methode liefert ein Observable zurück, das den Aufrufer benachrichtigt, wenn die Action in der Snackbar
     * geklickt wird.
     */
    afterDismissed(): Observable<MatSnackBarDismiss>;
    /**
     * Diese Methode blendet die Snackbar aus.
     */
    dismiss(): void;
}
