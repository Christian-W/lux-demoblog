import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnInit, SimpleChanges } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { MatAutocompleteSelectedEvent, MatAutocompleteTrigger } from '@angular/material';
import { LuxFormComponentBase } from '../lux-form-model/lux-form-component-base.class';
import { Observable } from 'rxjs';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
export declare class LuxAutocompleteComponent extends LuxFormComponentBase implements OnInit, AfterViewInit {
    protected config: LuxComponentsConfigService;
    private selected$;
    filteredOptions: Observable<any>;
    luxPlaceholder: string;
    luxReadonly: boolean;
    luxOptions: any[];
    luxOptionLabelProp: string;
    luxLookupDelay: number;
    luxErrorMessageNotAnOption: string;
    luxTagId: string;
    luxSelectAllOnClick: boolean;
    luxStrict: boolean;
    luxValueChange: EventEmitter<any>;
    luxOptionSelected: EventEmitter<any>;
    luxBlur: EventEmitter<any>;
    luxFocus: EventEmitter<any>;
    matAutoComplete: MatAutocompleteTrigger;
    matInput: ElementRef;
    luxValue: any;
    constructor(controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, config: LuxComponentsConfigService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /**
     * @override errorMessageModifier - Modifikation der Fehlermeldung
     * @param value
     * @param errors
     */
    errorMessageModifier(value: any, errors: any): string;
    /**
     * Regelt die Darstellung der gewaehlten Option im Normalfall.
     * (Ausnahme: Focus-Verlust)
     * @param option
     * @returns string
     */
    displayFn(option: any): string;
    /**
     * Filtert das Options-Array nach dem filterTerm und
     * gibt das Ergebnis als Array zurueck.
     * @param filterTerm
     * @returns any[]
     */
    filter(filterTerm: any): any[];
    /**
     * Click-Event Handling
     * Selektiert den gesamten Text im Input, wenn selectAllOnClick = true ist.
     * @param clickEvent
     */
    onClick(clickEvent: any): void;
    /**
     * Gibt den darzustellenden Wert einer Option bzw.
     * die Option selbst (wenn string) wider.
     * @param option
     * @returns any
     */
    getOptionLabel(option: any): any;
    selected($event: MatAutocompleteSelectedEvent): void;
    private handleErrors;
    private handleOtherErrors;
    private handleIncorrectError;
    notifyFormValueChanged(formValue: any): void;
    protected triggerOutputPatternCheck(): void;
    protected triggerInputPatternCheck(simpleChanges: SimpleChanges): void;
}
