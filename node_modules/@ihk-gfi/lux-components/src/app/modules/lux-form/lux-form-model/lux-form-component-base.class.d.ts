import { ChangeDetectorRef, DoCheck, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlContainer, FormGroup, ValidatorFn } from '@angular/forms';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { Subscription } from 'rxjs';
import { LuxFormLabelComponent } from '../lux-form-control/lux-form-control-subcomponents/lux-form-label.component';
import { LuxFormHintComponent } from '../lux-form-control/lux-form-control-subcomponents/lux-form-hint.component';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
export declare abstract class LuxFormComponentBase implements OnInit, OnChanges, DoCheck, OnDestroy {
    protected cdr: ChangeDetectorRef;
    protected logger: LuxConsoleService;
    protected configService: LuxComponentsConfigService;
    protected static readonly DEFAULT_CTRL_NAME: string;
    protected _formValueChangeSubscr: Subscription;
    protected _formStatusChangeSubscr: Subscription;
    protected _configSubscription: Subscription;
    private hasHadRequiredValidator;
    protected latestErrors: any;
    protected preventUnwantedValueChange: boolean;
    protected displayBindingDebugHint: boolean;
    protected _initialValue: any;
    protected _luxDisabled: boolean;
    protected _luxReadonly: boolean;
    protected _luxRequired: boolean;
    errorMessage: string;
    controlContainer: ControlContainer;
    formGroup: FormGroup;
    formControl: AbstractControl;
    uid: string;
    formLabelComponent: LuxFormLabelComponent;
    formHintComponent: LuxFormHintComponent;
    cssReadonly: boolean;
    luxFocusIn: EventEmitter<any>;
    luxFocusOut: EventEmitter<any>;
    luxDisabledChange: EventEmitter<any>;
    luxHint: string;
    luxLabel: string;
    luxControlBinding: string;
    luxControlValidators: ValidatorFn | ValidatorFn[];
    luxErrorMessage: string;
    luxErrorCallback: Function;
    luxDisabled: boolean;
    luxReadonly: boolean;
    luxRequired: boolean;
    protected constructor(controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, configService: LuxComponentsConfigService);
    ngOnInit(): void;
    ngOnChanges(simpleChanges: SimpleChanges): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    isInForm(): boolean;
    /**
     * Versucht eine Fehlermeldung für diese Komponente auszulesen und gibt diese zurück.
     * Wenn das Element nicht den "touched"-Zustand besitzt, wird keine Fehlermeldung zurückgegeben.
     */
    protected fetchErrorMessage(): string;
    /**
     * Mappt den Input-Wert aus disabled auf das FormControl.
     */
    protected handleFormDisabledState(): void;
    /**
     * Method-Stub der von ableitenden Klassen genutzt werden kann, um
     * weitergreifende Fehlermeldungen anzugeben.
     */
    protected errorMessageModifier(value: any, errors: any): void;
    /**
     * Standard-Getter Funktion für den aktuellen Wert in dieser FormComponent.
     */
    protected getValue(): any;
    /**
     * Standard-Setter Funktion für den aktuellen Wert in dieser FormComponent.
     */
    protected setValue(value: any): void;
    /**
     * Wird nach der Aktualisierung des Wertes aufgerufen.
     * Hier kann z.B. valueChange.emit() ausgeführt werden.
     * @param formValue
     */
    protected notifyFormValueChanged(formValue: any): void;
    /**
     * Wird nach der Aktualisierung des Status aufgerufen.
     * @param formStatus
     */
    protected notifyFormStatusChanged(formStatus: any): void;
    /**
     * Prueft ob das uebergebene Control einen required-Validator besitzt.
     * @param abstractControl
     */
    protected hasRequiredValidator(abstractControl: AbstractControl): boolean;
    /**
     * Initialisiert die FormGroup und das FormControl abhängig davon, ob es sich um eine ReactiveForm-Component
     * handelt.
     */
    protected initFormControl(): void;
    /**
     * Initialisiert den Disabled-Zustand nach Erstellung dieser Component.
     */
    protected initDisabledState(): void;
    /**
     * Initialisiert das Handling von Wertaktualisierungen.
     * Setzt den (optional vorhanden) Initial-Wert und folgende Änderungen über das FormControl.
     */
    protected initFormValueSubscription(): void;
    /**
     * Initialisiert das Handling von Statusaktualisierungen.
     */
    protected initFormStateSubscription(): void;
    /**
     * Diese Funktion prüft ob luxRequired auf true gesetzt wurde und die übergebenen validators bereits den
     * required-Validator besitzen.
     * Für den Fall das luxRequired auf false gesetzt worden ist, wird der Validator entfernt.
     *
     * Hinweis: LuxFormCheckableBase überschreibt diese Funktion, um statt required requiredTrue zu setzen.
     * @param validators
     */
    protected checkValidatorsContainRequired(validators: ValidatorFn | ValidatorFn[]): ValidatorFn | ValidatorFn[];
    /**
     * Versucht die Validatoren für diese Komponente zu setzen.
     * Ist nur erfolgreich, wenn es sich hierbei nicht um eine ReactiveForm-Komponente handelt.
     * @param validators
     */
    protected updateValidators(validators: ValidatorFn | ValidatorFn[]): void;
    /**
     * Gibt an, ob diese Component Output-Property-Binding nutzt obwohl diese Component eigentlich ein Reactive FormControl ist.
     * @param observers
     */
    protected checkOutputPatternViolation(observers: any[] | null): void;
    /**
     * Gibt an, ob diese Component Input-Property-Binding nutzt obwohl diese Component eigentlich ein Reactive FormControl ist.
     * Wird von den ngOnChanges Methoden der Child-Klassen aufgerufen.
     * @param simpleChange
     */
    protected checkInputPatternViolation(simpleChange: SimpleChange): void;
    /**
     * Die Child-Klassen implementieren diese Funktion um zu prüfen, ob gegen das Output-Binding für ReactiveForms verstoßen wird.
     */
    protected abstract triggerOutputPatternCheck(): any;
    /**
     * Die Child-Klassen implementieren diese Funktion um zu prüfen, ob gegen das Input-Binding für ReactiveForms verstoßen wird.
     */
    protected abstract triggerInputPatternCheck(simpleChanges: SimpleChanges): any;
    /**
     * Gibt über den LuxConsoleService eine Warnung aus, dass hier gegen das ReactiveForm-Pattern mit Property-Binding
     * verstoßen worden ist.
     */
    private logPatternViolationWarning;
}
