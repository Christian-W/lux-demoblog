import { LuxFormComponentBase } from './lux-form-component-base.class';
import { ChangeDetectorRef, EventEmitter, SimpleChanges } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
/**
 * Basis-Klasse für FormComponents, die einen ähnlichen Grundaufbau für die Auswahl von
 * Optionen aus einem Array anbieten (Radio-Buttons und Selects z.B.).
 */
export declare abstract class LuxFormSelectableBase extends LuxFormComponentBase {
    private _luxOptions;
    luxSelectedChange: EventEmitter<any>;
    luxOptionLabelProp: string;
    luxTagId: string;
    luxPickValue: (selected: any) => {};
    luxReadonly: boolean;
    luxCompareWith: (o1: any, o2: any) => boolean;
    luxSelected: any;
    luxOptions: any[];
    protected constructor(controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, config: LuxComponentsConfigService);
    notifyFormValueChanged(formValue: any): void;
    /**
     * Versucht, wenn Options und FormControl vorhanden sind, den selected-Wert mit den Options
     * zu vergleichen und dann auch wenn möglich als luxSelected-Wert zu sichern.
     * @param selected
     */
    private checkSelectedAndUpdate;
    /**
     * Prüft ob der übergebene Wert in den luxOptions ist.
     * Kann auch ein Array als "selected" enthalten.
     * Wenn der Wert nicht gefunden werden konnte wird eine Fehlermeldung in der console ausgegeben.
     * @param selected
     */
    private checkSelectedInOptions;
    /**
     * Prüft ob die übergebenen Select-Objekte in den luxOptions enthalten sind.
     * @param selectedAsArray
     */
    private allSelectedInOptions;
    /**
     * Loggt die Fehlermeldung in die Console, wenn das neue Value-Objekt nicht in den Options gefunden
     * werden konnte.
     * @param selected
     */
    private logSelectedNotFound;
    /**
     * Kapselung von der übergebenen luxCompareWith-Funktion.
     * Fängt undefinierte Objekte ab und returned stattdessen false.
     * @param o1
     * @param o2
     */
    compareObjects: (o1: any, o2: any) => boolean;
    protected triggerOutputPatternCheck(): void;
    protected triggerInputPatternCheck(simpleChanges: SimpleChanges): void;
}
