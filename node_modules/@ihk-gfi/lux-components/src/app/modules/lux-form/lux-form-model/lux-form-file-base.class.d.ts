import { ChangeDetectorRef, ElementRef, EventEmitter, SimpleChanges } from '@angular/core';
import { ControlContainer, ValidatorFn } from '@angular/forms';
import { LuxConsoleService } from '../../lux-util/lux-console.service';
import { LuxFormComponentBase } from './lux-form-component-base.class';
import { ILuxFileError } from '../lux-file/lux-file-model/lux-file-error.interface';
import { HttpClient } from '@angular/common/http';
import { ILuxFileActionConfig } from '../lux-file/lux-file-model/lux-file-action-config.interface';
import { ILuxFileObject } from '../lux-file/lux-file-model/lux-file-object.interface';
import { LuxComponentsConfigService } from '../../lux-components-config/lux-components-config.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
export declare abstract class LuxFormFileBase extends LuxFormComponentBase {
    protected http: HttpClient;
    private liveAnnouncer;
    defaultReadFileDelay: number;
    private _luxAccept;
    private _luxSelectedFiles;
    protected _luxUploadActionConfig: ILuxFileActionConfig;
    protected _luxDeleteActionConfig: ILuxFileActionConfig;
    protected _luxViewActionConfig: ILuxFileActionConfig;
    protected _luxDownloadActionConfig: ILuxFileActionConfig;
    progress: number;
    forceProgressIndeterminate: boolean;
    downloadLink: ElementRef;
    fileuploadInput: ElementRef;
    luxSelectedFilesChange: EventEmitter<any>;
    luxUploadReportProgress: boolean;
    luxContentsAsBlob: boolean;
    luxTagId: string;
    luxMaxSizeMB: number;
    luxCapture: string;
    luxUploadUrl: string;
    luxDnDActive: boolean;
    isDragActive: boolean;
    onDragOver($event: any): void;
    onDragLeave($event: any): void;
    onDrop($event: any): void;
    luxUploadActionConfig: ILuxFileActionConfig;
    luxDeleteActionConfig: ILuxFileActionConfig;
    luxViewActionConfig: ILuxFileActionConfig;
    luxDownloadActionConfig: ILuxFileActionConfig;
    luxSelectedFiles: any;
    luxAccept: any;
    readonly progressMode: string;
    readonly isProgressVisible: boolean;
    protected constructor(controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, config: LuxComponentsConfigService, http: HttpClient, liveAnnouncer: LiveAnnouncer);
    /**
     * Wird beim Fokussieren des Elements aufgerufen und markiert das FormControl als "touched".
     * @param $event
     */
    onFocusIn($event: any): void;
    /**
     * Entfernt die aktuell selektierten Dateien und entfernt etwaige (spezifische) Fehler aus dem FormControl.
     * @param $event
     */
    clearFiles($event?: any): void;
    /**
     * Löst den Download der übergebenen Datei aus.
     * @param file
     */
    downloadFile(file: ILuxFileObject | ILuxFileObject[]): void;
    /**
     * Löst den base64Callback der übergebenen Datei aus.
     * Schreibt dann anschließend den Base64-String in die Datei.
     * @param file
     */
    viewFile(file: ILuxFileObject): void;
    /**
     * Wandelt File-Objekt zu LuxFileObjects um und versucht diese Hochzuladen.
     * Gibt ein Promise mit den neuen FileObjects zurück bzw. einen Fehler aus den internen Promises.
     * @param files
     */
    updateSelectedFiles(files: FileList | File[]): Promise<any[]>;
    /**
     * Stößt das Hochladen der Dateien zu einer bestimmten URL an.
     */
    uploadFiles(files: ILuxFileObject[] | ILuxFileObject): Promise<void>;
    /**
     * Liest die übergebenen Dateien aus und erzeugt daraus ein Promise, welches abgefragt werden kann.
     * Fängt potentielle Fehler ab und gibt diese als abgelehnte Promises zurück.
     * @param files
     */
    mapFilesToFileObjects(files: FileList | File[]): Promise<ILuxFileObject[]>;
    /**
     * Liest (asynchron) den Base64-String aus der übergebenen Datei heraus bzw. gibt den Fehler zurück, wenn einer
     * aufgetreten ist.
     * @param file
     */
    readFile(file: File): Promise<{}>;
    /**
     * Wird beim Drag-Over über dem LuxFormControl aufgerufen.
     * @param $event
     */
    handleDragOver($event: any): void;
    /**
     * Wird beim Drag-Leave über dem LuxFormControl aufgerufen.
     * @param $event
     */
    handleDragLeave($event: any): void;
    /**
     * Wird beim Drop eines/mehrerer gezogener Elemente über dem LuxFormControl aufgerufen und löst
     * die Auswähl-Methoden für die entsprechenden Dateien aus.
     */
    handleDrop($event: any): void;
    /**
     * Funktion, die das Auswählen von Dateien handeln soll.
     * Die erbenden Klassen implementieren diese Funktion aus.
     */
    abstract selectFiles(files: FileList | File[]): any;
    /**
     * Prüft ob der Base64-String für die Datei gesetzt ist und ob ein onClick-Aufruf für die View-Action vorhanden ist.
     * Wenn ja, wird dieser ausgeführt.
     * @param file
     */
    protected triggerViewFileClick(file: ILuxFileObject): void;
    /**
     * Entfernt die in dieser Component gesetzten Fehlermeldungen.
     */
    protected clearFormControlErrors(): void;
    /**
     * Aktualisiert das Fehlerobjekt am FormControl, damit eine entsprechende Fehlermeldung angezeigt werden kann.
     * Leert die Anzeige und gibt Events mit leerem Array aus.
     * @param error
     */
    protected setFormControlErrors(error: ILuxFileError): void;
    /**
     * Berechnet die Größe der übergebenen Datei in MB.
     * @param file
     */
    protected getFileSizeInMB(file: File): number;
    /**
     * Gibt die Message für Überschreitung der maximalen Dateigröße zurück.
     * @param file
     */
    protected getMaxSizeErrorMessage(file: File): string;
    /**
     * Gibt die Message für Fehler beim Auslesen einer Datei zurück.
     * @param file
     */
    protected getReadingFileErrorMessage(file: File): string;
    /**
     * Gibt die Message für Fehler beim Upload einer Datei zurück.
     * @param files
     */
    protected getUploadFileErrorMessage(files: File[]): string;
    /**
     * Gibt die Message für falsche Dateitypen zurück.
     * @param file
     */
    protected getFileNotAcceptedMessage(file: File): string;
    /**
     * Gibt die Message für falsche Dateitypen zurück.
     * @param file
     */
    protected getMultipleForbiddenMessage(): string;
    /**
     * Meldet dem ScreenReader, dass gerade eine/mehrere Dateien bearbeitet werden (Ladeanzeige).
     * @param multiple
     */
    protected announceFileProcess(multiple: boolean): void;
    /**
     * Meldet dem ScreenReader, dass alle Dateien entfernt werden sollen.
     */
    protected announceAllFilesRemove(): void;
    /**
     * Meldet dem ScreenReader, dass eine bestimmte Datei entfernt werden soll.
     * @param fileName
     */
    protected announceFileRemove(fileName: string): void;
    /**
     * Gibt wieder, ob Drag-and-Drop gerade aktiv und möglich ist.
     */
    private isDnDAllowed;
    protected errorMessageModifier(value: any, errors: any): string;
    protected notifyFormValueChanged(): void;
    protected updateValidators(validators: ValidatorFn | ValidatorFn[]): void;
    protected initFormValueSubscription(): void;
    protected triggerOutputPatternCheck(): void;
    protected triggerInputPatternCheck(simpleChanges: SimpleChanges): void;
}
