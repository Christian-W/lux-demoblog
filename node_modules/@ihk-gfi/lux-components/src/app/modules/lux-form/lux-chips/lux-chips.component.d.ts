import { EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { MatAutocomplete, MatAutocompleteTrigger, MatChip } from '@angular/material';
import { LuxChipGroupComponent } from './lux-chips-subcomponents/lux-chip-group.component';
import { LuxChipComponent } from './lux-chips-subcomponents/lux-chip.component';
import { Subject } from 'rxjs';
export declare class LuxChipsComponent implements OnDestroy {
    private controlContainer;
    private readonly inputValueSubscription;
    private readonly newChipSubscription;
    private _luxDisabled;
    private _luxAutocompleteOptions;
    private _luxLabel;
    filteredOptions: string[];
    inputValue$: Subject<string>;
    newChip$: Subject<any>;
    luxOrientation: 'horizontal' | 'vertical';
    luxInputAllowed: boolean;
    luxNewChipGroup: LuxChipGroupComponent;
    luxMultiple: boolean;
    luxChipAdded: EventEmitter<string>;
    luxChipComponents: QueryList<LuxChipComponent>;
    luxChipGroupComponents: QueryList<LuxChipGroupComponent>;
    matChips: QueryList<MatChip>;
    matAutocompleteTrigger: MatAutocompleteTrigger;
    matAutocomplete: MatAutocomplete;
    luxDisabled: boolean;
    luxAutocompleteOptions: string[];
    luxInputLabel: string;
    readonly luxLabel: string;
    readonly chipComponents: LuxChipComponent[];
    readonly chipGroupComponents: LuxChipGroupComponent[];
    constructor(controlContainer: ControlContainer);
    ngOnDestroy(): void;
    /**
     * Fuegt einen Chip hinzu.
     * Fuegt ihn entweder der explizit mitgeteilten newChipList hinzu oder einfach
     * der letzten mitgegebenen Liste.
     * @param value
     */
    add(value: string): void;
    /**
     * Wird bei Eingabe von Werten in das Input-Feld aufgerufen und schreibt einen neuen Wert
     * in das inputValue-Subject.
     * @param value
     */
    inputChanged(value: string): void;
    /**
     * Wird beim Selektieren einer Option im Autocomplete ausgeführt.
     * @param input
     * @param value
     */
    autoCompleteAdd(input: any, value: any): void;
    /**
     * Wird beim Input-Event des Eingabefelds ausgeführt, fragt aber vorher ab, ob das Autocomplete offen ist.
     * Wenn ja, wird kein neuer Chip erzeugt, da das Autocomplete dies übernimmt.
     * @param input
     */
    inputAdd(input: any): void;
}
