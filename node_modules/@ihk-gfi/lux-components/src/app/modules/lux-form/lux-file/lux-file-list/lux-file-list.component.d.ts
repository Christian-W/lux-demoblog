import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, QueryList } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { LuxConsoleService } from '../../../lux-util/lux-console.service';
import { LuxFormFileBase } from '../../lux-form-model/lux-form-file-base.class';
import { HttpClient } from '@angular/common/http';
import { ILuxFileListActionConfig } from '../lux-file-model/lux-file-list-action-config.interface';
import { ILuxFileObject } from '../lux-file-model/lux-file-object.interface';
import { LuxComponentsConfigService } from '../../../lux-components-config/lux-components-config.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
export declare class LuxFileListComponent extends LuxFormFileBase implements AfterViewInit, AfterViewChecked, OnDestroy {
    private _fileEntryNodesChangeSubscr;
    protected _luxUploadActionConfig: ILuxFileListActionConfig;
    protected _luxDeleteActionConfig: ILuxFileListActionConfig;
    fileIcons: string[];
    rowWidth: number;
    iconActionBarWidth: number;
    alwaysVisibleView: boolean;
    alwaysVisibleUpload: boolean;
    alwaysVisibleDownload: boolean;
    alwaysVisibleDelete: boolean;
    fileEntries: QueryList<ElementRef>;
    fileuploadSingleInput: ElementRef;
    fileCard: ElementRef;
    luxShowPreview: boolean;
    luxMultiple: boolean;
    luxBackgroundIconName: string;
    luxUploadActionConfig: ILuxFileListActionConfig;
    luxDeleteActionConfig: ILuxFileListActionConfig;
    constructor(controlContainer: ControlContainer, cdr: ChangeDetectorRef, logger: LuxConsoleService, http: HttpClient, liveAnnouncer: LiveAnnouncer, config: LuxComponentsConfigService);
    ngAfterViewInit(): void;
    private updateIconAndImage;
    ngOnDestroy(): void;
    shouldDisplayPreviewImg(index: number): boolean;
    /**
     * Entfernt eine Datei aus den selektierten Dateien.
     * @param index
     */
    removeFile(index: number): void;
    /**
     * Fügt weitere Dateien zu den bereits vorhandenen hinzu bzw. ersetzt diese.
     * @param files
     */
    selectFiles(files: FileList | File[]): void;
    /**
     * Aktualisiert die Preview-Bilder für die (Image-)Dateien.
     *
     * Aktualisierung absichtlich via Funktion und nicht Property-Binding, da potentiell Stack-Size Fehler auftreten,
     * wenn (große) Base64-Strings gegen die src gebunden werden.
     */
    private setImgSrcs;
    /**
     * Setzt die Icons für die Elemente in der Auflistung
     */
    private setFileIcons;
    ngAfterViewChecked(): void;
    isArray(object: any): boolean;
    private resizeIconActionBar;
    protected errorMessageModifier(value: any, errors: any): string | undefined;
    protected triggerViewFileClick(file: ILuxFileObject): void;
    protected notifyFormValueChanged(): void;
}
