import { LuxComponentsConfigParameters } from './lux-components-config-parameters.interface';
import { Observable } from 'rxjs';
/**
 * Dieser Service wird dazu verwendet, auf die Konfiguration der LuxComponents zuzugreifen und diese auszulesen bzw.
 * auch zu aktualisieren.
 */
export declare class LuxComponentsConfigService {
    static readonly DEFAULT_CONFIG: LuxComponentsConfigParameters;
    private config$;
    /**
     * Gibt das Observable mit der aktuell gesetzten Konfiguration zurück.
     */
    readonly config: Observable<LuxComponentsConfigParameters>;
    /**
     * Gibt die aktuell gesetzte Konfiguration direkt zurück.
     */
    readonly currentConfig: LuxComponentsConfigParameters;
    constructor(config: LuxComponentsConfigParameters);
    /**
     * Gibt zurück, ob die Labels als Uppercase gekennzeichnet sind und ob
     * die übergebenen Selektoren in den Ausnahmen geführt sind.
     * @param selector
     */
    isLabelUppercaseForSelector(selector: string): boolean;
    /**
     * Ersetzt die aktuelle Konfiguration mit der übergebenen (wenn gültiger Wert).
     * @param config
     */
    updateConfiguration(config: LuxComponentsConfigParameters): void;
    /**
     * Kombiniert die übergebene Konfiguration mit der Standard-Konfig.
     *
     * Übernimmt die Werte aus der Standard-Konfig, die nicht im übergebenen gesetzt wurden.
     * @param config
     */
    private mergeDefaultData;
}
